
mROS-STM32F446RE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011d34  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000c68  08011f08  08011f08  00021f08  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08012b70  08012b70  00030118  2**0
                  CONTENTS
  4 .ARM          00000008  08012b70  08012b70  00022b70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08012b78  08012b78  00030118  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08012b78  08012b78  00022b78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08012b80  08012b80  00022b80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000118  20000000  08012b84  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000db10  20000118  08012c9c  00030118  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  2000dc28  08012c9c  0003dc28  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030118  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001d1d1  00000000  00000000  00030148  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003ec7  00000000  00000000  0004d319  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001690  00000000  00000000  000511e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001508  00000000  00000000  00052870  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000275f3  00000000  00000000  00053d78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001ba4b  00000000  00000000  0007b36b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e5832  00000000  00000000  00096db6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000083  00000000  00000000  0017c5e8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006c50  00000000  00000000  0017c66c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000118 	.word	0x20000118
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08011eec 	.word	0x08011eec

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000011c 	.word	0x2000011c
 800020c:	08011eec 	.word	0x08011eec

08000210 <strcmp>:
 8000210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000218:	2a01      	cmp	r2, #1
 800021a:	bf28      	it	cs
 800021c:	429a      	cmpcs	r2, r3
 800021e:	d0f7      	beq.n	8000210 <strcmp>
 8000220:	1ad0      	subs	r0, r2, r3
 8000222:	4770      	bx	lr

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr
	...

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_ldivmod>:
 80002e0:	b97b      	cbnz	r3, 8000302 <__aeabi_ldivmod+0x22>
 80002e2:	b972      	cbnz	r2, 8000302 <__aeabi_ldivmod+0x22>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bfbe      	ittt	lt
 80002e8:	2000      	movlt	r0, #0
 80002ea:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 80002ee:	e006      	blt.n	80002fe <__aeabi_ldivmod+0x1e>
 80002f0:	bf08      	it	eq
 80002f2:	2800      	cmpeq	r0, #0
 80002f4:	bf1c      	itt	ne
 80002f6:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 80002fa:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002fe:	f000 b9bf 	b.w	8000680 <__aeabi_idiv0>
 8000302:	f1ad 0c08 	sub.w	ip, sp, #8
 8000306:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800030a:	2900      	cmp	r1, #0
 800030c:	db09      	blt.n	8000322 <__aeabi_ldivmod+0x42>
 800030e:	2b00      	cmp	r3, #0
 8000310:	db1a      	blt.n	8000348 <__aeabi_ldivmod+0x68>
 8000312:	f000 f84d 	bl	80003b0 <__udivmoddi4>
 8000316:	f8dd e004 	ldr.w	lr, [sp, #4]
 800031a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031e:	b004      	add	sp, #16
 8000320:	4770      	bx	lr
 8000322:	4240      	negs	r0, r0
 8000324:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000328:	2b00      	cmp	r3, #0
 800032a:	db1b      	blt.n	8000364 <__aeabi_ldivmod+0x84>
 800032c:	f000 f840 	bl	80003b0 <__udivmoddi4>
 8000330:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000334:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000338:	b004      	add	sp, #16
 800033a:	4240      	negs	r0, r0
 800033c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000340:	4252      	negs	r2, r2
 8000342:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000346:	4770      	bx	lr
 8000348:	4252      	negs	r2, r2
 800034a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800034e:	f000 f82f 	bl	80003b0 <__udivmoddi4>
 8000352:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000356:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800035a:	b004      	add	sp, #16
 800035c:	4240      	negs	r0, r0
 800035e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000362:	4770      	bx	lr
 8000364:	4252      	negs	r2, r2
 8000366:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800036a:	f000 f821 	bl	80003b0 <__udivmoddi4>
 800036e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000372:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000376:	b004      	add	sp, #16
 8000378:	4252      	negs	r2, r2
 800037a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800037e:	4770      	bx	lr

08000380 <__aeabi_uldivmod>:
 8000380:	b953      	cbnz	r3, 8000398 <__aeabi_uldivmod+0x18>
 8000382:	b94a      	cbnz	r2, 8000398 <__aeabi_uldivmod+0x18>
 8000384:	2900      	cmp	r1, #0
 8000386:	bf08      	it	eq
 8000388:	2800      	cmpeq	r0, #0
 800038a:	bf1c      	itt	ne
 800038c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000390:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000394:	f000 b974 	b.w	8000680 <__aeabi_idiv0>
 8000398:	f1ad 0c08 	sub.w	ip, sp, #8
 800039c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003a0:	f000 f806 	bl	80003b0 <__udivmoddi4>
 80003a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ac:	b004      	add	sp, #16
 80003ae:	4770      	bx	lr

080003b0 <__udivmoddi4>:
 80003b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003b4:	9d08      	ldr	r5, [sp, #32]
 80003b6:	4604      	mov	r4, r0
 80003b8:	468e      	mov	lr, r1
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	d14d      	bne.n	800045a <__udivmoddi4+0xaa>
 80003be:	428a      	cmp	r2, r1
 80003c0:	4694      	mov	ip, r2
 80003c2:	d969      	bls.n	8000498 <__udivmoddi4+0xe8>
 80003c4:	fab2 f282 	clz	r2, r2
 80003c8:	b152      	cbz	r2, 80003e0 <__udivmoddi4+0x30>
 80003ca:	fa01 f302 	lsl.w	r3, r1, r2
 80003ce:	f1c2 0120 	rsb	r1, r2, #32
 80003d2:	fa20 f101 	lsr.w	r1, r0, r1
 80003d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80003da:	ea41 0e03 	orr.w	lr, r1, r3
 80003de:	4094      	lsls	r4, r2
 80003e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003e4:	0c21      	lsrs	r1, r4, #16
 80003e6:	fbbe f6f8 	udiv	r6, lr, r8
 80003ea:	fa1f f78c 	uxth.w	r7, ip
 80003ee:	fb08 e316 	mls	r3, r8, r6, lr
 80003f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80003f6:	fb06 f107 	mul.w	r1, r6, r7
 80003fa:	4299      	cmp	r1, r3
 80003fc:	d90a      	bls.n	8000414 <__udivmoddi4+0x64>
 80003fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000402:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000406:	f080 811f 	bcs.w	8000648 <__udivmoddi4+0x298>
 800040a:	4299      	cmp	r1, r3
 800040c:	f240 811c 	bls.w	8000648 <__udivmoddi4+0x298>
 8000410:	3e02      	subs	r6, #2
 8000412:	4463      	add	r3, ip
 8000414:	1a5b      	subs	r3, r3, r1
 8000416:	b2a4      	uxth	r4, r4
 8000418:	fbb3 f0f8 	udiv	r0, r3, r8
 800041c:	fb08 3310 	mls	r3, r8, r0, r3
 8000420:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000424:	fb00 f707 	mul.w	r7, r0, r7
 8000428:	42a7      	cmp	r7, r4
 800042a:	d90a      	bls.n	8000442 <__udivmoddi4+0x92>
 800042c:	eb1c 0404 	adds.w	r4, ip, r4
 8000430:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000434:	f080 810a 	bcs.w	800064c <__udivmoddi4+0x29c>
 8000438:	42a7      	cmp	r7, r4
 800043a:	f240 8107 	bls.w	800064c <__udivmoddi4+0x29c>
 800043e:	4464      	add	r4, ip
 8000440:	3802      	subs	r0, #2
 8000442:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000446:	1be4      	subs	r4, r4, r7
 8000448:	2600      	movs	r6, #0
 800044a:	b11d      	cbz	r5, 8000454 <__udivmoddi4+0xa4>
 800044c:	40d4      	lsrs	r4, r2
 800044e:	2300      	movs	r3, #0
 8000450:	e9c5 4300 	strd	r4, r3, [r5]
 8000454:	4631      	mov	r1, r6
 8000456:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800045a:	428b      	cmp	r3, r1
 800045c:	d909      	bls.n	8000472 <__udivmoddi4+0xc2>
 800045e:	2d00      	cmp	r5, #0
 8000460:	f000 80ef 	beq.w	8000642 <__udivmoddi4+0x292>
 8000464:	2600      	movs	r6, #0
 8000466:	e9c5 0100 	strd	r0, r1, [r5]
 800046a:	4630      	mov	r0, r6
 800046c:	4631      	mov	r1, r6
 800046e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000472:	fab3 f683 	clz	r6, r3
 8000476:	2e00      	cmp	r6, #0
 8000478:	d14a      	bne.n	8000510 <__udivmoddi4+0x160>
 800047a:	428b      	cmp	r3, r1
 800047c:	d302      	bcc.n	8000484 <__udivmoddi4+0xd4>
 800047e:	4282      	cmp	r2, r0
 8000480:	f200 80f9 	bhi.w	8000676 <__udivmoddi4+0x2c6>
 8000484:	1a84      	subs	r4, r0, r2
 8000486:	eb61 0303 	sbc.w	r3, r1, r3
 800048a:	2001      	movs	r0, #1
 800048c:	469e      	mov	lr, r3
 800048e:	2d00      	cmp	r5, #0
 8000490:	d0e0      	beq.n	8000454 <__udivmoddi4+0xa4>
 8000492:	e9c5 4e00 	strd	r4, lr, [r5]
 8000496:	e7dd      	b.n	8000454 <__udivmoddi4+0xa4>
 8000498:	b902      	cbnz	r2, 800049c <__udivmoddi4+0xec>
 800049a:	deff      	udf	#255	; 0xff
 800049c:	fab2 f282 	clz	r2, r2
 80004a0:	2a00      	cmp	r2, #0
 80004a2:	f040 8092 	bne.w	80005ca <__udivmoddi4+0x21a>
 80004a6:	eba1 010c 	sub.w	r1, r1, ip
 80004aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004ae:	fa1f fe8c 	uxth.w	lr, ip
 80004b2:	2601      	movs	r6, #1
 80004b4:	0c20      	lsrs	r0, r4, #16
 80004b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80004ba:	fb07 1113 	mls	r1, r7, r3, r1
 80004be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004c2:	fb0e f003 	mul.w	r0, lr, r3
 80004c6:	4288      	cmp	r0, r1
 80004c8:	d908      	bls.n	80004dc <__udivmoddi4+0x12c>
 80004ca:	eb1c 0101 	adds.w	r1, ip, r1
 80004ce:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80004d2:	d202      	bcs.n	80004da <__udivmoddi4+0x12a>
 80004d4:	4288      	cmp	r0, r1
 80004d6:	f200 80cb 	bhi.w	8000670 <__udivmoddi4+0x2c0>
 80004da:	4643      	mov	r3, r8
 80004dc:	1a09      	subs	r1, r1, r0
 80004de:	b2a4      	uxth	r4, r4
 80004e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80004e4:	fb07 1110 	mls	r1, r7, r0, r1
 80004e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80004ec:	fb0e fe00 	mul.w	lr, lr, r0
 80004f0:	45a6      	cmp	lr, r4
 80004f2:	d908      	bls.n	8000506 <__udivmoddi4+0x156>
 80004f4:	eb1c 0404 	adds.w	r4, ip, r4
 80004f8:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80004fc:	d202      	bcs.n	8000504 <__udivmoddi4+0x154>
 80004fe:	45a6      	cmp	lr, r4
 8000500:	f200 80bb 	bhi.w	800067a <__udivmoddi4+0x2ca>
 8000504:	4608      	mov	r0, r1
 8000506:	eba4 040e 	sub.w	r4, r4, lr
 800050a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800050e:	e79c      	b.n	800044a <__udivmoddi4+0x9a>
 8000510:	f1c6 0720 	rsb	r7, r6, #32
 8000514:	40b3      	lsls	r3, r6
 8000516:	fa22 fc07 	lsr.w	ip, r2, r7
 800051a:	ea4c 0c03 	orr.w	ip, ip, r3
 800051e:	fa20 f407 	lsr.w	r4, r0, r7
 8000522:	fa01 f306 	lsl.w	r3, r1, r6
 8000526:	431c      	orrs	r4, r3
 8000528:	40f9      	lsrs	r1, r7
 800052a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800052e:	fa00 f306 	lsl.w	r3, r0, r6
 8000532:	fbb1 f8f9 	udiv	r8, r1, r9
 8000536:	0c20      	lsrs	r0, r4, #16
 8000538:	fa1f fe8c 	uxth.w	lr, ip
 800053c:	fb09 1118 	mls	r1, r9, r8, r1
 8000540:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000544:	fb08 f00e 	mul.w	r0, r8, lr
 8000548:	4288      	cmp	r0, r1
 800054a:	fa02 f206 	lsl.w	r2, r2, r6
 800054e:	d90b      	bls.n	8000568 <__udivmoddi4+0x1b8>
 8000550:	eb1c 0101 	adds.w	r1, ip, r1
 8000554:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000558:	f080 8088 	bcs.w	800066c <__udivmoddi4+0x2bc>
 800055c:	4288      	cmp	r0, r1
 800055e:	f240 8085 	bls.w	800066c <__udivmoddi4+0x2bc>
 8000562:	f1a8 0802 	sub.w	r8, r8, #2
 8000566:	4461      	add	r1, ip
 8000568:	1a09      	subs	r1, r1, r0
 800056a:	b2a4      	uxth	r4, r4
 800056c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000570:	fb09 1110 	mls	r1, r9, r0, r1
 8000574:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000578:	fb00 fe0e 	mul.w	lr, r0, lr
 800057c:	458e      	cmp	lr, r1
 800057e:	d908      	bls.n	8000592 <__udivmoddi4+0x1e2>
 8000580:	eb1c 0101 	adds.w	r1, ip, r1
 8000584:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000588:	d26c      	bcs.n	8000664 <__udivmoddi4+0x2b4>
 800058a:	458e      	cmp	lr, r1
 800058c:	d96a      	bls.n	8000664 <__udivmoddi4+0x2b4>
 800058e:	3802      	subs	r0, #2
 8000590:	4461      	add	r1, ip
 8000592:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000596:	fba0 9402 	umull	r9, r4, r0, r2
 800059a:	eba1 010e 	sub.w	r1, r1, lr
 800059e:	42a1      	cmp	r1, r4
 80005a0:	46c8      	mov	r8, r9
 80005a2:	46a6      	mov	lr, r4
 80005a4:	d356      	bcc.n	8000654 <__udivmoddi4+0x2a4>
 80005a6:	d053      	beq.n	8000650 <__udivmoddi4+0x2a0>
 80005a8:	b15d      	cbz	r5, 80005c2 <__udivmoddi4+0x212>
 80005aa:	ebb3 0208 	subs.w	r2, r3, r8
 80005ae:	eb61 010e 	sbc.w	r1, r1, lr
 80005b2:	fa01 f707 	lsl.w	r7, r1, r7
 80005b6:	fa22 f306 	lsr.w	r3, r2, r6
 80005ba:	40f1      	lsrs	r1, r6
 80005bc:	431f      	orrs	r7, r3
 80005be:	e9c5 7100 	strd	r7, r1, [r5]
 80005c2:	2600      	movs	r6, #0
 80005c4:	4631      	mov	r1, r6
 80005c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	40d8      	lsrs	r0, r3
 80005d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80005d4:	fa21 f303 	lsr.w	r3, r1, r3
 80005d8:	4091      	lsls	r1, r2
 80005da:	4301      	orrs	r1, r0
 80005dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005e0:	fa1f fe8c 	uxth.w	lr, ip
 80005e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80005e8:	fb07 3610 	mls	r6, r7, r0, r3
 80005ec:	0c0b      	lsrs	r3, r1, #16
 80005ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80005f2:	fb00 f60e 	mul.w	r6, r0, lr
 80005f6:	429e      	cmp	r6, r3
 80005f8:	fa04 f402 	lsl.w	r4, r4, r2
 80005fc:	d908      	bls.n	8000610 <__udivmoddi4+0x260>
 80005fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000602:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000606:	d22f      	bcs.n	8000668 <__udivmoddi4+0x2b8>
 8000608:	429e      	cmp	r6, r3
 800060a:	d92d      	bls.n	8000668 <__udivmoddi4+0x2b8>
 800060c:	3802      	subs	r0, #2
 800060e:	4463      	add	r3, ip
 8000610:	1b9b      	subs	r3, r3, r6
 8000612:	b289      	uxth	r1, r1
 8000614:	fbb3 f6f7 	udiv	r6, r3, r7
 8000618:	fb07 3316 	mls	r3, r7, r6, r3
 800061c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000620:	fb06 f30e 	mul.w	r3, r6, lr
 8000624:	428b      	cmp	r3, r1
 8000626:	d908      	bls.n	800063a <__udivmoddi4+0x28a>
 8000628:	eb1c 0101 	adds.w	r1, ip, r1
 800062c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000630:	d216      	bcs.n	8000660 <__udivmoddi4+0x2b0>
 8000632:	428b      	cmp	r3, r1
 8000634:	d914      	bls.n	8000660 <__udivmoddi4+0x2b0>
 8000636:	3e02      	subs	r6, #2
 8000638:	4461      	add	r1, ip
 800063a:	1ac9      	subs	r1, r1, r3
 800063c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000640:	e738      	b.n	80004b4 <__udivmoddi4+0x104>
 8000642:	462e      	mov	r6, r5
 8000644:	4628      	mov	r0, r5
 8000646:	e705      	b.n	8000454 <__udivmoddi4+0xa4>
 8000648:	4606      	mov	r6, r0
 800064a:	e6e3      	b.n	8000414 <__udivmoddi4+0x64>
 800064c:	4618      	mov	r0, r3
 800064e:	e6f8      	b.n	8000442 <__udivmoddi4+0x92>
 8000650:	454b      	cmp	r3, r9
 8000652:	d2a9      	bcs.n	80005a8 <__udivmoddi4+0x1f8>
 8000654:	ebb9 0802 	subs.w	r8, r9, r2
 8000658:	eb64 0e0c 	sbc.w	lr, r4, ip
 800065c:	3801      	subs	r0, #1
 800065e:	e7a3      	b.n	80005a8 <__udivmoddi4+0x1f8>
 8000660:	4646      	mov	r6, r8
 8000662:	e7ea      	b.n	800063a <__udivmoddi4+0x28a>
 8000664:	4620      	mov	r0, r4
 8000666:	e794      	b.n	8000592 <__udivmoddi4+0x1e2>
 8000668:	4640      	mov	r0, r8
 800066a:	e7d1      	b.n	8000610 <__udivmoddi4+0x260>
 800066c:	46d0      	mov	r8, sl
 800066e:	e77b      	b.n	8000568 <__udivmoddi4+0x1b8>
 8000670:	3b02      	subs	r3, #2
 8000672:	4461      	add	r1, ip
 8000674:	e732      	b.n	80004dc <__udivmoddi4+0x12c>
 8000676:	4630      	mov	r0, r6
 8000678:	e709      	b.n	800048e <__udivmoddi4+0xde>
 800067a:	4464      	add	r4, ip
 800067c:	3802      	subs	r0, #2
 800067e:	e742      	b.n	8000506 <__udivmoddi4+0x156>

08000680 <__aeabi_idiv0>:
 8000680:	4770      	bx	lr
 8000682:	bf00      	nop

08000684 <pvPortMallocMicroROS>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMallocMicroROS( size_t xWantedSize )
{
 8000684:	b580      	push	{r7, lr}
 8000686:	b08a      	sub	sp, #40	; 0x28
 8000688:	af00      	add	r7, sp, #0
 800068a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800068c:	2300      	movs	r3, #0
 800068e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8000690:	f005 fd1e 	bl	80060d0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8000694:	4b58      	ldr	r3, [pc, #352]	; (80007f8 <pvPortMallocMicroROS+0x174>)
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	2b00      	cmp	r3, #0
 800069a:	d101      	bne.n	80006a0 <pvPortMallocMicroROS+0x1c>
		{
			prvHeapInit();
 800069c:	f000 f980 	bl	80009a0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80006a0:	4b56      	ldr	r3, [pc, #344]	; (80007fc <pvPortMallocMicroROS+0x178>)
 80006a2:	681a      	ldr	r2, [r3, #0]
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	4013      	ands	r3, r2
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	f040 808e 	bne.w	80007ca <pvPortMallocMicroROS+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	d01d      	beq.n	80006f0 <pvPortMallocMicroROS+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80006b4:	2208      	movs	r2, #8
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	4413      	add	r3, r2
 80006ba:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	f003 0307 	and.w	r3, r3, #7
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	d014      	beq.n	80006f0 <pvPortMallocMicroROS+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	f023 0307 	bic.w	r3, r3, #7
 80006cc:	3308      	adds	r3, #8
 80006ce:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	f003 0307 	and.w	r3, r3, #7
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d00a      	beq.n	80006f0 <pvPortMallocMicroROS+0x6c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80006da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80006de:	f383 8811 	msr	BASEPRI, r3
 80006e2:	f3bf 8f6f 	isb	sy
 80006e6:	f3bf 8f4f 	dsb	sy
 80006ea:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80006ec:	bf00      	nop
 80006ee:	e7fe      	b.n	80006ee <pvPortMallocMicroROS+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d069      	beq.n	80007ca <pvPortMallocMicroROS+0x146>
 80006f6:	4b42      	ldr	r3, [pc, #264]	; (8000800 <pvPortMallocMicroROS+0x17c>)
 80006f8:	681b      	ldr	r3, [r3, #0]
 80006fa:	687a      	ldr	r2, [r7, #4]
 80006fc:	429a      	cmp	r2, r3
 80006fe:	d864      	bhi.n	80007ca <pvPortMallocMicroROS+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8000700:	4b40      	ldr	r3, [pc, #256]	; (8000804 <pvPortMallocMicroROS+0x180>)
 8000702:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8000704:	4b3f      	ldr	r3, [pc, #252]	; (8000804 <pvPortMallocMicroROS+0x180>)
 8000706:	681b      	ldr	r3, [r3, #0]
 8000708:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800070a:	e004      	b.n	8000716 <pvPortMallocMicroROS+0x92>
				{
					pxPreviousBlock = pxBlock;
 800070c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800070e:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8000710:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000712:	681b      	ldr	r3, [r3, #0]
 8000714:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8000716:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000718:	685b      	ldr	r3, [r3, #4]
 800071a:	687a      	ldr	r2, [r7, #4]
 800071c:	429a      	cmp	r2, r3
 800071e:	d903      	bls.n	8000728 <pvPortMallocMicroROS+0xa4>
 8000720:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	2b00      	cmp	r3, #0
 8000726:	d1f1      	bne.n	800070c <pvPortMallocMicroROS+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8000728:	4b33      	ldr	r3, [pc, #204]	; (80007f8 <pvPortMallocMicroROS+0x174>)
 800072a:	681b      	ldr	r3, [r3, #0]
 800072c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800072e:	429a      	cmp	r2, r3
 8000730:	d04b      	beq.n	80007ca <pvPortMallocMicroROS+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8000732:	6a3b      	ldr	r3, [r7, #32]
 8000734:	681b      	ldr	r3, [r3, #0]
 8000736:	2208      	movs	r2, #8
 8000738:	4413      	add	r3, r2
 800073a:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800073c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800073e:	681a      	ldr	r2, [r3, #0]
 8000740:	6a3b      	ldr	r3, [r7, #32]
 8000742:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8000744:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000746:	685a      	ldr	r2, [r3, #4]
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	1ad2      	subs	r2, r2, r3
 800074c:	2308      	movs	r3, #8
 800074e:	005b      	lsls	r3, r3, #1
 8000750:	429a      	cmp	r2, r3
 8000752:	d91f      	bls.n	8000794 <pvPortMallocMicroROS+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8000754:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000756:	687b      	ldr	r3, [r7, #4]
 8000758:	4413      	add	r3, r2
 800075a:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800075c:	69bb      	ldr	r3, [r7, #24]
 800075e:	f003 0307 	and.w	r3, r3, #7
 8000762:	2b00      	cmp	r3, #0
 8000764:	d00a      	beq.n	800077c <pvPortMallocMicroROS+0xf8>
	__asm volatile
 8000766:	f04f 0350 	mov.w	r3, #80	; 0x50
 800076a:	f383 8811 	msr	BASEPRI, r3
 800076e:	f3bf 8f6f 	isb	sy
 8000772:	f3bf 8f4f 	dsb	sy
 8000776:	613b      	str	r3, [r7, #16]
}
 8000778:	bf00      	nop
 800077a:	e7fe      	b.n	800077a <pvPortMallocMicroROS+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800077c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800077e:	685a      	ldr	r2, [r3, #4]
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	1ad2      	subs	r2, r2, r3
 8000784:	69bb      	ldr	r3, [r7, #24]
 8000786:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8000788:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800078a:	687a      	ldr	r2, [r7, #4]
 800078c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800078e:	69b8      	ldr	r0, [r7, #24]
 8000790:	f000 f968 	bl	8000a64 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8000794:	4b1a      	ldr	r3, [pc, #104]	; (8000800 <pvPortMallocMicroROS+0x17c>)
 8000796:	681a      	ldr	r2, [r3, #0]
 8000798:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800079a:	685b      	ldr	r3, [r3, #4]
 800079c:	1ad3      	subs	r3, r2, r3
 800079e:	4a18      	ldr	r2, [pc, #96]	; (8000800 <pvPortMallocMicroROS+0x17c>)
 80007a0:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80007a2:	4b17      	ldr	r3, [pc, #92]	; (8000800 <pvPortMallocMicroROS+0x17c>)
 80007a4:	681a      	ldr	r2, [r3, #0]
 80007a6:	4b18      	ldr	r3, [pc, #96]	; (8000808 <pvPortMallocMicroROS+0x184>)
 80007a8:	681b      	ldr	r3, [r3, #0]
 80007aa:	429a      	cmp	r2, r3
 80007ac:	d203      	bcs.n	80007b6 <pvPortMallocMicroROS+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80007ae:	4b14      	ldr	r3, [pc, #80]	; (8000800 <pvPortMallocMicroROS+0x17c>)
 80007b0:	681b      	ldr	r3, [r3, #0]
 80007b2:	4a15      	ldr	r2, [pc, #84]	; (8000808 <pvPortMallocMicroROS+0x184>)
 80007b4:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80007b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007b8:	685a      	ldr	r2, [r3, #4]
 80007ba:	4b10      	ldr	r3, [pc, #64]	; (80007fc <pvPortMallocMicroROS+0x178>)
 80007bc:	681b      	ldr	r3, [r3, #0]
 80007be:	431a      	orrs	r2, r3
 80007c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007c2:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80007c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007c6:	2200      	movs	r2, #0
 80007c8:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80007ca:	f005 fc8f 	bl	80060ec <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80007ce:	69fb      	ldr	r3, [r7, #28]
 80007d0:	f003 0307 	and.w	r3, r3, #7
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	d00a      	beq.n	80007ee <pvPortMallocMicroROS+0x16a>
	__asm volatile
 80007d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80007dc:	f383 8811 	msr	BASEPRI, r3
 80007e0:	f3bf 8f6f 	isb	sy
 80007e4:	f3bf 8f4f 	dsb	sy
 80007e8:	60fb      	str	r3, [r7, #12]
}
 80007ea:	bf00      	nop
 80007ec:	e7fe      	b.n	80007ec <pvPortMallocMicroROS+0x168>
	return pvReturn;
 80007ee:	69fb      	ldr	r3, [r7, #28]
}
 80007f0:	4618      	mov	r0, r3
 80007f2:	3728      	adds	r7, #40	; 0x28
 80007f4:	46bd      	mov	sp, r7
 80007f6:	bd80      	pop	{r7, pc}
 80007f8:	20003d3c 	.word	0x20003d3c
 80007fc:	20003d48 	.word	0x20003d48
 8000800:	20003d40 	.word	0x20003d40
 8000804:	20003d34 	.word	0x20003d34
 8000808:	20003d44 	.word	0x20003d44

0800080c <vPortFreeMicroROS>:
/*-----------------------------------------------------------*/

void vPortFreeMicroROS( void *pv )
{
 800080c:	b580      	push	{r7, lr}
 800080e:	b086      	sub	sp, #24
 8000810:	af00      	add	r7, sp, #0
 8000812:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	2b00      	cmp	r3, #0
 800081c:	d048      	beq.n	80008b0 <vPortFreeMicroROS+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800081e:	2308      	movs	r3, #8
 8000820:	425b      	negs	r3, r3
 8000822:	697a      	ldr	r2, [r7, #20]
 8000824:	4413      	add	r3, r2
 8000826:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8000828:	697b      	ldr	r3, [r7, #20]
 800082a:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800082c:	693b      	ldr	r3, [r7, #16]
 800082e:	685a      	ldr	r2, [r3, #4]
 8000830:	4b21      	ldr	r3, [pc, #132]	; (80008b8 <vPortFreeMicroROS+0xac>)
 8000832:	681b      	ldr	r3, [r3, #0]
 8000834:	4013      	ands	r3, r2
 8000836:	2b00      	cmp	r3, #0
 8000838:	d10a      	bne.n	8000850 <vPortFreeMicroROS+0x44>
	__asm volatile
 800083a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800083e:	f383 8811 	msr	BASEPRI, r3
 8000842:	f3bf 8f6f 	isb	sy
 8000846:	f3bf 8f4f 	dsb	sy
 800084a:	60fb      	str	r3, [r7, #12]
}
 800084c:	bf00      	nop
 800084e:	e7fe      	b.n	800084e <vPortFreeMicroROS+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8000850:	693b      	ldr	r3, [r7, #16]
 8000852:	681b      	ldr	r3, [r3, #0]
 8000854:	2b00      	cmp	r3, #0
 8000856:	d00a      	beq.n	800086e <vPortFreeMicroROS+0x62>
	__asm volatile
 8000858:	f04f 0350 	mov.w	r3, #80	; 0x50
 800085c:	f383 8811 	msr	BASEPRI, r3
 8000860:	f3bf 8f6f 	isb	sy
 8000864:	f3bf 8f4f 	dsb	sy
 8000868:	60bb      	str	r3, [r7, #8]
}
 800086a:	bf00      	nop
 800086c:	e7fe      	b.n	800086c <vPortFreeMicroROS+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800086e:	693b      	ldr	r3, [r7, #16]
 8000870:	685a      	ldr	r2, [r3, #4]
 8000872:	4b11      	ldr	r3, [pc, #68]	; (80008b8 <vPortFreeMicroROS+0xac>)
 8000874:	681b      	ldr	r3, [r3, #0]
 8000876:	4013      	ands	r3, r2
 8000878:	2b00      	cmp	r3, #0
 800087a:	d019      	beq.n	80008b0 <vPortFreeMicroROS+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800087c:	693b      	ldr	r3, [r7, #16]
 800087e:	681b      	ldr	r3, [r3, #0]
 8000880:	2b00      	cmp	r3, #0
 8000882:	d115      	bne.n	80008b0 <vPortFreeMicroROS+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8000884:	693b      	ldr	r3, [r7, #16]
 8000886:	685a      	ldr	r2, [r3, #4]
 8000888:	4b0b      	ldr	r3, [pc, #44]	; (80008b8 <vPortFreeMicroROS+0xac>)
 800088a:	681b      	ldr	r3, [r3, #0]
 800088c:	43db      	mvns	r3, r3
 800088e:	401a      	ands	r2, r3
 8000890:	693b      	ldr	r3, [r7, #16]
 8000892:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8000894:	f005 fc1c 	bl	80060d0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8000898:	693b      	ldr	r3, [r7, #16]
 800089a:	685a      	ldr	r2, [r3, #4]
 800089c:	4b07      	ldr	r3, [pc, #28]	; (80008bc <vPortFreeMicroROS+0xb0>)
 800089e:	681b      	ldr	r3, [r3, #0]
 80008a0:	4413      	add	r3, r2
 80008a2:	4a06      	ldr	r2, [pc, #24]	; (80008bc <vPortFreeMicroROS+0xb0>)
 80008a4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80008a6:	6938      	ldr	r0, [r7, #16]
 80008a8:	f000 f8dc 	bl	8000a64 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80008ac:	f005 fc1e 	bl	80060ec <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80008b0:	bf00      	nop
 80008b2:	3718      	adds	r7, #24
 80008b4:	46bd      	mov	sp, r7
 80008b6:	bd80      	pop	{r7, pc}
 80008b8:	20003d48 	.word	0x20003d48
 80008bc:	20003d40 	.word	0x20003d40

080008c0 <getBlockSize>:
/*-----------------------------------------------------------*/

/*-----------------------------------------------------------*/
size_t getBlockSize( void *pv )
{
 80008c0:	b480      	push	{r7}
 80008c2:	b087      	sub	sp, #28
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	6078      	str	r0, [r7, #4]

	uint8_t *puc = ( uint8_t * ) pv;
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	617b      	str	r3, [r7, #20]
	BlockLink_t *pxLink;

	puc -= xHeapStructSize;
 80008cc:	2308      	movs	r3, #8
 80008ce:	425b      	negs	r3, r3
 80008d0:	697a      	ldr	r2, [r7, #20]
 80008d2:	4413      	add	r3, r2
 80008d4:	617b      	str	r3, [r7, #20]
	pxLink = ( void * ) puc;
 80008d6:	697b      	ldr	r3, [r7, #20]
 80008d8:	613b      	str	r3, [r7, #16]

	size_t count = pxLink->xBlockSize & ~xBlockAllocatedBit;
 80008da:	693b      	ldr	r3, [r7, #16]
 80008dc:	685a      	ldr	r2, [r3, #4]
 80008de:	4b06      	ldr	r3, [pc, #24]	; (80008f8 <getBlockSize+0x38>)
 80008e0:	681b      	ldr	r3, [r3, #0]
 80008e2:	43db      	mvns	r3, r3
 80008e4:	4013      	ands	r3, r2
 80008e6:	60fb      	str	r3, [r7, #12]

	return count;
 80008e8:	68fb      	ldr	r3, [r7, #12]
}
 80008ea:	4618      	mov	r0, r3
 80008ec:	371c      	adds	r7, #28
 80008ee:	46bd      	mov	sp, r7
 80008f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f4:	4770      	bx	lr
 80008f6:	bf00      	nop
 80008f8:	20003d48 	.word	0x20003d48

080008fc <pvPortReallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortReallocMicroROS( void *pv, size_t xWantedSize )
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	b084      	sub	sp, #16
 8000900:	af00      	add	r7, sp, #0
 8000902:	6078      	str	r0, [r7, #4]
 8000904:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 8000906:	f005 fbe3 	bl	80060d0 <vTaskSuspendAll>

	void * newmem = pvPortMallocMicroROS(xWantedSize);
 800090a:	6838      	ldr	r0, [r7, #0]
 800090c:	f7ff feba 	bl	8000684 <pvPortMallocMicroROS>
 8000910:	60b8      	str	r0, [r7, #8]
	if (newmem != NULL && pv != NULL)
 8000912:	68bb      	ldr	r3, [r7, #8]
 8000914:	2b00      	cmp	r3, #0
 8000916:	d017      	beq.n	8000948 <pvPortReallocMicroROS+0x4c>
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	2b00      	cmp	r3, #0
 800091c:	d014      	beq.n	8000948 <pvPortReallocMicroROS+0x4c>
	{
		size_t count = getBlockSize(pv) - xHeapStructSize;
 800091e:	6878      	ldr	r0, [r7, #4]
 8000920:	f7ff ffce 	bl	80008c0 <getBlockSize>
 8000924:	4603      	mov	r3, r0
 8000926:	2208      	movs	r2, #8
 8000928:	1a9b      	subs	r3, r3, r2
 800092a:	60fb      	str	r3, [r7, #12]
		if (xWantedSize < count)
 800092c:	683a      	ldr	r2, [r7, #0]
 800092e:	68fb      	ldr	r3, [r7, #12]
 8000930:	429a      	cmp	r2, r3
 8000932:	d201      	bcs.n	8000938 <pvPortReallocMicroROS+0x3c>
		{
			count = xWantedSize;
 8000934:	683b      	ldr	r3, [r7, #0]
 8000936:	60fb      	str	r3, [r7, #12]
		}
		memcpy(newmem, pv, count);
 8000938:	68fa      	ldr	r2, [r7, #12]
 800093a:	6879      	ldr	r1, [r7, #4]
 800093c:	68b8      	ldr	r0, [r7, #8]
 800093e:	f00f ffdb 	bl	80108f8 <memcpy>

		vPortFreeMicroROS(pv);
 8000942:	6878      	ldr	r0, [r7, #4]
 8000944:	f7ff ff62 	bl	800080c <vPortFreeMicroROS>
	}

	( void ) xTaskResumeAll();
 8000948:	f005 fbd0 	bl	80060ec <xTaskResumeAll>

	return newmem;
 800094c:	68bb      	ldr	r3, [r7, #8]
}
 800094e:	4618      	mov	r0, r3
 8000950:	3710      	adds	r7, #16
 8000952:	46bd      	mov	sp, r7
 8000954:	bd80      	pop	{r7, pc}

08000956 <pvPortCallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortCallocMicroROS( size_t num, size_t xWantedSize )
{
 8000956:	b580      	push	{r7, lr}
 8000958:	b086      	sub	sp, #24
 800095a:	af00      	add	r7, sp, #0
 800095c:	6078      	str	r0, [r7, #4]
 800095e:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 8000960:	f005 fbb6 	bl	80060d0 <vTaskSuspendAll>
	size_t count = xWantedSize*num;
 8000964:	683b      	ldr	r3, [r7, #0]
 8000966:	687a      	ldr	r2, [r7, #4]
 8000968:	fb02 f303 	mul.w	r3, r2, r3
 800096c:	617b      	str	r3, [r7, #20]

	void * mem = pvPortMallocMicroROS(count);
 800096e:	6978      	ldr	r0, [r7, #20]
 8000970:	f7ff fe88 	bl	8000684 <pvPortMallocMicroROS>
 8000974:	60f8      	str	r0, [r7, #12]
  	char *in_dest = (char*)mem;
 8000976:	68fb      	ldr	r3, [r7, #12]
 8000978:	613b      	str	r3, [r7, #16]

  	while(count--)
 800097a:	e004      	b.n	8000986 <pvPortCallocMicroROS+0x30>
    	*in_dest++ = 0;
 800097c:	693b      	ldr	r3, [r7, #16]
 800097e:	1c5a      	adds	r2, r3, #1
 8000980:	613a      	str	r2, [r7, #16]
 8000982:	2200      	movs	r2, #0
 8000984:	701a      	strb	r2, [r3, #0]
  	while(count--)
 8000986:	697b      	ldr	r3, [r7, #20]
 8000988:	1e5a      	subs	r2, r3, #1
 800098a:	617a      	str	r2, [r7, #20]
 800098c:	2b00      	cmp	r3, #0
 800098e:	d1f5      	bne.n	800097c <pvPortCallocMicroROS+0x26>

	( void ) xTaskResumeAll();
 8000990:	f005 fbac 	bl	80060ec <xTaskResumeAll>
  	return mem;
 8000994:	68fb      	ldr	r3, [r7, #12]
}
 8000996:	4618      	mov	r0, r3
 8000998:	3718      	adds	r7, #24
 800099a:	46bd      	mov	sp, r7
 800099c:	bd80      	pop	{r7, pc}
	...

080009a0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80009a0:	b480      	push	{r7}
 80009a2:	b085      	sub	sp, #20
 80009a4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80009a6:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80009aa:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80009ac:	4b27      	ldr	r3, [pc, #156]	; (8000a4c <prvHeapInit+0xac>)
 80009ae:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80009b0:	68fb      	ldr	r3, [r7, #12]
 80009b2:	f003 0307 	and.w	r3, r3, #7
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d00c      	beq.n	80009d4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80009ba:	68fb      	ldr	r3, [r7, #12]
 80009bc:	3307      	adds	r3, #7
 80009be:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80009c0:	68fb      	ldr	r3, [r7, #12]
 80009c2:	f023 0307 	bic.w	r3, r3, #7
 80009c6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80009c8:	68ba      	ldr	r2, [r7, #8]
 80009ca:	68fb      	ldr	r3, [r7, #12]
 80009cc:	1ad3      	subs	r3, r2, r3
 80009ce:	4a1f      	ldr	r2, [pc, #124]	; (8000a4c <prvHeapInit+0xac>)
 80009d0:	4413      	add	r3, r2
 80009d2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80009d4:	68fb      	ldr	r3, [r7, #12]
 80009d6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80009d8:	4a1d      	ldr	r2, [pc, #116]	; (8000a50 <prvHeapInit+0xb0>)
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80009de:	4b1c      	ldr	r3, [pc, #112]	; (8000a50 <prvHeapInit+0xb0>)
 80009e0:	2200      	movs	r2, #0
 80009e2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	68ba      	ldr	r2, [r7, #8]
 80009e8:	4413      	add	r3, r2
 80009ea:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80009ec:	2208      	movs	r2, #8
 80009ee:	68fb      	ldr	r3, [r7, #12]
 80009f0:	1a9b      	subs	r3, r3, r2
 80009f2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80009f4:	68fb      	ldr	r3, [r7, #12]
 80009f6:	f023 0307 	bic.w	r3, r3, #7
 80009fa:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80009fc:	68fb      	ldr	r3, [r7, #12]
 80009fe:	4a15      	ldr	r2, [pc, #84]	; (8000a54 <prvHeapInit+0xb4>)
 8000a00:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8000a02:	4b14      	ldr	r3, [pc, #80]	; (8000a54 <prvHeapInit+0xb4>)
 8000a04:	681b      	ldr	r3, [r3, #0]
 8000a06:	2200      	movs	r2, #0
 8000a08:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8000a0a:	4b12      	ldr	r3, [pc, #72]	; (8000a54 <prvHeapInit+0xb4>)
 8000a0c:	681b      	ldr	r3, [r3, #0]
 8000a0e:	2200      	movs	r2, #0
 8000a10:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8000a16:	683b      	ldr	r3, [r7, #0]
 8000a18:	68fa      	ldr	r2, [r7, #12]
 8000a1a:	1ad2      	subs	r2, r2, r3
 8000a1c:	683b      	ldr	r3, [r7, #0]
 8000a1e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8000a20:	4b0c      	ldr	r3, [pc, #48]	; (8000a54 <prvHeapInit+0xb4>)
 8000a22:	681a      	ldr	r2, [r3, #0]
 8000a24:	683b      	ldr	r3, [r7, #0]
 8000a26:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8000a28:	683b      	ldr	r3, [r7, #0]
 8000a2a:	685b      	ldr	r3, [r3, #4]
 8000a2c:	4a0a      	ldr	r2, [pc, #40]	; (8000a58 <prvHeapInit+0xb8>)
 8000a2e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8000a30:	683b      	ldr	r3, [r7, #0]
 8000a32:	685b      	ldr	r3, [r3, #4]
 8000a34:	4a09      	ldr	r2, [pc, #36]	; (8000a5c <prvHeapInit+0xbc>)
 8000a36:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8000a38:	4b09      	ldr	r3, [pc, #36]	; (8000a60 <prvHeapInit+0xc0>)
 8000a3a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8000a3e:	601a      	str	r2, [r3, #0]
}
 8000a40:	bf00      	nop
 8000a42:	3714      	adds	r7, #20
 8000a44:	46bd      	mov	sp, r7
 8000a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a4a:	4770      	bx	lr
 8000a4c:	20000134 	.word	0x20000134
 8000a50:	20003d34 	.word	0x20003d34
 8000a54:	20003d3c 	.word	0x20003d3c
 8000a58:	20003d44 	.word	0x20003d44
 8000a5c:	20003d40 	.word	0x20003d40
 8000a60:	20003d48 	.word	0x20003d48

08000a64 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8000a64:	b480      	push	{r7}
 8000a66:	b085      	sub	sp, #20
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8000a6c:	4b28      	ldr	r3, [pc, #160]	; (8000b10 <prvInsertBlockIntoFreeList+0xac>)
 8000a6e:	60fb      	str	r3, [r7, #12]
 8000a70:	e002      	b.n	8000a78 <prvInsertBlockIntoFreeList+0x14>
 8000a72:	68fb      	ldr	r3, [r7, #12]
 8000a74:	681b      	ldr	r3, [r3, #0]
 8000a76:	60fb      	str	r3, [r7, #12]
 8000a78:	68fb      	ldr	r3, [r7, #12]
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	687a      	ldr	r2, [r7, #4]
 8000a7e:	429a      	cmp	r2, r3
 8000a80:	d8f7      	bhi.n	8000a72 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8000a82:	68fb      	ldr	r3, [r7, #12]
 8000a84:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8000a86:	68fb      	ldr	r3, [r7, #12]
 8000a88:	685b      	ldr	r3, [r3, #4]
 8000a8a:	68ba      	ldr	r2, [r7, #8]
 8000a8c:	4413      	add	r3, r2
 8000a8e:	687a      	ldr	r2, [r7, #4]
 8000a90:	429a      	cmp	r2, r3
 8000a92:	d108      	bne.n	8000aa6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8000a94:	68fb      	ldr	r3, [r7, #12]
 8000a96:	685a      	ldr	r2, [r3, #4]
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	685b      	ldr	r3, [r3, #4]
 8000a9c:	441a      	add	r2, r3
 8000a9e:	68fb      	ldr	r3, [r7, #12]
 8000aa0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8000aa2:	68fb      	ldr	r3, [r7, #12]
 8000aa4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	685b      	ldr	r3, [r3, #4]
 8000aae:	68ba      	ldr	r2, [r7, #8]
 8000ab0:	441a      	add	r2, r3
 8000ab2:	68fb      	ldr	r3, [r7, #12]
 8000ab4:	681b      	ldr	r3, [r3, #0]
 8000ab6:	429a      	cmp	r2, r3
 8000ab8:	d118      	bne.n	8000aec <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8000aba:	68fb      	ldr	r3, [r7, #12]
 8000abc:	681a      	ldr	r2, [r3, #0]
 8000abe:	4b15      	ldr	r3, [pc, #84]	; (8000b14 <prvInsertBlockIntoFreeList+0xb0>)
 8000ac0:	681b      	ldr	r3, [r3, #0]
 8000ac2:	429a      	cmp	r2, r3
 8000ac4:	d00d      	beq.n	8000ae2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	685a      	ldr	r2, [r3, #4]
 8000aca:	68fb      	ldr	r3, [r7, #12]
 8000acc:	681b      	ldr	r3, [r3, #0]
 8000ace:	685b      	ldr	r3, [r3, #4]
 8000ad0:	441a      	add	r2, r3
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8000ad6:	68fb      	ldr	r3, [r7, #12]
 8000ad8:	681b      	ldr	r3, [r3, #0]
 8000ada:	681a      	ldr	r2, [r3, #0]
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	601a      	str	r2, [r3, #0]
 8000ae0:	e008      	b.n	8000af4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8000ae2:	4b0c      	ldr	r3, [pc, #48]	; (8000b14 <prvInsertBlockIntoFreeList+0xb0>)
 8000ae4:	681a      	ldr	r2, [r3, #0]
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	601a      	str	r2, [r3, #0]
 8000aea:	e003      	b.n	8000af4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8000aec:	68fb      	ldr	r3, [r7, #12]
 8000aee:	681a      	ldr	r2, [r3, #0]
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8000af4:	68fa      	ldr	r2, [r7, #12]
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	429a      	cmp	r2, r3
 8000afa:	d002      	beq.n	8000b02 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8000afc:	68fb      	ldr	r3, [r7, #12]
 8000afe:	687a      	ldr	r2, [r7, #4]
 8000b00:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8000b02:	bf00      	nop
 8000b04:	3714      	adds	r7, #20
 8000b06:	46bd      	mov	sp, r7
 8000b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0c:	4770      	bx	lr
 8000b0e:	bf00      	nop
 8000b10:	20003d34 	.word	0x20003d34
 8000b14:	20003d3c 	.word	0x20003d3c

08000b18 <cubemx_transport_open>:
#define UART_DMA_BUFFER_SIZE 2048

static uint8_t dma_buffer[UART_DMA_BUFFER_SIZE];
static size_t dma_head = 0, dma_tail = 0;

bool cubemx_transport_open(struct uxrCustomTransport * transport){
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b084      	sub	sp, #16
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8000b26:	60fb      	str	r3, [r7, #12]
    HAL_UART_Receive_DMA(uart, dma_buffer, UART_DMA_BUFFER_SIZE);
 8000b28:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000b2c:	4904      	ldr	r1, [pc, #16]	; (8000b40 <cubemx_transport_open+0x28>)
 8000b2e:	68f8      	ldr	r0, [r7, #12]
 8000b30:	f002 ffbe 	bl	8003ab0 <HAL_UART_Receive_DMA>
    return true;
 8000b34:	2301      	movs	r3, #1
}
 8000b36:	4618      	mov	r0, r3
 8000b38:	3710      	adds	r7, #16
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	bd80      	pop	{r7, pc}
 8000b3e:	bf00      	nop
 8000b40:	20003d4c 	.word	0x20003d4c

08000b44 <cubemx_transport_close>:

bool cubemx_transport_close(struct uxrCustomTransport * transport){
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b084      	sub	sp, #16
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8000b52:	60fb      	str	r3, [r7, #12]
    HAL_UART_DMAStop(uart);
 8000b54:	68f8      	ldr	r0, [r7, #12]
 8000b56:	f002 ffdb 	bl	8003b10 <HAL_UART_DMAStop>
    return true;
 8000b5a:	2301      	movs	r3, #1
}
 8000b5c:	4618      	mov	r0, r3
 8000b5e:	3710      	adds	r7, #16
 8000b60:	46bd      	mov	sp, r7
 8000b62:	bd80      	pop	{r7, pc}

08000b64 <cubemx_transport_write>:

size_t cubemx_transport_write(struct uxrCustomTransport* transport, uint8_t * buf, size_t len, uint8_t * err){
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b086      	sub	sp, #24
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	60f8      	str	r0, [r7, #12]
 8000b6c:	60b9      	str	r1, [r7, #8]
 8000b6e:	607a      	str	r2, [r7, #4]
 8000b70:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8000b72:	68fb      	ldr	r3, [r7, #12]
 8000b74:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8000b78:	617b      	str	r3, [r7, #20]

    HAL_StatusTypeDef ret;
    if (uart->gState == HAL_UART_STATE_READY){
 8000b7a:	697b      	ldr	r3, [r7, #20]
 8000b7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000b80:	b2db      	uxtb	r3, r3
 8000b82:	2b20      	cmp	r3, #32
 8000b84:	d11c      	bne.n	8000bc0 <cubemx_transport_write+0x5c>
        ret = HAL_UART_Transmit_DMA(uart, buf, len);
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	b29b      	uxth	r3, r3
 8000b8a:	461a      	mov	r2, r3
 8000b8c:	68b9      	ldr	r1, [r7, #8]
 8000b8e:	6978      	ldr	r0, [r7, #20]
 8000b90:	f002 ff10 	bl	80039b4 <HAL_UART_Transmit_DMA>
 8000b94:	4603      	mov	r3, r0
 8000b96:	74fb      	strb	r3, [r7, #19]
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 8000b98:	e002      	b.n	8000ba0 <cubemx_transport_write+0x3c>
            osDelay(1);
 8000b9a:	2001      	movs	r0, #1
 8000b9c:	f004 fa4c 	bl	8005038 <osDelay>
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 8000ba0:	7cfb      	ldrb	r3, [r7, #19]
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d105      	bne.n	8000bb2 <cubemx_transport_write+0x4e>
 8000ba6:	697b      	ldr	r3, [r7, #20]
 8000ba8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000bac:	b2db      	uxtb	r3, r3
 8000bae:	2b20      	cmp	r3, #32
 8000bb0:	d1f3      	bne.n	8000b9a <cubemx_transport_write+0x36>
        }

        return (ret == HAL_OK) ? len : 0;
 8000bb2:	7cfb      	ldrb	r3, [r7, #19]
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d101      	bne.n	8000bbc <cubemx_transport_write+0x58>
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	e002      	b.n	8000bc2 <cubemx_transport_write+0x5e>
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	e000      	b.n	8000bc2 <cubemx_transport_write+0x5e>
    }else{
        return 0;
 8000bc0:	2300      	movs	r3, #0
    }
}
 8000bc2:	4618      	mov	r0, r3
 8000bc4:	3718      	adds	r7, #24
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	bd80      	pop	{r7, pc}
	...

08000bcc <cubemx_transport_read>:

size_t cubemx_transport_read(struct uxrCustomTransport* transport, uint8_t* buf, size_t len, int timeout, uint8_t* err){
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b088      	sub	sp, #32
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	60f8      	str	r0, [r7, #12]
 8000bd4:	60b9      	str	r1, [r7, #8]
 8000bd6:	607a      	str	r2, [r7, #4]
 8000bd8:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8000bda:	68fb      	ldr	r3, [r7, #12]
 8000bdc:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8000be0:	617b      	str	r3, [r7, #20]

    int ms_used = 0;
 8000be2:	2300      	movs	r3, #0
 8000be4:	61fb      	str	r3, [r7, #28]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000be6:	b672      	cpsid	i
}
 8000be8:	bf00      	nop
    do
    {
        __disable_irq();
        dma_tail = UART_DMA_BUFFER_SIZE - __HAL_DMA_GET_COUNTER(uart->hdmarx);
 8000bea:	697b      	ldr	r3, [r7, #20]
 8000bec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	685b      	ldr	r3, [r3, #4]
 8000bf2:	f5c3 6300 	rsb	r3, r3, #2048	; 0x800
 8000bf6:	4a1c      	ldr	r2, [pc, #112]	; (8000c68 <cubemx_transport_read+0x9c>)
 8000bf8:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8000bfa:	b662      	cpsie	i
}
 8000bfc:	bf00      	nop
        __enable_irq();
        ms_used++;
 8000bfe:	69fb      	ldr	r3, [r7, #28]
 8000c00:	3301      	adds	r3, #1
 8000c02:	61fb      	str	r3, [r7, #28]
        osDelay(portTICK_RATE_MS);
 8000c04:	2001      	movs	r0, #1
 8000c06:	f004 fa17 	bl	8005038 <osDelay>
    } while (dma_head == dma_tail && ms_used < timeout);
 8000c0a:	4b18      	ldr	r3, [pc, #96]	; (8000c6c <cubemx_transport_read+0xa0>)
 8000c0c:	681a      	ldr	r2, [r3, #0]
 8000c0e:	4b16      	ldr	r3, [pc, #88]	; (8000c68 <cubemx_transport_read+0x9c>)
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	429a      	cmp	r2, r3
 8000c14:	d103      	bne.n	8000c1e <cubemx_transport_read+0x52>
 8000c16:	69fa      	ldr	r2, [r7, #28]
 8000c18:	683b      	ldr	r3, [r7, #0]
 8000c1a:	429a      	cmp	r2, r3
 8000c1c:	dbe3      	blt.n	8000be6 <cubemx_transport_read+0x1a>
    
    size_t wrote = 0;
 8000c1e:	2300      	movs	r3, #0
 8000c20:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 8000c22:	e011      	b.n	8000c48 <cubemx_transport_read+0x7c>
        buf[wrote] = dma_buffer[dma_head];
 8000c24:	4b11      	ldr	r3, [pc, #68]	; (8000c6c <cubemx_transport_read+0xa0>)
 8000c26:	681a      	ldr	r2, [r3, #0]
 8000c28:	68b9      	ldr	r1, [r7, #8]
 8000c2a:	69bb      	ldr	r3, [r7, #24]
 8000c2c:	440b      	add	r3, r1
 8000c2e:	4910      	ldr	r1, [pc, #64]	; (8000c70 <cubemx_transport_read+0xa4>)
 8000c30:	5c8a      	ldrb	r2, [r1, r2]
 8000c32:	701a      	strb	r2, [r3, #0]
        dma_head = (dma_head + 1) % UART_DMA_BUFFER_SIZE;
 8000c34:	4b0d      	ldr	r3, [pc, #52]	; (8000c6c <cubemx_transport_read+0xa0>)
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	3301      	adds	r3, #1
 8000c3a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000c3e:	4a0b      	ldr	r2, [pc, #44]	; (8000c6c <cubemx_transport_read+0xa0>)
 8000c40:	6013      	str	r3, [r2, #0]
        wrote++;
 8000c42:	69bb      	ldr	r3, [r7, #24]
 8000c44:	3301      	adds	r3, #1
 8000c46:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 8000c48:	4b08      	ldr	r3, [pc, #32]	; (8000c6c <cubemx_transport_read+0xa0>)
 8000c4a:	681a      	ldr	r2, [r3, #0]
 8000c4c:	4b06      	ldr	r3, [pc, #24]	; (8000c68 <cubemx_transport_read+0x9c>)
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	429a      	cmp	r2, r3
 8000c52:	d003      	beq.n	8000c5c <cubemx_transport_read+0x90>
 8000c54:	69ba      	ldr	r2, [r7, #24]
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	429a      	cmp	r2, r3
 8000c5a:	d3e3      	bcc.n	8000c24 <cubemx_transport_read+0x58>
    }
    
    return wrote;
 8000c5c:	69bb      	ldr	r3, [r7, #24]
}
 8000c5e:	4618      	mov	r0, r3
 8000c60:	3720      	adds	r7, #32
 8000c62:	46bd      	mov	sp, r7
 8000c64:	bd80      	pop	{r7, pc}
 8000c66:	bf00      	nop
 8000c68:	20004550 	.word	0x20004550
 8000c6c:	2000454c 	.word	0x2000454c
 8000c70:	20003d4c 	.word	0x20003d4c

08000c74 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000c74:	b480      	push	{r7}
 8000c76:	b083      	sub	sp, #12
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000c7c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000c80:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000c84:	f003 0301 	and.w	r3, r3, #1
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d013      	beq.n	8000cb4 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000c8c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000c90:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8000c94:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d00b      	beq.n	8000cb4 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000c9c:	e000      	b.n	8000ca0 <ITM_SendChar+0x2c>
    {
      __NOP();
 8000c9e:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000ca0:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d0f9      	beq.n	8000c9e <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000caa:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000cae:	687a      	ldr	r2, [r7, #4]
 8000cb0:	b2d2      	uxtb	r2, r2
 8000cb2:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000cb4:	687b      	ldr	r3, [r7, #4]
}
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	370c      	adds	r7, #12
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc0:	4770      	bx	lr

08000cc2 <__io_putchar>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(uint8_t ch) {
 8000cc2:	b580      	push	{r7, lr}
 8000cc4:	b082      	sub	sp, #8
 8000cc6:	af00      	add	r7, sp, #0
 8000cc8:	4603      	mov	r3, r0
 8000cca:	71fb      	strb	r3, [r7, #7]
	return ITM_SendChar(ch);
 8000ccc:	79fb      	ldrb	r3, [r7, #7]
 8000cce:	4618      	mov	r0, r3
 8000cd0:	f7ff ffd0 	bl	8000c74 <ITM_SendChar>
 8000cd4:	4603      	mov	r3, r0
}
 8000cd6:	4618      	mov	r0, r3
 8000cd8:	3708      	adds	r7, #8
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	bd80      	pop	{r7, pc}
	...

08000ce0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ce4:	f000 fe7c 	bl	80019e0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ce8:	f000 f820 	bl	8000d2c <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  printf("SysInit OK");
 8000cec:	480b      	ldr	r0, [pc, #44]	; (8000d1c <main+0x3c>)
 8000cee:	f00f ff0f 	bl	8010b10 <iprintf>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000cf2:	f000 f905 	bl	8000f00 <MX_GPIO_Init>
  MX_DMA_Init();
 8000cf6:	f000 f8db 	bl	8000eb0 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000cfa:	f000 f8af 	bl	8000e5c <MX_USART2_UART_Init>
  MX_UART5_Init();
 8000cfe:	f000 f883 	bl	8000e08 <MX_UART5_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000d02:	f004 f8bd 	bl	8004e80 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000d06:	4a06      	ldr	r2, [pc, #24]	; (8000d20 <main+0x40>)
 8000d08:	2100      	movs	r1, #0
 8000d0a:	4806      	ldr	r0, [pc, #24]	; (8000d24 <main+0x44>)
 8000d0c:	f004 f902 	bl	8004f14 <osThreadNew>
 8000d10:	4603      	mov	r3, r0
 8000d12:	4a05      	ldr	r2, [pc, #20]	; (8000d28 <main+0x48>)
 8000d14:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000d16:	f004 f8d7 	bl	8004ec8 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000d1a:	e7fe      	b.n	8000d1a <main+0x3a>
 8000d1c:	08011f14 	.word	0x08011f14
 8000d20:	08011fac 	.word	0x08011fac
 8000d24:	08000ff9 	.word	0x08000ff9
 8000d28:	2000469c 	.word	0x2000469c

08000d2c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b094      	sub	sp, #80	; 0x50
 8000d30:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d32:	f107 031c 	add.w	r3, r7, #28
 8000d36:	2234      	movs	r2, #52	; 0x34
 8000d38:	2100      	movs	r1, #0
 8000d3a:	4618      	mov	r0, r3
 8000d3c:	f00f fdea 	bl	8010914 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d40:	f107 0308 	add.w	r3, r7, #8
 8000d44:	2200      	movs	r2, #0
 8000d46:	601a      	str	r2, [r3, #0]
 8000d48:	605a      	str	r2, [r3, #4]
 8000d4a:	609a      	str	r2, [r3, #8]
 8000d4c:	60da      	str	r2, [r3, #12]
 8000d4e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d50:	2300      	movs	r3, #0
 8000d52:	607b      	str	r3, [r7, #4]
 8000d54:	4b2a      	ldr	r3, [pc, #168]	; (8000e00 <SystemClock_Config+0xd4>)
 8000d56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d58:	4a29      	ldr	r2, [pc, #164]	; (8000e00 <SystemClock_Config+0xd4>)
 8000d5a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d5e:	6413      	str	r3, [r2, #64]	; 0x40
 8000d60:	4b27      	ldr	r3, [pc, #156]	; (8000e00 <SystemClock_Config+0xd4>)
 8000d62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d64:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d68:	607b      	str	r3, [r7, #4]
 8000d6a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	603b      	str	r3, [r7, #0]
 8000d70:	4b24      	ldr	r3, [pc, #144]	; (8000e04 <SystemClock_Config+0xd8>)
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000d78:	4a22      	ldr	r2, [pc, #136]	; (8000e04 <SystemClock_Config+0xd8>)
 8000d7a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d7e:	6013      	str	r3, [r2, #0]
 8000d80:	4b20      	ldr	r3, [pc, #128]	; (8000e04 <SystemClock_Config+0xd8>)
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000d88:	603b      	str	r3, [r7, #0]
 8000d8a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000d8c:	2302      	movs	r3, #2
 8000d8e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d90:	2301      	movs	r3, #1
 8000d92:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000d94:	2310      	movs	r3, #16
 8000d96:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d98:	2302      	movs	r3, #2
 8000d9a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000da0:	2310      	movs	r3, #16
 8000da2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000da4:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000da8:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000daa:	2304      	movs	r3, #4
 8000dac:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000dae:	2302      	movs	r3, #2
 8000db0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000db2:	2302      	movs	r3, #2
 8000db4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000db6:	f107 031c 	add.w	r3, r7, #28
 8000dba:	4618      	mov	r0, r3
 8000dbc:	f002 f860 	bl	8002e80 <HAL_RCC_OscConfig>
 8000dc0:	4603      	mov	r3, r0
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d001      	beq.n	8000dca <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000dc6:	f000 f9b3 	bl	8001130 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000dca:	230f      	movs	r3, #15
 8000dcc:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000dce:	2302      	movs	r3, #2
 8000dd0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000dd6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000dda:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ddc:	2300      	movs	r3, #0
 8000dde:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000de0:	f107 0308 	add.w	r3, r7, #8
 8000de4:	2102      	movs	r1, #2
 8000de6:	4618      	mov	r0, r3
 8000de8:	f001 fcce 	bl	8002788 <HAL_RCC_ClockConfig>
 8000dec:	4603      	mov	r3, r0
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d001      	beq.n	8000df6 <SystemClock_Config+0xca>
  {
    Error_Handler();
 8000df2:	f000 f99d 	bl	8001130 <Error_Handler>
  }
}
 8000df6:	bf00      	nop
 8000df8:	3750      	adds	r7, #80	; 0x50
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	bd80      	pop	{r7, pc}
 8000dfe:	bf00      	nop
 8000e00:	40023800 	.word	0x40023800
 8000e04:	40007000 	.word	0x40007000

08000e08 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8000e0c:	4b11      	ldr	r3, [pc, #68]	; (8000e54 <MX_UART5_Init+0x4c>)
 8000e0e:	4a12      	ldr	r2, [pc, #72]	; (8000e58 <MX_UART5_Init+0x50>)
 8000e10:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8000e12:	4b10      	ldr	r3, [pc, #64]	; (8000e54 <MX_UART5_Init+0x4c>)
 8000e14:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000e18:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8000e1a:	4b0e      	ldr	r3, [pc, #56]	; (8000e54 <MX_UART5_Init+0x4c>)
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8000e20:	4b0c      	ldr	r3, [pc, #48]	; (8000e54 <MX_UART5_Init+0x4c>)
 8000e22:	2200      	movs	r2, #0
 8000e24:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8000e26:	4b0b      	ldr	r3, [pc, #44]	; (8000e54 <MX_UART5_Init+0x4c>)
 8000e28:	2200      	movs	r2, #0
 8000e2a:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8000e2c:	4b09      	ldr	r3, [pc, #36]	; (8000e54 <MX_UART5_Init+0x4c>)
 8000e2e:	220c      	movs	r2, #12
 8000e30:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e32:	4b08      	ldr	r3, [pc, #32]	; (8000e54 <MX_UART5_Init+0x4c>)
 8000e34:	2200      	movs	r2, #0
 8000e36:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e38:	4b06      	ldr	r3, [pc, #24]	; (8000e54 <MX_UART5_Init+0x4c>)
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8000e3e:	4805      	ldr	r0, [pc, #20]	; (8000e54 <MX_UART5_Init+0x4c>)
 8000e40:	f002 fd6a 	bl	8003918 <HAL_UART_Init>
 8000e44:	4603      	mov	r3, r0
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d001      	beq.n	8000e4e <MX_UART5_Init+0x46>
  {
    Error_Handler();
 8000e4a:	f000 f971 	bl	8001130 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8000e4e:	bf00      	nop
 8000e50:	bd80      	pop	{r7, pc}
 8000e52:	bf00      	nop
 8000e54:	20004554 	.word	0x20004554
 8000e58:	40005000 	.word	0x40005000

08000e5c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000e60:	4b11      	ldr	r3, [pc, #68]	; (8000ea8 <MX_USART2_UART_Init+0x4c>)
 8000e62:	4a12      	ldr	r2, [pc, #72]	; (8000eac <MX_USART2_UART_Init+0x50>)
 8000e64:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000e66:	4b10      	ldr	r3, [pc, #64]	; (8000ea8 <MX_USART2_UART_Init+0x4c>)
 8000e68:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000e6c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000e6e:	4b0e      	ldr	r3, [pc, #56]	; (8000ea8 <MX_USART2_UART_Init+0x4c>)
 8000e70:	2200      	movs	r2, #0
 8000e72:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000e74:	4b0c      	ldr	r3, [pc, #48]	; (8000ea8 <MX_USART2_UART_Init+0x4c>)
 8000e76:	2200      	movs	r2, #0
 8000e78:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000e7a:	4b0b      	ldr	r3, [pc, #44]	; (8000ea8 <MX_USART2_UART_Init+0x4c>)
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000e80:	4b09      	ldr	r3, [pc, #36]	; (8000ea8 <MX_USART2_UART_Init+0x4c>)
 8000e82:	220c      	movs	r2, #12
 8000e84:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e86:	4b08      	ldr	r3, [pc, #32]	; (8000ea8 <MX_USART2_UART_Init+0x4c>)
 8000e88:	2200      	movs	r2, #0
 8000e8a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e8c:	4b06      	ldr	r3, [pc, #24]	; (8000ea8 <MX_USART2_UART_Init+0x4c>)
 8000e8e:	2200      	movs	r2, #0
 8000e90:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000e92:	4805      	ldr	r0, [pc, #20]	; (8000ea8 <MX_USART2_UART_Init+0x4c>)
 8000e94:	f002 fd40 	bl	8003918 <HAL_UART_Init>
 8000e98:	4603      	mov	r3, r0
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d001      	beq.n	8000ea2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000e9e:	f000 f947 	bl	8001130 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000ea2:	bf00      	nop
 8000ea4:	bd80      	pop	{r7, pc}
 8000ea6:	bf00      	nop
 8000ea8:	20004598 	.word	0x20004598
 8000eac:	40004400 	.word	0x40004400

08000eb0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b082      	sub	sp, #8
 8000eb4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	607b      	str	r3, [r7, #4]
 8000eba:	4b10      	ldr	r3, [pc, #64]	; (8000efc <MX_DMA_Init+0x4c>)
 8000ebc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ebe:	4a0f      	ldr	r2, [pc, #60]	; (8000efc <MX_DMA_Init+0x4c>)
 8000ec0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000ec4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ec6:	4b0d      	ldr	r3, [pc, #52]	; (8000efc <MX_DMA_Init+0x4c>)
 8000ec8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eca:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ece:	607b      	str	r3, [r7, #4]
 8000ed0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	2105      	movs	r1, #5
 8000ed6:	200b      	movs	r0, #11
 8000ed8:	f000 fe7c 	bl	8001bd4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000edc:	200b      	movs	r0, #11
 8000ede:	f000 fe95 	bl	8001c0c <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 5, 0);
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	2105      	movs	r1, #5
 8000ee6:	202f      	movs	r0, #47	; 0x2f
 8000ee8:	f000 fe74 	bl	8001bd4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 8000eec:	202f      	movs	r0, #47	; 0x2f
 8000eee:	f000 fe8d 	bl	8001c0c <HAL_NVIC_EnableIRQ>

}
 8000ef2:	bf00      	nop
 8000ef4:	3708      	adds	r7, #8
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	bd80      	pop	{r7, pc}
 8000efa:	bf00      	nop
 8000efc:	40023800 	.word	0x40023800

08000f00 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b08a      	sub	sp, #40	; 0x28
 8000f04:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f06:	f107 0314 	add.w	r3, r7, #20
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	601a      	str	r2, [r3, #0]
 8000f0e:	605a      	str	r2, [r3, #4]
 8000f10:	609a      	str	r2, [r3, #8]
 8000f12:	60da      	str	r2, [r3, #12]
 8000f14:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f16:	2300      	movs	r3, #0
 8000f18:	613b      	str	r3, [r7, #16]
 8000f1a:	4b34      	ldr	r3, [pc, #208]	; (8000fec <MX_GPIO_Init+0xec>)
 8000f1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f1e:	4a33      	ldr	r2, [pc, #204]	; (8000fec <MX_GPIO_Init+0xec>)
 8000f20:	f043 0304 	orr.w	r3, r3, #4
 8000f24:	6313      	str	r3, [r2, #48]	; 0x30
 8000f26:	4b31      	ldr	r3, [pc, #196]	; (8000fec <MX_GPIO_Init+0xec>)
 8000f28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f2a:	f003 0304 	and.w	r3, r3, #4
 8000f2e:	613b      	str	r3, [r7, #16]
 8000f30:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f32:	2300      	movs	r3, #0
 8000f34:	60fb      	str	r3, [r7, #12]
 8000f36:	4b2d      	ldr	r3, [pc, #180]	; (8000fec <MX_GPIO_Init+0xec>)
 8000f38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f3a:	4a2c      	ldr	r2, [pc, #176]	; (8000fec <MX_GPIO_Init+0xec>)
 8000f3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f40:	6313      	str	r3, [r2, #48]	; 0x30
 8000f42:	4b2a      	ldr	r3, [pc, #168]	; (8000fec <MX_GPIO_Init+0xec>)
 8000f44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f4a:	60fb      	str	r3, [r7, #12]
 8000f4c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f4e:	2300      	movs	r3, #0
 8000f50:	60bb      	str	r3, [r7, #8]
 8000f52:	4b26      	ldr	r3, [pc, #152]	; (8000fec <MX_GPIO_Init+0xec>)
 8000f54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f56:	4a25      	ldr	r2, [pc, #148]	; (8000fec <MX_GPIO_Init+0xec>)
 8000f58:	f043 0301 	orr.w	r3, r3, #1
 8000f5c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f5e:	4b23      	ldr	r3, [pc, #140]	; (8000fec <MX_GPIO_Init+0xec>)
 8000f60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f62:	f003 0301 	and.w	r3, r3, #1
 8000f66:	60bb      	str	r3, [r7, #8]
 8000f68:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	607b      	str	r3, [r7, #4]
 8000f6e:	4b1f      	ldr	r3, [pc, #124]	; (8000fec <MX_GPIO_Init+0xec>)
 8000f70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f72:	4a1e      	ldr	r2, [pc, #120]	; (8000fec <MX_GPIO_Init+0xec>)
 8000f74:	f043 0308 	orr.w	r3, r3, #8
 8000f78:	6313      	str	r3, [r2, #48]	; 0x30
 8000f7a:	4b1c      	ldr	r3, [pc, #112]	; (8000fec <MX_GPIO_Init+0xec>)
 8000f7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f7e:	f003 0308 	and.w	r3, r3, #8
 8000f82:	607b      	str	r3, [r7, #4]
 8000f84:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f86:	2300      	movs	r3, #0
 8000f88:	603b      	str	r3, [r7, #0]
 8000f8a:	4b18      	ldr	r3, [pc, #96]	; (8000fec <MX_GPIO_Init+0xec>)
 8000f8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f8e:	4a17      	ldr	r2, [pc, #92]	; (8000fec <MX_GPIO_Init+0xec>)
 8000f90:	f043 0302 	orr.w	r3, r3, #2
 8000f94:	6313      	str	r3, [r2, #48]	; 0x30
 8000f96:	4b15      	ldr	r3, [pc, #84]	; (8000fec <MX_GPIO_Init+0xec>)
 8000f98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f9a:	f003 0302 	and.w	r3, r3, #2
 8000f9e:	603b      	str	r3, [r7, #0]
 8000fa0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	2120      	movs	r1, #32
 8000fa6:	4812      	ldr	r0, [pc, #72]	; (8000ff0 <MX_GPIO_Init+0xf0>)
 8000fa8:	f001 fbd4 	bl	8002754 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000fac:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000fb0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000fb2:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000fb6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb8:	2300      	movs	r3, #0
 8000fba:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000fbc:	f107 0314 	add.w	r3, r7, #20
 8000fc0:	4619      	mov	r1, r3
 8000fc2:	480c      	ldr	r0, [pc, #48]	; (8000ff4 <MX_GPIO_Init+0xf4>)
 8000fc4:	f001 fa32 	bl	800242c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000fc8:	2320      	movs	r3, #32
 8000fca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fcc:	2301      	movs	r3, #1
 8000fce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000fd8:	f107 0314 	add.w	r3, r7, #20
 8000fdc:	4619      	mov	r1, r3
 8000fde:	4804      	ldr	r0, [pc, #16]	; (8000ff0 <MX_GPIO_Init+0xf0>)
 8000fe0:	f001 fa24 	bl	800242c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000fe4:	bf00      	nop
 8000fe6:	3728      	adds	r7, #40	; 0x28
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	bd80      	pop	{r7, pc}
 8000fec:	40023800 	.word	0x40023800
 8000ff0:	40020000 	.word	0x40020000
 8000ff4:	40020800 	.word	0x40020800

08000ff8 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000ff8:	b5b0      	push	{r4, r5, r7, lr}
 8000ffa:	b0a6      	sub	sp, #152	; 0x98
 8000ffc:	af02      	add	r7, sp, #8
 8000ffe:	61f8      	str	r0, [r7, #28]
  /* USER CODE BEGIN 5 */
	 // micro-ROS configuration
	  rmw_uros_set_custom_transport(
 8001000:	4b34      	ldr	r3, [pc, #208]	; (80010d4 <StartDefaultTask+0xdc>)
 8001002:	9301      	str	r3, [sp, #4]
 8001004:	4b34      	ldr	r3, [pc, #208]	; (80010d8 <StartDefaultTask+0xe0>)
 8001006:	9300      	str	r3, [sp, #0]
 8001008:	4b34      	ldr	r3, [pc, #208]	; (80010dc <StartDefaultTask+0xe4>)
 800100a:	4a35      	ldr	r2, [pc, #212]	; (80010e0 <StartDefaultTask+0xe8>)
 800100c:	4935      	ldr	r1, [pc, #212]	; (80010e4 <StartDefaultTask+0xec>)
 800100e:	2001      	movs	r0, #1
 8001010:	f006 ff02 	bl	8007e18 <rmw_uros_set_custom_transport>
	    cubemx_transport_open,
	    cubemx_transport_close,
	    cubemx_transport_write,
	    cubemx_transport_read);

	  rcl_allocator_t freeRTOS_allocator = rcutils_get_zero_initialized_allocator();
 8001014:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001018:	4618      	mov	r0, r3
 800101a:	f006 fe7f 	bl	8007d1c <rcutils_get_zero_initialized_allocator>
	  freeRTOS_allocator.allocate = microros_allocate;
 800101e:	4b32      	ldr	r3, [pc, #200]	; (80010e8 <StartDefaultTask+0xf0>)
 8001020:	67bb      	str	r3, [r7, #120]	; 0x78
	  freeRTOS_allocator.deallocate = microros_deallocate;
 8001022:	4b32      	ldr	r3, [pc, #200]	; (80010ec <StartDefaultTask+0xf4>)
 8001024:	67fb      	str	r3, [r7, #124]	; 0x7c
	  freeRTOS_allocator.reallocate = microros_reallocate;
 8001026:	4b32      	ldr	r3, [pc, #200]	; (80010f0 <StartDefaultTask+0xf8>)
 8001028:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
	  freeRTOS_allocator.zero_allocate =  microros_zero_allocate;
 800102c:	4b31      	ldr	r3, [pc, #196]	; (80010f4 <StartDefaultTask+0xfc>)
 800102e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

	  if (!rcutils_set_default_allocator(&freeRTOS_allocator)) {
 8001032:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001036:	4618      	mov	r0, r3
 8001038:	f006 fe7e 	bl	8007d38 <rcutils_set_default_allocator>
 800103c:	4603      	mov	r3, r0
 800103e:	f083 0301 	eor.w	r3, r3, #1
 8001042:	b2db      	uxtb	r3, r3
 8001044:	2b00      	cmp	r3, #0
 8001046:	d004      	beq.n	8001052 <StartDefaultTask+0x5a>
	      printf("Error on default allocators (line %d)\n", __LINE__);
 8001048:	f240 1177 	movw	r1, #375	; 0x177
 800104c:	482a      	ldr	r0, [pc, #168]	; (80010f8 <StartDefaultTask+0x100>)
 800104e:	f00f fd5f 	bl	8010b10 <iprintf>
	  std_msgs__msg__Int32 msg;
	  rclc_support_t support;
	  rcl_allocator_t allocator;
	  rcl_node_t node;

	  allocator = rcl_get_default_allocator();
 8001052:	463b      	mov	r3, r7
 8001054:	4618      	mov	r0, r3
 8001056:	f006 fe8d 	bl	8007d74 <rcutils_get_default_allocator>
 800105a:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800105e:	463d      	mov	r5, r7
 8001060:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001062:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001064:	682b      	ldr	r3, [r5, #0]
 8001066:	6023      	str	r3, [r4, #0]

	  //create init_options
	  rclc_support_init(&support, 0, NULL, &allocator);
 8001068:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800106c:	f107 003c 	add.w	r0, r7, #60	; 0x3c
 8001070:	2200      	movs	r2, #0
 8001072:	2100      	movs	r1, #0
 8001074:	f006 fd90 	bl	8007b98 <rclc_support_init>

	  // create node
	  rclc_node_init_default(&node, "cubemx_node", "", &support);
 8001078:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800107c:	f107 0020 	add.w	r0, r7, #32
 8001080:	4a1e      	ldr	r2, [pc, #120]	; (80010fc <StartDefaultTask+0x104>)
 8001082:	491f      	ldr	r1, [pc, #124]	; (8001100 <StartDefaultTask+0x108>)
 8001084:	f006 fdd2 	bl	8007c2c <rclc_node_init_default>

	  // create publisher
	  rclc_publisher_init_default(
 8001088:	f007 fb4c 	bl	8008724 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32>
 800108c:	4602      	mov	r2, r0
 800108e:	f107 0120 	add.w	r1, r7, #32
 8001092:	f107 0074 	add.w	r0, r7, #116	; 0x74
 8001096:	4b1b      	ldr	r3, [pc, #108]	; (8001104 <StartDefaultTask+0x10c>)
 8001098:	f006 fe04 	bl	8007ca4 <rclc_publisher_init_default>
	    &publisher,
	    &node,
	    ROSIDL_GET_MSG_TYPE_SUPPORT(std_msgs, msg, Int32),
	    "cubemx_publisher");

	  msg.data = 0;
 800109c:	2300      	movs	r3, #0
 800109e:	673b      	str	r3, [r7, #112]	; 0x70
	  for(;;) {
	    rcl_ret_t ret = rcl_publish(&publisher, &msg, NULL);
 80010a0:	f107 0170 	add.w	r1, r7, #112	; 0x70
 80010a4:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80010a8:	2200      	movs	r2, #0
 80010aa:	4618      	mov	r0, r3
 80010ac:	f006 fd50 	bl	8007b50 <rcl_publish>
 80010b0:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
	    if (ret != RCL_RET_OK)
 80010b4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d004      	beq.n	80010c6 <StartDefaultTask+0xce>
	    {
	      printf("Error publishing (line %d)\n", __LINE__);
 80010bc:	f240 1195 	movw	r1, #405	; 0x195
 80010c0:	4811      	ldr	r0, [pc, #68]	; (8001108 <StartDefaultTask+0x110>)
 80010c2:	f00f fd25 	bl	8010b10 <iprintf>
	    }

	    msg.data++;
 80010c6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80010c8:	3301      	adds	r3, #1
 80010ca:	673b      	str	r3, [r7, #112]	; 0x70
	    osDelay(10);
 80010cc:	200a      	movs	r0, #10
 80010ce:	f003 ffb3 	bl	8005038 <osDelay>
	  for(;;) {
 80010d2:	e7e5      	b.n	80010a0 <StartDefaultTask+0xa8>
 80010d4:	08000bcd 	.word	0x08000bcd
 80010d8:	08000b65 	.word	0x08000b65
 80010dc:	08000b45 	.word	0x08000b45
 80010e0:	08000b19 	.word	0x08000b19
 80010e4:	20004554 	.word	0x20004554
 80010e8:	0800113d 	.word	0x0800113d
 80010ec:	08001181 	.word	0x08001181
 80010f0:	080011b9 	.word	0x080011b9
 80010f4:	08001225 	.word	0x08001225
 80010f8:	08011f20 	.word	0x08011f20
 80010fc:	08011f48 	.word	0x08011f48
 8001100:	08011f4c 	.word	0x08011f4c
 8001104:	08011f58 	.word	0x08011f58
 8001108:	08011f6c 	.word	0x08011f6c

0800110c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b082      	sub	sp, #8
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	4a04      	ldr	r2, [pc, #16]	; (800112c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800111a:	4293      	cmp	r3, r2
 800111c:	d101      	bne.n	8001122 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800111e:	f000 fc81 	bl	8001a24 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001122:	bf00      	nop
 8001124:	3708      	adds	r7, #8
 8001126:	46bd      	mov	sp, r7
 8001128:	bd80      	pop	{r7, pc}
 800112a:	bf00      	nop
 800112c:	40010000 	.word	0x40010000

08001130 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001130:	b480      	push	{r7}
 8001132:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001134:	b672      	cpsid	i
}
 8001136:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001138:	e7fe      	b.n	8001138 <Error_Handler+0x8>
	...

0800113c <microros_allocate>:
void vPortFreeMicroROS( void *pv );
void *pvPortReallocMicroROS( void *pv, size_t xWantedSize );
size_t getBlockSize( void *pv );
void *pvPortCallocMicroROS( size_t num, size_t xWantedSize );

void * microros_allocate(size_t size, void * state){
 800113c:	b580      	push	{r7, lr}
 800113e:	b082      	sub	sp, #8
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
 8001144:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Alloc %d (prev: %d B)\n",size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 8001146:	4b0c      	ldr	r3, [pc, #48]	; (8001178 <microros_allocate+0x3c>)
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	461a      	mov	r2, r3
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	4413      	add	r3, r2
 8001150:	461a      	mov	r2, r3
 8001152:	4b09      	ldr	r3, [pc, #36]	; (8001178 <microros_allocate+0x3c>)
 8001154:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 8001156:	4b09      	ldr	r3, [pc, #36]	; (800117c <microros_allocate+0x40>)
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	461a      	mov	r2, r3
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	4413      	add	r3, r2
 8001160:	461a      	mov	r2, r3
 8001162:	4b06      	ldr	r3, [pc, #24]	; (800117c <microros_allocate+0x40>)
 8001164:	601a      	str	r2, [r3, #0]
  return pvPortMallocMicroROS(size);
 8001166:	6878      	ldr	r0, [r7, #4]
 8001168:	f7ff fa8c 	bl	8000684 <pvPortMallocMicroROS>
 800116c:	4603      	mov	r3, r0
}
 800116e:	4618      	mov	r0, r3
 8001170:	3708      	adds	r7, #8
 8001172:	46bd      	mov	sp, r7
 8001174:	bd80      	pop	{r7, pc}
 8001176:	bf00      	nop
 8001178:	200046a0 	.word	0x200046a0
 800117c:	200046a4 	.word	0x200046a4

08001180 <microros_deallocate>:

void microros_deallocate(void * pointer, void * state){
 8001180:	b580      	push	{r7, lr}
 8001182:	b082      	sub	sp, #8
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
 8001188:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Free %d (prev: %d B)\n",getBlockSize(pointer), xPortGetFreeHeapSize());
  if (NULL != pointer){
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	2b00      	cmp	r3, #0
 800118e:	d00c      	beq.n	80011aa <microros_deallocate+0x2a>
    usedMemory -= getBlockSize(pointer);
 8001190:	6878      	ldr	r0, [r7, #4]
 8001192:	f7ff fb95 	bl	80008c0 <getBlockSize>
 8001196:	4603      	mov	r3, r0
 8001198:	4a06      	ldr	r2, [pc, #24]	; (80011b4 <microros_deallocate+0x34>)
 800119a:	6812      	ldr	r2, [r2, #0]
 800119c:	1ad3      	subs	r3, r2, r3
 800119e:	461a      	mov	r2, r3
 80011a0:	4b04      	ldr	r3, [pc, #16]	; (80011b4 <microros_deallocate+0x34>)
 80011a2:	601a      	str	r2, [r3, #0]
    vPortFreeMicroROS(pointer);
 80011a4:	6878      	ldr	r0, [r7, #4]
 80011a6:	f7ff fb31 	bl	800080c <vPortFreeMicroROS>
  }
}
 80011aa:	bf00      	nop
 80011ac:	3708      	adds	r7, #8
 80011ae:	46bd      	mov	sp, r7
 80011b0:	bd80      	pop	{r7, pc}
 80011b2:	bf00      	nop
 80011b4:	200046a4 	.word	0x200046a4

080011b8 <microros_reallocate>:

void * microros_reallocate(void * pointer, size_t size, void * state){
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b084      	sub	sp, #16
 80011bc:	af00      	add	r7, sp, #0
 80011be:	60f8      	str	r0, [r7, #12]
 80011c0:	60b9      	str	r1, [r7, #8]
 80011c2:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Realloc %d -> %d (prev: %d B)\n",getBlockSize(pointer),size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 80011c4:	4b15      	ldr	r3, [pc, #84]	; (800121c <microros_reallocate+0x64>)
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	461a      	mov	r2, r3
 80011ca:	68bb      	ldr	r3, [r7, #8]
 80011cc:	4413      	add	r3, r2
 80011ce:	461a      	mov	r2, r3
 80011d0:	4b12      	ldr	r3, [pc, #72]	; (800121c <microros_reallocate+0x64>)
 80011d2:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 80011d4:	4b12      	ldr	r3, [pc, #72]	; (8001220 <microros_reallocate+0x68>)
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	461a      	mov	r2, r3
 80011da:	68bb      	ldr	r3, [r7, #8]
 80011dc:	4413      	add	r3, r2
 80011de:	461a      	mov	r2, r3
 80011e0:	4b0f      	ldr	r3, [pc, #60]	; (8001220 <microros_reallocate+0x68>)
 80011e2:	601a      	str	r2, [r3, #0]
  if (NULL == pointer){
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d104      	bne.n	80011f4 <microros_reallocate+0x3c>
    return pvPortMallocMicroROS(size);
 80011ea:	68b8      	ldr	r0, [r7, #8]
 80011ec:	f7ff fa4a 	bl	8000684 <pvPortMallocMicroROS>
 80011f0:	4603      	mov	r3, r0
 80011f2:	e00e      	b.n	8001212 <microros_reallocate+0x5a>
  } else {
    usedMemory -= getBlockSize(pointer);
 80011f4:	68f8      	ldr	r0, [r7, #12]
 80011f6:	f7ff fb63 	bl	80008c0 <getBlockSize>
 80011fa:	4603      	mov	r3, r0
 80011fc:	4a08      	ldr	r2, [pc, #32]	; (8001220 <microros_reallocate+0x68>)
 80011fe:	6812      	ldr	r2, [r2, #0]
 8001200:	1ad3      	subs	r3, r2, r3
 8001202:	461a      	mov	r2, r3
 8001204:	4b06      	ldr	r3, [pc, #24]	; (8001220 <microros_reallocate+0x68>)
 8001206:	601a      	str	r2, [r3, #0]
    return pvPortReallocMicroROS(pointer,size);
 8001208:	68b9      	ldr	r1, [r7, #8]
 800120a:	68f8      	ldr	r0, [r7, #12]
 800120c:	f7ff fb76 	bl	80008fc <pvPortReallocMicroROS>
 8001210:	4603      	mov	r3, r0
  }
}
 8001212:	4618      	mov	r0, r3
 8001214:	3710      	adds	r7, #16
 8001216:	46bd      	mov	sp, r7
 8001218:	bd80      	pop	{r7, pc}
 800121a:	bf00      	nop
 800121c:	200046a0 	.word	0x200046a0
 8001220:	200046a4 	.word	0x200046a4

08001224 <microros_zero_allocate>:

void * microros_zero_allocate(size_t number_of_elements, size_t size_of_element, void * state){
 8001224:	b580      	push	{r7, lr}
 8001226:	b084      	sub	sp, #16
 8001228:	af00      	add	r7, sp, #0
 800122a:	60f8      	str	r0, [r7, #12]
 800122c:	60b9      	str	r1, [r7, #8]
 800122e:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Calloc %d x %d = %d -> (prev: %d B)\n",number_of_elements,size_of_element, number_of_elements*size_of_element, xPortGetFreeHeapSize());
  absoluteUsedMemory += number_of_elements*size_of_element;
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	68ba      	ldr	r2, [r7, #8]
 8001234:	fb02 f303 	mul.w	r3, r2, r3
 8001238:	4a0c      	ldr	r2, [pc, #48]	; (800126c <microros_zero_allocate+0x48>)
 800123a:	6812      	ldr	r2, [r2, #0]
 800123c:	4413      	add	r3, r2
 800123e:	461a      	mov	r2, r3
 8001240:	4b0a      	ldr	r3, [pc, #40]	; (800126c <microros_zero_allocate+0x48>)
 8001242:	601a      	str	r2, [r3, #0]
  usedMemory += number_of_elements*size_of_element;
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	68ba      	ldr	r2, [r7, #8]
 8001248:	fb02 f303 	mul.w	r3, r2, r3
 800124c:	4a08      	ldr	r2, [pc, #32]	; (8001270 <microros_zero_allocate+0x4c>)
 800124e:	6812      	ldr	r2, [r2, #0]
 8001250:	4413      	add	r3, r2
 8001252:	461a      	mov	r2, r3
 8001254:	4b06      	ldr	r3, [pc, #24]	; (8001270 <microros_zero_allocate+0x4c>)
 8001256:	601a      	str	r2, [r3, #0]
  return pvPortCallocMicroROS(number_of_elements,size_of_element);
 8001258:	68b9      	ldr	r1, [r7, #8]
 800125a:	68f8      	ldr	r0, [r7, #12]
 800125c:	f7ff fb7b 	bl	8000956 <pvPortCallocMicroROS>
 8001260:	4603      	mov	r3, r0
 8001262:	4618      	mov	r0, r3
 8001264:	3710      	adds	r7, #16
 8001266:	46bd      	mov	sp, r7
 8001268:	bd80      	pop	{r7, pc}
 800126a:	bf00      	nop
 800126c:	200046a0 	.word	0x200046a0
 8001270:	200046a4 	.word	0x200046a4
 8001274:	00000000 	.word	0x00000000

08001278 <UTILS_NanosecondsToTimespec>:
#define NANOSECONDS_PER_SECOND     ( 1000000000LL )                                /**< Nanoseconds per second. */
#define NANOSECONDS_PER_TICK       ( NANOSECONDS_PER_SECOND / configTICK_RATE_HZ ) /**< Nanoseconds per FreeRTOS tick. */

void UTILS_NanosecondsToTimespec( int64_t llSource,
                                  struct timespec * const pxDestination )
{
 8001278:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800127c:	b086      	sub	sp, #24
 800127e:	af00      	add	r7, sp, #0
 8001280:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8001284:	607a      	str	r2, [r7, #4]
    long lCarrySec = 0;
 8001286:	2300      	movs	r3, #0
 8001288:	617b      	str	r3, [r7, #20]

    /* Convert to timespec. */
    pxDestination->tv_sec = ( time_t ) ( llSource / NANOSECONDS_PER_SECOND );
 800128a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800128e:	a320      	add	r3, pc, #128	; (adr r3, 8001310 <UTILS_NanosecondsToTimespec+0x98>)
 8001290:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001294:	f7ff f824 	bl	80002e0 <__aeabi_ldivmod>
 8001298:	4602      	mov	r2, r0
 800129a:	460b      	mov	r3, r1
 800129c:	6879      	ldr	r1, [r7, #4]
 800129e:	e9c1 2300 	strd	r2, r3, [r1]
    pxDestination->tv_nsec = ( long ) ( llSource % NANOSECONDS_PER_SECOND );
 80012a2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80012a6:	a31a      	add	r3, pc, #104	; (adr r3, 8001310 <UTILS_NanosecondsToTimespec+0x98>)
 80012a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012ac:	f7ff f818 	bl	80002e0 <__aeabi_ldivmod>
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	609a      	str	r2, [r3, #8]

    /* Subtract from tv_sec if tv_nsec < 0. */
    if( pxDestination->tv_nsec < 0L )
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	689b      	ldr	r3, [r3, #8]
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	da20      	bge.n	80012fe <UTILS_NanosecondsToTimespec+0x86>
    {
        /* Compute the number of seconds to carry. */
        lCarrySec = ( pxDestination->tv_nsec / ( long ) NANOSECONDS_PER_SECOND ) + 1L;
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	689b      	ldr	r3, [r3, #8]
 80012c0:	4a11      	ldr	r2, [pc, #68]	; (8001308 <UTILS_NanosecondsToTimespec+0x90>)
 80012c2:	fb82 1203 	smull	r1, r2, r2, r3
 80012c6:	1712      	asrs	r2, r2, #28
 80012c8:	17db      	asrs	r3, r3, #31
 80012ca:	1ad3      	subs	r3, r2, r3
 80012cc:	3301      	adds	r3, #1
 80012ce:	617b      	str	r3, [r7, #20]

        pxDestination->tv_sec -= ( time_t ) ( lCarrySec );
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012d6:	6979      	ldr	r1, [r7, #20]
 80012d8:	17c8      	asrs	r0, r1, #31
 80012da:	460c      	mov	r4, r1
 80012dc:	4605      	mov	r5, r0
 80012de:	ebb2 0804 	subs.w	r8, r2, r4
 80012e2:	eb63 0905 	sbc.w	r9, r3, r5
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	e9c3 8900 	strd	r8, r9, [r3]
        pxDestination->tv_nsec += lCarrySec * ( long ) NANOSECONDS_PER_SECOND;
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	689a      	ldr	r2, [r3, #8]
 80012f0:	697b      	ldr	r3, [r7, #20]
 80012f2:	4906      	ldr	r1, [pc, #24]	; (800130c <UTILS_NanosecondsToTimespec+0x94>)
 80012f4:	fb01 f303 	mul.w	r3, r1, r3
 80012f8:	441a      	add	r2, r3
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	609a      	str	r2, [r3, #8]
    }
}
 80012fe:	bf00      	nop
 8001300:	3718      	adds	r7, #24
 8001302:	46bd      	mov	sp, r7
 8001304:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001308:	44b82fa1 	.word	0x44b82fa1
 800130c:	3b9aca00 	.word	0x3b9aca00
 8001310:	3b9aca00 	.word	0x3b9aca00
 8001314:	00000000 	.word	0x00000000

08001318 <clock_gettime>:

int clock_gettime( int clock_id,
                   struct timespec * tp )
{
 8001318:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800131c:	b08e      	sub	sp, #56	; 0x38
 800131e:	af00      	add	r7, sp, #0
 8001320:	6278      	str	r0, [r7, #36]	; 0x24
 8001322:	6239      	str	r1, [r7, #32]
    TimeOut_t xCurrentTime = { 0 };
 8001324:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001328:	2300      	movs	r3, #0
 800132a:	6013      	str	r3, [r2, #0]
 800132c:	6053      	str	r3, [r2, #4]

    /* Intermediate variable used to convert TimeOut_t to struct timespec.
     * Also used to detect overflow issues. It must be unsigned because the
     * behavior of signed integer overflow is undefined. */
    uint64_t ullTickCount = 0ULL;
 800132e:	f04f 0200 	mov.w	r2, #0
 8001332:	f04f 0300 	mov.w	r3, #0
 8001336:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    /* Silence warnings about unused parameters. */
    ( void ) clock_id;

    /* Get the current tick count and overflow count. vTaskSetTimeOutState()
     * is used to get these values because they are both static in tasks.c. */
    vTaskSetTimeOutState( &xCurrentTime );
 800133a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800133e:	4618      	mov	r0, r3
 8001340:	f005 f954 	bl	80065ec <vTaskSetTimeOutState>

    /* Adjust the tick count for the number of times a TickType_t has overflowed.
     * portMAX_DELAY should be the maximum value of a TickType_t. */
    ullTickCount = ( uint64_t ) ( xCurrentTime.xOverflowCount ) << ( sizeof( TickType_t ) * 8 );
 8001344:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001346:	17da      	asrs	r2, r3, #31
 8001348:	61bb      	str	r3, [r7, #24]
 800134a:	61fa      	str	r2, [r7, #28]
 800134c:	f04f 0200 	mov.w	r2, #0
 8001350:	f04f 0300 	mov.w	r3, #0
 8001354:	69b9      	ldr	r1, [r7, #24]
 8001356:	000b      	movs	r3, r1
 8001358:	2200      	movs	r2, #0
 800135a:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30

    /* Add the current tick count. */
    ullTickCount += xCurrentTime.xTimeOnEntering;
 800135e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001360:	2200      	movs	r2, #0
 8001362:	461c      	mov	r4, r3
 8001364:	4615      	mov	r5, r2
 8001366:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800136a:	1911      	adds	r1, r2, r4
 800136c:	60b9      	str	r1, [r7, #8]
 800136e:	416b      	adcs	r3, r5
 8001370:	60fb      	str	r3, [r7, #12]
 8001372:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8001376:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30

    /* Convert ullTickCount to timespec. */
    UTILS_NanosecondsToTimespec( ( int64_t ) ullTickCount * NANOSECONDS_PER_TICK, tp );
 800137a:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800137e:	4602      	mov	r2, r0
 8001380:	460b      	mov	r3, r1
 8001382:	f04f 0400 	mov.w	r4, #0
 8001386:	f04f 0500 	mov.w	r5, #0
 800138a:	015d      	lsls	r5, r3, #5
 800138c:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 8001390:	0154      	lsls	r4, r2, #5
 8001392:	4622      	mov	r2, r4
 8001394:	462b      	mov	r3, r5
 8001396:	ebb2 0800 	subs.w	r8, r2, r0
 800139a:	eb63 0901 	sbc.w	r9, r3, r1
 800139e:	f04f 0200 	mov.w	r2, #0
 80013a2:	f04f 0300 	mov.w	r3, #0
 80013a6:	ea4f 2349 	mov.w	r3, r9, lsl #9
 80013aa:	ea43 53d8 	orr.w	r3, r3, r8, lsr #23
 80013ae:	ea4f 2248 	mov.w	r2, r8, lsl #9
 80013b2:	4690      	mov	r8, r2
 80013b4:	4699      	mov	r9, r3
 80013b6:	eb18 0a00 	adds.w	sl, r8, r0
 80013ba:	eb49 0b01 	adc.w	fp, r9, r1
 80013be:	f04f 0200 	mov.w	r2, #0
 80013c2:	f04f 0300 	mov.w	r3, #0
 80013c6:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80013ca:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80013ce:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80013d2:	ebb2 040a 	subs.w	r4, r2, sl
 80013d6:	603c      	str	r4, [r7, #0]
 80013d8:	eb63 030b 	sbc.w	r3, r3, fp
 80013dc:	607b      	str	r3, [r7, #4]
 80013de:	e9d7 4500 	ldrd	r4, r5, [r7]
 80013e2:	4623      	mov	r3, r4
 80013e4:	181b      	adds	r3, r3, r0
 80013e6:	613b      	str	r3, [r7, #16]
 80013e8:	462b      	mov	r3, r5
 80013ea:	eb41 0303 	adc.w	r3, r1, r3
 80013ee:	617b      	str	r3, [r7, #20]
 80013f0:	6a3a      	ldr	r2, [r7, #32]
 80013f2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80013f6:	f7ff ff3f 	bl	8001278 <UTILS_NanosecondsToTimespec>

    return 0;
 80013fa:	2300      	movs	r3, #0
 80013fc:	4618      	mov	r0, r3
 80013fe:	3738      	adds	r7, #56	; 0x38
 8001400:	46bd      	mov	sp, r7
 8001402:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08001408 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b082      	sub	sp, #8
 800140c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800140e:	2300      	movs	r3, #0
 8001410:	607b      	str	r3, [r7, #4]
 8001412:	4b12      	ldr	r3, [pc, #72]	; (800145c <HAL_MspInit+0x54>)
 8001414:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001416:	4a11      	ldr	r2, [pc, #68]	; (800145c <HAL_MspInit+0x54>)
 8001418:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800141c:	6453      	str	r3, [r2, #68]	; 0x44
 800141e:	4b0f      	ldr	r3, [pc, #60]	; (800145c <HAL_MspInit+0x54>)
 8001420:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001422:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001426:	607b      	str	r3, [r7, #4]
 8001428:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800142a:	2300      	movs	r3, #0
 800142c:	603b      	str	r3, [r7, #0]
 800142e:	4b0b      	ldr	r3, [pc, #44]	; (800145c <HAL_MspInit+0x54>)
 8001430:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001432:	4a0a      	ldr	r2, [pc, #40]	; (800145c <HAL_MspInit+0x54>)
 8001434:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001438:	6413      	str	r3, [r2, #64]	; 0x40
 800143a:	4b08      	ldr	r3, [pc, #32]	; (800145c <HAL_MspInit+0x54>)
 800143c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800143e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001442:	603b      	str	r3, [r7, #0]
 8001444:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001446:	2200      	movs	r2, #0
 8001448:	210f      	movs	r1, #15
 800144a:	f06f 0001 	mvn.w	r0, #1
 800144e:	f000 fbc1 	bl	8001bd4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001452:	bf00      	nop
 8001454:	3708      	adds	r7, #8
 8001456:	46bd      	mov	sp, r7
 8001458:	bd80      	pop	{r7, pc}
 800145a:	bf00      	nop
 800145c:	40023800 	.word	0x40023800

08001460 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b08c      	sub	sp, #48	; 0x30
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001468:	f107 031c 	add.w	r3, r7, #28
 800146c:	2200      	movs	r2, #0
 800146e:	601a      	str	r2, [r3, #0]
 8001470:	605a      	str	r2, [r3, #4]
 8001472:	609a      	str	r2, [r3, #8]
 8001474:	60da      	str	r2, [r3, #12]
 8001476:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART5)
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	4a75      	ldr	r2, [pc, #468]	; (8001654 <HAL_UART_MspInit+0x1f4>)
 800147e:	4293      	cmp	r3, r2
 8001480:	f040 80b3 	bne.w	80015ea <HAL_UART_MspInit+0x18a>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 8001484:	2300      	movs	r3, #0
 8001486:	61bb      	str	r3, [r7, #24]
 8001488:	4b73      	ldr	r3, [pc, #460]	; (8001658 <HAL_UART_MspInit+0x1f8>)
 800148a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800148c:	4a72      	ldr	r2, [pc, #456]	; (8001658 <HAL_UART_MspInit+0x1f8>)
 800148e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001492:	6413      	str	r3, [r2, #64]	; 0x40
 8001494:	4b70      	ldr	r3, [pc, #448]	; (8001658 <HAL_UART_MspInit+0x1f8>)
 8001496:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001498:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800149c:	61bb      	str	r3, [r7, #24]
 800149e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80014a0:	2300      	movs	r3, #0
 80014a2:	617b      	str	r3, [r7, #20]
 80014a4:	4b6c      	ldr	r3, [pc, #432]	; (8001658 <HAL_UART_MspInit+0x1f8>)
 80014a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014a8:	4a6b      	ldr	r2, [pc, #428]	; (8001658 <HAL_UART_MspInit+0x1f8>)
 80014aa:	f043 0304 	orr.w	r3, r3, #4
 80014ae:	6313      	str	r3, [r2, #48]	; 0x30
 80014b0:	4b69      	ldr	r3, [pc, #420]	; (8001658 <HAL_UART_MspInit+0x1f8>)
 80014b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014b4:	f003 0304 	and.w	r3, r3, #4
 80014b8:	617b      	str	r3, [r7, #20]
 80014ba:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80014bc:	2300      	movs	r3, #0
 80014be:	613b      	str	r3, [r7, #16]
 80014c0:	4b65      	ldr	r3, [pc, #404]	; (8001658 <HAL_UART_MspInit+0x1f8>)
 80014c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014c4:	4a64      	ldr	r2, [pc, #400]	; (8001658 <HAL_UART_MspInit+0x1f8>)
 80014c6:	f043 0308 	orr.w	r3, r3, #8
 80014ca:	6313      	str	r3, [r2, #48]	; 0x30
 80014cc:	4b62      	ldr	r3, [pc, #392]	; (8001658 <HAL_UART_MspInit+0x1f8>)
 80014ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014d0:	f003 0308 	and.w	r3, r3, #8
 80014d4:	613b      	str	r3, [r7, #16]
 80014d6:	693b      	ldr	r3, [r7, #16]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80014d8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014de:	2302      	movs	r3, #2
 80014e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014e2:	2300      	movs	r3, #0
 80014e4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014e6:	2303      	movs	r3, #3
 80014e8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 80014ea:	2308      	movs	r3, #8
 80014ec:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014ee:	f107 031c 	add.w	r3, r7, #28
 80014f2:	4619      	mov	r1, r3
 80014f4:	4859      	ldr	r0, [pc, #356]	; (800165c <HAL_UART_MspInit+0x1fc>)
 80014f6:	f000 ff99 	bl	800242c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80014fa:	2304      	movs	r3, #4
 80014fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014fe:	2302      	movs	r3, #2
 8001500:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001502:	2300      	movs	r3, #0
 8001504:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001506:	2303      	movs	r3, #3
 8001508:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 800150a:	2308      	movs	r3, #8
 800150c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800150e:	f107 031c 	add.w	r3, r7, #28
 8001512:	4619      	mov	r1, r3
 8001514:	4852      	ldr	r0, [pc, #328]	; (8001660 <HAL_UART_MspInit+0x200>)
 8001516:	f000 ff89 	bl	800242c <HAL_GPIO_Init>

    /* UART5 DMA Init */
    /* UART5_RX Init */
    hdma_uart5_rx.Instance = DMA1_Stream0;
 800151a:	4b52      	ldr	r3, [pc, #328]	; (8001664 <HAL_UART_MspInit+0x204>)
 800151c:	4a52      	ldr	r2, [pc, #328]	; (8001668 <HAL_UART_MspInit+0x208>)
 800151e:	601a      	str	r2, [r3, #0]
    hdma_uart5_rx.Init.Channel = DMA_CHANNEL_4;
 8001520:	4b50      	ldr	r3, [pc, #320]	; (8001664 <HAL_UART_MspInit+0x204>)
 8001522:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001526:	605a      	str	r2, [r3, #4]
    hdma_uart5_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001528:	4b4e      	ldr	r3, [pc, #312]	; (8001664 <HAL_UART_MspInit+0x204>)
 800152a:	2200      	movs	r2, #0
 800152c:	609a      	str	r2, [r3, #8]
    hdma_uart5_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800152e:	4b4d      	ldr	r3, [pc, #308]	; (8001664 <HAL_UART_MspInit+0x204>)
 8001530:	2200      	movs	r2, #0
 8001532:	60da      	str	r2, [r3, #12]
    hdma_uart5_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001534:	4b4b      	ldr	r3, [pc, #300]	; (8001664 <HAL_UART_MspInit+0x204>)
 8001536:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800153a:	611a      	str	r2, [r3, #16]
    hdma_uart5_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800153c:	4b49      	ldr	r3, [pc, #292]	; (8001664 <HAL_UART_MspInit+0x204>)
 800153e:	2200      	movs	r2, #0
 8001540:	615a      	str	r2, [r3, #20]
    hdma_uart5_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001542:	4b48      	ldr	r3, [pc, #288]	; (8001664 <HAL_UART_MspInit+0x204>)
 8001544:	2200      	movs	r2, #0
 8001546:	619a      	str	r2, [r3, #24]
    hdma_uart5_rx.Init.Mode = DMA_CIRCULAR;
 8001548:	4b46      	ldr	r3, [pc, #280]	; (8001664 <HAL_UART_MspInit+0x204>)
 800154a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800154e:	61da      	str	r2, [r3, #28]
    hdma_uart5_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001550:	4b44      	ldr	r3, [pc, #272]	; (8001664 <HAL_UART_MspInit+0x204>)
 8001552:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001556:	621a      	str	r2, [r3, #32]
    hdma_uart5_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001558:	4b42      	ldr	r3, [pc, #264]	; (8001664 <HAL_UART_MspInit+0x204>)
 800155a:	2200      	movs	r2, #0
 800155c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart5_rx) != HAL_OK)
 800155e:	4841      	ldr	r0, [pc, #260]	; (8001664 <HAL_UART_MspInit+0x204>)
 8001560:	f000 fb62 	bl	8001c28 <HAL_DMA_Init>
 8001564:	4603      	mov	r3, r0
 8001566:	2b00      	cmp	r3, #0
 8001568:	d001      	beq.n	800156e <HAL_UART_MspInit+0x10e>
    {
      Error_Handler();
 800156a:	f7ff fde1 	bl	8001130 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_uart5_rx);
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	4a3c      	ldr	r2, [pc, #240]	; (8001664 <HAL_UART_MspInit+0x204>)
 8001572:	639a      	str	r2, [r3, #56]	; 0x38
 8001574:	4a3b      	ldr	r2, [pc, #236]	; (8001664 <HAL_UART_MspInit+0x204>)
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART5_TX Init */
    hdma_uart5_tx.Instance = DMA1_Stream7;
 800157a:	4b3c      	ldr	r3, [pc, #240]	; (800166c <HAL_UART_MspInit+0x20c>)
 800157c:	4a3c      	ldr	r2, [pc, #240]	; (8001670 <HAL_UART_MspInit+0x210>)
 800157e:	601a      	str	r2, [r3, #0]
    hdma_uart5_tx.Init.Channel = DMA_CHANNEL_4;
 8001580:	4b3a      	ldr	r3, [pc, #232]	; (800166c <HAL_UART_MspInit+0x20c>)
 8001582:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001586:	605a      	str	r2, [r3, #4]
    hdma_uart5_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001588:	4b38      	ldr	r3, [pc, #224]	; (800166c <HAL_UART_MspInit+0x20c>)
 800158a:	2240      	movs	r2, #64	; 0x40
 800158c:	609a      	str	r2, [r3, #8]
    hdma_uart5_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800158e:	4b37      	ldr	r3, [pc, #220]	; (800166c <HAL_UART_MspInit+0x20c>)
 8001590:	2200      	movs	r2, #0
 8001592:	60da      	str	r2, [r3, #12]
    hdma_uart5_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001594:	4b35      	ldr	r3, [pc, #212]	; (800166c <HAL_UART_MspInit+0x20c>)
 8001596:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800159a:	611a      	str	r2, [r3, #16]
    hdma_uart5_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800159c:	4b33      	ldr	r3, [pc, #204]	; (800166c <HAL_UART_MspInit+0x20c>)
 800159e:	2200      	movs	r2, #0
 80015a0:	615a      	str	r2, [r3, #20]
    hdma_uart5_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80015a2:	4b32      	ldr	r3, [pc, #200]	; (800166c <HAL_UART_MspInit+0x20c>)
 80015a4:	2200      	movs	r2, #0
 80015a6:	619a      	str	r2, [r3, #24]
    hdma_uart5_tx.Init.Mode = DMA_NORMAL;
 80015a8:	4b30      	ldr	r3, [pc, #192]	; (800166c <HAL_UART_MspInit+0x20c>)
 80015aa:	2200      	movs	r2, #0
 80015ac:	61da      	str	r2, [r3, #28]
    hdma_uart5_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80015ae:	4b2f      	ldr	r3, [pc, #188]	; (800166c <HAL_UART_MspInit+0x20c>)
 80015b0:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80015b4:	621a      	str	r2, [r3, #32]
    hdma_uart5_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80015b6:	4b2d      	ldr	r3, [pc, #180]	; (800166c <HAL_UART_MspInit+0x20c>)
 80015b8:	2200      	movs	r2, #0
 80015ba:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart5_tx) != HAL_OK)
 80015bc:	482b      	ldr	r0, [pc, #172]	; (800166c <HAL_UART_MspInit+0x20c>)
 80015be:	f000 fb33 	bl	8001c28 <HAL_DMA_Init>
 80015c2:	4603      	mov	r3, r0
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d001      	beq.n	80015cc <HAL_UART_MspInit+0x16c>
    {
      Error_Handler();
 80015c8:	f7ff fdb2 	bl	8001130 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_uart5_tx);
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	4a27      	ldr	r2, [pc, #156]	; (800166c <HAL_UART_MspInit+0x20c>)
 80015d0:	635a      	str	r2, [r3, #52]	; 0x34
 80015d2:	4a26      	ldr	r2, [pc, #152]	; (800166c <HAL_UART_MspInit+0x20c>)
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART5 interrupt Init */
    HAL_NVIC_SetPriority(UART5_IRQn, 5, 0);
 80015d8:	2200      	movs	r2, #0
 80015da:	2105      	movs	r1, #5
 80015dc:	2035      	movs	r0, #53	; 0x35
 80015de:	f000 faf9 	bl	8001bd4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 80015e2:	2035      	movs	r0, #53	; 0x35
 80015e4:	f000 fb12 	bl	8001c0c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80015e8:	e030      	b.n	800164c <HAL_UART_MspInit+0x1ec>
  else if(huart->Instance==USART2)
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	4a21      	ldr	r2, [pc, #132]	; (8001674 <HAL_UART_MspInit+0x214>)
 80015f0:	4293      	cmp	r3, r2
 80015f2:	d12b      	bne.n	800164c <HAL_UART_MspInit+0x1ec>
    __HAL_RCC_USART2_CLK_ENABLE();
 80015f4:	2300      	movs	r3, #0
 80015f6:	60fb      	str	r3, [r7, #12]
 80015f8:	4b17      	ldr	r3, [pc, #92]	; (8001658 <HAL_UART_MspInit+0x1f8>)
 80015fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015fc:	4a16      	ldr	r2, [pc, #88]	; (8001658 <HAL_UART_MspInit+0x1f8>)
 80015fe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001602:	6413      	str	r3, [r2, #64]	; 0x40
 8001604:	4b14      	ldr	r3, [pc, #80]	; (8001658 <HAL_UART_MspInit+0x1f8>)
 8001606:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001608:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800160c:	60fb      	str	r3, [r7, #12]
 800160e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001610:	2300      	movs	r3, #0
 8001612:	60bb      	str	r3, [r7, #8]
 8001614:	4b10      	ldr	r3, [pc, #64]	; (8001658 <HAL_UART_MspInit+0x1f8>)
 8001616:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001618:	4a0f      	ldr	r2, [pc, #60]	; (8001658 <HAL_UART_MspInit+0x1f8>)
 800161a:	f043 0301 	orr.w	r3, r3, #1
 800161e:	6313      	str	r3, [r2, #48]	; 0x30
 8001620:	4b0d      	ldr	r3, [pc, #52]	; (8001658 <HAL_UART_MspInit+0x1f8>)
 8001622:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001624:	f003 0301 	and.w	r3, r3, #1
 8001628:	60bb      	str	r3, [r7, #8]
 800162a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800162c:	230c      	movs	r3, #12
 800162e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001630:	2302      	movs	r3, #2
 8001632:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001634:	2300      	movs	r3, #0
 8001636:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001638:	2303      	movs	r3, #3
 800163a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800163c:	2307      	movs	r3, #7
 800163e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001640:	f107 031c 	add.w	r3, r7, #28
 8001644:	4619      	mov	r1, r3
 8001646:	480c      	ldr	r0, [pc, #48]	; (8001678 <HAL_UART_MspInit+0x218>)
 8001648:	f000 fef0 	bl	800242c <HAL_GPIO_Init>
}
 800164c:	bf00      	nop
 800164e:	3730      	adds	r7, #48	; 0x30
 8001650:	46bd      	mov	sp, r7
 8001652:	bd80      	pop	{r7, pc}
 8001654:	40005000 	.word	0x40005000
 8001658:	40023800 	.word	0x40023800
 800165c:	40020800 	.word	0x40020800
 8001660:	40020c00 	.word	0x40020c00
 8001664:	200045dc 	.word	0x200045dc
 8001668:	40026010 	.word	0x40026010
 800166c:	2000463c 	.word	0x2000463c
 8001670:	400260b8 	.word	0x400260b8
 8001674:	40004400 	.word	0x40004400
 8001678:	40020000 	.word	0x40020000

0800167c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	b08c      	sub	sp, #48	; 0x30
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8001684:	2300      	movs	r3, #0
 8001686:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8001688:	2300      	movs	r3, #0
 800168a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 800168c:	2300      	movs	r3, #0
 800168e:	60bb      	str	r3, [r7, #8]
 8001690:	4b2e      	ldr	r3, [pc, #184]	; (800174c <HAL_InitTick+0xd0>)
 8001692:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001694:	4a2d      	ldr	r2, [pc, #180]	; (800174c <HAL_InitTick+0xd0>)
 8001696:	f043 0301 	orr.w	r3, r3, #1
 800169a:	6453      	str	r3, [r2, #68]	; 0x44
 800169c:	4b2b      	ldr	r3, [pc, #172]	; (800174c <HAL_InitTick+0xd0>)
 800169e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016a0:	f003 0301 	and.w	r3, r3, #1
 80016a4:	60bb      	str	r3, [r7, #8]
 80016a6:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80016a8:	f107 020c 	add.w	r2, r7, #12
 80016ac:	f107 0310 	add.w	r3, r7, #16
 80016b0:	4611      	mov	r1, r2
 80016b2:	4618      	mov	r0, r3
 80016b4:	f001 f982 	bl	80029bc <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 80016b8:	f001 f96c 	bl	8002994 <HAL_RCC_GetPCLK2Freq>
 80016bc:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80016be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80016c0:	4a23      	ldr	r2, [pc, #140]	; (8001750 <HAL_InitTick+0xd4>)
 80016c2:	fba2 2303 	umull	r2, r3, r2, r3
 80016c6:	0c9b      	lsrs	r3, r3, #18
 80016c8:	3b01      	subs	r3, #1
 80016ca:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80016cc:	4b21      	ldr	r3, [pc, #132]	; (8001754 <HAL_InitTick+0xd8>)
 80016ce:	4a22      	ldr	r2, [pc, #136]	; (8001758 <HAL_InitTick+0xdc>)
 80016d0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80016d2:	4b20      	ldr	r3, [pc, #128]	; (8001754 <HAL_InitTick+0xd8>)
 80016d4:	f240 32e7 	movw	r2, #999	; 0x3e7
 80016d8:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80016da:	4a1e      	ldr	r2, [pc, #120]	; (8001754 <HAL_InitTick+0xd8>)
 80016dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016de:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80016e0:	4b1c      	ldr	r3, [pc, #112]	; (8001754 <HAL_InitTick+0xd8>)
 80016e2:	2200      	movs	r2, #0
 80016e4:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016e6:	4b1b      	ldr	r3, [pc, #108]	; (8001754 <HAL_InitTick+0xd8>)
 80016e8:	2200      	movs	r2, #0
 80016ea:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016ec:	4b19      	ldr	r3, [pc, #100]	; (8001754 <HAL_InitTick+0xd8>)
 80016ee:	2200      	movs	r2, #0
 80016f0:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 80016f2:	4818      	ldr	r0, [pc, #96]	; (8001754 <HAL_InitTick+0xd8>)
 80016f4:	f001 fe62 	bl	80033bc <HAL_TIM_Base_Init>
 80016f8:	4603      	mov	r3, r0
 80016fa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 80016fe:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001702:	2b00      	cmp	r3, #0
 8001704:	d11b      	bne.n	800173e <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8001706:	4813      	ldr	r0, [pc, #76]	; (8001754 <HAL_InitTick+0xd8>)
 8001708:	f001 feb2 	bl	8003470 <HAL_TIM_Base_Start_IT>
 800170c:	4603      	mov	r3, r0
 800170e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8001712:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001716:	2b00      	cmp	r3, #0
 8001718:	d111      	bne.n	800173e <HAL_InitTick+0xc2>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800171a:	2019      	movs	r0, #25
 800171c:	f000 fa76 	bl	8001c0c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	2b0f      	cmp	r3, #15
 8001724:	d808      	bhi.n	8001738 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8001726:	2200      	movs	r2, #0
 8001728:	6879      	ldr	r1, [r7, #4]
 800172a:	2019      	movs	r0, #25
 800172c:	f000 fa52 	bl	8001bd4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001730:	4a0a      	ldr	r2, [pc, #40]	; (800175c <HAL_InitTick+0xe0>)
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	6013      	str	r3, [r2, #0]
 8001736:	e002      	b.n	800173e <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8001738:	2301      	movs	r3, #1
 800173a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 800173e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8001742:	4618      	mov	r0, r3
 8001744:	3730      	adds	r7, #48	; 0x30
 8001746:	46bd      	mov	sp, r7
 8001748:	bd80      	pop	{r7, pc}
 800174a:	bf00      	nop
 800174c:	40023800 	.word	0x40023800
 8001750:	431bde83 	.word	0x431bde83
 8001754:	200046a8 	.word	0x200046a8
 8001758:	40010000 	.word	0x40010000
 800175c:	20000008 	.word	0x20000008

08001760 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001760:	b480      	push	{r7}
 8001762:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001764:	e7fe      	b.n	8001764 <NMI_Handler+0x4>

08001766 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001766:	b480      	push	{r7}
 8001768:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800176a:	e7fe      	b.n	800176a <HardFault_Handler+0x4>

0800176c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800176c:	b480      	push	{r7}
 800176e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001770:	e7fe      	b.n	8001770 <MemManage_Handler+0x4>

08001772 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001772:	b480      	push	{r7}
 8001774:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001776:	e7fe      	b.n	8001776 <BusFault_Handler+0x4>

08001778 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001778:	b480      	push	{r7}
 800177a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800177c:	e7fe      	b.n	800177c <UsageFault_Handler+0x4>

0800177e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800177e:	b480      	push	{r7}
 8001780:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001782:	bf00      	nop
 8001784:	46bd      	mov	sp, r7
 8001786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178a:	4770      	bx	lr

0800178c <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_rx);
 8001790:	4802      	ldr	r0, [pc, #8]	; (800179c <DMA1_Stream0_IRQHandler+0x10>)
 8001792:	f000 fbe1 	bl	8001f58 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8001796:	bf00      	nop
 8001798:	bd80      	pop	{r7, pc}
 800179a:	bf00      	nop
 800179c:	200045dc 	.word	0x200045dc

080017a0 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80017a4:	4802      	ldr	r0, [pc, #8]	; (80017b0 <TIM1_UP_TIM10_IRQHandler+0x10>)
 80017a6:	f001 fed3 	bl	8003550 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80017aa:	bf00      	nop
 80017ac:	bd80      	pop	{r7, pc}
 80017ae:	bf00      	nop
 80017b0:	200046a8 	.word	0x200046a8

080017b4 <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_tx);
 80017b8:	4802      	ldr	r0, [pc, #8]	; (80017c4 <DMA1_Stream7_IRQHandler+0x10>)
 80017ba:	f000 fbcd 	bl	8001f58 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 80017be:	bf00      	nop
 80017c0:	bd80      	pop	{r7, pc}
 80017c2:	bf00      	nop
 80017c4:	2000463c 	.word	0x2000463c

080017c8 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 80017cc:	4802      	ldr	r0, [pc, #8]	; (80017d8 <UART5_IRQHandler+0x10>)
 80017ce:	f002 fa1f 	bl	8003c10 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 80017d2:	bf00      	nop
 80017d4:	bd80      	pop	{r7, pc}
 80017d6:	bf00      	nop
 80017d8:	20004554 	.word	0x20004554

080017dc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80017dc:	b480      	push	{r7}
 80017de:	af00      	add	r7, sp, #0
  return 1;
 80017e0:	2301      	movs	r3, #1
}
 80017e2:	4618      	mov	r0, r3
 80017e4:	46bd      	mov	sp, r7
 80017e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ea:	4770      	bx	lr

080017ec <_kill>:

int _kill(int pid, int sig)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b082      	sub	sp, #8
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
 80017f4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80017f6:	f00e ff03 	bl	8010600 <__errno>
 80017fa:	4603      	mov	r3, r0
 80017fc:	2216      	movs	r2, #22
 80017fe:	601a      	str	r2, [r3, #0]
  return -1;
 8001800:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001804:	4618      	mov	r0, r3
 8001806:	3708      	adds	r7, #8
 8001808:	46bd      	mov	sp, r7
 800180a:	bd80      	pop	{r7, pc}

0800180c <_exit>:

void _exit (int status)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	b082      	sub	sp, #8
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001814:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001818:	6878      	ldr	r0, [r7, #4]
 800181a:	f7ff ffe7 	bl	80017ec <_kill>
  while (1) {}    /* Make sure we hang here */
 800181e:	e7fe      	b.n	800181e <_exit+0x12>

08001820 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	b086      	sub	sp, #24
 8001824:	af00      	add	r7, sp, #0
 8001826:	60f8      	str	r0, [r7, #12]
 8001828:	60b9      	str	r1, [r7, #8]
 800182a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800182c:	2300      	movs	r3, #0
 800182e:	617b      	str	r3, [r7, #20]
 8001830:	e00a      	b.n	8001848 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001832:	f3af 8000 	nop.w
 8001836:	4601      	mov	r1, r0
 8001838:	68bb      	ldr	r3, [r7, #8]
 800183a:	1c5a      	adds	r2, r3, #1
 800183c:	60ba      	str	r2, [r7, #8]
 800183e:	b2ca      	uxtb	r2, r1
 8001840:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001842:	697b      	ldr	r3, [r7, #20]
 8001844:	3301      	adds	r3, #1
 8001846:	617b      	str	r3, [r7, #20]
 8001848:	697a      	ldr	r2, [r7, #20]
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	429a      	cmp	r2, r3
 800184e:	dbf0      	blt.n	8001832 <_read+0x12>
  }

  return len;
 8001850:	687b      	ldr	r3, [r7, #4]
}
 8001852:	4618      	mov	r0, r3
 8001854:	3718      	adds	r7, #24
 8001856:	46bd      	mov	sp, r7
 8001858:	bd80      	pop	{r7, pc}

0800185a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800185a:	b580      	push	{r7, lr}
 800185c:	b086      	sub	sp, #24
 800185e:	af00      	add	r7, sp, #0
 8001860:	60f8      	str	r0, [r7, #12]
 8001862:	60b9      	str	r1, [r7, #8]
 8001864:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001866:	2300      	movs	r3, #0
 8001868:	617b      	str	r3, [r7, #20]
 800186a:	e009      	b.n	8001880 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800186c:	68bb      	ldr	r3, [r7, #8]
 800186e:	1c5a      	adds	r2, r3, #1
 8001870:	60ba      	str	r2, [r7, #8]
 8001872:	781b      	ldrb	r3, [r3, #0]
 8001874:	4618      	mov	r0, r3
 8001876:	f7ff fa24 	bl	8000cc2 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800187a:	697b      	ldr	r3, [r7, #20]
 800187c:	3301      	adds	r3, #1
 800187e:	617b      	str	r3, [r7, #20]
 8001880:	697a      	ldr	r2, [r7, #20]
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	429a      	cmp	r2, r3
 8001886:	dbf1      	blt.n	800186c <_write+0x12>
  }
  return len;
 8001888:	687b      	ldr	r3, [r7, #4]
}
 800188a:	4618      	mov	r0, r3
 800188c:	3718      	adds	r7, #24
 800188e:	46bd      	mov	sp, r7
 8001890:	bd80      	pop	{r7, pc}

08001892 <_close>:

int _close(int file)
{
 8001892:	b480      	push	{r7}
 8001894:	b083      	sub	sp, #12
 8001896:	af00      	add	r7, sp, #0
 8001898:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800189a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800189e:	4618      	mov	r0, r3
 80018a0:	370c      	adds	r7, #12
 80018a2:	46bd      	mov	sp, r7
 80018a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a8:	4770      	bx	lr

080018aa <_fstat>:


int _fstat(int file, struct stat *st)
{
 80018aa:	b480      	push	{r7}
 80018ac:	b083      	sub	sp, #12
 80018ae:	af00      	add	r7, sp, #0
 80018b0:	6078      	str	r0, [r7, #4]
 80018b2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80018b4:	683b      	ldr	r3, [r7, #0]
 80018b6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80018ba:	605a      	str	r2, [r3, #4]
  return 0;
 80018bc:	2300      	movs	r3, #0
}
 80018be:	4618      	mov	r0, r3
 80018c0:	370c      	adds	r7, #12
 80018c2:	46bd      	mov	sp, r7
 80018c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c8:	4770      	bx	lr

080018ca <_isatty>:

int _isatty(int file)
{
 80018ca:	b480      	push	{r7}
 80018cc:	b083      	sub	sp, #12
 80018ce:	af00      	add	r7, sp, #0
 80018d0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80018d2:	2301      	movs	r3, #1
}
 80018d4:	4618      	mov	r0, r3
 80018d6:	370c      	adds	r7, #12
 80018d8:	46bd      	mov	sp, r7
 80018da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018de:	4770      	bx	lr

080018e0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80018e0:	b480      	push	{r7}
 80018e2:	b085      	sub	sp, #20
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	60f8      	str	r0, [r7, #12]
 80018e8:	60b9      	str	r1, [r7, #8]
 80018ea:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80018ec:	2300      	movs	r3, #0
}
 80018ee:	4618      	mov	r0, r3
 80018f0:	3714      	adds	r7, #20
 80018f2:	46bd      	mov	sp, r7
 80018f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f8:	4770      	bx	lr
	...

080018fc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b086      	sub	sp, #24
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001904:	4a14      	ldr	r2, [pc, #80]	; (8001958 <_sbrk+0x5c>)
 8001906:	4b15      	ldr	r3, [pc, #84]	; (800195c <_sbrk+0x60>)
 8001908:	1ad3      	subs	r3, r2, r3
 800190a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800190c:	697b      	ldr	r3, [r7, #20]
 800190e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001910:	4b13      	ldr	r3, [pc, #76]	; (8001960 <_sbrk+0x64>)
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	2b00      	cmp	r3, #0
 8001916:	d102      	bne.n	800191e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001918:	4b11      	ldr	r3, [pc, #68]	; (8001960 <_sbrk+0x64>)
 800191a:	4a12      	ldr	r2, [pc, #72]	; (8001964 <_sbrk+0x68>)
 800191c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800191e:	4b10      	ldr	r3, [pc, #64]	; (8001960 <_sbrk+0x64>)
 8001920:	681a      	ldr	r2, [r3, #0]
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	4413      	add	r3, r2
 8001926:	693a      	ldr	r2, [r7, #16]
 8001928:	429a      	cmp	r2, r3
 800192a:	d207      	bcs.n	800193c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800192c:	f00e fe68 	bl	8010600 <__errno>
 8001930:	4603      	mov	r3, r0
 8001932:	220c      	movs	r2, #12
 8001934:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001936:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800193a:	e009      	b.n	8001950 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800193c:	4b08      	ldr	r3, [pc, #32]	; (8001960 <_sbrk+0x64>)
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001942:	4b07      	ldr	r3, [pc, #28]	; (8001960 <_sbrk+0x64>)
 8001944:	681a      	ldr	r2, [r3, #0]
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	4413      	add	r3, r2
 800194a:	4a05      	ldr	r2, [pc, #20]	; (8001960 <_sbrk+0x64>)
 800194c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800194e:	68fb      	ldr	r3, [r7, #12]
}
 8001950:	4618      	mov	r0, r3
 8001952:	3718      	adds	r7, #24
 8001954:	46bd      	mov	sp, r7
 8001956:	bd80      	pop	{r7, pc}
 8001958:	20020000 	.word	0x20020000
 800195c:	00000400 	.word	0x00000400
 8001960:	200046f4 	.word	0x200046f4
 8001964:	2000dc28 	.word	0x2000dc28

08001968 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001968:	b480      	push	{r7}
 800196a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800196c:	4b06      	ldr	r3, [pc, #24]	; (8001988 <SystemInit+0x20>)
 800196e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001972:	4a05      	ldr	r2, [pc, #20]	; (8001988 <SystemInit+0x20>)
 8001974:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001978:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800197c:	bf00      	nop
 800197e:	46bd      	mov	sp, r7
 8001980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001984:	4770      	bx	lr
 8001986:	bf00      	nop
 8001988:	e000ed00 	.word	0xe000ed00

0800198c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800198c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80019c4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001990:	480d      	ldr	r0, [pc, #52]	; (80019c8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001992:	490e      	ldr	r1, [pc, #56]	; (80019cc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001994:	4a0e      	ldr	r2, [pc, #56]	; (80019d0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001996:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001998:	e002      	b.n	80019a0 <LoopCopyDataInit>

0800199a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800199a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800199c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800199e:	3304      	adds	r3, #4

080019a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80019a0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80019a2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80019a4:	d3f9      	bcc.n	800199a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80019a6:	4a0b      	ldr	r2, [pc, #44]	; (80019d4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80019a8:	4c0b      	ldr	r4, [pc, #44]	; (80019d8 <LoopFillZerobss+0x26>)
  movs r3, #0
 80019aa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80019ac:	e001      	b.n	80019b2 <LoopFillZerobss>

080019ae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80019ae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80019b0:	3204      	adds	r2, #4

080019b2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80019b2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80019b4:	d3fb      	bcc.n	80019ae <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80019b6:	f7ff ffd7 	bl	8001968 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80019ba:	f00e ff65 	bl	8010888 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80019be:	f7ff f98f 	bl	8000ce0 <main>
  bx  lr    
 80019c2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80019c4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80019c8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80019cc:	20000118 	.word	0x20000118
  ldr r2, =_sidata
 80019d0:	08012b84 	.word	0x08012b84
  ldr r2, =_sbss
 80019d4:	20000118 	.word	0x20000118
  ldr r4, =_ebss
 80019d8:	2000dc28 	.word	0x2000dc28

080019dc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80019dc:	e7fe      	b.n	80019dc <ADC_IRQHandler>
	...

080019e0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80019e4:	4b0e      	ldr	r3, [pc, #56]	; (8001a20 <HAL_Init+0x40>)
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	4a0d      	ldr	r2, [pc, #52]	; (8001a20 <HAL_Init+0x40>)
 80019ea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80019ee:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80019f0:	4b0b      	ldr	r3, [pc, #44]	; (8001a20 <HAL_Init+0x40>)
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	4a0a      	ldr	r2, [pc, #40]	; (8001a20 <HAL_Init+0x40>)
 80019f6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80019fa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80019fc:	4b08      	ldr	r3, [pc, #32]	; (8001a20 <HAL_Init+0x40>)
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	4a07      	ldr	r2, [pc, #28]	; (8001a20 <HAL_Init+0x40>)
 8001a02:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a06:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a08:	2003      	movs	r0, #3
 8001a0a:	f000 f8d8 	bl	8001bbe <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001a0e:	200f      	movs	r0, #15
 8001a10:	f7ff fe34 	bl	800167c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001a14:	f7ff fcf8 	bl	8001408 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a18:	2300      	movs	r3, #0
}
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	bd80      	pop	{r7, pc}
 8001a1e:	bf00      	nop
 8001a20:	40023c00 	.word	0x40023c00

08001a24 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a24:	b480      	push	{r7}
 8001a26:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a28:	4b06      	ldr	r3, [pc, #24]	; (8001a44 <HAL_IncTick+0x20>)
 8001a2a:	781b      	ldrb	r3, [r3, #0]
 8001a2c:	461a      	mov	r2, r3
 8001a2e:	4b06      	ldr	r3, [pc, #24]	; (8001a48 <HAL_IncTick+0x24>)
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	4413      	add	r3, r2
 8001a34:	4a04      	ldr	r2, [pc, #16]	; (8001a48 <HAL_IncTick+0x24>)
 8001a36:	6013      	str	r3, [r2, #0]
}
 8001a38:	bf00      	nop
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a40:	4770      	bx	lr
 8001a42:	bf00      	nop
 8001a44:	2000000c 	.word	0x2000000c
 8001a48:	200046f8 	.word	0x200046f8

08001a4c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a4c:	b480      	push	{r7}
 8001a4e:	af00      	add	r7, sp, #0
  return uwTick;
 8001a50:	4b03      	ldr	r3, [pc, #12]	; (8001a60 <HAL_GetTick+0x14>)
 8001a52:	681b      	ldr	r3, [r3, #0]
}
 8001a54:	4618      	mov	r0, r3
 8001a56:	46bd      	mov	sp, r7
 8001a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5c:	4770      	bx	lr
 8001a5e:	bf00      	nop
 8001a60:	200046f8 	.word	0x200046f8

08001a64 <__NVIC_SetPriorityGrouping>:
{
 8001a64:	b480      	push	{r7}
 8001a66:	b085      	sub	sp, #20
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	f003 0307 	and.w	r3, r3, #7
 8001a72:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a74:	4b0c      	ldr	r3, [pc, #48]	; (8001aa8 <__NVIC_SetPriorityGrouping+0x44>)
 8001a76:	68db      	ldr	r3, [r3, #12]
 8001a78:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a7a:	68ba      	ldr	r2, [r7, #8]
 8001a7c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001a80:	4013      	ands	r3, r2
 8001a82:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a88:	68bb      	ldr	r3, [r7, #8]
 8001a8a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a8c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001a90:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a94:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a96:	4a04      	ldr	r2, [pc, #16]	; (8001aa8 <__NVIC_SetPriorityGrouping+0x44>)
 8001a98:	68bb      	ldr	r3, [r7, #8]
 8001a9a:	60d3      	str	r3, [r2, #12]
}
 8001a9c:	bf00      	nop
 8001a9e:	3714      	adds	r7, #20
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa6:	4770      	bx	lr
 8001aa8:	e000ed00 	.word	0xe000ed00

08001aac <__NVIC_GetPriorityGrouping>:
{
 8001aac:	b480      	push	{r7}
 8001aae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ab0:	4b04      	ldr	r3, [pc, #16]	; (8001ac4 <__NVIC_GetPriorityGrouping+0x18>)
 8001ab2:	68db      	ldr	r3, [r3, #12]
 8001ab4:	0a1b      	lsrs	r3, r3, #8
 8001ab6:	f003 0307 	and.w	r3, r3, #7
}
 8001aba:	4618      	mov	r0, r3
 8001abc:	46bd      	mov	sp, r7
 8001abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac2:	4770      	bx	lr
 8001ac4:	e000ed00 	.word	0xe000ed00

08001ac8 <__NVIC_EnableIRQ>:
{
 8001ac8:	b480      	push	{r7}
 8001aca:	b083      	sub	sp, #12
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	4603      	mov	r3, r0
 8001ad0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ad2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	db0b      	blt.n	8001af2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ada:	79fb      	ldrb	r3, [r7, #7]
 8001adc:	f003 021f 	and.w	r2, r3, #31
 8001ae0:	4907      	ldr	r1, [pc, #28]	; (8001b00 <__NVIC_EnableIRQ+0x38>)
 8001ae2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ae6:	095b      	lsrs	r3, r3, #5
 8001ae8:	2001      	movs	r0, #1
 8001aea:	fa00 f202 	lsl.w	r2, r0, r2
 8001aee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001af2:	bf00      	nop
 8001af4:	370c      	adds	r7, #12
 8001af6:	46bd      	mov	sp, r7
 8001af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afc:	4770      	bx	lr
 8001afe:	bf00      	nop
 8001b00:	e000e100 	.word	0xe000e100

08001b04 <__NVIC_SetPriority>:
{
 8001b04:	b480      	push	{r7}
 8001b06:	b083      	sub	sp, #12
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	4603      	mov	r3, r0
 8001b0c:	6039      	str	r1, [r7, #0]
 8001b0e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	db0a      	blt.n	8001b2e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b18:	683b      	ldr	r3, [r7, #0]
 8001b1a:	b2da      	uxtb	r2, r3
 8001b1c:	490c      	ldr	r1, [pc, #48]	; (8001b50 <__NVIC_SetPriority+0x4c>)
 8001b1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b22:	0112      	lsls	r2, r2, #4
 8001b24:	b2d2      	uxtb	r2, r2
 8001b26:	440b      	add	r3, r1
 8001b28:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001b2c:	e00a      	b.n	8001b44 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b2e:	683b      	ldr	r3, [r7, #0]
 8001b30:	b2da      	uxtb	r2, r3
 8001b32:	4908      	ldr	r1, [pc, #32]	; (8001b54 <__NVIC_SetPriority+0x50>)
 8001b34:	79fb      	ldrb	r3, [r7, #7]
 8001b36:	f003 030f 	and.w	r3, r3, #15
 8001b3a:	3b04      	subs	r3, #4
 8001b3c:	0112      	lsls	r2, r2, #4
 8001b3e:	b2d2      	uxtb	r2, r2
 8001b40:	440b      	add	r3, r1
 8001b42:	761a      	strb	r2, [r3, #24]
}
 8001b44:	bf00      	nop
 8001b46:	370c      	adds	r7, #12
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4e:	4770      	bx	lr
 8001b50:	e000e100 	.word	0xe000e100
 8001b54:	e000ed00 	.word	0xe000ed00

08001b58 <NVIC_EncodePriority>:
{
 8001b58:	b480      	push	{r7}
 8001b5a:	b089      	sub	sp, #36	; 0x24
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	60f8      	str	r0, [r7, #12]
 8001b60:	60b9      	str	r1, [r7, #8]
 8001b62:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	f003 0307 	and.w	r3, r3, #7
 8001b6a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b6c:	69fb      	ldr	r3, [r7, #28]
 8001b6e:	f1c3 0307 	rsb	r3, r3, #7
 8001b72:	2b04      	cmp	r3, #4
 8001b74:	bf28      	it	cs
 8001b76:	2304      	movcs	r3, #4
 8001b78:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b7a:	69fb      	ldr	r3, [r7, #28]
 8001b7c:	3304      	adds	r3, #4
 8001b7e:	2b06      	cmp	r3, #6
 8001b80:	d902      	bls.n	8001b88 <NVIC_EncodePriority+0x30>
 8001b82:	69fb      	ldr	r3, [r7, #28]
 8001b84:	3b03      	subs	r3, #3
 8001b86:	e000      	b.n	8001b8a <NVIC_EncodePriority+0x32>
 8001b88:	2300      	movs	r3, #0
 8001b8a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b8c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001b90:	69bb      	ldr	r3, [r7, #24]
 8001b92:	fa02 f303 	lsl.w	r3, r2, r3
 8001b96:	43da      	mvns	r2, r3
 8001b98:	68bb      	ldr	r3, [r7, #8]
 8001b9a:	401a      	ands	r2, r3
 8001b9c:	697b      	ldr	r3, [r7, #20]
 8001b9e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ba0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001ba4:	697b      	ldr	r3, [r7, #20]
 8001ba6:	fa01 f303 	lsl.w	r3, r1, r3
 8001baa:	43d9      	mvns	r1, r3
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bb0:	4313      	orrs	r3, r2
}
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	3724      	adds	r7, #36	; 0x24
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bbc:	4770      	bx	lr

08001bbe <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bbe:	b580      	push	{r7, lr}
 8001bc0:	b082      	sub	sp, #8
 8001bc2:	af00      	add	r7, sp, #0
 8001bc4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001bc6:	6878      	ldr	r0, [r7, #4]
 8001bc8:	f7ff ff4c 	bl	8001a64 <__NVIC_SetPriorityGrouping>
}
 8001bcc:	bf00      	nop
 8001bce:	3708      	adds	r7, #8
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	bd80      	pop	{r7, pc}

08001bd4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	b086      	sub	sp, #24
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	4603      	mov	r3, r0
 8001bdc:	60b9      	str	r1, [r7, #8]
 8001bde:	607a      	str	r2, [r7, #4]
 8001be0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001be2:	2300      	movs	r3, #0
 8001be4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001be6:	f7ff ff61 	bl	8001aac <__NVIC_GetPriorityGrouping>
 8001bea:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001bec:	687a      	ldr	r2, [r7, #4]
 8001bee:	68b9      	ldr	r1, [r7, #8]
 8001bf0:	6978      	ldr	r0, [r7, #20]
 8001bf2:	f7ff ffb1 	bl	8001b58 <NVIC_EncodePriority>
 8001bf6:	4602      	mov	r2, r0
 8001bf8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001bfc:	4611      	mov	r1, r2
 8001bfe:	4618      	mov	r0, r3
 8001c00:	f7ff ff80 	bl	8001b04 <__NVIC_SetPriority>
}
 8001c04:	bf00      	nop
 8001c06:	3718      	adds	r7, #24
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	bd80      	pop	{r7, pc}

08001c0c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b082      	sub	sp, #8
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	4603      	mov	r3, r0
 8001c14:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	f7ff ff54 	bl	8001ac8 <__NVIC_EnableIRQ>
}
 8001c20:	bf00      	nop
 8001c22:	3708      	adds	r7, #8
 8001c24:	46bd      	mov	sp, r7
 8001c26:	bd80      	pop	{r7, pc}

08001c28 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b086      	sub	sp, #24
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001c30:	2300      	movs	r3, #0
 8001c32:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001c34:	f7ff ff0a 	bl	8001a4c <HAL_GetTick>
 8001c38:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d101      	bne.n	8001c44 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001c40:	2301      	movs	r3, #1
 8001c42:	e099      	b.n	8001d78 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	2202      	movs	r2, #2
 8001c48:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	2200      	movs	r2, #0
 8001c50:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	681a      	ldr	r2, [r3, #0]
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f022 0201 	bic.w	r2, r2, #1
 8001c62:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001c64:	e00f      	b.n	8001c86 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001c66:	f7ff fef1 	bl	8001a4c <HAL_GetTick>
 8001c6a:	4602      	mov	r2, r0
 8001c6c:	693b      	ldr	r3, [r7, #16]
 8001c6e:	1ad3      	subs	r3, r2, r3
 8001c70:	2b05      	cmp	r3, #5
 8001c72:	d908      	bls.n	8001c86 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	2220      	movs	r2, #32
 8001c78:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	2203      	movs	r2, #3
 8001c7e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001c82:	2303      	movs	r3, #3
 8001c84:	e078      	b.n	8001d78 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	f003 0301 	and.w	r3, r3, #1
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d1e8      	bne.n	8001c66 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001c9c:	697a      	ldr	r2, [r7, #20]
 8001c9e:	4b38      	ldr	r3, [pc, #224]	; (8001d80 <HAL_DMA_Init+0x158>)
 8001ca0:	4013      	ands	r3, r2
 8001ca2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	685a      	ldr	r2, [r3, #4]
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	689b      	ldr	r3, [r3, #8]
 8001cac:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001cb2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	691b      	ldr	r3, [r3, #16]
 8001cb8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001cbe:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	699b      	ldr	r3, [r3, #24]
 8001cc4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001cca:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	6a1b      	ldr	r3, [r3, #32]
 8001cd0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001cd2:	697a      	ldr	r2, [r7, #20]
 8001cd4:	4313      	orrs	r3, r2
 8001cd6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cdc:	2b04      	cmp	r3, #4
 8001cde:	d107      	bne.n	8001cf0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ce8:	4313      	orrs	r3, r2
 8001cea:	697a      	ldr	r2, [r7, #20]
 8001cec:	4313      	orrs	r3, r2
 8001cee:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	697a      	ldr	r2, [r7, #20]
 8001cf6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	695b      	ldr	r3, [r3, #20]
 8001cfe:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001d00:	697b      	ldr	r3, [r7, #20]
 8001d02:	f023 0307 	bic.w	r3, r3, #7
 8001d06:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d0c:	697a      	ldr	r2, [r7, #20]
 8001d0e:	4313      	orrs	r3, r2
 8001d10:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d16:	2b04      	cmp	r3, #4
 8001d18:	d117      	bne.n	8001d4a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d1e:	697a      	ldr	r2, [r7, #20]
 8001d20:	4313      	orrs	r3, r2
 8001d22:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d00e      	beq.n	8001d4a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001d2c:	6878      	ldr	r0, [r7, #4]
 8001d2e:	f000 fb01 	bl	8002334 <DMA_CheckFifoParam>
 8001d32:	4603      	mov	r3, r0
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d008      	beq.n	8001d4a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	2240      	movs	r2, #64	; 0x40
 8001d3c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	2201      	movs	r2, #1
 8001d42:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001d46:	2301      	movs	r3, #1
 8001d48:	e016      	b.n	8001d78 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	697a      	ldr	r2, [r7, #20]
 8001d50:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001d52:	6878      	ldr	r0, [r7, #4]
 8001d54:	f000 fab8 	bl	80022c8 <DMA_CalcBaseAndBitshift>
 8001d58:	4603      	mov	r3, r0
 8001d5a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d60:	223f      	movs	r2, #63	; 0x3f
 8001d62:	409a      	lsls	r2, r3
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	2201      	movs	r2, #1
 8001d72:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001d76:	2300      	movs	r3, #0
}
 8001d78:	4618      	mov	r0, r3
 8001d7a:	3718      	adds	r7, #24
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	bd80      	pop	{r7, pc}
 8001d80:	f010803f 	.word	0xf010803f

08001d84 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	b086      	sub	sp, #24
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	60f8      	str	r0, [r7, #12]
 8001d8c:	60b9      	str	r1, [r7, #8]
 8001d8e:	607a      	str	r2, [r7, #4]
 8001d90:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001d92:	2300      	movs	r3, #0
 8001d94:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d9a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001da2:	2b01      	cmp	r3, #1
 8001da4:	d101      	bne.n	8001daa <HAL_DMA_Start_IT+0x26>
 8001da6:	2302      	movs	r3, #2
 8001da8:	e040      	b.n	8001e2c <HAL_DMA_Start_IT+0xa8>
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	2201      	movs	r2, #1
 8001dae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001db8:	b2db      	uxtb	r3, r3
 8001dba:	2b01      	cmp	r3, #1
 8001dbc:	d12f      	bne.n	8001e1e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	2202      	movs	r2, #2
 8001dc2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	2200      	movs	r2, #0
 8001dca:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001dcc:	683b      	ldr	r3, [r7, #0]
 8001dce:	687a      	ldr	r2, [r7, #4]
 8001dd0:	68b9      	ldr	r1, [r7, #8]
 8001dd2:	68f8      	ldr	r0, [r7, #12]
 8001dd4:	f000 fa4a 	bl	800226c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ddc:	223f      	movs	r2, #63	; 0x3f
 8001dde:	409a      	lsls	r2, r3
 8001de0:	693b      	ldr	r3, [r7, #16]
 8001de2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	681a      	ldr	r2, [r3, #0]
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	f042 0216 	orr.w	r2, r2, #22
 8001df2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d007      	beq.n	8001e0c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	681a      	ldr	r2, [r3, #0]
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f042 0208 	orr.w	r2, r2, #8
 8001e0a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	681a      	ldr	r2, [r3, #0]
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f042 0201 	orr.w	r2, r2, #1
 8001e1a:	601a      	str	r2, [r3, #0]
 8001e1c:	e005      	b.n	8001e2a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	2200      	movs	r2, #0
 8001e22:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001e26:	2302      	movs	r3, #2
 8001e28:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001e2a:	7dfb      	ldrb	r3, [r7, #23]
}
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	3718      	adds	r7, #24
 8001e30:	46bd      	mov	sp, r7
 8001e32:	bd80      	pop	{r7, pc}

08001e34 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b084      	sub	sp, #16
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e40:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001e42:	f7ff fe03 	bl	8001a4c <HAL_GetTick>
 8001e46:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001e4e:	b2db      	uxtb	r3, r3
 8001e50:	2b02      	cmp	r3, #2
 8001e52:	d008      	beq.n	8001e66 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	2280      	movs	r2, #128	; 0x80
 8001e58:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001e62:	2301      	movs	r3, #1
 8001e64:	e052      	b.n	8001f0c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	681a      	ldr	r2, [r3, #0]
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	f022 0216 	bic.w	r2, r2, #22
 8001e74:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	695a      	ldr	r2, [r3, #20]
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001e84:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d103      	bne.n	8001e96 <HAL_DMA_Abort+0x62>
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d007      	beq.n	8001ea6 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	681a      	ldr	r2, [r3, #0]
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f022 0208 	bic.w	r2, r2, #8
 8001ea4:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	681a      	ldr	r2, [r3, #0]
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	f022 0201 	bic.w	r2, r2, #1
 8001eb4:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001eb6:	e013      	b.n	8001ee0 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001eb8:	f7ff fdc8 	bl	8001a4c <HAL_GetTick>
 8001ebc:	4602      	mov	r2, r0
 8001ebe:	68bb      	ldr	r3, [r7, #8]
 8001ec0:	1ad3      	subs	r3, r2, r3
 8001ec2:	2b05      	cmp	r3, #5
 8001ec4:	d90c      	bls.n	8001ee0 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	2220      	movs	r2, #32
 8001eca:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	2203      	movs	r2, #3
 8001ed0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001edc:	2303      	movs	r3, #3
 8001ede:	e015      	b.n	8001f0c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f003 0301 	and.w	r3, r3, #1
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d1e4      	bne.n	8001eb8 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ef2:	223f      	movs	r2, #63	; 0x3f
 8001ef4:	409a      	lsls	r2, r3
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	2201      	movs	r2, #1
 8001efe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	2200      	movs	r2, #0
 8001f06:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001f0a:	2300      	movs	r3, #0
}
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	3710      	adds	r7, #16
 8001f10:	46bd      	mov	sp, r7
 8001f12:	bd80      	pop	{r7, pc}

08001f14 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001f14:	b480      	push	{r7}
 8001f16:	b083      	sub	sp, #12
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001f22:	b2db      	uxtb	r3, r3
 8001f24:	2b02      	cmp	r3, #2
 8001f26:	d004      	beq.n	8001f32 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	2280      	movs	r2, #128	; 0x80
 8001f2c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001f2e:	2301      	movs	r3, #1
 8001f30:	e00c      	b.n	8001f4c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	2205      	movs	r2, #5
 8001f36:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	681a      	ldr	r2, [r3, #0]
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f022 0201 	bic.w	r2, r2, #1
 8001f48:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001f4a:	2300      	movs	r3, #0
}
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	370c      	adds	r7, #12
 8001f50:	46bd      	mov	sp, r7
 8001f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f56:	4770      	bx	lr

08001f58 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b086      	sub	sp, #24
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001f60:	2300      	movs	r3, #0
 8001f62:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001f64:	4b8e      	ldr	r3, [pc, #568]	; (80021a0 <HAL_DMA_IRQHandler+0x248>)
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	4a8e      	ldr	r2, [pc, #568]	; (80021a4 <HAL_DMA_IRQHandler+0x24c>)
 8001f6a:	fba2 2303 	umull	r2, r3, r2, r3
 8001f6e:	0a9b      	lsrs	r3, r3, #10
 8001f70:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f76:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001f78:	693b      	ldr	r3, [r7, #16]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f82:	2208      	movs	r2, #8
 8001f84:	409a      	lsls	r2, r3
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	4013      	ands	r3, r2
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d01a      	beq.n	8001fc4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f003 0304 	and.w	r3, r3, #4
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d013      	beq.n	8001fc4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	681a      	ldr	r2, [r3, #0]
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f022 0204 	bic.w	r2, r2, #4
 8001faa:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fb0:	2208      	movs	r2, #8
 8001fb2:	409a      	lsls	r2, r3
 8001fb4:	693b      	ldr	r3, [r7, #16]
 8001fb6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fbc:	f043 0201 	orr.w	r2, r3, #1
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fc8:	2201      	movs	r2, #1
 8001fca:	409a      	lsls	r2, r3
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	4013      	ands	r3, r2
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d012      	beq.n	8001ffa <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	695b      	ldr	r3, [r3, #20]
 8001fda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d00b      	beq.n	8001ffa <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fe6:	2201      	movs	r2, #1
 8001fe8:	409a      	lsls	r2, r3
 8001fea:	693b      	ldr	r3, [r7, #16]
 8001fec:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ff2:	f043 0202 	orr.w	r2, r3, #2
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ffe:	2204      	movs	r2, #4
 8002000:	409a      	lsls	r2, r3
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	4013      	ands	r3, r2
 8002006:	2b00      	cmp	r3, #0
 8002008:	d012      	beq.n	8002030 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	f003 0302 	and.w	r3, r3, #2
 8002014:	2b00      	cmp	r3, #0
 8002016:	d00b      	beq.n	8002030 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800201c:	2204      	movs	r2, #4
 800201e:	409a      	lsls	r2, r3
 8002020:	693b      	ldr	r3, [r7, #16]
 8002022:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002028:	f043 0204 	orr.w	r2, r3, #4
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002034:	2210      	movs	r2, #16
 8002036:	409a      	lsls	r2, r3
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	4013      	ands	r3, r2
 800203c:	2b00      	cmp	r3, #0
 800203e:	d043      	beq.n	80020c8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f003 0308 	and.w	r3, r3, #8
 800204a:	2b00      	cmp	r3, #0
 800204c:	d03c      	beq.n	80020c8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002052:	2210      	movs	r2, #16
 8002054:	409a      	lsls	r2, r3
 8002056:	693b      	ldr	r3, [r7, #16]
 8002058:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002064:	2b00      	cmp	r3, #0
 8002066:	d018      	beq.n	800209a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002072:	2b00      	cmp	r3, #0
 8002074:	d108      	bne.n	8002088 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800207a:	2b00      	cmp	r3, #0
 800207c:	d024      	beq.n	80020c8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002082:	6878      	ldr	r0, [r7, #4]
 8002084:	4798      	blx	r3
 8002086:	e01f      	b.n	80020c8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800208c:	2b00      	cmp	r3, #0
 800208e:	d01b      	beq.n	80020c8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002094:	6878      	ldr	r0, [r7, #4]
 8002096:	4798      	blx	r3
 8002098:	e016      	b.n	80020c8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d107      	bne.n	80020b8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	681a      	ldr	r2, [r3, #0]
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f022 0208 	bic.w	r2, r2, #8
 80020b6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d003      	beq.n	80020c8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020c4:	6878      	ldr	r0, [r7, #4]
 80020c6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020cc:	2220      	movs	r2, #32
 80020ce:	409a      	lsls	r2, r3
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	4013      	ands	r3, r2
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	f000 808f 	beq.w	80021f8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f003 0310 	and.w	r3, r3, #16
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	f000 8087 	beq.w	80021f8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020ee:	2220      	movs	r2, #32
 80020f0:	409a      	lsls	r2, r3
 80020f2:	693b      	ldr	r3, [r7, #16]
 80020f4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80020fc:	b2db      	uxtb	r3, r3
 80020fe:	2b05      	cmp	r3, #5
 8002100:	d136      	bne.n	8002170 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	681a      	ldr	r2, [r3, #0]
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f022 0216 	bic.w	r2, r2, #22
 8002110:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	695a      	ldr	r2, [r3, #20]
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002120:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002126:	2b00      	cmp	r3, #0
 8002128:	d103      	bne.n	8002132 <HAL_DMA_IRQHandler+0x1da>
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800212e:	2b00      	cmp	r3, #0
 8002130:	d007      	beq.n	8002142 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	681a      	ldr	r2, [r3, #0]
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	f022 0208 	bic.w	r2, r2, #8
 8002140:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002146:	223f      	movs	r2, #63	; 0x3f
 8002148:	409a      	lsls	r2, r3
 800214a:	693b      	ldr	r3, [r7, #16]
 800214c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	2201      	movs	r2, #1
 8002152:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	2200      	movs	r2, #0
 800215a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002162:	2b00      	cmp	r3, #0
 8002164:	d07e      	beq.n	8002264 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800216a:	6878      	ldr	r0, [r7, #4]
 800216c:	4798      	blx	r3
        }
        return;
 800216e:	e079      	b.n	8002264 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800217a:	2b00      	cmp	r3, #0
 800217c:	d01d      	beq.n	80021ba <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002188:	2b00      	cmp	r3, #0
 800218a:	d10d      	bne.n	80021a8 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002190:	2b00      	cmp	r3, #0
 8002192:	d031      	beq.n	80021f8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002198:	6878      	ldr	r0, [r7, #4]
 800219a:	4798      	blx	r3
 800219c:	e02c      	b.n	80021f8 <HAL_DMA_IRQHandler+0x2a0>
 800219e:	bf00      	nop
 80021a0:	20000004 	.word	0x20000004
 80021a4:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d023      	beq.n	80021f8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021b4:	6878      	ldr	r0, [r7, #4]
 80021b6:	4798      	blx	r3
 80021b8:	e01e      	b.n	80021f8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d10f      	bne.n	80021e8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	681a      	ldr	r2, [r3, #0]
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f022 0210 	bic.w	r2, r2, #16
 80021d6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	2201      	movs	r2, #1
 80021dc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	2200      	movs	r2, #0
 80021e4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d003      	beq.n	80021f8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021f4:	6878      	ldr	r0, [r7, #4]
 80021f6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d032      	beq.n	8002266 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002204:	f003 0301 	and.w	r3, r3, #1
 8002208:	2b00      	cmp	r3, #0
 800220a:	d022      	beq.n	8002252 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	2205      	movs	r2, #5
 8002210:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	681a      	ldr	r2, [r3, #0]
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f022 0201 	bic.w	r2, r2, #1
 8002222:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002224:	68bb      	ldr	r3, [r7, #8]
 8002226:	3301      	adds	r3, #1
 8002228:	60bb      	str	r3, [r7, #8]
 800222a:	697a      	ldr	r2, [r7, #20]
 800222c:	429a      	cmp	r2, r3
 800222e:	d307      	bcc.n	8002240 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f003 0301 	and.w	r3, r3, #1
 800223a:	2b00      	cmp	r3, #0
 800223c:	d1f2      	bne.n	8002224 <HAL_DMA_IRQHandler+0x2cc>
 800223e:	e000      	b.n	8002242 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002240:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	2201      	movs	r2, #1
 8002246:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	2200      	movs	r2, #0
 800224e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002256:	2b00      	cmp	r3, #0
 8002258:	d005      	beq.n	8002266 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800225e:	6878      	ldr	r0, [r7, #4]
 8002260:	4798      	blx	r3
 8002262:	e000      	b.n	8002266 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002264:	bf00      	nop
    }
  }
}
 8002266:	3718      	adds	r7, #24
 8002268:	46bd      	mov	sp, r7
 800226a:	bd80      	pop	{r7, pc}

0800226c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800226c:	b480      	push	{r7}
 800226e:	b085      	sub	sp, #20
 8002270:	af00      	add	r7, sp, #0
 8002272:	60f8      	str	r0, [r7, #12]
 8002274:	60b9      	str	r1, [r7, #8]
 8002276:	607a      	str	r2, [r7, #4]
 8002278:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	681a      	ldr	r2, [r3, #0]
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002288:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	683a      	ldr	r2, [r7, #0]
 8002290:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	689b      	ldr	r3, [r3, #8]
 8002296:	2b40      	cmp	r3, #64	; 0x40
 8002298:	d108      	bne.n	80022ac <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	687a      	ldr	r2, [r7, #4]
 80022a0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	68ba      	ldr	r2, [r7, #8]
 80022a8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80022aa:	e007      	b.n	80022bc <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	68ba      	ldr	r2, [r7, #8]
 80022b2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	687a      	ldr	r2, [r7, #4]
 80022ba:	60da      	str	r2, [r3, #12]
}
 80022bc:	bf00      	nop
 80022be:	3714      	adds	r7, #20
 80022c0:	46bd      	mov	sp, r7
 80022c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c6:	4770      	bx	lr

080022c8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80022c8:	b480      	push	{r7}
 80022ca:	b085      	sub	sp, #20
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	b2db      	uxtb	r3, r3
 80022d6:	3b10      	subs	r3, #16
 80022d8:	4a14      	ldr	r2, [pc, #80]	; (800232c <DMA_CalcBaseAndBitshift+0x64>)
 80022da:	fba2 2303 	umull	r2, r3, r2, r3
 80022de:	091b      	lsrs	r3, r3, #4
 80022e0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80022e2:	4a13      	ldr	r2, [pc, #76]	; (8002330 <DMA_CalcBaseAndBitshift+0x68>)
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	4413      	add	r3, r2
 80022e8:	781b      	ldrb	r3, [r3, #0]
 80022ea:	461a      	mov	r2, r3
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	2b03      	cmp	r3, #3
 80022f4:	d909      	bls.n	800230a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80022fe:	f023 0303 	bic.w	r3, r3, #3
 8002302:	1d1a      	adds	r2, r3, #4
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	659a      	str	r2, [r3, #88]	; 0x58
 8002308:	e007      	b.n	800231a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002312:	f023 0303 	bic.w	r3, r3, #3
 8002316:	687a      	ldr	r2, [r7, #4]
 8002318:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800231e:	4618      	mov	r0, r3
 8002320:	3714      	adds	r7, #20
 8002322:	46bd      	mov	sp, r7
 8002324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002328:	4770      	bx	lr
 800232a:	bf00      	nop
 800232c:	aaaaaaab 	.word	0xaaaaaaab
 8002330:	08011fe8 	.word	0x08011fe8

08002334 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002334:	b480      	push	{r7}
 8002336:	b085      	sub	sp, #20
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800233c:	2300      	movs	r3, #0
 800233e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002344:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	699b      	ldr	r3, [r3, #24]
 800234a:	2b00      	cmp	r3, #0
 800234c:	d11f      	bne.n	800238e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800234e:	68bb      	ldr	r3, [r7, #8]
 8002350:	2b03      	cmp	r3, #3
 8002352:	d856      	bhi.n	8002402 <DMA_CheckFifoParam+0xce>
 8002354:	a201      	add	r2, pc, #4	; (adr r2, 800235c <DMA_CheckFifoParam+0x28>)
 8002356:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800235a:	bf00      	nop
 800235c:	0800236d 	.word	0x0800236d
 8002360:	0800237f 	.word	0x0800237f
 8002364:	0800236d 	.word	0x0800236d
 8002368:	08002403 	.word	0x08002403
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002370:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002374:	2b00      	cmp	r3, #0
 8002376:	d046      	beq.n	8002406 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002378:	2301      	movs	r3, #1
 800237a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800237c:	e043      	b.n	8002406 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002382:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002386:	d140      	bne.n	800240a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002388:	2301      	movs	r3, #1
 800238a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800238c:	e03d      	b.n	800240a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	699b      	ldr	r3, [r3, #24]
 8002392:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002396:	d121      	bne.n	80023dc <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002398:	68bb      	ldr	r3, [r7, #8]
 800239a:	2b03      	cmp	r3, #3
 800239c:	d837      	bhi.n	800240e <DMA_CheckFifoParam+0xda>
 800239e:	a201      	add	r2, pc, #4	; (adr r2, 80023a4 <DMA_CheckFifoParam+0x70>)
 80023a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023a4:	080023b5 	.word	0x080023b5
 80023a8:	080023bb 	.word	0x080023bb
 80023ac:	080023b5 	.word	0x080023b5
 80023b0:	080023cd 	.word	0x080023cd
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80023b4:	2301      	movs	r3, #1
 80023b6:	73fb      	strb	r3, [r7, #15]
      break;
 80023b8:	e030      	b.n	800241c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023be:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d025      	beq.n	8002412 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80023c6:	2301      	movs	r3, #1
 80023c8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80023ca:	e022      	b.n	8002412 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023d0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80023d4:	d11f      	bne.n	8002416 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80023d6:	2301      	movs	r3, #1
 80023d8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80023da:	e01c      	b.n	8002416 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80023dc:	68bb      	ldr	r3, [r7, #8]
 80023de:	2b02      	cmp	r3, #2
 80023e0:	d903      	bls.n	80023ea <DMA_CheckFifoParam+0xb6>
 80023e2:	68bb      	ldr	r3, [r7, #8]
 80023e4:	2b03      	cmp	r3, #3
 80023e6:	d003      	beq.n	80023f0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80023e8:	e018      	b.n	800241c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80023ea:	2301      	movs	r3, #1
 80023ec:	73fb      	strb	r3, [r7, #15]
      break;
 80023ee:	e015      	b.n	800241c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023f4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d00e      	beq.n	800241a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80023fc:	2301      	movs	r3, #1
 80023fe:	73fb      	strb	r3, [r7, #15]
      break;
 8002400:	e00b      	b.n	800241a <DMA_CheckFifoParam+0xe6>
      break;
 8002402:	bf00      	nop
 8002404:	e00a      	b.n	800241c <DMA_CheckFifoParam+0xe8>
      break;
 8002406:	bf00      	nop
 8002408:	e008      	b.n	800241c <DMA_CheckFifoParam+0xe8>
      break;
 800240a:	bf00      	nop
 800240c:	e006      	b.n	800241c <DMA_CheckFifoParam+0xe8>
      break;
 800240e:	bf00      	nop
 8002410:	e004      	b.n	800241c <DMA_CheckFifoParam+0xe8>
      break;
 8002412:	bf00      	nop
 8002414:	e002      	b.n	800241c <DMA_CheckFifoParam+0xe8>
      break;   
 8002416:	bf00      	nop
 8002418:	e000      	b.n	800241c <DMA_CheckFifoParam+0xe8>
      break;
 800241a:	bf00      	nop
    }
  } 
  
  return status; 
 800241c:	7bfb      	ldrb	r3, [r7, #15]
}
 800241e:	4618      	mov	r0, r3
 8002420:	3714      	adds	r7, #20
 8002422:	46bd      	mov	sp, r7
 8002424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002428:	4770      	bx	lr
 800242a:	bf00      	nop

0800242c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800242c:	b480      	push	{r7}
 800242e:	b089      	sub	sp, #36	; 0x24
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]
 8002434:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002436:	2300      	movs	r3, #0
 8002438:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800243a:	2300      	movs	r3, #0
 800243c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800243e:	2300      	movs	r3, #0
 8002440:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002442:	2300      	movs	r3, #0
 8002444:	61fb      	str	r3, [r7, #28]
 8002446:	e165      	b.n	8002714 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002448:	2201      	movs	r2, #1
 800244a:	69fb      	ldr	r3, [r7, #28]
 800244c:	fa02 f303 	lsl.w	r3, r2, r3
 8002450:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002452:	683b      	ldr	r3, [r7, #0]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	697a      	ldr	r2, [r7, #20]
 8002458:	4013      	ands	r3, r2
 800245a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800245c:	693a      	ldr	r2, [r7, #16]
 800245e:	697b      	ldr	r3, [r7, #20]
 8002460:	429a      	cmp	r2, r3
 8002462:	f040 8154 	bne.w	800270e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002466:	683b      	ldr	r3, [r7, #0]
 8002468:	685b      	ldr	r3, [r3, #4]
 800246a:	f003 0303 	and.w	r3, r3, #3
 800246e:	2b01      	cmp	r3, #1
 8002470:	d005      	beq.n	800247e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002472:	683b      	ldr	r3, [r7, #0]
 8002474:	685b      	ldr	r3, [r3, #4]
 8002476:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800247a:	2b02      	cmp	r3, #2
 800247c:	d130      	bne.n	80024e0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	689b      	ldr	r3, [r3, #8]
 8002482:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002484:	69fb      	ldr	r3, [r7, #28]
 8002486:	005b      	lsls	r3, r3, #1
 8002488:	2203      	movs	r2, #3
 800248a:	fa02 f303 	lsl.w	r3, r2, r3
 800248e:	43db      	mvns	r3, r3
 8002490:	69ba      	ldr	r2, [r7, #24]
 8002492:	4013      	ands	r3, r2
 8002494:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002496:	683b      	ldr	r3, [r7, #0]
 8002498:	68da      	ldr	r2, [r3, #12]
 800249a:	69fb      	ldr	r3, [r7, #28]
 800249c:	005b      	lsls	r3, r3, #1
 800249e:	fa02 f303 	lsl.w	r3, r2, r3
 80024a2:	69ba      	ldr	r2, [r7, #24]
 80024a4:	4313      	orrs	r3, r2
 80024a6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	69ba      	ldr	r2, [r7, #24]
 80024ac:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	685b      	ldr	r3, [r3, #4]
 80024b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80024b4:	2201      	movs	r2, #1
 80024b6:	69fb      	ldr	r3, [r7, #28]
 80024b8:	fa02 f303 	lsl.w	r3, r2, r3
 80024bc:	43db      	mvns	r3, r3
 80024be:	69ba      	ldr	r2, [r7, #24]
 80024c0:	4013      	ands	r3, r2
 80024c2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80024c4:	683b      	ldr	r3, [r7, #0]
 80024c6:	685b      	ldr	r3, [r3, #4]
 80024c8:	091b      	lsrs	r3, r3, #4
 80024ca:	f003 0201 	and.w	r2, r3, #1
 80024ce:	69fb      	ldr	r3, [r7, #28]
 80024d0:	fa02 f303 	lsl.w	r3, r2, r3
 80024d4:	69ba      	ldr	r2, [r7, #24]
 80024d6:	4313      	orrs	r3, r2
 80024d8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	69ba      	ldr	r2, [r7, #24]
 80024de:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80024e0:	683b      	ldr	r3, [r7, #0]
 80024e2:	685b      	ldr	r3, [r3, #4]
 80024e4:	f003 0303 	and.w	r3, r3, #3
 80024e8:	2b03      	cmp	r3, #3
 80024ea:	d017      	beq.n	800251c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	68db      	ldr	r3, [r3, #12]
 80024f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80024f2:	69fb      	ldr	r3, [r7, #28]
 80024f4:	005b      	lsls	r3, r3, #1
 80024f6:	2203      	movs	r2, #3
 80024f8:	fa02 f303 	lsl.w	r3, r2, r3
 80024fc:	43db      	mvns	r3, r3
 80024fe:	69ba      	ldr	r2, [r7, #24]
 8002500:	4013      	ands	r3, r2
 8002502:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002504:	683b      	ldr	r3, [r7, #0]
 8002506:	689a      	ldr	r2, [r3, #8]
 8002508:	69fb      	ldr	r3, [r7, #28]
 800250a:	005b      	lsls	r3, r3, #1
 800250c:	fa02 f303 	lsl.w	r3, r2, r3
 8002510:	69ba      	ldr	r2, [r7, #24]
 8002512:	4313      	orrs	r3, r2
 8002514:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	69ba      	ldr	r2, [r7, #24]
 800251a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800251c:	683b      	ldr	r3, [r7, #0]
 800251e:	685b      	ldr	r3, [r3, #4]
 8002520:	f003 0303 	and.w	r3, r3, #3
 8002524:	2b02      	cmp	r3, #2
 8002526:	d123      	bne.n	8002570 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002528:	69fb      	ldr	r3, [r7, #28]
 800252a:	08da      	lsrs	r2, r3, #3
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	3208      	adds	r2, #8
 8002530:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002534:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002536:	69fb      	ldr	r3, [r7, #28]
 8002538:	f003 0307 	and.w	r3, r3, #7
 800253c:	009b      	lsls	r3, r3, #2
 800253e:	220f      	movs	r2, #15
 8002540:	fa02 f303 	lsl.w	r3, r2, r3
 8002544:	43db      	mvns	r3, r3
 8002546:	69ba      	ldr	r2, [r7, #24]
 8002548:	4013      	ands	r3, r2
 800254a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800254c:	683b      	ldr	r3, [r7, #0]
 800254e:	691a      	ldr	r2, [r3, #16]
 8002550:	69fb      	ldr	r3, [r7, #28]
 8002552:	f003 0307 	and.w	r3, r3, #7
 8002556:	009b      	lsls	r3, r3, #2
 8002558:	fa02 f303 	lsl.w	r3, r2, r3
 800255c:	69ba      	ldr	r2, [r7, #24]
 800255e:	4313      	orrs	r3, r2
 8002560:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002562:	69fb      	ldr	r3, [r7, #28]
 8002564:	08da      	lsrs	r2, r3, #3
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	3208      	adds	r2, #8
 800256a:	69b9      	ldr	r1, [r7, #24]
 800256c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002576:	69fb      	ldr	r3, [r7, #28]
 8002578:	005b      	lsls	r3, r3, #1
 800257a:	2203      	movs	r2, #3
 800257c:	fa02 f303 	lsl.w	r3, r2, r3
 8002580:	43db      	mvns	r3, r3
 8002582:	69ba      	ldr	r2, [r7, #24]
 8002584:	4013      	ands	r3, r2
 8002586:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002588:	683b      	ldr	r3, [r7, #0]
 800258a:	685b      	ldr	r3, [r3, #4]
 800258c:	f003 0203 	and.w	r2, r3, #3
 8002590:	69fb      	ldr	r3, [r7, #28]
 8002592:	005b      	lsls	r3, r3, #1
 8002594:	fa02 f303 	lsl.w	r3, r2, r3
 8002598:	69ba      	ldr	r2, [r7, #24]
 800259a:	4313      	orrs	r3, r2
 800259c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	69ba      	ldr	r2, [r7, #24]
 80025a2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80025a4:	683b      	ldr	r3, [r7, #0]
 80025a6:	685b      	ldr	r3, [r3, #4]
 80025a8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	f000 80ae 	beq.w	800270e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80025b2:	2300      	movs	r3, #0
 80025b4:	60fb      	str	r3, [r7, #12]
 80025b6:	4b5d      	ldr	r3, [pc, #372]	; (800272c <HAL_GPIO_Init+0x300>)
 80025b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025ba:	4a5c      	ldr	r2, [pc, #368]	; (800272c <HAL_GPIO_Init+0x300>)
 80025bc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80025c0:	6453      	str	r3, [r2, #68]	; 0x44
 80025c2:	4b5a      	ldr	r3, [pc, #360]	; (800272c <HAL_GPIO_Init+0x300>)
 80025c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80025ca:	60fb      	str	r3, [r7, #12]
 80025cc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80025ce:	4a58      	ldr	r2, [pc, #352]	; (8002730 <HAL_GPIO_Init+0x304>)
 80025d0:	69fb      	ldr	r3, [r7, #28]
 80025d2:	089b      	lsrs	r3, r3, #2
 80025d4:	3302      	adds	r3, #2
 80025d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025da:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80025dc:	69fb      	ldr	r3, [r7, #28]
 80025de:	f003 0303 	and.w	r3, r3, #3
 80025e2:	009b      	lsls	r3, r3, #2
 80025e4:	220f      	movs	r2, #15
 80025e6:	fa02 f303 	lsl.w	r3, r2, r3
 80025ea:	43db      	mvns	r3, r3
 80025ec:	69ba      	ldr	r2, [r7, #24]
 80025ee:	4013      	ands	r3, r2
 80025f0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	4a4f      	ldr	r2, [pc, #316]	; (8002734 <HAL_GPIO_Init+0x308>)
 80025f6:	4293      	cmp	r3, r2
 80025f8:	d025      	beq.n	8002646 <HAL_GPIO_Init+0x21a>
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	4a4e      	ldr	r2, [pc, #312]	; (8002738 <HAL_GPIO_Init+0x30c>)
 80025fe:	4293      	cmp	r3, r2
 8002600:	d01f      	beq.n	8002642 <HAL_GPIO_Init+0x216>
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	4a4d      	ldr	r2, [pc, #308]	; (800273c <HAL_GPIO_Init+0x310>)
 8002606:	4293      	cmp	r3, r2
 8002608:	d019      	beq.n	800263e <HAL_GPIO_Init+0x212>
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	4a4c      	ldr	r2, [pc, #304]	; (8002740 <HAL_GPIO_Init+0x314>)
 800260e:	4293      	cmp	r3, r2
 8002610:	d013      	beq.n	800263a <HAL_GPIO_Init+0x20e>
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	4a4b      	ldr	r2, [pc, #300]	; (8002744 <HAL_GPIO_Init+0x318>)
 8002616:	4293      	cmp	r3, r2
 8002618:	d00d      	beq.n	8002636 <HAL_GPIO_Init+0x20a>
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	4a4a      	ldr	r2, [pc, #296]	; (8002748 <HAL_GPIO_Init+0x31c>)
 800261e:	4293      	cmp	r3, r2
 8002620:	d007      	beq.n	8002632 <HAL_GPIO_Init+0x206>
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	4a49      	ldr	r2, [pc, #292]	; (800274c <HAL_GPIO_Init+0x320>)
 8002626:	4293      	cmp	r3, r2
 8002628:	d101      	bne.n	800262e <HAL_GPIO_Init+0x202>
 800262a:	2306      	movs	r3, #6
 800262c:	e00c      	b.n	8002648 <HAL_GPIO_Init+0x21c>
 800262e:	2307      	movs	r3, #7
 8002630:	e00a      	b.n	8002648 <HAL_GPIO_Init+0x21c>
 8002632:	2305      	movs	r3, #5
 8002634:	e008      	b.n	8002648 <HAL_GPIO_Init+0x21c>
 8002636:	2304      	movs	r3, #4
 8002638:	e006      	b.n	8002648 <HAL_GPIO_Init+0x21c>
 800263a:	2303      	movs	r3, #3
 800263c:	e004      	b.n	8002648 <HAL_GPIO_Init+0x21c>
 800263e:	2302      	movs	r3, #2
 8002640:	e002      	b.n	8002648 <HAL_GPIO_Init+0x21c>
 8002642:	2301      	movs	r3, #1
 8002644:	e000      	b.n	8002648 <HAL_GPIO_Init+0x21c>
 8002646:	2300      	movs	r3, #0
 8002648:	69fa      	ldr	r2, [r7, #28]
 800264a:	f002 0203 	and.w	r2, r2, #3
 800264e:	0092      	lsls	r2, r2, #2
 8002650:	4093      	lsls	r3, r2
 8002652:	69ba      	ldr	r2, [r7, #24]
 8002654:	4313      	orrs	r3, r2
 8002656:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002658:	4935      	ldr	r1, [pc, #212]	; (8002730 <HAL_GPIO_Init+0x304>)
 800265a:	69fb      	ldr	r3, [r7, #28]
 800265c:	089b      	lsrs	r3, r3, #2
 800265e:	3302      	adds	r3, #2
 8002660:	69ba      	ldr	r2, [r7, #24]
 8002662:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002666:	4b3a      	ldr	r3, [pc, #232]	; (8002750 <HAL_GPIO_Init+0x324>)
 8002668:	689b      	ldr	r3, [r3, #8]
 800266a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800266c:	693b      	ldr	r3, [r7, #16]
 800266e:	43db      	mvns	r3, r3
 8002670:	69ba      	ldr	r2, [r7, #24]
 8002672:	4013      	ands	r3, r2
 8002674:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002676:	683b      	ldr	r3, [r7, #0]
 8002678:	685b      	ldr	r3, [r3, #4]
 800267a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800267e:	2b00      	cmp	r3, #0
 8002680:	d003      	beq.n	800268a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8002682:	69ba      	ldr	r2, [r7, #24]
 8002684:	693b      	ldr	r3, [r7, #16]
 8002686:	4313      	orrs	r3, r2
 8002688:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800268a:	4a31      	ldr	r2, [pc, #196]	; (8002750 <HAL_GPIO_Init+0x324>)
 800268c:	69bb      	ldr	r3, [r7, #24]
 800268e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002690:	4b2f      	ldr	r3, [pc, #188]	; (8002750 <HAL_GPIO_Init+0x324>)
 8002692:	68db      	ldr	r3, [r3, #12]
 8002694:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002696:	693b      	ldr	r3, [r7, #16]
 8002698:	43db      	mvns	r3, r3
 800269a:	69ba      	ldr	r2, [r7, #24]
 800269c:	4013      	ands	r3, r2
 800269e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80026a0:	683b      	ldr	r3, [r7, #0]
 80026a2:	685b      	ldr	r3, [r3, #4]
 80026a4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d003      	beq.n	80026b4 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80026ac:	69ba      	ldr	r2, [r7, #24]
 80026ae:	693b      	ldr	r3, [r7, #16]
 80026b0:	4313      	orrs	r3, r2
 80026b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80026b4:	4a26      	ldr	r2, [pc, #152]	; (8002750 <HAL_GPIO_Init+0x324>)
 80026b6:	69bb      	ldr	r3, [r7, #24]
 80026b8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80026ba:	4b25      	ldr	r3, [pc, #148]	; (8002750 <HAL_GPIO_Init+0x324>)
 80026bc:	685b      	ldr	r3, [r3, #4]
 80026be:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026c0:	693b      	ldr	r3, [r7, #16]
 80026c2:	43db      	mvns	r3, r3
 80026c4:	69ba      	ldr	r2, [r7, #24]
 80026c6:	4013      	ands	r3, r2
 80026c8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80026ca:	683b      	ldr	r3, [r7, #0]
 80026cc:	685b      	ldr	r3, [r3, #4]
 80026ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d003      	beq.n	80026de <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80026d6:	69ba      	ldr	r2, [r7, #24]
 80026d8:	693b      	ldr	r3, [r7, #16]
 80026da:	4313      	orrs	r3, r2
 80026dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80026de:	4a1c      	ldr	r2, [pc, #112]	; (8002750 <HAL_GPIO_Init+0x324>)
 80026e0:	69bb      	ldr	r3, [r7, #24]
 80026e2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80026e4:	4b1a      	ldr	r3, [pc, #104]	; (8002750 <HAL_GPIO_Init+0x324>)
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026ea:	693b      	ldr	r3, [r7, #16]
 80026ec:	43db      	mvns	r3, r3
 80026ee:	69ba      	ldr	r2, [r7, #24]
 80026f0:	4013      	ands	r3, r2
 80026f2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80026f4:	683b      	ldr	r3, [r7, #0]
 80026f6:	685b      	ldr	r3, [r3, #4]
 80026f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d003      	beq.n	8002708 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002700:	69ba      	ldr	r2, [r7, #24]
 8002702:	693b      	ldr	r3, [r7, #16]
 8002704:	4313      	orrs	r3, r2
 8002706:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002708:	4a11      	ldr	r2, [pc, #68]	; (8002750 <HAL_GPIO_Init+0x324>)
 800270a:	69bb      	ldr	r3, [r7, #24]
 800270c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800270e:	69fb      	ldr	r3, [r7, #28]
 8002710:	3301      	adds	r3, #1
 8002712:	61fb      	str	r3, [r7, #28]
 8002714:	69fb      	ldr	r3, [r7, #28]
 8002716:	2b0f      	cmp	r3, #15
 8002718:	f67f ae96 	bls.w	8002448 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800271c:	bf00      	nop
 800271e:	bf00      	nop
 8002720:	3724      	adds	r7, #36	; 0x24
 8002722:	46bd      	mov	sp, r7
 8002724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002728:	4770      	bx	lr
 800272a:	bf00      	nop
 800272c:	40023800 	.word	0x40023800
 8002730:	40013800 	.word	0x40013800
 8002734:	40020000 	.word	0x40020000
 8002738:	40020400 	.word	0x40020400
 800273c:	40020800 	.word	0x40020800
 8002740:	40020c00 	.word	0x40020c00
 8002744:	40021000 	.word	0x40021000
 8002748:	40021400 	.word	0x40021400
 800274c:	40021800 	.word	0x40021800
 8002750:	40013c00 	.word	0x40013c00

08002754 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002754:	b480      	push	{r7}
 8002756:	b083      	sub	sp, #12
 8002758:	af00      	add	r7, sp, #0
 800275a:	6078      	str	r0, [r7, #4]
 800275c:	460b      	mov	r3, r1
 800275e:	807b      	strh	r3, [r7, #2]
 8002760:	4613      	mov	r3, r2
 8002762:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002764:	787b      	ldrb	r3, [r7, #1]
 8002766:	2b00      	cmp	r3, #0
 8002768:	d003      	beq.n	8002772 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800276a:	887a      	ldrh	r2, [r7, #2]
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002770:	e003      	b.n	800277a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002772:	887b      	ldrh	r3, [r7, #2]
 8002774:	041a      	lsls	r2, r3, #16
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	619a      	str	r2, [r3, #24]
}
 800277a:	bf00      	nop
 800277c:	370c      	adds	r7, #12
 800277e:	46bd      	mov	sp, r7
 8002780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002784:	4770      	bx	lr
	...

08002788 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002788:	b580      	push	{r7, lr}
 800278a:	b084      	sub	sp, #16
 800278c:	af00      	add	r7, sp, #0
 800278e:	6078      	str	r0, [r7, #4]
 8002790:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	2b00      	cmp	r3, #0
 8002796:	d101      	bne.n	800279c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002798:	2301      	movs	r3, #1
 800279a:	e0cc      	b.n	8002936 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800279c:	4b68      	ldr	r3, [pc, #416]	; (8002940 <HAL_RCC_ClockConfig+0x1b8>)
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f003 030f 	and.w	r3, r3, #15
 80027a4:	683a      	ldr	r2, [r7, #0]
 80027a6:	429a      	cmp	r2, r3
 80027a8:	d90c      	bls.n	80027c4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027aa:	4b65      	ldr	r3, [pc, #404]	; (8002940 <HAL_RCC_ClockConfig+0x1b8>)
 80027ac:	683a      	ldr	r2, [r7, #0]
 80027ae:	b2d2      	uxtb	r2, r2
 80027b0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80027b2:	4b63      	ldr	r3, [pc, #396]	; (8002940 <HAL_RCC_ClockConfig+0x1b8>)
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f003 030f 	and.w	r3, r3, #15
 80027ba:	683a      	ldr	r2, [r7, #0]
 80027bc:	429a      	cmp	r2, r3
 80027be:	d001      	beq.n	80027c4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80027c0:	2301      	movs	r3, #1
 80027c2:	e0b8      	b.n	8002936 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f003 0302 	and.w	r3, r3, #2
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d020      	beq.n	8002812 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f003 0304 	and.w	r3, r3, #4
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d005      	beq.n	80027e8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80027dc:	4b59      	ldr	r3, [pc, #356]	; (8002944 <HAL_RCC_ClockConfig+0x1bc>)
 80027de:	689b      	ldr	r3, [r3, #8]
 80027e0:	4a58      	ldr	r2, [pc, #352]	; (8002944 <HAL_RCC_ClockConfig+0x1bc>)
 80027e2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80027e6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f003 0308 	and.w	r3, r3, #8
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d005      	beq.n	8002800 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80027f4:	4b53      	ldr	r3, [pc, #332]	; (8002944 <HAL_RCC_ClockConfig+0x1bc>)
 80027f6:	689b      	ldr	r3, [r3, #8]
 80027f8:	4a52      	ldr	r2, [pc, #328]	; (8002944 <HAL_RCC_ClockConfig+0x1bc>)
 80027fa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80027fe:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002800:	4b50      	ldr	r3, [pc, #320]	; (8002944 <HAL_RCC_ClockConfig+0x1bc>)
 8002802:	689b      	ldr	r3, [r3, #8]
 8002804:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	689b      	ldr	r3, [r3, #8]
 800280c:	494d      	ldr	r1, [pc, #308]	; (8002944 <HAL_RCC_ClockConfig+0x1bc>)
 800280e:	4313      	orrs	r3, r2
 8002810:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f003 0301 	and.w	r3, r3, #1
 800281a:	2b00      	cmp	r3, #0
 800281c:	d044      	beq.n	80028a8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	685b      	ldr	r3, [r3, #4]
 8002822:	2b01      	cmp	r3, #1
 8002824:	d107      	bne.n	8002836 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002826:	4b47      	ldr	r3, [pc, #284]	; (8002944 <HAL_RCC_ClockConfig+0x1bc>)
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800282e:	2b00      	cmp	r3, #0
 8002830:	d119      	bne.n	8002866 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002832:	2301      	movs	r3, #1
 8002834:	e07f      	b.n	8002936 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	685b      	ldr	r3, [r3, #4]
 800283a:	2b02      	cmp	r3, #2
 800283c:	d003      	beq.n	8002846 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002842:	2b03      	cmp	r3, #3
 8002844:	d107      	bne.n	8002856 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002846:	4b3f      	ldr	r3, [pc, #252]	; (8002944 <HAL_RCC_ClockConfig+0x1bc>)
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800284e:	2b00      	cmp	r3, #0
 8002850:	d109      	bne.n	8002866 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002852:	2301      	movs	r3, #1
 8002854:	e06f      	b.n	8002936 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002856:	4b3b      	ldr	r3, [pc, #236]	; (8002944 <HAL_RCC_ClockConfig+0x1bc>)
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f003 0302 	and.w	r3, r3, #2
 800285e:	2b00      	cmp	r3, #0
 8002860:	d101      	bne.n	8002866 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002862:	2301      	movs	r3, #1
 8002864:	e067      	b.n	8002936 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002866:	4b37      	ldr	r3, [pc, #220]	; (8002944 <HAL_RCC_ClockConfig+0x1bc>)
 8002868:	689b      	ldr	r3, [r3, #8]
 800286a:	f023 0203 	bic.w	r2, r3, #3
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	685b      	ldr	r3, [r3, #4]
 8002872:	4934      	ldr	r1, [pc, #208]	; (8002944 <HAL_RCC_ClockConfig+0x1bc>)
 8002874:	4313      	orrs	r3, r2
 8002876:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002878:	f7ff f8e8 	bl	8001a4c <HAL_GetTick>
 800287c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800287e:	e00a      	b.n	8002896 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002880:	f7ff f8e4 	bl	8001a4c <HAL_GetTick>
 8002884:	4602      	mov	r2, r0
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	1ad3      	subs	r3, r2, r3
 800288a:	f241 3288 	movw	r2, #5000	; 0x1388
 800288e:	4293      	cmp	r3, r2
 8002890:	d901      	bls.n	8002896 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002892:	2303      	movs	r3, #3
 8002894:	e04f      	b.n	8002936 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002896:	4b2b      	ldr	r3, [pc, #172]	; (8002944 <HAL_RCC_ClockConfig+0x1bc>)
 8002898:	689b      	ldr	r3, [r3, #8]
 800289a:	f003 020c 	and.w	r2, r3, #12
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	685b      	ldr	r3, [r3, #4]
 80028a2:	009b      	lsls	r3, r3, #2
 80028a4:	429a      	cmp	r2, r3
 80028a6:	d1eb      	bne.n	8002880 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80028a8:	4b25      	ldr	r3, [pc, #148]	; (8002940 <HAL_RCC_ClockConfig+0x1b8>)
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f003 030f 	and.w	r3, r3, #15
 80028b0:	683a      	ldr	r2, [r7, #0]
 80028b2:	429a      	cmp	r2, r3
 80028b4:	d20c      	bcs.n	80028d0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028b6:	4b22      	ldr	r3, [pc, #136]	; (8002940 <HAL_RCC_ClockConfig+0x1b8>)
 80028b8:	683a      	ldr	r2, [r7, #0]
 80028ba:	b2d2      	uxtb	r2, r2
 80028bc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80028be:	4b20      	ldr	r3, [pc, #128]	; (8002940 <HAL_RCC_ClockConfig+0x1b8>)
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f003 030f 	and.w	r3, r3, #15
 80028c6:	683a      	ldr	r2, [r7, #0]
 80028c8:	429a      	cmp	r2, r3
 80028ca:	d001      	beq.n	80028d0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80028cc:	2301      	movs	r3, #1
 80028ce:	e032      	b.n	8002936 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f003 0304 	and.w	r3, r3, #4
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d008      	beq.n	80028ee <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80028dc:	4b19      	ldr	r3, [pc, #100]	; (8002944 <HAL_RCC_ClockConfig+0x1bc>)
 80028de:	689b      	ldr	r3, [r3, #8]
 80028e0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	68db      	ldr	r3, [r3, #12]
 80028e8:	4916      	ldr	r1, [pc, #88]	; (8002944 <HAL_RCC_ClockConfig+0x1bc>)
 80028ea:	4313      	orrs	r3, r2
 80028ec:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f003 0308 	and.w	r3, r3, #8
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d009      	beq.n	800290e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80028fa:	4b12      	ldr	r3, [pc, #72]	; (8002944 <HAL_RCC_ClockConfig+0x1bc>)
 80028fc:	689b      	ldr	r3, [r3, #8]
 80028fe:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	691b      	ldr	r3, [r3, #16]
 8002906:	00db      	lsls	r3, r3, #3
 8002908:	490e      	ldr	r1, [pc, #56]	; (8002944 <HAL_RCC_ClockConfig+0x1bc>)
 800290a:	4313      	orrs	r3, r2
 800290c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800290e:	f000 f887 	bl	8002a20 <HAL_RCC_GetSysClockFreq>
 8002912:	4602      	mov	r2, r0
 8002914:	4b0b      	ldr	r3, [pc, #44]	; (8002944 <HAL_RCC_ClockConfig+0x1bc>)
 8002916:	689b      	ldr	r3, [r3, #8]
 8002918:	091b      	lsrs	r3, r3, #4
 800291a:	f003 030f 	and.w	r3, r3, #15
 800291e:	490a      	ldr	r1, [pc, #40]	; (8002948 <HAL_RCC_ClockConfig+0x1c0>)
 8002920:	5ccb      	ldrb	r3, [r1, r3]
 8002922:	fa22 f303 	lsr.w	r3, r2, r3
 8002926:	4a09      	ldr	r2, [pc, #36]	; (800294c <HAL_RCC_ClockConfig+0x1c4>)
 8002928:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800292a:	4b09      	ldr	r3, [pc, #36]	; (8002950 <HAL_RCC_ClockConfig+0x1c8>)
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	4618      	mov	r0, r3
 8002930:	f7fe fea4 	bl	800167c <HAL_InitTick>

  return HAL_OK;
 8002934:	2300      	movs	r3, #0
}
 8002936:	4618      	mov	r0, r3
 8002938:	3710      	adds	r7, #16
 800293a:	46bd      	mov	sp, r7
 800293c:	bd80      	pop	{r7, pc}
 800293e:	bf00      	nop
 8002940:	40023c00 	.word	0x40023c00
 8002944:	40023800 	.word	0x40023800
 8002948:	08011fd0 	.word	0x08011fd0
 800294c:	20000004 	.word	0x20000004
 8002950:	20000008 	.word	0x20000008

08002954 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002954:	b480      	push	{r7}
 8002956:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002958:	4b03      	ldr	r3, [pc, #12]	; (8002968 <HAL_RCC_GetHCLKFreq+0x14>)
 800295a:	681b      	ldr	r3, [r3, #0]
}
 800295c:	4618      	mov	r0, r3
 800295e:	46bd      	mov	sp, r7
 8002960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002964:	4770      	bx	lr
 8002966:	bf00      	nop
 8002968:	20000004 	.word	0x20000004

0800296c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800296c:	b580      	push	{r7, lr}
 800296e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002970:	f7ff fff0 	bl	8002954 <HAL_RCC_GetHCLKFreq>
 8002974:	4602      	mov	r2, r0
 8002976:	4b05      	ldr	r3, [pc, #20]	; (800298c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002978:	689b      	ldr	r3, [r3, #8]
 800297a:	0a9b      	lsrs	r3, r3, #10
 800297c:	f003 0307 	and.w	r3, r3, #7
 8002980:	4903      	ldr	r1, [pc, #12]	; (8002990 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002982:	5ccb      	ldrb	r3, [r1, r3]
 8002984:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002988:	4618      	mov	r0, r3
 800298a:	bd80      	pop	{r7, pc}
 800298c:	40023800 	.word	0x40023800
 8002990:	08011fe0 	.word	0x08011fe0

08002994 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002994:	b580      	push	{r7, lr}
 8002996:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002998:	f7ff ffdc 	bl	8002954 <HAL_RCC_GetHCLKFreq>
 800299c:	4602      	mov	r2, r0
 800299e:	4b05      	ldr	r3, [pc, #20]	; (80029b4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80029a0:	689b      	ldr	r3, [r3, #8]
 80029a2:	0b5b      	lsrs	r3, r3, #13
 80029a4:	f003 0307 	and.w	r3, r3, #7
 80029a8:	4903      	ldr	r1, [pc, #12]	; (80029b8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80029aa:	5ccb      	ldrb	r3, [r1, r3]
 80029ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80029b0:	4618      	mov	r0, r3
 80029b2:	bd80      	pop	{r7, pc}
 80029b4:	40023800 	.word	0x40023800
 80029b8:	08011fe0 	.word	0x08011fe0

080029bc <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80029bc:	b480      	push	{r7}
 80029be:	b083      	sub	sp, #12
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	6078      	str	r0, [r7, #4]
 80029c4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	220f      	movs	r2, #15
 80029ca:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80029cc:	4b12      	ldr	r3, [pc, #72]	; (8002a18 <HAL_RCC_GetClockConfig+0x5c>)
 80029ce:	689b      	ldr	r3, [r3, #8]
 80029d0:	f003 0203 	and.w	r2, r3, #3
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80029d8:	4b0f      	ldr	r3, [pc, #60]	; (8002a18 <HAL_RCC_GetClockConfig+0x5c>)
 80029da:	689b      	ldr	r3, [r3, #8]
 80029dc:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80029e4:	4b0c      	ldr	r3, [pc, #48]	; (8002a18 <HAL_RCC_GetClockConfig+0x5c>)
 80029e6:	689b      	ldr	r3, [r3, #8]
 80029e8:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80029f0:	4b09      	ldr	r3, [pc, #36]	; (8002a18 <HAL_RCC_GetClockConfig+0x5c>)
 80029f2:	689b      	ldr	r3, [r3, #8]
 80029f4:	08db      	lsrs	r3, r3, #3
 80029f6:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80029fe:	4b07      	ldr	r3, [pc, #28]	; (8002a1c <HAL_RCC_GetClockConfig+0x60>)
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f003 020f 	and.w	r2, r3, #15
 8002a06:	683b      	ldr	r3, [r7, #0]
 8002a08:	601a      	str	r2, [r3, #0]
}
 8002a0a:	bf00      	nop
 8002a0c:	370c      	adds	r7, #12
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a14:	4770      	bx	lr
 8002a16:	bf00      	nop
 8002a18:	40023800 	.word	0x40023800
 8002a1c:	40023c00 	.word	0x40023c00

08002a20 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a20:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002a24:	b0ae      	sub	sp, #184	; 0xb8
 8002a26:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002a28:	2300      	movs	r3, #0
 8002a2a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8002a2e:	2300      	movs	r3, #0
 8002a30:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8002a34:	2300      	movs	r3, #0
 8002a36:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8002a3a:	2300      	movs	r3, #0
 8002a3c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8002a40:	2300      	movs	r3, #0
 8002a42:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002a46:	4bcb      	ldr	r3, [pc, #812]	; (8002d74 <HAL_RCC_GetSysClockFreq+0x354>)
 8002a48:	689b      	ldr	r3, [r3, #8]
 8002a4a:	f003 030c 	and.w	r3, r3, #12
 8002a4e:	2b0c      	cmp	r3, #12
 8002a50:	f200 8206 	bhi.w	8002e60 <HAL_RCC_GetSysClockFreq+0x440>
 8002a54:	a201      	add	r2, pc, #4	; (adr r2, 8002a5c <HAL_RCC_GetSysClockFreq+0x3c>)
 8002a56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a5a:	bf00      	nop
 8002a5c:	08002a91 	.word	0x08002a91
 8002a60:	08002e61 	.word	0x08002e61
 8002a64:	08002e61 	.word	0x08002e61
 8002a68:	08002e61 	.word	0x08002e61
 8002a6c:	08002a99 	.word	0x08002a99
 8002a70:	08002e61 	.word	0x08002e61
 8002a74:	08002e61 	.word	0x08002e61
 8002a78:	08002e61 	.word	0x08002e61
 8002a7c:	08002aa1 	.word	0x08002aa1
 8002a80:	08002e61 	.word	0x08002e61
 8002a84:	08002e61 	.word	0x08002e61
 8002a88:	08002e61 	.word	0x08002e61
 8002a8c:	08002c91 	.word	0x08002c91
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002a90:	4bb9      	ldr	r3, [pc, #740]	; (8002d78 <HAL_RCC_GetSysClockFreq+0x358>)
 8002a92:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8002a96:	e1e7      	b.n	8002e68 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002a98:	4bb8      	ldr	r3, [pc, #736]	; (8002d7c <HAL_RCC_GetSysClockFreq+0x35c>)
 8002a9a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002a9e:	e1e3      	b.n	8002e68 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002aa0:	4bb4      	ldr	r3, [pc, #720]	; (8002d74 <HAL_RCC_GetSysClockFreq+0x354>)
 8002aa2:	685b      	ldr	r3, [r3, #4]
 8002aa4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002aa8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002aac:	4bb1      	ldr	r3, [pc, #708]	; (8002d74 <HAL_RCC_GetSysClockFreq+0x354>)
 8002aae:	685b      	ldr	r3, [r3, #4]
 8002ab0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d071      	beq.n	8002b9c <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ab8:	4bae      	ldr	r3, [pc, #696]	; (8002d74 <HAL_RCC_GetSysClockFreq+0x354>)
 8002aba:	685b      	ldr	r3, [r3, #4]
 8002abc:	099b      	lsrs	r3, r3, #6
 8002abe:	2200      	movs	r2, #0
 8002ac0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002ac4:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8002ac8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002acc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002ad0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002ad4:	2300      	movs	r3, #0
 8002ad6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002ada:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002ade:	4622      	mov	r2, r4
 8002ae0:	462b      	mov	r3, r5
 8002ae2:	f04f 0000 	mov.w	r0, #0
 8002ae6:	f04f 0100 	mov.w	r1, #0
 8002aea:	0159      	lsls	r1, r3, #5
 8002aec:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002af0:	0150      	lsls	r0, r2, #5
 8002af2:	4602      	mov	r2, r0
 8002af4:	460b      	mov	r3, r1
 8002af6:	4621      	mov	r1, r4
 8002af8:	1a51      	subs	r1, r2, r1
 8002afa:	6439      	str	r1, [r7, #64]	; 0x40
 8002afc:	4629      	mov	r1, r5
 8002afe:	eb63 0301 	sbc.w	r3, r3, r1
 8002b02:	647b      	str	r3, [r7, #68]	; 0x44
 8002b04:	f04f 0200 	mov.w	r2, #0
 8002b08:	f04f 0300 	mov.w	r3, #0
 8002b0c:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8002b10:	4649      	mov	r1, r9
 8002b12:	018b      	lsls	r3, r1, #6
 8002b14:	4641      	mov	r1, r8
 8002b16:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002b1a:	4641      	mov	r1, r8
 8002b1c:	018a      	lsls	r2, r1, #6
 8002b1e:	4641      	mov	r1, r8
 8002b20:	1a51      	subs	r1, r2, r1
 8002b22:	63b9      	str	r1, [r7, #56]	; 0x38
 8002b24:	4649      	mov	r1, r9
 8002b26:	eb63 0301 	sbc.w	r3, r3, r1
 8002b2a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002b2c:	f04f 0200 	mov.w	r2, #0
 8002b30:	f04f 0300 	mov.w	r3, #0
 8002b34:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8002b38:	4649      	mov	r1, r9
 8002b3a:	00cb      	lsls	r3, r1, #3
 8002b3c:	4641      	mov	r1, r8
 8002b3e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002b42:	4641      	mov	r1, r8
 8002b44:	00ca      	lsls	r2, r1, #3
 8002b46:	4610      	mov	r0, r2
 8002b48:	4619      	mov	r1, r3
 8002b4a:	4603      	mov	r3, r0
 8002b4c:	4622      	mov	r2, r4
 8002b4e:	189b      	adds	r3, r3, r2
 8002b50:	633b      	str	r3, [r7, #48]	; 0x30
 8002b52:	462b      	mov	r3, r5
 8002b54:	460a      	mov	r2, r1
 8002b56:	eb42 0303 	adc.w	r3, r2, r3
 8002b5a:	637b      	str	r3, [r7, #52]	; 0x34
 8002b5c:	f04f 0200 	mov.w	r2, #0
 8002b60:	f04f 0300 	mov.w	r3, #0
 8002b64:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002b68:	4629      	mov	r1, r5
 8002b6a:	024b      	lsls	r3, r1, #9
 8002b6c:	4621      	mov	r1, r4
 8002b6e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002b72:	4621      	mov	r1, r4
 8002b74:	024a      	lsls	r2, r1, #9
 8002b76:	4610      	mov	r0, r2
 8002b78:	4619      	mov	r1, r3
 8002b7a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002b7e:	2200      	movs	r2, #0
 8002b80:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002b84:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002b88:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8002b8c:	f7fd fbf8 	bl	8000380 <__aeabi_uldivmod>
 8002b90:	4602      	mov	r2, r0
 8002b92:	460b      	mov	r3, r1
 8002b94:	4613      	mov	r3, r2
 8002b96:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002b9a:	e067      	b.n	8002c6c <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b9c:	4b75      	ldr	r3, [pc, #468]	; (8002d74 <HAL_RCC_GetSysClockFreq+0x354>)
 8002b9e:	685b      	ldr	r3, [r3, #4]
 8002ba0:	099b      	lsrs	r3, r3, #6
 8002ba2:	2200      	movs	r2, #0
 8002ba4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002ba8:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8002bac:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002bb0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002bb4:	67bb      	str	r3, [r7, #120]	; 0x78
 8002bb6:	2300      	movs	r3, #0
 8002bb8:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002bba:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8002bbe:	4622      	mov	r2, r4
 8002bc0:	462b      	mov	r3, r5
 8002bc2:	f04f 0000 	mov.w	r0, #0
 8002bc6:	f04f 0100 	mov.w	r1, #0
 8002bca:	0159      	lsls	r1, r3, #5
 8002bcc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002bd0:	0150      	lsls	r0, r2, #5
 8002bd2:	4602      	mov	r2, r0
 8002bd4:	460b      	mov	r3, r1
 8002bd6:	4621      	mov	r1, r4
 8002bd8:	1a51      	subs	r1, r2, r1
 8002bda:	62b9      	str	r1, [r7, #40]	; 0x28
 8002bdc:	4629      	mov	r1, r5
 8002bde:	eb63 0301 	sbc.w	r3, r3, r1
 8002be2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002be4:	f04f 0200 	mov.w	r2, #0
 8002be8:	f04f 0300 	mov.w	r3, #0
 8002bec:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8002bf0:	4649      	mov	r1, r9
 8002bf2:	018b      	lsls	r3, r1, #6
 8002bf4:	4641      	mov	r1, r8
 8002bf6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002bfa:	4641      	mov	r1, r8
 8002bfc:	018a      	lsls	r2, r1, #6
 8002bfe:	4641      	mov	r1, r8
 8002c00:	ebb2 0a01 	subs.w	sl, r2, r1
 8002c04:	4649      	mov	r1, r9
 8002c06:	eb63 0b01 	sbc.w	fp, r3, r1
 8002c0a:	f04f 0200 	mov.w	r2, #0
 8002c0e:	f04f 0300 	mov.w	r3, #0
 8002c12:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002c16:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002c1a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002c1e:	4692      	mov	sl, r2
 8002c20:	469b      	mov	fp, r3
 8002c22:	4623      	mov	r3, r4
 8002c24:	eb1a 0303 	adds.w	r3, sl, r3
 8002c28:	623b      	str	r3, [r7, #32]
 8002c2a:	462b      	mov	r3, r5
 8002c2c:	eb4b 0303 	adc.w	r3, fp, r3
 8002c30:	627b      	str	r3, [r7, #36]	; 0x24
 8002c32:	f04f 0200 	mov.w	r2, #0
 8002c36:	f04f 0300 	mov.w	r3, #0
 8002c3a:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8002c3e:	4629      	mov	r1, r5
 8002c40:	028b      	lsls	r3, r1, #10
 8002c42:	4621      	mov	r1, r4
 8002c44:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002c48:	4621      	mov	r1, r4
 8002c4a:	028a      	lsls	r2, r1, #10
 8002c4c:	4610      	mov	r0, r2
 8002c4e:	4619      	mov	r1, r3
 8002c50:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002c54:	2200      	movs	r2, #0
 8002c56:	673b      	str	r3, [r7, #112]	; 0x70
 8002c58:	677a      	str	r2, [r7, #116]	; 0x74
 8002c5a:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8002c5e:	f7fd fb8f 	bl	8000380 <__aeabi_uldivmod>
 8002c62:	4602      	mov	r2, r0
 8002c64:	460b      	mov	r3, r1
 8002c66:	4613      	mov	r3, r2
 8002c68:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002c6c:	4b41      	ldr	r3, [pc, #260]	; (8002d74 <HAL_RCC_GetSysClockFreq+0x354>)
 8002c6e:	685b      	ldr	r3, [r3, #4]
 8002c70:	0c1b      	lsrs	r3, r3, #16
 8002c72:	f003 0303 	and.w	r3, r3, #3
 8002c76:	3301      	adds	r3, #1
 8002c78:	005b      	lsls	r3, r3, #1
 8002c7a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8002c7e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002c82:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002c86:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c8a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002c8e:	e0eb      	b.n	8002e68 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002c90:	4b38      	ldr	r3, [pc, #224]	; (8002d74 <HAL_RCC_GetSysClockFreq+0x354>)
 8002c92:	685b      	ldr	r3, [r3, #4]
 8002c94:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002c98:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002c9c:	4b35      	ldr	r3, [pc, #212]	; (8002d74 <HAL_RCC_GetSysClockFreq+0x354>)
 8002c9e:	685b      	ldr	r3, [r3, #4]
 8002ca0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d06b      	beq.n	8002d80 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ca8:	4b32      	ldr	r3, [pc, #200]	; (8002d74 <HAL_RCC_GetSysClockFreq+0x354>)
 8002caa:	685b      	ldr	r3, [r3, #4]
 8002cac:	099b      	lsrs	r3, r3, #6
 8002cae:	2200      	movs	r2, #0
 8002cb0:	66bb      	str	r3, [r7, #104]	; 0x68
 8002cb2:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002cb4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002cb6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002cba:	663b      	str	r3, [r7, #96]	; 0x60
 8002cbc:	2300      	movs	r3, #0
 8002cbe:	667b      	str	r3, [r7, #100]	; 0x64
 8002cc0:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8002cc4:	4622      	mov	r2, r4
 8002cc6:	462b      	mov	r3, r5
 8002cc8:	f04f 0000 	mov.w	r0, #0
 8002ccc:	f04f 0100 	mov.w	r1, #0
 8002cd0:	0159      	lsls	r1, r3, #5
 8002cd2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002cd6:	0150      	lsls	r0, r2, #5
 8002cd8:	4602      	mov	r2, r0
 8002cda:	460b      	mov	r3, r1
 8002cdc:	4621      	mov	r1, r4
 8002cde:	1a51      	subs	r1, r2, r1
 8002ce0:	61b9      	str	r1, [r7, #24]
 8002ce2:	4629      	mov	r1, r5
 8002ce4:	eb63 0301 	sbc.w	r3, r3, r1
 8002ce8:	61fb      	str	r3, [r7, #28]
 8002cea:	f04f 0200 	mov.w	r2, #0
 8002cee:	f04f 0300 	mov.w	r3, #0
 8002cf2:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8002cf6:	4659      	mov	r1, fp
 8002cf8:	018b      	lsls	r3, r1, #6
 8002cfa:	4651      	mov	r1, sl
 8002cfc:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002d00:	4651      	mov	r1, sl
 8002d02:	018a      	lsls	r2, r1, #6
 8002d04:	4651      	mov	r1, sl
 8002d06:	ebb2 0801 	subs.w	r8, r2, r1
 8002d0a:	4659      	mov	r1, fp
 8002d0c:	eb63 0901 	sbc.w	r9, r3, r1
 8002d10:	f04f 0200 	mov.w	r2, #0
 8002d14:	f04f 0300 	mov.w	r3, #0
 8002d18:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002d1c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002d20:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002d24:	4690      	mov	r8, r2
 8002d26:	4699      	mov	r9, r3
 8002d28:	4623      	mov	r3, r4
 8002d2a:	eb18 0303 	adds.w	r3, r8, r3
 8002d2e:	613b      	str	r3, [r7, #16]
 8002d30:	462b      	mov	r3, r5
 8002d32:	eb49 0303 	adc.w	r3, r9, r3
 8002d36:	617b      	str	r3, [r7, #20]
 8002d38:	f04f 0200 	mov.w	r2, #0
 8002d3c:	f04f 0300 	mov.w	r3, #0
 8002d40:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8002d44:	4629      	mov	r1, r5
 8002d46:	024b      	lsls	r3, r1, #9
 8002d48:	4621      	mov	r1, r4
 8002d4a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002d4e:	4621      	mov	r1, r4
 8002d50:	024a      	lsls	r2, r1, #9
 8002d52:	4610      	mov	r0, r2
 8002d54:	4619      	mov	r1, r3
 8002d56:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002d5a:	2200      	movs	r2, #0
 8002d5c:	65bb      	str	r3, [r7, #88]	; 0x58
 8002d5e:	65fa      	str	r2, [r7, #92]	; 0x5c
 8002d60:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002d64:	f7fd fb0c 	bl	8000380 <__aeabi_uldivmod>
 8002d68:	4602      	mov	r2, r0
 8002d6a:	460b      	mov	r3, r1
 8002d6c:	4613      	mov	r3, r2
 8002d6e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002d72:	e065      	b.n	8002e40 <HAL_RCC_GetSysClockFreq+0x420>
 8002d74:	40023800 	.word	0x40023800
 8002d78:	00f42400 	.word	0x00f42400
 8002d7c:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d80:	4b3d      	ldr	r3, [pc, #244]	; (8002e78 <HAL_RCC_GetSysClockFreq+0x458>)
 8002d82:	685b      	ldr	r3, [r3, #4]
 8002d84:	099b      	lsrs	r3, r3, #6
 8002d86:	2200      	movs	r2, #0
 8002d88:	4618      	mov	r0, r3
 8002d8a:	4611      	mov	r1, r2
 8002d8c:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002d90:	653b      	str	r3, [r7, #80]	; 0x50
 8002d92:	2300      	movs	r3, #0
 8002d94:	657b      	str	r3, [r7, #84]	; 0x54
 8002d96:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8002d9a:	4642      	mov	r2, r8
 8002d9c:	464b      	mov	r3, r9
 8002d9e:	f04f 0000 	mov.w	r0, #0
 8002da2:	f04f 0100 	mov.w	r1, #0
 8002da6:	0159      	lsls	r1, r3, #5
 8002da8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002dac:	0150      	lsls	r0, r2, #5
 8002dae:	4602      	mov	r2, r0
 8002db0:	460b      	mov	r3, r1
 8002db2:	4641      	mov	r1, r8
 8002db4:	1a51      	subs	r1, r2, r1
 8002db6:	60b9      	str	r1, [r7, #8]
 8002db8:	4649      	mov	r1, r9
 8002dba:	eb63 0301 	sbc.w	r3, r3, r1
 8002dbe:	60fb      	str	r3, [r7, #12]
 8002dc0:	f04f 0200 	mov.w	r2, #0
 8002dc4:	f04f 0300 	mov.w	r3, #0
 8002dc8:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8002dcc:	4659      	mov	r1, fp
 8002dce:	018b      	lsls	r3, r1, #6
 8002dd0:	4651      	mov	r1, sl
 8002dd2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002dd6:	4651      	mov	r1, sl
 8002dd8:	018a      	lsls	r2, r1, #6
 8002dda:	4651      	mov	r1, sl
 8002ddc:	1a54      	subs	r4, r2, r1
 8002dde:	4659      	mov	r1, fp
 8002de0:	eb63 0501 	sbc.w	r5, r3, r1
 8002de4:	f04f 0200 	mov.w	r2, #0
 8002de8:	f04f 0300 	mov.w	r3, #0
 8002dec:	00eb      	lsls	r3, r5, #3
 8002dee:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002df2:	00e2      	lsls	r2, r4, #3
 8002df4:	4614      	mov	r4, r2
 8002df6:	461d      	mov	r5, r3
 8002df8:	4643      	mov	r3, r8
 8002dfa:	18e3      	adds	r3, r4, r3
 8002dfc:	603b      	str	r3, [r7, #0]
 8002dfe:	464b      	mov	r3, r9
 8002e00:	eb45 0303 	adc.w	r3, r5, r3
 8002e04:	607b      	str	r3, [r7, #4]
 8002e06:	f04f 0200 	mov.w	r2, #0
 8002e0a:	f04f 0300 	mov.w	r3, #0
 8002e0e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002e12:	4629      	mov	r1, r5
 8002e14:	028b      	lsls	r3, r1, #10
 8002e16:	4621      	mov	r1, r4
 8002e18:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002e1c:	4621      	mov	r1, r4
 8002e1e:	028a      	lsls	r2, r1, #10
 8002e20:	4610      	mov	r0, r2
 8002e22:	4619      	mov	r1, r3
 8002e24:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002e28:	2200      	movs	r2, #0
 8002e2a:	64bb      	str	r3, [r7, #72]	; 0x48
 8002e2c:	64fa      	str	r2, [r7, #76]	; 0x4c
 8002e2e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002e32:	f7fd faa5 	bl	8000380 <__aeabi_uldivmod>
 8002e36:	4602      	mov	r2, r0
 8002e38:	460b      	mov	r3, r1
 8002e3a:	4613      	mov	r3, r2
 8002e3c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002e40:	4b0d      	ldr	r3, [pc, #52]	; (8002e78 <HAL_RCC_GetSysClockFreq+0x458>)
 8002e42:	685b      	ldr	r3, [r3, #4]
 8002e44:	0f1b      	lsrs	r3, r3, #28
 8002e46:	f003 0307 	and.w	r3, r3, #7
 8002e4a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8002e4e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002e52:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002e56:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e5a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002e5e:	e003      	b.n	8002e68 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002e60:	4b06      	ldr	r3, [pc, #24]	; (8002e7c <HAL_RCC_GetSysClockFreq+0x45c>)
 8002e62:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002e66:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002e68:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8002e6c:	4618      	mov	r0, r3
 8002e6e:	37b8      	adds	r7, #184	; 0xb8
 8002e70:	46bd      	mov	sp, r7
 8002e72:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002e76:	bf00      	nop
 8002e78:	40023800 	.word	0x40023800
 8002e7c:	00f42400 	.word	0x00f42400

08002e80 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002e80:	b580      	push	{r7, lr}
 8002e82:	b086      	sub	sp, #24
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d101      	bne.n	8002e92 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002e8e:	2301      	movs	r3, #1
 8002e90:	e28d      	b.n	80033ae <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f003 0301 	and.w	r3, r3, #1
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	f000 8083 	beq.w	8002fa6 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002ea0:	4b94      	ldr	r3, [pc, #592]	; (80030f4 <HAL_RCC_OscConfig+0x274>)
 8002ea2:	689b      	ldr	r3, [r3, #8]
 8002ea4:	f003 030c 	and.w	r3, r3, #12
 8002ea8:	2b04      	cmp	r3, #4
 8002eaa:	d019      	beq.n	8002ee0 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002eac:	4b91      	ldr	r3, [pc, #580]	; (80030f4 <HAL_RCC_OscConfig+0x274>)
 8002eae:	689b      	ldr	r3, [r3, #8]
 8002eb0:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002eb4:	2b08      	cmp	r3, #8
 8002eb6:	d106      	bne.n	8002ec6 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002eb8:	4b8e      	ldr	r3, [pc, #568]	; (80030f4 <HAL_RCC_OscConfig+0x274>)
 8002eba:	685b      	ldr	r3, [r3, #4]
 8002ebc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ec0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002ec4:	d00c      	beq.n	8002ee0 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002ec6:	4b8b      	ldr	r3, [pc, #556]	; (80030f4 <HAL_RCC_OscConfig+0x274>)
 8002ec8:	689b      	ldr	r3, [r3, #8]
 8002eca:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002ece:	2b0c      	cmp	r3, #12
 8002ed0:	d112      	bne.n	8002ef8 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002ed2:	4b88      	ldr	r3, [pc, #544]	; (80030f4 <HAL_RCC_OscConfig+0x274>)
 8002ed4:	685b      	ldr	r3, [r3, #4]
 8002ed6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002eda:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002ede:	d10b      	bne.n	8002ef8 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ee0:	4b84      	ldr	r3, [pc, #528]	; (80030f4 <HAL_RCC_OscConfig+0x274>)
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d05b      	beq.n	8002fa4 <HAL_RCC_OscConfig+0x124>
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	685b      	ldr	r3, [r3, #4]
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d157      	bne.n	8002fa4 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8002ef4:	2301      	movs	r3, #1
 8002ef6:	e25a      	b.n	80033ae <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	685b      	ldr	r3, [r3, #4]
 8002efc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f00:	d106      	bne.n	8002f10 <HAL_RCC_OscConfig+0x90>
 8002f02:	4b7c      	ldr	r3, [pc, #496]	; (80030f4 <HAL_RCC_OscConfig+0x274>)
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	4a7b      	ldr	r2, [pc, #492]	; (80030f4 <HAL_RCC_OscConfig+0x274>)
 8002f08:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f0c:	6013      	str	r3, [r2, #0]
 8002f0e:	e01d      	b.n	8002f4c <HAL_RCC_OscConfig+0xcc>
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	685b      	ldr	r3, [r3, #4]
 8002f14:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002f18:	d10c      	bne.n	8002f34 <HAL_RCC_OscConfig+0xb4>
 8002f1a:	4b76      	ldr	r3, [pc, #472]	; (80030f4 <HAL_RCC_OscConfig+0x274>)
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	4a75      	ldr	r2, [pc, #468]	; (80030f4 <HAL_RCC_OscConfig+0x274>)
 8002f20:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002f24:	6013      	str	r3, [r2, #0]
 8002f26:	4b73      	ldr	r3, [pc, #460]	; (80030f4 <HAL_RCC_OscConfig+0x274>)
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	4a72      	ldr	r2, [pc, #456]	; (80030f4 <HAL_RCC_OscConfig+0x274>)
 8002f2c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f30:	6013      	str	r3, [r2, #0]
 8002f32:	e00b      	b.n	8002f4c <HAL_RCC_OscConfig+0xcc>
 8002f34:	4b6f      	ldr	r3, [pc, #444]	; (80030f4 <HAL_RCC_OscConfig+0x274>)
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	4a6e      	ldr	r2, [pc, #440]	; (80030f4 <HAL_RCC_OscConfig+0x274>)
 8002f3a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f3e:	6013      	str	r3, [r2, #0]
 8002f40:	4b6c      	ldr	r3, [pc, #432]	; (80030f4 <HAL_RCC_OscConfig+0x274>)
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	4a6b      	ldr	r2, [pc, #428]	; (80030f4 <HAL_RCC_OscConfig+0x274>)
 8002f46:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002f4a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	685b      	ldr	r3, [r3, #4]
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d013      	beq.n	8002f7c <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f54:	f7fe fd7a 	bl	8001a4c <HAL_GetTick>
 8002f58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f5a:	e008      	b.n	8002f6e <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002f5c:	f7fe fd76 	bl	8001a4c <HAL_GetTick>
 8002f60:	4602      	mov	r2, r0
 8002f62:	693b      	ldr	r3, [r7, #16]
 8002f64:	1ad3      	subs	r3, r2, r3
 8002f66:	2b64      	cmp	r3, #100	; 0x64
 8002f68:	d901      	bls.n	8002f6e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8002f6a:	2303      	movs	r3, #3
 8002f6c:	e21f      	b.n	80033ae <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f6e:	4b61      	ldr	r3, [pc, #388]	; (80030f4 <HAL_RCC_OscConfig+0x274>)
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d0f0      	beq.n	8002f5c <HAL_RCC_OscConfig+0xdc>
 8002f7a:	e014      	b.n	8002fa6 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f7c:	f7fe fd66 	bl	8001a4c <HAL_GetTick>
 8002f80:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f82:	e008      	b.n	8002f96 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002f84:	f7fe fd62 	bl	8001a4c <HAL_GetTick>
 8002f88:	4602      	mov	r2, r0
 8002f8a:	693b      	ldr	r3, [r7, #16]
 8002f8c:	1ad3      	subs	r3, r2, r3
 8002f8e:	2b64      	cmp	r3, #100	; 0x64
 8002f90:	d901      	bls.n	8002f96 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8002f92:	2303      	movs	r3, #3
 8002f94:	e20b      	b.n	80033ae <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f96:	4b57      	ldr	r3, [pc, #348]	; (80030f4 <HAL_RCC_OscConfig+0x274>)
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d1f0      	bne.n	8002f84 <HAL_RCC_OscConfig+0x104>
 8002fa2:	e000      	b.n	8002fa6 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002fa4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f003 0302 	and.w	r3, r3, #2
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d06f      	beq.n	8003092 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002fb2:	4b50      	ldr	r3, [pc, #320]	; (80030f4 <HAL_RCC_OscConfig+0x274>)
 8002fb4:	689b      	ldr	r3, [r3, #8]
 8002fb6:	f003 030c 	and.w	r3, r3, #12
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d017      	beq.n	8002fee <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002fbe:	4b4d      	ldr	r3, [pc, #308]	; (80030f4 <HAL_RCC_OscConfig+0x274>)
 8002fc0:	689b      	ldr	r3, [r3, #8]
 8002fc2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002fc6:	2b08      	cmp	r3, #8
 8002fc8:	d105      	bne.n	8002fd6 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002fca:	4b4a      	ldr	r3, [pc, #296]	; (80030f4 <HAL_RCC_OscConfig+0x274>)
 8002fcc:	685b      	ldr	r3, [r3, #4]
 8002fce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d00b      	beq.n	8002fee <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002fd6:	4b47      	ldr	r3, [pc, #284]	; (80030f4 <HAL_RCC_OscConfig+0x274>)
 8002fd8:	689b      	ldr	r3, [r3, #8]
 8002fda:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002fde:	2b0c      	cmp	r3, #12
 8002fe0:	d11c      	bne.n	800301c <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002fe2:	4b44      	ldr	r3, [pc, #272]	; (80030f4 <HAL_RCC_OscConfig+0x274>)
 8002fe4:	685b      	ldr	r3, [r3, #4]
 8002fe6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d116      	bne.n	800301c <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002fee:	4b41      	ldr	r3, [pc, #260]	; (80030f4 <HAL_RCC_OscConfig+0x274>)
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f003 0302 	and.w	r3, r3, #2
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d005      	beq.n	8003006 <HAL_RCC_OscConfig+0x186>
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	68db      	ldr	r3, [r3, #12]
 8002ffe:	2b01      	cmp	r3, #1
 8003000:	d001      	beq.n	8003006 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8003002:	2301      	movs	r3, #1
 8003004:	e1d3      	b.n	80033ae <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003006:	4b3b      	ldr	r3, [pc, #236]	; (80030f4 <HAL_RCC_OscConfig+0x274>)
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	691b      	ldr	r3, [r3, #16]
 8003012:	00db      	lsls	r3, r3, #3
 8003014:	4937      	ldr	r1, [pc, #220]	; (80030f4 <HAL_RCC_OscConfig+0x274>)
 8003016:	4313      	orrs	r3, r2
 8003018:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800301a:	e03a      	b.n	8003092 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	68db      	ldr	r3, [r3, #12]
 8003020:	2b00      	cmp	r3, #0
 8003022:	d020      	beq.n	8003066 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003024:	4b34      	ldr	r3, [pc, #208]	; (80030f8 <HAL_RCC_OscConfig+0x278>)
 8003026:	2201      	movs	r2, #1
 8003028:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800302a:	f7fe fd0f 	bl	8001a4c <HAL_GetTick>
 800302e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003030:	e008      	b.n	8003044 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003032:	f7fe fd0b 	bl	8001a4c <HAL_GetTick>
 8003036:	4602      	mov	r2, r0
 8003038:	693b      	ldr	r3, [r7, #16]
 800303a:	1ad3      	subs	r3, r2, r3
 800303c:	2b02      	cmp	r3, #2
 800303e:	d901      	bls.n	8003044 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8003040:	2303      	movs	r3, #3
 8003042:	e1b4      	b.n	80033ae <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003044:	4b2b      	ldr	r3, [pc, #172]	; (80030f4 <HAL_RCC_OscConfig+0x274>)
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f003 0302 	and.w	r3, r3, #2
 800304c:	2b00      	cmp	r3, #0
 800304e:	d0f0      	beq.n	8003032 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003050:	4b28      	ldr	r3, [pc, #160]	; (80030f4 <HAL_RCC_OscConfig+0x274>)
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	691b      	ldr	r3, [r3, #16]
 800305c:	00db      	lsls	r3, r3, #3
 800305e:	4925      	ldr	r1, [pc, #148]	; (80030f4 <HAL_RCC_OscConfig+0x274>)
 8003060:	4313      	orrs	r3, r2
 8003062:	600b      	str	r3, [r1, #0]
 8003064:	e015      	b.n	8003092 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003066:	4b24      	ldr	r3, [pc, #144]	; (80030f8 <HAL_RCC_OscConfig+0x278>)
 8003068:	2200      	movs	r2, #0
 800306a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800306c:	f7fe fcee 	bl	8001a4c <HAL_GetTick>
 8003070:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003072:	e008      	b.n	8003086 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003074:	f7fe fcea 	bl	8001a4c <HAL_GetTick>
 8003078:	4602      	mov	r2, r0
 800307a:	693b      	ldr	r3, [r7, #16]
 800307c:	1ad3      	subs	r3, r2, r3
 800307e:	2b02      	cmp	r3, #2
 8003080:	d901      	bls.n	8003086 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003082:	2303      	movs	r3, #3
 8003084:	e193      	b.n	80033ae <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003086:	4b1b      	ldr	r3, [pc, #108]	; (80030f4 <HAL_RCC_OscConfig+0x274>)
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f003 0302 	and.w	r3, r3, #2
 800308e:	2b00      	cmp	r3, #0
 8003090:	d1f0      	bne.n	8003074 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f003 0308 	and.w	r3, r3, #8
 800309a:	2b00      	cmp	r3, #0
 800309c:	d036      	beq.n	800310c <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	695b      	ldr	r3, [r3, #20]
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d016      	beq.n	80030d4 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80030a6:	4b15      	ldr	r3, [pc, #84]	; (80030fc <HAL_RCC_OscConfig+0x27c>)
 80030a8:	2201      	movs	r2, #1
 80030aa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030ac:	f7fe fcce 	bl	8001a4c <HAL_GetTick>
 80030b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80030b2:	e008      	b.n	80030c6 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80030b4:	f7fe fcca 	bl	8001a4c <HAL_GetTick>
 80030b8:	4602      	mov	r2, r0
 80030ba:	693b      	ldr	r3, [r7, #16]
 80030bc:	1ad3      	subs	r3, r2, r3
 80030be:	2b02      	cmp	r3, #2
 80030c0:	d901      	bls.n	80030c6 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80030c2:	2303      	movs	r3, #3
 80030c4:	e173      	b.n	80033ae <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80030c6:	4b0b      	ldr	r3, [pc, #44]	; (80030f4 <HAL_RCC_OscConfig+0x274>)
 80030c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80030ca:	f003 0302 	and.w	r3, r3, #2
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d0f0      	beq.n	80030b4 <HAL_RCC_OscConfig+0x234>
 80030d2:	e01b      	b.n	800310c <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80030d4:	4b09      	ldr	r3, [pc, #36]	; (80030fc <HAL_RCC_OscConfig+0x27c>)
 80030d6:	2200      	movs	r2, #0
 80030d8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030da:	f7fe fcb7 	bl	8001a4c <HAL_GetTick>
 80030de:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80030e0:	e00e      	b.n	8003100 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80030e2:	f7fe fcb3 	bl	8001a4c <HAL_GetTick>
 80030e6:	4602      	mov	r2, r0
 80030e8:	693b      	ldr	r3, [r7, #16]
 80030ea:	1ad3      	subs	r3, r2, r3
 80030ec:	2b02      	cmp	r3, #2
 80030ee:	d907      	bls.n	8003100 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80030f0:	2303      	movs	r3, #3
 80030f2:	e15c      	b.n	80033ae <HAL_RCC_OscConfig+0x52e>
 80030f4:	40023800 	.word	0x40023800
 80030f8:	42470000 	.word	0x42470000
 80030fc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003100:	4b8a      	ldr	r3, [pc, #552]	; (800332c <HAL_RCC_OscConfig+0x4ac>)
 8003102:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003104:	f003 0302 	and.w	r3, r3, #2
 8003108:	2b00      	cmp	r3, #0
 800310a:	d1ea      	bne.n	80030e2 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f003 0304 	and.w	r3, r3, #4
 8003114:	2b00      	cmp	r3, #0
 8003116:	f000 8097 	beq.w	8003248 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800311a:	2300      	movs	r3, #0
 800311c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800311e:	4b83      	ldr	r3, [pc, #524]	; (800332c <HAL_RCC_OscConfig+0x4ac>)
 8003120:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003122:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003126:	2b00      	cmp	r3, #0
 8003128:	d10f      	bne.n	800314a <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800312a:	2300      	movs	r3, #0
 800312c:	60bb      	str	r3, [r7, #8]
 800312e:	4b7f      	ldr	r3, [pc, #508]	; (800332c <HAL_RCC_OscConfig+0x4ac>)
 8003130:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003132:	4a7e      	ldr	r2, [pc, #504]	; (800332c <HAL_RCC_OscConfig+0x4ac>)
 8003134:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003138:	6413      	str	r3, [r2, #64]	; 0x40
 800313a:	4b7c      	ldr	r3, [pc, #496]	; (800332c <HAL_RCC_OscConfig+0x4ac>)
 800313c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800313e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003142:	60bb      	str	r3, [r7, #8]
 8003144:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003146:	2301      	movs	r3, #1
 8003148:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800314a:	4b79      	ldr	r3, [pc, #484]	; (8003330 <HAL_RCC_OscConfig+0x4b0>)
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003152:	2b00      	cmp	r3, #0
 8003154:	d118      	bne.n	8003188 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003156:	4b76      	ldr	r3, [pc, #472]	; (8003330 <HAL_RCC_OscConfig+0x4b0>)
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	4a75      	ldr	r2, [pc, #468]	; (8003330 <HAL_RCC_OscConfig+0x4b0>)
 800315c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003160:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003162:	f7fe fc73 	bl	8001a4c <HAL_GetTick>
 8003166:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003168:	e008      	b.n	800317c <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800316a:	f7fe fc6f 	bl	8001a4c <HAL_GetTick>
 800316e:	4602      	mov	r2, r0
 8003170:	693b      	ldr	r3, [r7, #16]
 8003172:	1ad3      	subs	r3, r2, r3
 8003174:	2b02      	cmp	r3, #2
 8003176:	d901      	bls.n	800317c <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8003178:	2303      	movs	r3, #3
 800317a:	e118      	b.n	80033ae <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800317c:	4b6c      	ldr	r3, [pc, #432]	; (8003330 <HAL_RCC_OscConfig+0x4b0>)
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003184:	2b00      	cmp	r3, #0
 8003186:	d0f0      	beq.n	800316a <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	689b      	ldr	r3, [r3, #8]
 800318c:	2b01      	cmp	r3, #1
 800318e:	d106      	bne.n	800319e <HAL_RCC_OscConfig+0x31e>
 8003190:	4b66      	ldr	r3, [pc, #408]	; (800332c <HAL_RCC_OscConfig+0x4ac>)
 8003192:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003194:	4a65      	ldr	r2, [pc, #404]	; (800332c <HAL_RCC_OscConfig+0x4ac>)
 8003196:	f043 0301 	orr.w	r3, r3, #1
 800319a:	6713      	str	r3, [r2, #112]	; 0x70
 800319c:	e01c      	b.n	80031d8 <HAL_RCC_OscConfig+0x358>
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	689b      	ldr	r3, [r3, #8]
 80031a2:	2b05      	cmp	r3, #5
 80031a4:	d10c      	bne.n	80031c0 <HAL_RCC_OscConfig+0x340>
 80031a6:	4b61      	ldr	r3, [pc, #388]	; (800332c <HAL_RCC_OscConfig+0x4ac>)
 80031a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031aa:	4a60      	ldr	r2, [pc, #384]	; (800332c <HAL_RCC_OscConfig+0x4ac>)
 80031ac:	f043 0304 	orr.w	r3, r3, #4
 80031b0:	6713      	str	r3, [r2, #112]	; 0x70
 80031b2:	4b5e      	ldr	r3, [pc, #376]	; (800332c <HAL_RCC_OscConfig+0x4ac>)
 80031b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031b6:	4a5d      	ldr	r2, [pc, #372]	; (800332c <HAL_RCC_OscConfig+0x4ac>)
 80031b8:	f043 0301 	orr.w	r3, r3, #1
 80031bc:	6713      	str	r3, [r2, #112]	; 0x70
 80031be:	e00b      	b.n	80031d8 <HAL_RCC_OscConfig+0x358>
 80031c0:	4b5a      	ldr	r3, [pc, #360]	; (800332c <HAL_RCC_OscConfig+0x4ac>)
 80031c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031c4:	4a59      	ldr	r2, [pc, #356]	; (800332c <HAL_RCC_OscConfig+0x4ac>)
 80031c6:	f023 0301 	bic.w	r3, r3, #1
 80031ca:	6713      	str	r3, [r2, #112]	; 0x70
 80031cc:	4b57      	ldr	r3, [pc, #348]	; (800332c <HAL_RCC_OscConfig+0x4ac>)
 80031ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031d0:	4a56      	ldr	r2, [pc, #344]	; (800332c <HAL_RCC_OscConfig+0x4ac>)
 80031d2:	f023 0304 	bic.w	r3, r3, #4
 80031d6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	689b      	ldr	r3, [r3, #8]
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d015      	beq.n	800320c <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031e0:	f7fe fc34 	bl	8001a4c <HAL_GetTick>
 80031e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031e6:	e00a      	b.n	80031fe <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80031e8:	f7fe fc30 	bl	8001a4c <HAL_GetTick>
 80031ec:	4602      	mov	r2, r0
 80031ee:	693b      	ldr	r3, [r7, #16]
 80031f0:	1ad3      	subs	r3, r2, r3
 80031f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80031f6:	4293      	cmp	r3, r2
 80031f8:	d901      	bls.n	80031fe <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80031fa:	2303      	movs	r3, #3
 80031fc:	e0d7      	b.n	80033ae <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031fe:	4b4b      	ldr	r3, [pc, #300]	; (800332c <HAL_RCC_OscConfig+0x4ac>)
 8003200:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003202:	f003 0302 	and.w	r3, r3, #2
 8003206:	2b00      	cmp	r3, #0
 8003208:	d0ee      	beq.n	80031e8 <HAL_RCC_OscConfig+0x368>
 800320a:	e014      	b.n	8003236 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800320c:	f7fe fc1e 	bl	8001a4c <HAL_GetTick>
 8003210:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003212:	e00a      	b.n	800322a <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003214:	f7fe fc1a 	bl	8001a4c <HAL_GetTick>
 8003218:	4602      	mov	r2, r0
 800321a:	693b      	ldr	r3, [r7, #16]
 800321c:	1ad3      	subs	r3, r2, r3
 800321e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003222:	4293      	cmp	r3, r2
 8003224:	d901      	bls.n	800322a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8003226:	2303      	movs	r3, #3
 8003228:	e0c1      	b.n	80033ae <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800322a:	4b40      	ldr	r3, [pc, #256]	; (800332c <HAL_RCC_OscConfig+0x4ac>)
 800322c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800322e:	f003 0302 	and.w	r3, r3, #2
 8003232:	2b00      	cmp	r3, #0
 8003234:	d1ee      	bne.n	8003214 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003236:	7dfb      	ldrb	r3, [r7, #23]
 8003238:	2b01      	cmp	r3, #1
 800323a:	d105      	bne.n	8003248 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800323c:	4b3b      	ldr	r3, [pc, #236]	; (800332c <HAL_RCC_OscConfig+0x4ac>)
 800323e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003240:	4a3a      	ldr	r2, [pc, #232]	; (800332c <HAL_RCC_OscConfig+0x4ac>)
 8003242:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003246:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	699b      	ldr	r3, [r3, #24]
 800324c:	2b00      	cmp	r3, #0
 800324e:	f000 80ad 	beq.w	80033ac <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003252:	4b36      	ldr	r3, [pc, #216]	; (800332c <HAL_RCC_OscConfig+0x4ac>)
 8003254:	689b      	ldr	r3, [r3, #8]
 8003256:	f003 030c 	and.w	r3, r3, #12
 800325a:	2b08      	cmp	r3, #8
 800325c:	d060      	beq.n	8003320 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	699b      	ldr	r3, [r3, #24]
 8003262:	2b02      	cmp	r3, #2
 8003264:	d145      	bne.n	80032f2 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003266:	4b33      	ldr	r3, [pc, #204]	; (8003334 <HAL_RCC_OscConfig+0x4b4>)
 8003268:	2200      	movs	r2, #0
 800326a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800326c:	f7fe fbee 	bl	8001a4c <HAL_GetTick>
 8003270:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003272:	e008      	b.n	8003286 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003274:	f7fe fbea 	bl	8001a4c <HAL_GetTick>
 8003278:	4602      	mov	r2, r0
 800327a:	693b      	ldr	r3, [r7, #16]
 800327c:	1ad3      	subs	r3, r2, r3
 800327e:	2b02      	cmp	r3, #2
 8003280:	d901      	bls.n	8003286 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8003282:	2303      	movs	r3, #3
 8003284:	e093      	b.n	80033ae <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003286:	4b29      	ldr	r3, [pc, #164]	; (800332c <HAL_RCC_OscConfig+0x4ac>)
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800328e:	2b00      	cmp	r3, #0
 8003290:	d1f0      	bne.n	8003274 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	69da      	ldr	r2, [r3, #28]
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	6a1b      	ldr	r3, [r3, #32]
 800329a:	431a      	orrs	r2, r3
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032a0:	019b      	lsls	r3, r3, #6
 80032a2:	431a      	orrs	r2, r3
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032a8:	085b      	lsrs	r3, r3, #1
 80032aa:	3b01      	subs	r3, #1
 80032ac:	041b      	lsls	r3, r3, #16
 80032ae:	431a      	orrs	r2, r3
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032b4:	061b      	lsls	r3, r3, #24
 80032b6:	431a      	orrs	r2, r3
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032bc:	071b      	lsls	r3, r3, #28
 80032be:	491b      	ldr	r1, [pc, #108]	; (800332c <HAL_RCC_OscConfig+0x4ac>)
 80032c0:	4313      	orrs	r3, r2
 80032c2:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80032c4:	4b1b      	ldr	r3, [pc, #108]	; (8003334 <HAL_RCC_OscConfig+0x4b4>)
 80032c6:	2201      	movs	r2, #1
 80032c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032ca:	f7fe fbbf 	bl	8001a4c <HAL_GetTick>
 80032ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80032d0:	e008      	b.n	80032e4 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80032d2:	f7fe fbbb 	bl	8001a4c <HAL_GetTick>
 80032d6:	4602      	mov	r2, r0
 80032d8:	693b      	ldr	r3, [r7, #16]
 80032da:	1ad3      	subs	r3, r2, r3
 80032dc:	2b02      	cmp	r3, #2
 80032de:	d901      	bls.n	80032e4 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80032e0:	2303      	movs	r3, #3
 80032e2:	e064      	b.n	80033ae <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80032e4:	4b11      	ldr	r3, [pc, #68]	; (800332c <HAL_RCC_OscConfig+0x4ac>)
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d0f0      	beq.n	80032d2 <HAL_RCC_OscConfig+0x452>
 80032f0:	e05c      	b.n	80033ac <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80032f2:	4b10      	ldr	r3, [pc, #64]	; (8003334 <HAL_RCC_OscConfig+0x4b4>)
 80032f4:	2200      	movs	r2, #0
 80032f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032f8:	f7fe fba8 	bl	8001a4c <HAL_GetTick>
 80032fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032fe:	e008      	b.n	8003312 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003300:	f7fe fba4 	bl	8001a4c <HAL_GetTick>
 8003304:	4602      	mov	r2, r0
 8003306:	693b      	ldr	r3, [r7, #16]
 8003308:	1ad3      	subs	r3, r2, r3
 800330a:	2b02      	cmp	r3, #2
 800330c:	d901      	bls.n	8003312 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800330e:	2303      	movs	r3, #3
 8003310:	e04d      	b.n	80033ae <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003312:	4b06      	ldr	r3, [pc, #24]	; (800332c <HAL_RCC_OscConfig+0x4ac>)
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800331a:	2b00      	cmp	r3, #0
 800331c:	d1f0      	bne.n	8003300 <HAL_RCC_OscConfig+0x480>
 800331e:	e045      	b.n	80033ac <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	699b      	ldr	r3, [r3, #24]
 8003324:	2b01      	cmp	r3, #1
 8003326:	d107      	bne.n	8003338 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8003328:	2301      	movs	r3, #1
 800332a:	e040      	b.n	80033ae <HAL_RCC_OscConfig+0x52e>
 800332c:	40023800 	.word	0x40023800
 8003330:	40007000 	.word	0x40007000
 8003334:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003338:	4b1f      	ldr	r3, [pc, #124]	; (80033b8 <HAL_RCC_OscConfig+0x538>)
 800333a:	685b      	ldr	r3, [r3, #4]
 800333c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	699b      	ldr	r3, [r3, #24]
 8003342:	2b01      	cmp	r3, #1
 8003344:	d030      	beq.n	80033a8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003350:	429a      	cmp	r2, r3
 8003352:	d129      	bne.n	80033a8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800335e:	429a      	cmp	r2, r3
 8003360:	d122      	bne.n	80033a8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003362:	68fa      	ldr	r2, [r7, #12]
 8003364:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003368:	4013      	ands	r3, r2
 800336a:	687a      	ldr	r2, [r7, #4]
 800336c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800336e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003370:	4293      	cmp	r3, r2
 8003372:	d119      	bne.n	80033a8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800337e:	085b      	lsrs	r3, r3, #1
 8003380:	3b01      	subs	r3, #1
 8003382:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003384:	429a      	cmp	r2, r3
 8003386:	d10f      	bne.n	80033a8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003392:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003394:	429a      	cmp	r2, r3
 8003396:	d107      	bne.n	80033a8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033a2:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80033a4:	429a      	cmp	r2, r3
 80033a6:	d001      	beq.n	80033ac <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80033a8:	2301      	movs	r3, #1
 80033aa:	e000      	b.n	80033ae <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80033ac:	2300      	movs	r3, #0
}
 80033ae:	4618      	mov	r0, r3
 80033b0:	3718      	adds	r7, #24
 80033b2:	46bd      	mov	sp, r7
 80033b4:	bd80      	pop	{r7, pc}
 80033b6:	bf00      	nop
 80033b8:	40023800 	.word	0x40023800

080033bc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80033bc:	b580      	push	{r7, lr}
 80033be:	b082      	sub	sp, #8
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d101      	bne.n	80033ce <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80033ca:	2301      	movs	r3, #1
 80033cc:	e041      	b.n	8003452 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80033d4:	b2db      	uxtb	r3, r3
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d106      	bne.n	80033e8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	2200      	movs	r2, #0
 80033de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80033e2:	6878      	ldr	r0, [r7, #4]
 80033e4:	f000 f839 	bl	800345a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	2202      	movs	r2, #2
 80033ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681a      	ldr	r2, [r3, #0]
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	3304      	adds	r3, #4
 80033f8:	4619      	mov	r1, r3
 80033fa:	4610      	mov	r0, r2
 80033fc:	f000 f9d8 	bl	80037b0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	2201      	movs	r2, #1
 8003404:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	2201      	movs	r2, #1
 800340c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	2201      	movs	r2, #1
 8003414:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	2201      	movs	r2, #1
 800341c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	2201      	movs	r2, #1
 8003424:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	2201      	movs	r2, #1
 800342c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	2201      	movs	r2, #1
 8003434:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	2201      	movs	r2, #1
 800343c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	2201      	movs	r2, #1
 8003444:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	2201      	movs	r2, #1
 800344c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003450:	2300      	movs	r3, #0
}
 8003452:	4618      	mov	r0, r3
 8003454:	3708      	adds	r7, #8
 8003456:	46bd      	mov	sp, r7
 8003458:	bd80      	pop	{r7, pc}

0800345a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800345a:	b480      	push	{r7}
 800345c:	b083      	sub	sp, #12
 800345e:	af00      	add	r7, sp, #0
 8003460:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003462:	bf00      	nop
 8003464:	370c      	adds	r7, #12
 8003466:	46bd      	mov	sp, r7
 8003468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800346c:	4770      	bx	lr
	...

08003470 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003470:	b480      	push	{r7}
 8003472:	b085      	sub	sp, #20
 8003474:	af00      	add	r7, sp, #0
 8003476:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800347e:	b2db      	uxtb	r3, r3
 8003480:	2b01      	cmp	r3, #1
 8003482:	d001      	beq.n	8003488 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003484:	2301      	movs	r3, #1
 8003486:	e04e      	b.n	8003526 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	2202      	movs	r2, #2
 800348c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	68da      	ldr	r2, [r3, #12]
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f042 0201 	orr.w	r2, r2, #1
 800349e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	4a23      	ldr	r2, [pc, #140]	; (8003534 <HAL_TIM_Base_Start_IT+0xc4>)
 80034a6:	4293      	cmp	r3, r2
 80034a8:	d022      	beq.n	80034f0 <HAL_TIM_Base_Start_IT+0x80>
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80034b2:	d01d      	beq.n	80034f0 <HAL_TIM_Base_Start_IT+0x80>
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	4a1f      	ldr	r2, [pc, #124]	; (8003538 <HAL_TIM_Base_Start_IT+0xc8>)
 80034ba:	4293      	cmp	r3, r2
 80034bc:	d018      	beq.n	80034f0 <HAL_TIM_Base_Start_IT+0x80>
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	4a1e      	ldr	r2, [pc, #120]	; (800353c <HAL_TIM_Base_Start_IT+0xcc>)
 80034c4:	4293      	cmp	r3, r2
 80034c6:	d013      	beq.n	80034f0 <HAL_TIM_Base_Start_IT+0x80>
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	4a1c      	ldr	r2, [pc, #112]	; (8003540 <HAL_TIM_Base_Start_IT+0xd0>)
 80034ce:	4293      	cmp	r3, r2
 80034d0:	d00e      	beq.n	80034f0 <HAL_TIM_Base_Start_IT+0x80>
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	4a1b      	ldr	r2, [pc, #108]	; (8003544 <HAL_TIM_Base_Start_IT+0xd4>)
 80034d8:	4293      	cmp	r3, r2
 80034da:	d009      	beq.n	80034f0 <HAL_TIM_Base_Start_IT+0x80>
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	4a19      	ldr	r2, [pc, #100]	; (8003548 <HAL_TIM_Base_Start_IT+0xd8>)
 80034e2:	4293      	cmp	r3, r2
 80034e4:	d004      	beq.n	80034f0 <HAL_TIM_Base_Start_IT+0x80>
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	4a18      	ldr	r2, [pc, #96]	; (800354c <HAL_TIM_Base_Start_IT+0xdc>)
 80034ec:	4293      	cmp	r3, r2
 80034ee:	d111      	bne.n	8003514 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	689b      	ldr	r3, [r3, #8]
 80034f6:	f003 0307 	and.w	r3, r3, #7
 80034fa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	2b06      	cmp	r3, #6
 8003500:	d010      	beq.n	8003524 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	681a      	ldr	r2, [r3, #0]
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f042 0201 	orr.w	r2, r2, #1
 8003510:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003512:	e007      	b.n	8003524 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	681a      	ldr	r2, [r3, #0]
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	f042 0201 	orr.w	r2, r2, #1
 8003522:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003524:	2300      	movs	r3, #0
}
 8003526:	4618      	mov	r0, r3
 8003528:	3714      	adds	r7, #20
 800352a:	46bd      	mov	sp, r7
 800352c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003530:	4770      	bx	lr
 8003532:	bf00      	nop
 8003534:	40010000 	.word	0x40010000
 8003538:	40000400 	.word	0x40000400
 800353c:	40000800 	.word	0x40000800
 8003540:	40000c00 	.word	0x40000c00
 8003544:	40010400 	.word	0x40010400
 8003548:	40014000 	.word	0x40014000
 800354c:	40001800 	.word	0x40001800

08003550 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003550:	b580      	push	{r7, lr}
 8003552:	b082      	sub	sp, #8
 8003554:	af00      	add	r7, sp, #0
 8003556:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	691b      	ldr	r3, [r3, #16]
 800355e:	f003 0302 	and.w	r3, r3, #2
 8003562:	2b02      	cmp	r3, #2
 8003564:	d122      	bne.n	80035ac <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	68db      	ldr	r3, [r3, #12]
 800356c:	f003 0302 	and.w	r3, r3, #2
 8003570:	2b02      	cmp	r3, #2
 8003572:	d11b      	bne.n	80035ac <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f06f 0202 	mvn.w	r2, #2
 800357c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	2201      	movs	r2, #1
 8003582:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	699b      	ldr	r3, [r3, #24]
 800358a:	f003 0303 	and.w	r3, r3, #3
 800358e:	2b00      	cmp	r3, #0
 8003590:	d003      	beq.n	800359a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003592:	6878      	ldr	r0, [r7, #4]
 8003594:	f000 f8ee 	bl	8003774 <HAL_TIM_IC_CaptureCallback>
 8003598:	e005      	b.n	80035a6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800359a:	6878      	ldr	r0, [r7, #4]
 800359c:	f000 f8e0 	bl	8003760 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80035a0:	6878      	ldr	r0, [r7, #4]
 80035a2:	f000 f8f1 	bl	8003788 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	2200      	movs	r2, #0
 80035aa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	691b      	ldr	r3, [r3, #16]
 80035b2:	f003 0304 	and.w	r3, r3, #4
 80035b6:	2b04      	cmp	r3, #4
 80035b8:	d122      	bne.n	8003600 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	68db      	ldr	r3, [r3, #12]
 80035c0:	f003 0304 	and.w	r3, r3, #4
 80035c4:	2b04      	cmp	r3, #4
 80035c6:	d11b      	bne.n	8003600 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f06f 0204 	mvn.w	r2, #4
 80035d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	2202      	movs	r2, #2
 80035d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	699b      	ldr	r3, [r3, #24]
 80035de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d003      	beq.n	80035ee <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80035e6:	6878      	ldr	r0, [r7, #4]
 80035e8:	f000 f8c4 	bl	8003774 <HAL_TIM_IC_CaptureCallback>
 80035ec:	e005      	b.n	80035fa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80035ee:	6878      	ldr	r0, [r7, #4]
 80035f0:	f000 f8b6 	bl	8003760 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80035f4:	6878      	ldr	r0, [r7, #4]
 80035f6:	f000 f8c7 	bl	8003788 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	2200      	movs	r2, #0
 80035fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	691b      	ldr	r3, [r3, #16]
 8003606:	f003 0308 	and.w	r3, r3, #8
 800360a:	2b08      	cmp	r3, #8
 800360c:	d122      	bne.n	8003654 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	68db      	ldr	r3, [r3, #12]
 8003614:	f003 0308 	and.w	r3, r3, #8
 8003618:	2b08      	cmp	r3, #8
 800361a:	d11b      	bne.n	8003654 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f06f 0208 	mvn.w	r2, #8
 8003624:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	2204      	movs	r2, #4
 800362a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	69db      	ldr	r3, [r3, #28]
 8003632:	f003 0303 	and.w	r3, r3, #3
 8003636:	2b00      	cmp	r3, #0
 8003638:	d003      	beq.n	8003642 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800363a:	6878      	ldr	r0, [r7, #4]
 800363c:	f000 f89a 	bl	8003774 <HAL_TIM_IC_CaptureCallback>
 8003640:	e005      	b.n	800364e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003642:	6878      	ldr	r0, [r7, #4]
 8003644:	f000 f88c 	bl	8003760 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003648:	6878      	ldr	r0, [r7, #4]
 800364a:	f000 f89d 	bl	8003788 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	2200      	movs	r2, #0
 8003652:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	691b      	ldr	r3, [r3, #16]
 800365a:	f003 0310 	and.w	r3, r3, #16
 800365e:	2b10      	cmp	r3, #16
 8003660:	d122      	bne.n	80036a8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	68db      	ldr	r3, [r3, #12]
 8003668:	f003 0310 	and.w	r3, r3, #16
 800366c:	2b10      	cmp	r3, #16
 800366e:	d11b      	bne.n	80036a8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	f06f 0210 	mvn.w	r2, #16
 8003678:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	2208      	movs	r2, #8
 800367e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	69db      	ldr	r3, [r3, #28]
 8003686:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800368a:	2b00      	cmp	r3, #0
 800368c:	d003      	beq.n	8003696 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800368e:	6878      	ldr	r0, [r7, #4]
 8003690:	f000 f870 	bl	8003774 <HAL_TIM_IC_CaptureCallback>
 8003694:	e005      	b.n	80036a2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003696:	6878      	ldr	r0, [r7, #4]
 8003698:	f000 f862 	bl	8003760 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800369c:	6878      	ldr	r0, [r7, #4]
 800369e:	f000 f873 	bl	8003788 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	2200      	movs	r2, #0
 80036a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	691b      	ldr	r3, [r3, #16]
 80036ae:	f003 0301 	and.w	r3, r3, #1
 80036b2:	2b01      	cmp	r3, #1
 80036b4:	d10e      	bne.n	80036d4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	68db      	ldr	r3, [r3, #12]
 80036bc:	f003 0301 	and.w	r3, r3, #1
 80036c0:	2b01      	cmp	r3, #1
 80036c2:	d107      	bne.n	80036d4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	f06f 0201 	mvn.w	r2, #1
 80036cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80036ce:	6878      	ldr	r0, [r7, #4]
 80036d0:	f7fd fd1c 	bl	800110c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	691b      	ldr	r3, [r3, #16]
 80036da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036de:	2b80      	cmp	r3, #128	; 0x80
 80036e0:	d10e      	bne.n	8003700 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	68db      	ldr	r3, [r3, #12]
 80036e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036ec:	2b80      	cmp	r3, #128	; 0x80
 80036ee:	d107      	bne.n	8003700 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80036f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80036fa:	6878      	ldr	r0, [r7, #4]
 80036fc:	f000 f902 	bl	8003904 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	691b      	ldr	r3, [r3, #16]
 8003706:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800370a:	2b40      	cmp	r3, #64	; 0x40
 800370c:	d10e      	bne.n	800372c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	68db      	ldr	r3, [r3, #12]
 8003714:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003718:	2b40      	cmp	r3, #64	; 0x40
 800371a:	d107      	bne.n	800372c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003724:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003726:	6878      	ldr	r0, [r7, #4]
 8003728:	f000 f838 	bl	800379c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	691b      	ldr	r3, [r3, #16]
 8003732:	f003 0320 	and.w	r3, r3, #32
 8003736:	2b20      	cmp	r3, #32
 8003738:	d10e      	bne.n	8003758 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	68db      	ldr	r3, [r3, #12]
 8003740:	f003 0320 	and.w	r3, r3, #32
 8003744:	2b20      	cmp	r3, #32
 8003746:	d107      	bne.n	8003758 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f06f 0220 	mvn.w	r2, #32
 8003750:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003752:	6878      	ldr	r0, [r7, #4]
 8003754:	f000 f8cc 	bl	80038f0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003758:	bf00      	nop
 800375a:	3708      	adds	r7, #8
 800375c:	46bd      	mov	sp, r7
 800375e:	bd80      	pop	{r7, pc}

08003760 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003760:	b480      	push	{r7}
 8003762:	b083      	sub	sp, #12
 8003764:	af00      	add	r7, sp, #0
 8003766:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003768:	bf00      	nop
 800376a:	370c      	adds	r7, #12
 800376c:	46bd      	mov	sp, r7
 800376e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003772:	4770      	bx	lr

08003774 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003774:	b480      	push	{r7}
 8003776:	b083      	sub	sp, #12
 8003778:	af00      	add	r7, sp, #0
 800377a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800377c:	bf00      	nop
 800377e:	370c      	adds	r7, #12
 8003780:	46bd      	mov	sp, r7
 8003782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003786:	4770      	bx	lr

08003788 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003788:	b480      	push	{r7}
 800378a:	b083      	sub	sp, #12
 800378c:	af00      	add	r7, sp, #0
 800378e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003790:	bf00      	nop
 8003792:	370c      	adds	r7, #12
 8003794:	46bd      	mov	sp, r7
 8003796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800379a:	4770      	bx	lr

0800379c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800379c:	b480      	push	{r7}
 800379e:	b083      	sub	sp, #12
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80037a4:	bf00      	nop
 80037a6:	370c      	adds	r7, #12
 80037a8:	46bd      	mov	sp, r7
 80037aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ae:	4770      	bx	lr

080037b0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80037b0:	b480      	push	{r7}
 80037b2:	b085      	sub	sp, #20
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	6078      	str	r0, [r7, #4]
 80037b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	4a40      	ldr	r2, [pc, #256]	; (80038c4 <TIM_Base_SetConfig+0x114>)
 80037c4:	4293      	cmp	r3, r2
 80037c6:	d013      	beq.n	80037f0 <TIM_Base_SetConfig+0x40>
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037ce:	d00f      	beq.n	80037f0 <TIM_Base_SetConfig+0x40>
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	4a3d      	ldr	r2, [pc, #244]	; (80038c8 <TIM_Base_SetConfig+0x118>)
 80037d4:	4293      	cmp	r3, r2
 80037d6:	d00b      	beq.n	80037f0 <TIM_Base_SetConfig+0x40>
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	4a3c      	ldr	r2, [pc, #240]	; (80038cc <TIM_Base_SetConfig+0x11c>)
 80037dc:	4293      	cmp	r3, r2
 80037de:	d007      	beq.n	80037f0 <TIM_Base_SetConfig+0x40>
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	4a3b      	ldr	r2, [pc, #236]	; (80038d0 <TIM_Base_SetConfig+0x120>)
 80037e4:	4293      	cmp	r3, r2
 80037e6:	d003      	beq.n	80037f0 <TIM_Base_SetConfig+0x40>
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	4a3a      	ldr	r2, [pc, #232]	; (80038d4 <TIM_Base_SetConfig+0x124>)
 80037ec:	4293      	cmp	r3, r2
 80037ee:	d108      	bne.n	8003802 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80037f6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80037f8:	683b      	ldr	r3, [r7, #0]
 80037fa:	685b      	ldr	r3, [r3, #4]
 80037fc:	68fa      	ldr	r2, [r7, #12]
 80037fe:	4313      	orrs	r3, r2
 8003800:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	4a2f      	ldr	r2, [pc, #188]	; (80038c4 <TIM_Base_SetConfig+0x114>)
 8003806:	4293      	cmp	r3, r2
 8003808:	d02b      	beq.n	8003862 <TIM_Base_SetConfig+0xb2>
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003810:	d027      	beq.n	8003862 <TIM_Base_SetConfig+0xb2>
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	4a2c      	ldr	r2, [pc, #176]	; (80038c8 <TIM_Base_SetConfig+0x118>)
 8003816:	4293      	cmp	r3, r2
 8003818:	d023      	beq.n	8003862 <TIM_Base_SetConfig+0xb2>
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	4a2b      	ldr	r2, [pc, #172]	; (80038cc <TIM_Base_SetConfig+0x11c>)
 800381e:	4293      	cmp	r3, r2
 8003820:	d01f      	beq.n	8003862 <TIM_Base_SetConfig+0xb2>
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	4a2a      	ldr	r2, [pc, #168]	; (80038d0 <TIM_Base_SetConfig+0x120>)
 8003826:	4293      	cmp	r3, r2
 8003828:	d01b      	beq.n	8003862 <TIM_Base_SetConfig+0xb2>
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	4a29      	ldr	r2, [pc, #164]	; (80038d4 <TIM_Base_SetConfig+0x124>)
 800382e:	4293      	cmp	r3, r2
 8003830:	d017      	beq.n	8003862 <TIM_Base_SetConfig+0xb2>
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	4a28      	ldr	r2, [pc, #160]	; (80038d8 <TIM_Base_SetConfig+0x128>)
 8003836:	4293      	cmp	r3, r2
 8003838:	d013      	beq.n	8003862 <TIM_Base_SetConfig+0xb2>
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	4a27      	ldr	r2, [pc, #156]	; (80038dc <TIM_Base_SetConfig+0x12c>)
 800383e:	4293      	cmp	r3, r2
 8003840:	d00f      	beq.n	8003862 <TIM_Base_SetConfig+0xb2>
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	4a26      	ldr	r2, [pc, #152]	; (80038e0 <TIM_Base_SetConfig+0x130>)
 8003846:	4293      	cmp	r3, r2
 8003848:	d00b      	beq.n	8003862 <TIM_Base_SetConfig+0xb2>
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	4a25      	ldr	r2, [pc, #148]	; (80038e4 <TIM_Base_SetConfig+0x134>)
 800384e:	4293      	cmp	r3, r2
 8003850:	d007      	beq.n	8003862 <TIM_Base_SetConfig+0xb2>
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	4a24      	ldr	r2, [pc, #144]	; (80038e8 <TIM_Base_SetConfig+0x138>)
 8003856:	4293      	cmp	r3, r2
 8003858:	d003      	beq.n	8003862 <TIM_Base_SetConfig+0xb2>
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	4a23      	ldr	r2, [pc, #140]	; (80038ec <TIM_Base_SetConfig+0x13c>)
 800385e:	4293      	cmp	r3, r2
 8003860:	d108      	bne.n	8003874 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003868:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800386a:	683b      	ldr	r3, [r7, #0]
 800386c:	68db      	ldr	r3, [r3, #12]
 800386e:	68fa      	ldr	r2, [r7, #12]
 8003870:	4313      	orrs	r3, r2
 8003872:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800387a:	683b      	ldr	r3, [r7, #0]
 800387c:	695b      	ldr	r3, [r3, #20]
 800387e:	4313      	orrs	r3, r2
 8003880:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	68fa      	ldr	r2, [r7, #12]
 8003886:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003888:	683b      	ldr	r3, [r7, #0]
 800388a:	689a      	ldr	r2, [r3, #8]
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003890:	683b      	ldr	r3, [r7, #0]
 8003892:	681a      	ldr	r2, [r3, #0]
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	4a0a      	ldr	r2, [pc, #40]	; (80038c4 <TIM_Base_SetConfig+0x114>)
 800389c:	4293      	cmp	r3, r2
 800389e:	d003      	beq.n	80038a8 <TIM_Base_SetConfig+0xf8>
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	4a0c      	ldr	r2, [pc, #48]	; (80038d4 <TIM_Base_SetConfig+0x124>)
 80038a4:	4293      	cmp	r3, r2
 80038a6:	d103      	bne.n	80038b0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80038a8:	683b      	ldr	r3, [r7, #0]
 80038aa:	691a      	ldr	r2, [r3, #16]
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	2201      	movs	r2, #1
 80038b4:	615a      	str	r2, [r3, #20]
}
 80038b6:	bf00      	nop
 80038b8:	3714      	adds	r7, #20
 80038ba:	46bd      	mov	sp, r7
 80038bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c0:	4770      	bx	lr
 80038c2:	bf00      	nop
 80038c4:	40010000 	.word	0x40010000
 80038c8:	40000400 	.word	0x40000400
 80038cc:	40000800 	.word	0x40000800
 80038d0:	40000c00 	.word	0x40000c00
 80038d4:	40010400 	.word	0x40010400
 80038d8:	40014000 	.word	0x40014000
 80038dc:	40014400 	.word	0x40014400
 80038e0:	40014800 	.word	0x40014800
 80038e4:	40001800 	.word	0x40001800
 80038e8:	40001c00 	.word	0x40001c00
 80038ec:	40002000 	.word	0x40002000

080038f0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80038f0:	b480      	push	{r7}
 80038f2:	b083      	sub	sp, #12
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80038f8:	bf00      	nop
 80038fa:	370c      	adds	r7, #12
 80038fc:	46bd      	mov	sp, r7
 80038fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003902:	4770      	bx	lr

08003904 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003904:	b480      	push	{r7}
 8003906:	b083      	sub	sp, #12
 8003908:	af00      	add	r7, sp, #0
 800390a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800390c:	bf00      	nop
 800390e:	370c      	adds	r7, #12
 8003910:	46bd      	mov	sp, r7
 8003912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003916:	4770      	bx	lr

08003918 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003918:	b580      	push	{r7, lr}
 800391a:	b082      	sub	sp, #8
 800391c:	af00      	add	r7, sp, #0
 800391e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	2b00      	cmp	r3, #0
 8003924:	d101      	bne.n	800392a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003926:	2301      	movs	r3, #1
 8003928:	e03f      	b.n	80039aa <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003930:	b2db      	uxtb	r3, r3
 8003932:	2b00      	cmp	r3, #0
 8003934:	d106      	bne.n	8003944 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	2200      	movs	r2, #0
 800393a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800393e:	6878      	ldr	r0, [r7, #4]
 8003940:	f7fd fd8e 	bl	8001460 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	2224      	movs	r2, #36	; 0x24
 8003948:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	68da      	ldr	r2, [r3, #12]
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800395a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800395c:	6878      	ldr	r0, [r7, #4]
 800395e:	f000 ffd7 	bl	8004910 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	691a      	ldr	r2, [r3, #16]
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003970:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	695a      	ldr	r2, [r3, #20]
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003980:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	68da      	ldr	r2, [r3, #12]
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003990:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	2200      	movs	r2, #0
 8003996:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	2220      	movs	r2, #32
 800399c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	2220      	movs	r2, #32
 80039a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80039a8:	2300      	movs	r3, #0
}
 80039aa:	4618      	mov	r0, r3
 80039ac:	3708      	adds	r7, #8
 80039ae:	46bd      	mov	sp, r7
 80039b0:	bd80      	pop	{r7, pc}
	...

080039b4 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80039b4:	b580      	push	{r7, lr}
 80039b6:	b08c      	sub	sp, #48	; 0x30
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	60f8      	str	r0, [r7, #12]
 80039bc:	60b9      	str	r1, [r7, #8]
 80039be:	4613      	mov	r3, r2
 80039c0:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039c8:	b2db      	uxtb	r3, r3
 80039ca:	2b20      	cmp	r3, #32
 80039cc:	d165      	bne.n	8003a9a <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 80039ce:	68bb      	ldr	r3, [r7, #8]
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d002      	beq.n	80039da <HAL_UART_Transmit_DMA+0x26>
 80039d4:	88fb      	ldrh	r3, [r7, #6]
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d101      	bne.n	80039de <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 80039da:	2301      	movs	r3, #1
 80039dc:	e05e      	b.n	8003a9c <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80039e4:	2b01      	cmp	r3, #1
 80039e6:	d101      	bne.n	80039ec <HAL_UART_Transmit_DMA+0x38>
 80039e8:	2302      	movs	r3, #2
 80039ea:	e057      	b.n	8003a9c <HAL_UART_Transmit_DMA+0xe8>
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	2201      	movs	r2, #1
 80039f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 80039f4:	68ba      	ldr	r2, [r7, #8]
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	88fa      	ldrh	r2, [r7, #6]
 80039fe:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	88fa      	ldrh	r2, [r7, #6]
 8003a04:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	2200      	movs	r2, #0
 8003a0a:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	2221      	movs	r2, #33	; 0x21
 8003a10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a18:	4a22      	ldr	r2, [pc, #136]	; (8003aa4 <HAL_UART_Transmit_DMA+0xf0>)
 8003a1a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a20:	4a21      	ldr	r2, [pc, #132]	; (8003aa8 <HAL_UART_Transmit_DMA+0xf4>)
 8003a22:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a28:	4a20      	ldr	r2, [pc, #128]	; (8003aac <HAL_UART_Transmit_DMA+0xf8>)
 8003a2a:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a30:	2200      	movs	r2, #0
 8003a32:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 8003a34:	f107 0308 	add.w	r3, r7, #8
 8003a38:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8003a3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a40:	6819      	ldr	r1, [r3, #0]
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	3304      	adds	r3, #4
 8003a48:	461a      	mov	r2, r3
 8003a4a:	88fb      	ldrh	r3, [r7, #6]
 8003a4c:	f7fe f99a 	bl	8001d84 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003a58:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	2200      	movs	r2, #0
 8003a5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	3314      	adds	r3, #20
 8003a68:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a6a:	69bb      	ldr	r3, [r7, #24]
 8003a6c:	e853 3f00 	ldrex	r3, [r3]
 8003a70:	617b      	str	r3, [r7, #20]
   return(result);
 8003a72:	697b      	ldr	r3, [r7, #20]
 8003a74:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003a78:	62bb      	str	r3, [r7, #40]	; 0x28
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	3314      	adds	r3, #20
 8003a80:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003a82:	627a      	str	r2, [r7, #36]	; 0x24
 8003a84:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a86:	6a39      	ldr	r1, [r7, #32]
 8003a88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a8a:	e841 2300 	strex	r3, r2, [r1]
 8003a8e:	61fb      	str	r3, [r7, #28]
   return(result);
 8003a90:	69fb      	ldr	r3, [r7, #28]
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d1e5      	bne.n	8003a62 <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 8003a96:	2300      	movs	r3, #0
 8003a98:	e000      	b.n	8003a9c <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 8003a9a:	2302      	movs	r3, #2
  }
}
 8003a9c:	4618      	mov	r0, r3
 8003a9e:	3730      	adds	r7, #48	; 0x30
 8003aa0:	46bd      	mov	sp, r7
 8003aa2:	bd80      	pop	{r7, pc}
 8003aa4:	080041a9 	.word	0x080041a9
 8003aa8:	08004243 	.word	0x08004243
 8003aac:	080043bb 	.word	0x080043bb

08003ab0 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003ab0:	b580      	push	{r7, lr}
 8003ab2:	b084      	sub	sp, #16
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	60f8      	str	r0, [r7, #12]
 8003ab8:	60b9      	str	r1, [r7, #8]
 8003aba:	4613      	mov	r3, r2
 8003abc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003ac4:	b2db      	uxtb	r3, r3
 8003ac6:	2b20      	cmp	r3, #32
 8003ac8:	d11d      	bne.n	8003b06 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8003aca:	68bb      	ldr	r3, [r7, #8]
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d002      	beq.n	8003ad6 <HAL_UART_Receive_DMA+0x26>
 8003ad0:	88fb      	ldrh	r3, [r7, #6]
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d101      	bne.n	8003ada <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8003ad6:	2301      	movs	r3, #1
 8003ad8:	e016      	b.n	8003b08 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ae0:	2b01      	cmp	r3, #1
 8003ae2:	d101      	bne.n	8003ae8 <HAL_UART_Receive_DMA+0x38>
 8003ae4:	2302      	movs	r3, #2
 8003ae6:	e00f      	b.n	8003b08 <HAL_UART_Receive_DMA+0x58>
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	2201      	movs	r2, #1
 8003aec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	2200      	movs	r2, #0
 8003af4:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8003af6:	88fb      	ldrh	r3, [r7, #6]
 8003af8:	461a      	mov	r2, r3
 8003afa:	68b9      	ldr	r1, [r7, #8]
 8003afc:	68f8      	ldr	r0, [r7, #12]
 8003afe:	f000 fca7 	bl	8004450 <UART_Start_Receive_DMA>
 8003b02:	4603      	mov	r3, r0
 8003b04:	e000      	b.n	8003b08 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 8003b06:	2302      	movs	r3, #2
  }
}
 8003b08:	4618      	mov	r0, r3
 8003b0a:	3710      	adds	r7, #16
 8003b0c:	46bd      	mov	sp, r7
 8003b0e:	bd80      	pop	{r7, pc}

08003b10 <HAL_UART_DMAStop>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 8003b10:	b580      	push	{r7, lr}
 8003b12:	b090      	sub	sp, #64	; 0x40
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8003b18:	2300      	movs	r3, #0
 8003b1a:	63fb      	str	r3, [r7, #60]	; 0x3c
     when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_UART_TxCpltCallback() / HAL_UART_RxCpltCallback()
     */

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	695b      	ldr	r3, [r3, #20]
 8003b22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b26:	2b80      	cmp	r3, #128	; 0x80
 8003b28:	bf0c      	ite	eq
 8003b2a:	2301      	moveq	r3, #1
 8003b2c:	2300      	movne	r3, #0
 8003b2e:	b2db      	uxtb	r3, r3
 8003b30:	63fb      	str	r3, [r7, #60]	; 0x3c
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b38:	b2db      	uxtb	r3, r3
 8003b3a:	2b21      	cmp	r3, #33	; 0x21
 8003b3c:	d128      	bne.n	8003b90 <HAL_UART_DMAStop+0x80>
 8003b3e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d025      	beq.n	8003b90 <HAL_UART_DMAStop+0x80>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	3314      	adds	r3, #20
 8003b4a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b4e:	e853 3f00 	ldrex	r3, [r3]
 8003b52:	623b      	str	r3, [r7, #32]
   return(result);
 8003b54:	6a3b      	ldr	r3, [r7, #32]
 8003b56:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003b5a:	63bb      	str	r3, [r7, #56]	; 0x38
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	3314      	adds	r3, #20
 8003b62:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003b64:	633a      	str	r2, [r7, #48]	; 0x30
 8003b66:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b68:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003b6a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003b6c:	e841 2300 	strex	r3, r2, [r1]
 8003b70:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003b72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d1e5      	bne.n	8003b44 <HAL_UART_DMAStop+0x34>

    /* Abort the UART DMA Tx stream */
    if (huart->hdmatx != NULL)
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d004      	beq.n	8003b8a <HAL_UART_DMAStop+0x7a>
    {
      HAL_DMA_Abort(huart->hdmatx);
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b84:	4618      	mov	r0, r3
 8003b86:	f7fe f955 	bl	8001e34 <HAL_DMA_Abort>
    }
    UART_EndTxTransfer(huart);
 8003b8a:	6878      	ldr	r0, [r7, #4]
 8003b8c:	f000 fcfe 	bl	800458c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	695b      	ldr	r3, [r3, #20]
 8003b96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b9a:	2b40      	cmp	r3, #64	; 0x40
 8003b9c:	bf0c      	ite	eq
 8003b9e:	2301      	moveq	r3, #1
 8003ba0:	2300      	movne	r3, #0
 8003ba2:	b2db      	uxtb	r3, r3
 8003ba4:	63fb      	str	r3, [r7, #60]	; 0x3c
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003bac:	b2db      	uxtb	r3, r3
 8003bae:	2b22      	cmp	r3, #34	; 0x22
 8003bb0:	d128      	bne.n	8003c04 <HAL_UART_DMAStop+0xf4>
 8003bb2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d025      	beq.n	8003c04 <HAL_UART_DMAStop+0xf4>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	3314      	adds	r3, #20
 8003bbe:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bc0:	693b      	ldr	r3, [r7, #16]
 8003bc2:	e853 3f00 	ldrex	r3, [r3]
 8003bc6:	60fb      	str	r3, [r7, #12]
   return(result);
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003bce:	637b      	str	r3, [r7, #52]	; 0x34
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	3314      	adds	r3, #20
 8003bd6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003bd8:	61fa      	str	r2, [r7, #28]
 8003bda:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bdc:	69b9      	ldr	r1, [r7, #24]
 8003bde:	69fa      	ldr	r2, [r7, #28]
 8003be0:	e841 2300 	strex	r3, r2, [r1]
 8003be4:	617b      	str	r3, [r7, #20]
   return(result);
 8003be6:	697b      	ldr	r3, [r7, #20]
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d1e5      	bne.n	8003bb8 <HAL_UART_DMAStop+0xa8>

    /* Abort the UART DMA Rx stream */
    if (huart->hdmarx != NULL)
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d004      	beq.n	8003bfe <HAL_UART_DMAStop+0xee>
    {
      HAL_DMA_Abort(huart->hdmarx);
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bf8:	4618      	mov	r0, r3
 8003bfa:	f7fe f91b 	bl	8001e34 <HAL_DMA_Abort>
    }
    UART_EndRxTransfer(huart);
 8003bfe:	6878      	ldr	r0, [r7, #4]
 8003c00:	f000 fcec 	bl	80045dc <UART_EndRxTransfer>
  }

  return HAL_OK;
 8003c04:	2300      	movs	r3, #0
}
 8003c06:	4618      	mov	r0, r3
 8003c08:	3740      	adds	r7, #64	; 0x40
 8003c0a:	46bd      	mov	sp, r7
 8003c0c:	bd80      	pop	{r7, pc}
	...

08003c10 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003c10:	b580      	push	{r7, lr}
 8003c12:	b0ba      	sub	sp, #232	; 0xe8
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	68db      	ldr	r3, [r3, #12]
 8003c28:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	695b      	ldr	r3, [r3, #20]
 8003c32:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8003c36:	2300      	movs	r3, #0
 8003c38:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8003c3c:	2300      	movs	r3, #0
 8003c3e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003c42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c46:	f003 030f 	and.w	r3, r3, #15
 8003c4a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8003c4e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d10f      	bne.n	8003c76 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003c56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c5a:	f003 0320 	and.w	r3, r3, #32
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d009      	beq.n	8003c76 <HAL_UART_IRQHandler+0x66>
 8003c62:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003c66:	f003 0320 	and.w	r3, r3, #32
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d003      	beq.n	8003c76 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003c6e:	6878      	ldr	r0, [r7, #4]
 8003c70:	f000 fd93 	bl	800479a <UART_Receive_IT>
      return;
 8003c74:	e256      	b.n	8004124 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003c76:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	f000 80de 	beq.w	8003e3c <HAL_UART_IRQHandler+0x22c>
 8003c80:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003c84:	f003 0301 	and.w	r3, r3, #1
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d106      	bne.n	8003c9a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003c8c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003c90:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	f000 80d1 	beq.w	8003e3c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003c9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c9e:	f003 0301 	and.w	r3, r3, #1
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d00b      	beq.n	8003cbe <HAL_UART_IRQHandler+0xae>
 8003ca6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003caa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d005      	beq.n	8003cbe <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cb6:	f043 0201 	orr.w	r2, r3, #1
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003cbe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003cc2:	f003 0304 	and.w	r3, r3, #4
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d00b      	beq.n	8003ce2 <HAL_UART_IRQHandler+0xd2>
 8003cca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003cce:	f003 0301 	and.w	r3, r3, #1
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d005      	beq.n	8003ce2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cda:	f043 0202 	orr.w	r2, r3, #2
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003ce2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ce6:	f003 0302 	and.w	r3, r3, #2
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d00b      	beq.n	8003d06 <HAL_UART_IRQHandler+0xf6>
 8003cee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003cf2:	f003 0301 	and.w	r3, r3, #1
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d005      	beq.n	8003d06 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cfe:	f043 0204 	orr.w	r2, r3, #4
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003d06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d0a:	f003 0308 	and.w	r3, r3, #8
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d011      	beq.n	8003d36 <HAL_UART_IRQHandler+0x126>
 8003d12:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003d16:	f003 0320 	and.w	r3, r3, #32
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d105      	bne.n	8003d2a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003d1e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003d22:	f003 0301 	and.w	r3, r3, #1
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d005      	beq.n	8003d36 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d2e:	f043 0208 	orr.w	r2, r3, #8
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	f000 81ed 	beq.w	800411a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003d40:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d44:	f003 0320 	and.w	r3, r3, #32
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d008      	beq.n	8003d5e <HAL_UART_IRQHandler+0x14e>
 8003d4c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003d50:	f003 0320 	and.w	r3, r3, #32
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d002      	beq.n	8003d5e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003d58:	6878      	ldr	r0, [r7, #4]
 8003d5a:	f000 fd1e 	bl	800479a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	695b      	ldr	r3, [r3, #20]
 8003d64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d68:	2b40      	cmp	r3, #64	; 0x40
 8003d6a:	bf0c      	ite	eq
 8003d6c:	2301      	moveq	r3, #1
 8003d6e:	2300      	movne	r3, #0
 8003d70:	b2db      	uxtb	r3, r3
 8003d72:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d7a:	f003 0308 	and.w	r3, r3, #8
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d103      	bne.n	8003d8a <HAL_UART_IRQHandler+0x17a>
 8003d82:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d04f      	beq.n	8003e2a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003d8a:	6878      	ldr	r0, [r7, #4]
 8003d8c:	f000 fc26 	bl	80045dc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	695b      	ldr	r3, [r3, #20]
 8003d96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d9a:	2b40      	cmp	r3, #64	; 0x40
 8003d9c:	d141      	bne.n	8003e22 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	3314      	adds	r3, #20
 8003da4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003da8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003dac:	e853 3f00 	ldrex	r3, [r3]
 8003db0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003db4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003db8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003dbc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	3314      	adds	r3, #20
 8003dc6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003dca:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003dce:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dd2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003dd6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003dda:	e841 2300 	strex	r3, r2, [r1]
 8003dde:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003de2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d1d9      	bne.n	8003d9e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d013      	beq.n	8003e1a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003df6:	4a7d      	ldr	r2, [pc, #500]	; (8003fec <HAL_UART_IRQHandler+0x3dc>)
 8003df8:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dfe:	4618      	mov	r0, r3
 8003e00:	f7fe f888 	bl	8001f14 <HAL_DMA_Abort_IT>
 8003e04:	4603      	mov	r3, r0
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d016      	beq.n	8003e38 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e0e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e10:	687a      	ldr	r2, [r7, #4]
 8003e12:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003e14:	4610      	mov	r0, r2
 8003e16:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e18:	e00e      	b.n	8003e38 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003e1a:	6878      	ldr	r0, [r7, #4]
 8003e1c:	f000 f9ae 	bl	800417c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e20:	e00a      	b.n	8003e38 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003e22:	6878      	ldr	r0, [r7, #4]
 8003e24:	f000 f9aa 	bl	800417c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e28:	e006      	b.n	8003e38 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003e2a:	6878      	ldr	r0, [r7, #4]
 8003e2c:	f000 f9a6 	bl	800417c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	2200      	movs	r2, #0
 8003e34:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8003e36:	e170      	b.n	800411a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e38:	bf00      	nop
    return;
 8003e3a:	e16e      	b.n	800411a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e40:	2b01      	cmp	r3, #1
 8003e42:	f040 814a 	bne.w	80040da <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003e46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e4a:	f003 0310 	and.w	r3, r3, #16
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	f000 8143 	beq.w	80040da <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003e54:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003e58:	f003 0310 	and.w	r3, r3, #16
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	f000 813c 	beq.w	80040da <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003e62:	2300      	movs	r3, #0
 8003e64:	60bb      	str	r3, [r7, #8]
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	60bb      	str	r3, [r7, #8]
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	685b      	ldr	r3, [r3, #4]
 8003e74:	60bb      	str	r3, [r7, #8]
 8003e76:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	695b      	ldr	r3, [r3, #20]
 8003e7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e82:	2b40      	cmp	r3, #64	; 0x40
 8003e84:	f040 80b4 	bne.w	8003ff0 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	685b      	ldr	r3, [r3, #4]
 8003e90:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003e94:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	f000 8140 	beq.w	800411e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003ea2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003ea6:	429a      	cmp	r2, r3
 8003ea8:	f080 8139 	bcs.w	800411e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003eb2:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003eb8:	69db      	ldr	r3, [r3, #28]
 8003eba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003ebe:	f000 8088 	beq.w	8003fd2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	330c      	adds	r3, #12
 8003ec8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ecc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003ed0:	e853 3f00 	ldrex	r3, [r3]
 8003ed4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003ed8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003edc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003ee0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	330c      	adds	r3, #12
 8003eea:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8003eee:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003ef2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ef6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003efa:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003efe:	e841 2300 	strex	r3, r2, [r1]
 8003f02:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003f06:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d1d9      	bne.n	8003ec2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	3314      	adds	r3, #20
 8003f14:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f16:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003f18:	e853 3f00 	ldrex	r3, [r3]
 8003f1c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003f1e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003f20:	f023 0301 	bic.w	r3, r3, #1
 8003f24:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	3314      	adds	r3, #20
 8003f2e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003f32:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003f36:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f38:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003f3a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003f3e:	e841 2300 	strex	r3, r2, [r1]
 8003f42:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003f44:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d1e1      	bne.n	8003f0e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	3314      	adds	r3, #20
 8003f50:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f52:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003f54:	e853 3f00 	ldrex	r3, [r3]
 8003f58:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003f5a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003f5c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003f60:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	3314      	adds	r3, #20
 8003f6a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003f6e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003f70:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f72:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003f74:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003f76:	e841 2300 	strex	r3, r2, [r1]
 8003f7a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003f7c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d1e3      	bne.n	8003f4a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	2220      	movs	r2, #32
 8003f86:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	2200      	movs	r2, #0
 8003f8e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	330c      	adds	r3, #12
 8003f96:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f98:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003f9a:	e853 3f00 	ldrex	r3, [r3]
 8003f9e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003fa0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003fa2:	f023 0310 	bic.w	r3, r3, #16
 8003fa6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	330c      	adds	r3, #12
 8003fb0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8003fb4:	65ba      	str	r2, [r7, #88]	; 0x58
 8003fb6:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fb8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003fba:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003fbc:	e841 2300 	strex	r3, r2, [r1]
 8003fc0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003fc2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d1e3      	bne.n	8003f90 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fcc:	4618      	mov	r0, r3
 8003fce:	f7fd ff31 	bl	8001e34 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003fda:	b29b      	uxth	r3, r3
 8003fdc:	1ad3      	subs	r3, r2, r3
 8003fde:	b29b      	uxth	r3, r3
 8003fe0:	4619      	mov	r1, r3
 8003fe2:	6878      	ldr	r0, [r7, #4]
 8003fe4:	f000 f8d4 	bl	8004190 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003fe8:	e099      	b.n	800411e <HAL_UART_IRQHandler+0x50e>
 8003fea:	bf00      	nop
 8003fec:	080046a3 	.word	0x080046a3
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003ff8:	b29b      	uxth	r3, r3
 8003ffa:	1ad3      	subs	r3, r2, r3
 8003ffc:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004004:	b29b      	uxth	r3, r3
 8004006:	2b00      	cmp	r3, #0
 8004008:	f000 808b 	beq.w	8004122 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800400c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004010:	2b00      	cmp	r3, #0
 8004012:	f000 8086 	beq.w	8004122 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	330c      	adds	r3, #12
 800401c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800401e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004020:	e853 3f00 	ldrex	r3, [r3]
 8004024:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004026:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004028:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800402c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	330c      	adds	r3, #12
 8004036:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800403a:	647a      	str	r2, [r7, #68]	; 0x44
 800403c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800403e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004040:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004042:	e841 2300 	strex	r3, r2, [r1]
 8004046:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004048:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800404a:	2b00      	cmp	r3, #0
 800404c:	d1e3      	bne.n	8004016 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	3314      	adds	r3, #20
 8004054:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004056:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004058:	e853 3f00 	ldrex	r3, [r3]
 800405c:	623b      	str	r3, [r7, #32]
   return(result);
 800405e:	6a3b      	ldr	r3, [r7, #32]
 8004060:	f023 0301 	bic.w	r3, r3, #1
 8004064:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	3314      	adds	r3, #20
 800406e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004072:	633a      	str	r2, [r7, #48]	; 0x30
 8004074:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004076:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004078:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800407a:	e841 2300 	strex	r3, r2, [r1]
 800407e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004080:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004082:	2b00      	cmp	r3, #0
 8004084:	d1e3      	bne.n	800404e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	2220      	movs	r2, #32
 800408a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	2200      	movs	r2, #0
 8004092:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	330c      	adds	r3, #12
 800409a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800409c:	693b      	ldr	r3, [r7, #16]
 800409e:	e853 3f00 	ldrex	r3, [r3]
 80040a2:	60fb      	str	r3, [r7, #12]
   return(result);
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	f023 0310 	bic.w	r3, r3, #16
 80040aa:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	330c      	adds	r3, #12
 80040b4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80040b8:	61fa      	str	r2, [r7, #28]
 80040ba:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040bc:	69b9      	ldr	r1, [r7, #24]
 80040be:	69fa      	ldr	r2, [r7, #28]
 80040c0:	e841 2300 	strex	r3, r2, [r1]
 80040c4:	617b      	str	r3, [r7, #20]
   return(result);
 80040c6:	697b      	ldr	r3, [r7, #20]
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d1e3      	bne.n	8004094 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80040cc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80040d0:	4619      	mov	r1, r3
 80040d2:	6878      	ldr	r0, [r7, #4]
 80040d4:	f000 f85c 	bl	8004190 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80040d8:	e023      	b.n	8004122 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80040da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80040de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d009      	beq.n	80040fa <HAL_UART_IRQHandler+0x4ea>
 80040e6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80040ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d003      	beq.n	80040fa <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80040f2:	6878      	ldr	r0, [r7, #4]
 80040f4:	f000 fae9 	bl	80046ca <UART_Transmit_IT>
    return;
 80040f8:	e014      	b.n	8004124 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80040fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80040fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004102:	2b00      	cmp	r3, #0
 8004104:	d00e      	beq.n	8004124 <HAL_UART_IRQHandler+0x514>
 8004106:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800410a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800410e:	2b00      	cmp	r3, #0
 8004110:	d008      	beq.n	8004124 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8004112:	6878      	ldr	r0, [r7, #4]
 8004114:	f000 fb29 	bl	800476a <UART_EndTransmit_IT>
    return;
 8004118:	e004      	b.n	8004124 <HAL_UART_IRQHandler+0x514>
    return;
 800411a:	bf00      	nop
 800411c:	e002      	b.n	8004124 <HAL_UART_IRQHandler+0x514>
      return;
 800411e:	bf00      	nop
 8004120:	e000      	b.n	8004124 <HAL_UART_IRQHandler+0x514>
      return;
 8004122:	bf00      	nop
  }
}
 8004124:	37e8      	adds	r7, #232	; 0xe8
 8004126:	46bd      	mov	sp, r7
 8004128:	bd80      	pop	{r7, pc}
 800412a:	bf00      	nop

0800412c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800412c:	b480      	push	{r7}
 800412e:	b083      	sub	sp, #12
 8004130:	af00      	add	r7, sp, #0
 8004132:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004134:	bf00      	nop
 8004136:	370c      	adds	r7, #12
 8004138:	46bd      	mov	sp, r7
 800413a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800413e:	4770      	bx	lr

08004140 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004140:	b480      	push	{r7}
 8004142:	b083      	sub	sp, #12
 8004144:	af00      	add	r7, sp, #0
 8004146:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8004148:	bf00      	nop
 800414a:	370c      	adds	r7, #12
 800414c:	46bd      	mov	sp, r7
 800414e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004152:	4770      	bx	lr

08004154 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004154:	b480      	push	{r7}
 8004156:	b083      	sub	sp, #12
 8004158:	af00      	add	r7, sp, #0
 800415a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800415c:	bf00      	nop
 800415e:	370c      	adds	r7, #12
 8004160:	46bd      	mov	sp, r7
 8004162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004166:	4770      	bx	lr

08004168 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004168:	b480      	push	{r7}
 800416a:	b083      	sub	sp, #12
 800416c:	af00      	add	r7, sp, #0
 800416e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8004170:	bf00      	nop
 8004172:	370c      	adds	r7, #12
 8004174:	46bd      	mov	sp, r7
 8004176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800417a:	4770      	bx	lr

0800417c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800417c:	b480      	push	{r7}
 800417e:	b083      	sub	sp, #12
 8004180:	af00      	add	r7, sp, #0
 8004182:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004184:	bf00      	nop
 8004186:	370c      	adds	r7, #12
 8004188:	46bd      	mov	sp, r7
 800418a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800418e:	4770      	bx	lr

08004190 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004190:	b480      	push	{r7}
 8004192:	b083      	sub	sp, #12
 8004194:	af00      	add	r7, sp, #0
 8004196:	6078      	str	r0, [r7, #4]
 8004198:	460b      	mov	r3, r1
 800419a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800419c:	bf00      	nop
 800419e:	370c      	adds	r7, #12
 80041a0:	46bd      	mov	sp, r7
 80041a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a6:	4770      	bx	lr

080041a8 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80041a8:	b580      	push	{r7, lr}
 80041aa:	b090      	sub	sp, #64	; 0x40
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041b4:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d137      	bne.n	8004234 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 80041c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80041c6:	2200      	movs	r2, #0
 80041c8:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80041ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	3314      	adds	r3, #20
 80041d0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041d4:	e853 3f00 	ldrex	r3, [r3]
 80041d8:	623b      	str	r3, [r7, #32]
   return(result);
 80041da:	6a3b      	ldr	r3, [r7, #32]
 80041dc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80041e0:	63bb      	str	r3, [r7, #56]	; 0x38
 80041e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	3314      	adds	r3, #20
 80041e8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80041ea:	633a      	str	r2, [r7, #48]	; 0x30
 80041ec:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041ee:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80041f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80041f2:	e841 2300 	strex	r3, r2, [r1]
 80041f6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80041f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d1e5      	bne.n	80041ca <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80041fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	330c      	adds	r3, #12
 8004204:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004206:	693b      	ldr	r3, [r7, #16]
 8004208:	e853 3f00 	ldrex	r3, [r3]
 800420c:	60fb      	str	r3, [r7, #12]
   return(result);
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004214:	637b      	str	r3, [r7, #52]	; 0x34
 8004216:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	330c      	adds	r3, #12
 800421c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800421e:	61fa      	str	r2, [r7, #28]
 8004220:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004222:	69b9      	ldr	r1, [r7, #24]
 8004224:	69fa      	ldr	r2, [r7, #28]
 8004226:	e841 2300 	strex	r3, r2, [r1]
 800422a:	617b      	str	r3, [r7, #20]
   return(result);
 800422c:	697b      	ldr	r3, [r7, #20]
 800422e:	2b00      	cmp	r3, #0
 8004230:	d1e5      	bne.n	80041fe <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004232:	e002      	b.n	800423a <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8004234:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8004236:	f7ff ff79 	bl	800412c <HAL_UART_TxCpltCallback>
}
 800423a:	bf00      	nop
 800423c:	3740      	adds	r7, #64	; 0x40
 800423e:	46bd      	mov	sp, r7
 8004240:	bd80      	pop	{r7, pc}

08004242 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004242:	b580      	push	{r7, lr}
 8004244:	b084      	sub	sp, #16
 8004246:	af00      	add	r7, sp, #0
 8004248:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800424e:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8004250:	68f8      	ldr	r0, [r7, #12]
 8004252:	f7ff ff75 	bl	8004140 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004256:	bf00      	nop
 8004258:	3710      	adds	r7, #16
 800425a:	46bd      	mov	sp, r7
 800425c:	bd80      	pop	{r7, pc}

0800425e <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800425e:	b580      	push	{r7, lr}
 8004260:	b09c      	sub	sp, #112	; 0x70
 8004262:	af00      	add	r7, sp, #0
 8004264:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800426a:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004276:	2b00      	cmp	r3, #0
 8004278:	d172      	bne.n	8004360 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 800427a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800427c:	2200      	movs	r2, #0
 800427e:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004280:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	330c      	adds	r3, #12
 8004286:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004288:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800428a:	e853 3f00 	ldrex	r3, [r3]
 800428e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004290:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004292:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004296:	66bb      	str	r3, [r7, #104]	; 0x68
 8004298:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	330c      	adds	r3, #12
 800429e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80042a0:	65ba      	str	r2, [r7, #88]	; 0x58
 80042a2:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042a4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80042a6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80042a8:	e841 2300 	strex	r3, r2, [r1]
 80042ac:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80042ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d1e5      	bne.n	8004280 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80042b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	3314      	adds	r3, #20
 80042ba:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042be:	e853 3f00 	ldrex	r3, [r3]
 80042c2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80042c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80042c6:	f023 0301 	bic.w	r3, r3, #1
 80042ca:	667b      	str	r3, [r7, #100]	; 0x64
 80042cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	3314      	adds	r3, #20
 80042d2:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80042d4:	647a      	str	r2, [r7, #68]	; 0x44
 80042d6:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042d8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80042da:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80042dc:	e841 2300 	strex	r3, r2, [r1]
 80042e0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80042e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d1e5      	bne.n	80042b4 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80042e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	3314      	adds	r3, #20
 80042ee:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042f2:	e853 3f00 	ldrex	r3, [r3]
 80042f6:	623b      	str	r3, [r7, #32]
   return(result);
 80042f8:	6a3b      	ldr	r3, [r7, #32]
 80042fa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80042fe:	663b      	str	r3, [r7, #96]	; 0x60
 8004300:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	3314      	adds	r3, #20
 8004306:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004308:	633a      	str	r2, [r7, #48]	; 0x30
 800430a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800430c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800430e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004310:	e841 2300 	strex	r3, r2, [r1]
 8004314:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004316:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004318:	2b00      	cmp	r3, #0
 800431a:	d1e5      	bne.n	80042e8 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800431c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800431e:	2220      	movs	r2, #32
 8004320:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004324:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004326:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004328:	2b01      	cmp	r3, #1
 800432a:	d119      	bne.n	8004360 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800432c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	330c      	adds	r3, #12
 8004332:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004334:	693b      	ldr	r3, [r7, #16]
 8004336:	e853 3f00 	ldrex	r3, [r3]
 800433a:	60fb      	str	r3, [r7, #12]
   return(result);
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	f023 0310 	bic.w	r3, r3, #16
 8004342:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004344:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	330c      	adds	r3, #12
 800434a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800434c:	61fa      	str	r2, [r7, #28]
 800434e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004350:	69b9      	ldr	r1, [r7, #24]
 8004352:	69fa      	ldr	r2, [r7, #28]
 8004354:	e841 2300 	strex	r3, r2, [r1]
 8004358:	617b      	str	r3, [r7, #20]
   return(result);
 800435a:	697b      	ldr	r3, [r7, #20]
 800435c:	2b00      	cmp	r3, #0
 800435e:	d1e5      	bne.n	800432c <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004360:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004362:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004364:	2b01      	cmp	r3, #1
 8004366:	d106      	bne.n	8004376 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004368:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800436a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800436c:	4619      	mov	r1, r3
 800436e:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8004370:	f7ff ff0e 	bl	8004190 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004374:	e002      	b.n	800437c <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8004376:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8004378:	f7ff feec 	bl	8004154 <HAL_UART_RxCpltCallback>
}
 800437c:	bf00      	nop
 800437e:	3770      	adds	r7, #112	; 0x70
 8004380:	46bd      	mov	sp, r7
 8004382:	bd80      	pop	{r7, pc}

08004384 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004384:	b580      	push	{r7, lr}
 8004386:	b084      	sub	sp, #16
 8004388:	af00      	add	r7, sp, #0
 800438a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004390:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004396:	2b01      	cmp	r3, #1
 8004398:	d108      	bne.n	80043ac <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800439e:	085b      	lsrs	r3, r3, #1
 80043a0:	b29b      	uxth	r3, r3
 80043a2:	4619      	mov	r1, r3
 80043a4:	68f8      	ldr	r0, [r7, #12]
 80043a6:	f7ff fef3 	bl	8004190 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80043aa:	e002      	b.n	80043b2 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 80043ac:	68f8      	ldr	r0, [r7, #12]
 80043ae:	f7ff fedb 	bl	8004168 <HAL_UART_RxHalfCpltCallback>
}
 80043b2:	bf00      	nop
 80043b4:	3710      	adds	r7, #16
 80043b6:	46bd      	mov	sp, r7
 80043b8:	bd80      	pop	{r7, pc}

080043ba <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80043ba:	b580      	push	{r7, lr}
 80043bc:	b084      	sub	sp, #16
 80043be:	af00      	add	r7, sp, #0
 80043c0:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80043c2:	2300      	movs	r3, #0
 80043c4:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043ca:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80043cc:	68bb      	ldr	r3, [r7, #8]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	695b      	ldr	r3, [r3, #20]
 80043d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043d6:	2b80      	cmp	r3, #128	; 0x80
 80043d8:	bf0c      	ite	eq
 80043da:	2301      	moveq	r3, #1
 80043dc:	2300      	movne	r3, #0
 80043de:	b2db      	uxtb	r3, r3
 80043e0:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80043e2:	68bb      	ldr	r3, [r7, #8]
 80043e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80043e8:	b2db      	uxtb	r3, r3
 80043ea:	2b21      	cmp	r3, #33	; 0x21
 80043ec:	d108      	bne.n	8004400 <UART_DMAError+0x46>
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d005      	beq.n	8004400 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80043f4:	68bb      	ldr	r3, [r7, #8]
 80043f6:	2200      	movs	r2, #0
 80043f8:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 80043fa:	68b8      	ldr	r0, [r7, #8]
 80043fc:	f000 f8c6 	bl	800458c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004400:	68bb      	ldr	r3, [r7, #8]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	695b      	ldr	r3, [r3, #20]
 8004406:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800440a:	2b40      	cmp	r3, #64	; 0x40
 800440c:	bf0c      	ite	eq
 800440e:	2301      	moveq	r3, #1
 8004410:	2300      	movne	r3, #0
 8004412:	b2db      	uxtb	r3, r3
 8004414:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8004416:	68bb      	ldr	r3, [r7, #8]
 8004418:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800441c:	b2db      	uxtb	r3, r3
 800441e:	2b22      	cmp	r3, #34	; 0x22
 8004420:	d108      	bne.n	8004434 <UART_DMAError+0x7a>
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	2b00      	cmp	r3, #0
 8004426:	d005      	beq.n	8004434 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8004428:	68bb      	ldr	r3, [r7, #8]
 800442a:	2200      	movs	r2, #0
 800442c:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800442e:	68b8      	ldr	r0, [r7, #8]
 8004430:	f000 f8d4 	bl	80045dc <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8004434:	68bb      	ldr	r3, [r7, #8]
 8004436:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004438:	f043 0210 	orr.w	r2, r3, #16
 800443c:	68bb      	ldr	r3, [r7, #8]
 800443e:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004440:	68b8      	ldr	r0, [r7, #8]
 8004442:	f7ff fe9b 	bl	800417c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004446:	bf00      	nop
 8004448:	3710      	adds	r7, #16
 800444a:	46bd      	mov	sp, r7
 800444c:	bd80      	pop	{r7, pc}
	...

08004450 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004450:	b580      	push	{r7, lr}
 8004452:	b098      	sub	sp, #96	; 0x60
 8004454:	af00      	add	r7, sp, #0
 8004456:	60f8      	str	r0, [r7, #12]
 8004458:	60b9      	str	r1, [r7, #8]
 800445a:	4613      	mov	r3, r2
 800445c:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800445e:	68ba      	ldr	r2, [r7, #8]
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	88fa      	ldrh	r2, [r7, #6]
 8004468:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	2200      	movs	r2, #0
 800446e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	2222      	movs	r2, #34	; 0x22
 8004474:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800447c:	4a40      	ldr	r2, [pc, #256]	; (8004580 <UART_Start_Receive_DMA+0x130>)
 800447e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004484:	4a3f      	ldr	r2, [pc, #252]	; (8004584 <UART_Start_Receive_DMA+0x134>)
 8004486:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800448c:	4a3e      	ldr	r2, [pc, #248]	; (8004588 <UART_Start_Receive_DMA+0x138>)
 800448e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004494:	2200      	movs	r2, #0
 8004496:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8004498:	f107 0308 	add.w	r3, r7, #8
 800449c:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	3304      	adds	r3, #4
 80044a8:	4619      	mov	r1, r3
 80044aa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80044ac:	681a      	ldr	r2, [r3, #0]
 80044ae:	88fb      	ldrh	r3, [r7, #6]
 80044b0:	f7fd fc68 	bl	8001d84 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 80044b4:	2300      	movs	r3, #0
 80044b6:	613b      	str	r3, [r7, #16]
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	613b      	str	r3, [r7, #16]
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	685b      	ldr	r3, [r3, #4]
 80044c6:	613b      	str	r3, [r7, #16]
 80044c8:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	2200      	movs	r2, #0
 80044ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	691b      	ldr	r3, [r3, #16]
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d019      	beq.n	800450e <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	330c      	adds	r3, #12
 80044e0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80044e4:	e853 3f00 	ldrex	r3, [r3]
 80044e8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80044ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80044ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80044f0:	65bb      	str	r3, [r7, #88]	; 0x58
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	330c      	adds	r3, #12
 80044f8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80044fa:	64fa      	str	r2, [r7, #76]	; 0x4c
 80044fc:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044fe:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8004500:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004502:	e841 2300 	strex	r3, r2, [r1]
 8004506:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8004508:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800450a:	2b00      	cmp	r3, #0
 800450c:	d1e5      	bne.n	80044da <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	3314      	adds	r3, #20
 8004514:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004516:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004518:	e853 3f00 	ldrex	r3, [r3]
 800451c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800451e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004520:	f043 0301 	orr.w	r3, r3, #1
 8004524:	657b      	str	r3, [r7, #84]	; 0x54
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	3314      	adds	r3, #20
 800452c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800452e:	63ba      	str	r2, [r7, #56]	; 0x38
 8004530:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004532:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8004534:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004536:	e841 2300 	strex	r3, r2, [r1]
 800453a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800453c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800453e:	2b00      	cmp	r3, #0
 8004540:	d1e5      	bne.n	800450e <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	3314      	adds	r3, #20
 8004548:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800454a:	69bb      	ldr	r3, [r7, #24]
 800454c:	e853 3f00 	ldrex	r3, [r3]
 8004550:	617b      	str	r3, [r7, #20]
   return(result);
 8004552:	697b      	ldr	r3, [r7, #20]
 8004554:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004558:	653b      	str	r3, [r7, #80]	; 0x50
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	3314      	adds	r3, #20
 8004560:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8004562:	627a      	str	r2, [r7, #36]	; 0x24
 8004564:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004566:	6a39      	ldr	r1, [r7, #32]
 8004568:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800456a:	e841 2300 	strex	r3, r2, [r1]
 800456e:	61fb      	str	r3, [r7, #28]
   return(result);
 8004570:	69fb      	ldr	r3, [r7, #28]
 8004572:	2b00      	cmp	r3, #0
 8004574:	d1e5      	bne.n	8004542 <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 8004576:	2300      	movs	r3, #0
}
 8004578:	4618      	mov	r0, r3
 800457a:	3760      	adds	r7, #96	; 0x60
 800457c:	46bd      	mov	sp, r7
 800457e:	bd80      	pop	{r7, pc}
 8004580:	0800425f 	.word	0x0800425f
 8004584:	08004385 	.word	0x08004385
 8004588:	080043bb 	.word	0x080043bb

0800458c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800458c:	b480      	push	{r7}
 800458e:	b089      	sub	sp, #36	; 0x24
 8004590:	af00      	add	r7, sp, #0
 8004592:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	330c      	adds	r3, #12
 800459a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	e853 3f00 	ldrex	r3, [r3]
 80045a2:	60bb      	str	r3, [r7, #8]
   return(result);
 80045a4:	68bb      	ldr	r3, [r7, #8]
 80045a6:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80045aa:	61fb      	str	r3, [r7, #28]
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	330c      	adds	r3, #12
 80045b2:	69fa      	ldr	r2, [r7, #28]
 80045b4:	61ba      	str	r2, [r7, #24]
 80045b6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045b8:	6979      	ldr	r1, [r7, #20]
 80045ba:	69ba      	ldr	r2, [r7, #24]
 80045bc:	e841 2300 	strex	r3, r2, [r1]
 80045c0:	613b      	str	r3, [r7, #16]
   return(result);
 80045c2:	693b      	ldr	r3, [r7, #16]
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d1e5      	bne.n	8004594 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	2220      	movs	r2, #32
 80045cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 80045d0:	bf00      	nop
 80045d2:	3724      	adds	r7, #36	; 0x24
 80045d4:	46bd      	mov	sp, r7
 80045d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045da:	4770      	bx	lr

080045dc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80045dc:	b480      	push	{r7}
 80045de:	b095      	sub	sp, #84	; 0x54
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	330c      	adds	r3, #12
 80045ea:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80045ee:	e853 3f00 	ldrex	r3, [r3]
 80045f2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80045f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045f6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80045fa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	330c      	adds	r3, #12
 8004602:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004604:	643a      	str	r2, [r7, #64]	; 0x40
 8004606:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004608:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800460a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800460c:	e841 2300 	strex	r3, r2, [r1]
 8004610:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004612:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004614:	2b00      	cmp	r3, #0
 8004616:	d1e5      	bne.n	80045e4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	3314      	adds	r3, #20
 800461e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004620:	6a3b      	ldr	r3, [r7, #32]
 8004622:	e853 3f00 	ldrex	r3, [r3]
 8004626:	61fb      	str	r3, [r7, #28]
   return(result);
 8004628:	69fb      	ldr	r3, [r7, #28]
 800462a:	f023 0301 	bic.w	r3, r3, #1
 800462e:	64bb      	str	r3, [r7, #72]	; 0x48
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	3314      	adds	r3, #20
 8004636:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004638:	62fa      	str	r2, [r7, #44]	; 0x2c
 800463a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800463c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800463e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004640:	e841 2300 	strex	r3, r2, [r1]
 8004644:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004646:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004648:	2b00      	cmp	r3, #0
 800464a:	d1e5      	bne.n	8004618 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004650:	2b01      	cmp	r3, #1
 8004652:	d119      	bne.n	8004688 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	330c      	adds	r3, #12
 800465a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	e853 3f00 	ldrex	r3, [r3]
 8004662:	60bb      	str	r3, [r7, #8]
   return(result);
 8004664:	68bb      	ldr	r3, [r7, #8]
 8004666:	f023 0310 	bic.w	r3, r3, #16
 800466a:	647b      	str	r3, [r7, #68]	; 0x44
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	330c      	adds	r3, #12
 8004672:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004674:	61ba      	str	r2, [r7, #24]
 8004676:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004678:	6979      	ldr	r1, [r7, #20]
 800467a:	69ba      	ldr	r2, [r7, #24]
 800467c:	e841 2300 	strex	r3, r2, [r1]
 8004680:	613b      	str	r3, [r7, #16]
   return(result);
 8004682:	693b      	ldr	r3, [r7, #16]
 8004684:	2b00      	cmp	r3, #0
 8004686:	d1e5      	bne.n	8004654 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	2220      	movs	r2, #32
 800468c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	2200      	movs	r2, #0
 8004694:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004696:	bf00      	nop
 8004698:	3754      	adds	r7, #84	; 0x54
 800469a:	46bd      	mov	sp, r7
 800469c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a0:	4770      	bx	lr

080046a2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80046a2:	b580      	push	{r7, lr}
 80046a4:	b084      	sub	sp, #16
 80046a6:	af00      	add	r7, sp, #0
 80046a8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046ae:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	2200      	movs	r2, #0
 80046b4:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	2200      	movs	r2, #0
 80046ba:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80046bc:	68f8      	ldr	r0, [r7, #12]
 80046be:	f7ff fd5d 	bl	800417c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80046c2:	bf00      	nop
 80046c4:	3710      	adds	r7, #16
 80046c6:	46bd      	mov	sp, r7
 80046c8:	bd80      	pop	{r7, pc}

080046ca <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80046ca:	b480      	push	{r7}
 80046cc:	b085      	sub	sp, #20
 80046ce:	af00      	add	r7, sp, #0
 80046d0:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046d8:	b2db      	uxtb	r3, r3
 80046da:	2b21      	cmp	r3, #33	; 0x21
 80046dc:	d13e      	bne.n	800475c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	689b      	ldr	r3, [r3, #8]
 80046e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80046e6:	d114      	bne.n	8004712 <UART_Transmit_IT+0x48>
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	691b      	ldr	r3, [r3, #16]
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d110      	bne.n	8004712 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	6a1b      	ldr	r3, [r3, #32]
 80046f4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	881b      	ldrh	r3, [r3, #0]
 80046fa:	461a      	mov	r2, r3
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004704:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	6a1b      	ldr	r3, [r3, #32]
 800470a:	1c9a      	adds	r2, r3, #2
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	621a      	str	r2, [r3, #32]
 8004710:	e008      	b.n	8004724 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	6a1b      	ldr	r3, [r3, #32]
 8004716:	1c59      	adds	r1, r3, #1
 8004718:	687a      	ldr	r2, [r7, #4]
 800471a:	6211      	str	r1, [r2, #32]
 800471c:	781a      	ldrb	r2, [r3, #0]
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004728:	b29b      	uxth	r3, r3
 800472a:	3b01      	subs	r3, #1
 800472c:	b29b      	uxth	r3, r3
 800472e:	687a      	ldr	r2, [r7, #4]
 8004730:	4619      	mov	r1, r3
 8004732:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004734:	2b00      	cmp	r3, #0
 8004736:	d10f      	bne.n	8004758 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	68da      	ldr	r2, [r3, #12]
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004746:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	68da      	ldr	r2, [r3, #12]
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004756:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004758:	2300      	movs	r3, #0
 800475a:	e000      	b.n	800475e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800475c:	2302      	movs	r3, #2
  }
}
 800475e:	4618      	mov	r0, r3
 8004760:	3714      	adds	r7, #20
 8004762:	46bd      	mov	sp, r7
 8004764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004768:	4770      	bx	lr

0800476a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800476a:	b580      	push	{r7, lr}
 800476c:	b082      	sub	sp, #8
 800476e:	af00      	add	r7, sp, #0
 8004770:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	68da      	ldr	r2, [r3, #12]
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004780:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	2220      	movs	r2, #32
 8004786:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800478a:	6878      	ldr	r0, [r7, #4]
 800478c:	f7ff fcce 	bl	800412c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004790:	2300      	movs	r3, #0
}
 8004792:	4618      	mov	r0, r3
 8004794:	3708      	adds	r7, #8
 8004796:	46bd      	mov	sp, r7
 8004798:	bd80      	pop	{r7, pc}

0800479a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800479a:	b580      	push	{r7, lr}
 800479c:	b08c      	sub	sp, #48	; 0x30
 800479e:	af00      	add	r7, sp, #0
 80047a0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80047a8:	b2db      	uxtb	r3, r3
 80047aa:	2b22      	cmp	r3, #34	; 0x22
 80047ac:	f040 80ab 	bne.w	8004906 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	689b      	ldr	r3, [r3, #8]
 80047b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80047b8:	d117      	bne.n	80047ea <UART_Receive_IT+0x50>
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	691b      	ldr	r3, [r3, #16]
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d113      	bne.n	80047ea <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80047c2:	2300      	movs	r3, #0
 80047c4:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047ca:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	685b      	ldr	r3, [r3, #4]
 80047d2:	b29b      	uxth	r3, r3
 80047d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80047d8:	b29a      	uxth	r2, r3
 80047da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047dc:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047e2:	1c9a      	adds	r2, r3, #2
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	629a      	str	r2, [r3, #40]	; 0x28
 80047e8:	e026      	b.n	8004838 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047ee:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80047f0:	2300      	movs	r3, #0
 80047f2:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	689b      	ldr	r3, [r3, #8]
 80047f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80047fc:	d007      	beq.n	800480e <UART_Receive_IT+0x74>
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	689b      	ldr	r3, [r3, #8]
 8004802:	2b00      	cmp	r3, #0
 8004804:	d10a      	bne.n	800481c <UART_Receive_IT+0x82>
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	691b      	ldr	r3, [r3, #16]
 800480a:	2b00      	cmp	r3, #0
 800480c:	d106      	bne.n	800481c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	685b      	ldr	r3, [r3, #4]
 8004814:	b2da      	uxtb	r2, r3
 8004816:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004818:	701a      	strb	r2, [r3, #0]
 800481a:	e008      	b.n	800482e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	685b      	ldr	r3, [r3, #4]
 8004822:	b2db      	uxtb	r3, r3
 8004824:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004828:	b2da      	uxtb	r2, r3
 800482a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800482c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004832:	1c5a      	adds	r2, r3, #1
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800483c:	b29b      	uxth	r3, r3
 800483e:	3b01      	subs	r3, #1
 8004840:	b29b      	uxth	r3, r3
 8004842:	687a      	ldr	r2, [r7, #4]
 8004844:	4619      	mov	r1, r3
 8004846:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004848:	2b00      	cmp	r3, #0
 800484a:	d15a      	bne.n	8004902 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	68da      	ldr	r2, [r3, #12]
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	f022 0220 	bic.w	r2, r2, #32
 800485a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	68da      	ldr	r2, [r3, #12]
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800486a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	695a      	ldr	r2, [r3, #20]
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	f022 0201 	bic.w	r2, r2, #1
 800487a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	2220      	movs	r2, #32
 8004880:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004888:	2b01      	cmp	r3, #1
 800488a:	d135      	bne.n	80048f8 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	2200      	movs	r2, #0
 8004890:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	330c      	adds	r3, #12
 8004898:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800489a:	697b      	ldr	r3, [r7, #20]
 800489c:	e853 3f00 	ldrex	r3, [r3]
 80048a0:	613b      	str	r3, [r7, #16]
   return(result);
 80048a2:	693b      	ldr	r3, [r7, #16]
 80048a4:	f023 0310 	bic.w	r3, r3, #16
 80048a8:	627b      	str	r3, [r7, #36]	; 0x24
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	330c      	adds	r3, #12
 80048b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80048b2:	623a      	str	r2, [r7, #32]
 80048b4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048b6:	69f9      	ldr	r1, [r7, #28]
 80048b8:	6a3a      	ldr	r2, [r7, #32]
 80048ba:	e841 2300 	strex	r3, r2, [r1]
 80048be:	61bb      	str	r3, [r7, #24]
   return(result);
 80048c0:	69bb      	ldr	r3, [r7, #24]
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d1e5      	bne.n	8004892 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	f003 0310 	and.w	r3, r3, #16
 80048d0:	2b10      	cmp	r3, #16
 80048d2:	d10a      	bne.n	80048ea <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80048d4:	2300      	movs	r3, #0
 80048d6:	60fb      	str	r3, [r7, #12]
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	60fb      	str	r3, [r7, #12]
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	685b      	ldr	r3, [r3, #4]
 80048e6:	60fb      	str	r3, [r7, #12]
 80048e8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80048ee:	4619      	mov	r1, r3
 80048f0:	6878      	ldr	r0, [r7, #4]
 80048f2:	f7ff fc4d 	bl	8004190 <HAL_UARTEx_RxEventCallback>
 80048f6:	e002      	b.n	80048fe <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80048f8:	6878      	ldr	r0, [r7, #4]
 80048fa:	f7ff fc2b 	bl	8004154 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80048fe:	2300      	movs	r3, #0
 8004900:	e002      	b.n	8004908 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8004902:	2300      	movs	r3, #0
 8004904:	e000      	b.n	8004908 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8004906:	2302      	movs	r3, #2
  }
}
 8004908:	4618      	mov	r0, r3
 800490a:	3730      	adds	r7, #48	; 0x30
 800490c:	46bd      	mov	sp, r7
 800490e:	bd80      	pop	{r7, pc}

08004910 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004910:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004914:	b0c0      	sub	sp, #256	; 0x100
 8004916:	af00      	add	r7, sp, #0
 8004918:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800491c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	691b      	ldr	r3, [r3, #16]
 8004924:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004928:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800492c:	68d9      	ldr	r1, [r3, #12]
 800492e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004932:	681a      	ldr	r2, [r3, #0]
 8004934:	ea40 0301 	orr.w	r3, r0, r1
 8004938:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800493a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800493e:	689a      	ldr	r2, [r3, #8]
 8004940:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004944:	691b      	ldr	r3, [r3, #16]
 8004946:	431a      	orrs	r2, r3
 8004948:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800494c:	695b      	ldr	r3, [r3, #20]
 800494e:	431a      	orrs	r2, r3
 8004950:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004954:	69db      	ldr	r3, [r3, #28]
 8004956:	4313      	orrs	r3, r2
 8004958:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800495c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	68db      	ldr	r3, [r3, #12]
 8004964:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004968:	f021 010c 	bic.w	r1, r1, #12
 800496c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004970:	681a      	ldr	r2, [r3, #0]
 8004972:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004976:	430b      	orrs	r3, r1
 8004978:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800497a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	695b      	ldr	r3, [r3, #20]
 8004982:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004986:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800498a:	6999      	ldr	r1, [r3, #24]
 800498c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004990:	681a      	ldr	r2, [r3, #0]
 8004992:	ea40 0301 	orr.w	r3, r0, r1
 8004996:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004998:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800499c:	681a      	ldr	r2, [r3, #0]
 800499e:	4b8f      	ldr	r3, [pc, #572]	; (8004bdc <UART_SetConfig+0x2cc>)
 80049a0:	429a      	cmp	r2, r3
 80049a2:	d005      	beq.n	80049b0 <UART_SetConfig+0xa0>
 80049a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049a8:	681a      	ldr	r2, [r3, #0]
 80049aa:	4b8d      	ldr	r3, [pc, #564]	; (8004be0 <UART_SetConfig+0x2d0>)
 80049ac:	429a      	cmp	r2, r3
 80049ae:	d104      	bne.n	80049ba <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80049b0:	f7fd fff0 	bl	8002994 <HAL_RCC_GetPCLK2Freq>
 80049b4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80049b8:	e003      	b.n	80049c2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80049ba:	f7fd ffd7 	bl	800296c <HAL_RCC_GetPCLK1Freq>
 80049be:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80049c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049c6:	69db      	ldr	r3, [r3, #28]
 80049c8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80049cc:	f040 810c 	bne.w	8004be8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80049d0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80049d4:	2200      	movs	r2, #0
 80049d6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80049da:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80049de:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80049e2:	4622      	mov	r2, r4
 80049e4:	462b      	mov	r3, r5
 80049e6:	1891      	adds	r1, r2, r2
 80049e8:	65b9      	str	r1, [r7, #88]	; 0x58
 80049ea:	415b      	adcs	r3, r3
 80049ec:	65fb      	str	r3, [r7, #92]	; 0x5c
 80049ee:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80049f2:	4621      	mov	r1, r4
 80049f4:	eb12 0801 	adds.w	r8, r2, r1
 80049f8:	4629      	mov	r1, r5
 80049fa:	eb43 0901 	adc.w	r9, r3, r1
 80049fe:	f04f 0200 	mov.w	r2, #0
 8004a02:	f04f 0300 	mov.w	r3, #0
 8004a06:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004a0a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004a0e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004a12:	4690      	mov	r8, r2
 8004a14:	4699      	mov	r9, r3
 8004a16:	4623      	mov	r3, r4
 8004a18:	eb18 0303 	adds.w	r3, r8, r3
 8004a1c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004a20:	462b      	mov	r3, r5
 8004a22:	eb49 0303 	adc.w	r3, r9, r3
 8004a26:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004a2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a2e:	685b      	ldr	r3, [r3, #4]
 8004a30:	2200      	movs	r2, #0
 8004a32:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004a36:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004a3a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004a3e:	460b      	mov	r3, r1
 8004a40:	18db      	adds	r3, r3, r3
 8004a42:	653b      	str	r3, [r7, #80]	; 0x50
 8004a44:	4613      	mov	r3, r2
 8004a46:	eb42 0303 	adc.w	r3, r2, r3
 8004a4a:	657b      	str	r3, [r7, #84]	; 0x54
 8004a4c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004a50:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004a54:	f7fb fc94 	bl	8000380 <__aeabi_uldivmod>
 8004a58:	4602      	mov	r2, r0
 8004a5a:	460b      	mov	r3, r1
 8004a5c:	4b61      	ldr	r3, [pc, #388]	; (8004be4 <UART_SetConfig+0x2d4>)
 8004a5e:	fba3 2302 	umull	r2, r3, r3, r2
 8004a62:	095b      	lsrs	r3, r3, #5
 8004a64:	011c      	lsls	r4, r3, #4
 8004a66:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004a6a:	2200      	movs	r2, #0
 8004a6c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004a70:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004a74:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004a78:	4642      	mov	r2, r8
 8004a7a:	464b      	mov	r3, r9
 8004a7c:	1891      	adds	r1, r2, r2
 8004a7e:	64b9      	str	r1, [r7, #72]	; 0x48
 8004a80:	415b      	adcs	r3, r3
 8004a82:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004a84:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004a88:	4641      	mov	r1, r8
 8004a8a:	eb12 0a01 	adds.w	sl, r2, r1
 8004a8e:	4649      	mov	r1, r9
 8004a90:	eb43 0b01 	adc.w	fp, r3, r1
 8004a94:	f04f 0200 	mov.w	r2, #0
 8004a98:	f04f 0300 	mov.w	r3, #0
 8004a9c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004aa0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004aa4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004aa8:	4692      	mov	sl, r2
 8004aaa:	469b      	mov	fp, r3
 8004aac:	4643      	mov	r3, r8
 8004aae:	eb1a 0303 	adds.w	r3, sl, r3
 8004ab2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004ab6:	464b      	mov	r3, r9
 8004ab8:	eb4b 0303 	adc.w	r3, fp, r3
 8004abc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004ac0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ac4:	685b      	ldr	r3, [r3, #4]
 8004ac6:	2200      	movs	r2, #0
 8004ac8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004acc:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004ad0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004ad4:	460b      	mov	r3, r1
 8004ad6:	18db      	adds	r3, r3, r3
 8004ad8:	643b      	str	r3, [r7, #64]	; 0x40
 8004ada:	4613      	mov	r3, r2
 8004adc:	eb42 0303 	adc.w	r3, r2, r3
 8004ae0:	647b      	str	r3, [r7, #68]	; 0x44
 8004ae2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004ae6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004aea:	f7fb fc49 	bl	8000380 <__aeabi_uldivmod>
 8004aee:	4602      	mov	r2, r0
 8004af0:	460b      	mov	r3, r1
 8004af2:	4611      	mov	r1, r2
 8004af4:	4b3b      	ldr	r3, [pc, #236]	; (8004be4 <UART_SetConfig+0x2d4>)
 8004af6:	fba3 2301 	umull	r2, r3, r3, r1
 8004afa:	095b      	lsrs	r3, r3, #5
 8004afc:	2264      	movs	r2, #100	; 0x64
 8004afe:	fb02 f303 	mul.w	r3, r2, r3
 8004b02:	1acb      	subs	r3, r1, r3
 8004b04:	00db      	lsls	r3, r3, #3
 8004b06:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004b0a:	4b36      	ldr	r3, [pc, #216]	; (8004be4 <UART_SetConfig+0x2d4>)
 8004b0c:	fba3 2302 	umull	r2, r3, r3, r2
 8004b10:	095b      	lsrs	r3, r3, #5
 8004b12:	005b      	lsls	r3, r3, #1
 8004b14:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004b18:	441c      	add	r4, r3
 8004b1a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004b1e:	2200      	movs	r2, #0
 8004b20:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004b24:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004b28:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004b2c:	4642      	mov	r2, r8
 8004b2e:	464b      	mov	r3, r9
 8004b30:	1891      	adds	r1, r2, r2
 8004b32:	63b9      	str	r1, [r7, #56]	; 0x38
 8004b34:	415b      	adcs	r3, r3
 8004b36:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004b38:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004b3c:	4641      	mov	r1, r8
 8004b3e:	1851      	adds	r1, r2, r1
 8004b40:	6339      	str	r1, [r7, #48]	; 0x30
 8004b42:	4649      	mov	r1, r9
 8004b44:	414b      	adcs	r3, r1
 8004b46:	637b      	str	r3, [r7, #52]	; 0x34
 8004b48:	f04f 0200 	mov.w	r2, #0
 8004b4c:	f04f 0300 	mov.w	r3, #0
 8004b50:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004b54:	4659      	mov	r1, fp
 8004b56:	00cb      	lsls	r3, r1, #3
 8004b58:	4651      	mov	r1, sl
 8004b5a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004b5e:	4651      	mov	r1, sl
 8004b60:	00ca      	lsls	r2, r1, #3
 8004b62:	4610      	mov	r0, r2
 8004b64:	4619      	mov	r1, r3
 8004b66:	4603      	mov	r3, r0
 8004b68:	4642      	mov	r2, r8
 8004b6a:	189b      	adds	r3, r3, r2
 8004b6c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004b70:	464b      	mov	r3, r9
 8004b72:	460a      	mov	r2, r1
 8004b74:	eb42 0303 	adc.w	r3, r2, r3
 8004b78:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004b7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b80:	685b      	ldr	r3, [r3, #4]
 8004b82:	2200      	movs	r2, #0
 8004b84:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004b88:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004b8c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004b90:	460b      	mov	r3, r1
 8004b92:	18db      	adds	r3, r3, r3
 8004b94:	62bb      	str	r3, [r7, #40]	; 0x28
 8004b96:	4613      	mov	r3, r2
 8004b98:	eb42 0303 	adc.w	r3, r2, r3
 8004b9c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004b9e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004ba2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004ba6:	f7fb fbeb 	bl	8000380 <__aeabi_uldivmod>
 8004baa:	4602      	mov	r2, r0
 8004bac:	460b      	mov	r3, r1
 8004bae:	4b0d      	ldr	r3, [pc, #52]	; (8004be4 <UART_SetConfig+0x2d4>)
 8004bb0:	fba3 1302 	umull	r1, r3, r3, r2
 8004bb4:	095b      	lsrs	r3, r3, #5
 8004bb6:	2164      	movs	r1, #100	; 0x64
 8004bb8:	fb01 f303 	mul.w	r3, r1, r3
 8004bbc:	1ad3      	subs	r3, r2, r3
 8004bbe:	00db      	lsls	r3, r3, #3
 8004bc0:	3332      	adds	r3, #50	; 0x32
 8004bc2:	4a08      	ldr	r2, [pc, #32]	; (8004be4 <UART_SetConfig+0x2d4>)
 8004bc4:	fba2 2303 	umull	r2, r3, r2, r3
 8004bc8:	095b      	lsrs	r3, r3, #5
 8004bca:	f003 0207 	and.w	r2, r3, #7
 8004bce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	4422      	add	r2, r4
 8004bd6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004bd8:	e105      	b.n	8004de6 <UART_SetConfig+0x4d6>
 8004bda:	bf00      	nop
 8004bdc:	40011000 	.word	0x40011000
 8004be0:	40011400 	.word	0x40011400
 8004be4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004be8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004bec:	2200      	movs	r2, #0
 8004bee:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004bf2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004bf6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004bfa:	4642      	mov	r2, r8
 8004bfc:	464b      	mov	r3, r9
 8004bfe:	1891      	adds	r1, r2, r2
 8004c00:	6239      	str	r1, [r7, #32]
 8004c02:	415b      	adcs	r3, r3
 8004c04:	627b      	str	r3, [r7, #36]	; 0x24
 8004c06:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004c0a:	4641      	mov	r1, r8
 8004c0c:	1854      	adds	r4, r2, r1
 8004c0e:	4649      	mov	r1, r9
 8004c10:	eb43 0501 	adc.w	r5, r3, r1
 8004c14:	f04f 0200 	mov.w	r2, #0
 8004c18:	f04f 0300 	mov.w	r3, #0
 8004c1c:	00eb      	lsls	r3, r5, #3
 8004c1e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004c22:	00e2      	lsls	r2, r4, #3
 8004c24:	4614      	mov	r4, r2
 8004c26:	461d      	mov	r5, r3
 8004c28:	4643      	mov	r3, r8
 8004c2a:	18e3      	adds	r3, r4, r3
 8004c2c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004c30:	464b      	mov	r3, r9
 8004c32:	eb45 0303 	adc.w	r3, r5, r3
 8004c36:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004c3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c3e:	685b      	ldr	r3, [r3, #4]
 8004c40:	2200      	movs	r2, #0
 8004c42:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004c46:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004c4a:	f04f 0200 	mov.w	r2, #0
 8004c4e:	f04f 0300 	mov.w	r3, #0
 8004c52:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004c56:	4629      	mov	r1, r5
 8004c58:	008b      	lsls	r3, r1, #2
 8004c5a:	4621      	mov	r1, r4
 8004c5c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004c60:	4621      	mov	r1, r4
 8004c62:	008a      	lsls	r2, r1, #2
 8004c64:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004c68:	f7fb fb8a 	bl	8000380 <__aeabi_uldivmod>
 8004c6c:	4602      	mov	r2, r0
 8004c6e:	460b      	mov	r3, r1
 8004c70:	4b60      	ldr	r3, [pc, #384]	; (8004df4 <UART_SetConfig+0x4e4>)
 8004c72:	fba3 2302 	umull	r2, r3, r3, r2
 8004c76:	095b      	lsrs	r3, r3, #5
 8004c78:	011c      	lsls	r4, r3, #4
 8004c7a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004c7e:	2200      	movs	r2, #0
 8004c80:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004c84:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004c88:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004c8c:	4642      	mov	r2, r8
 8004c8e:	464b      	mov	r3, r9
 8004c90:	1891      	adds	r1, r2, r2
 8004c92:	61b9      	str	r1, [r7, #24]
 8004c94:	415b      	adcs	r3, r3
 8004c96:	61fb      	str	r3, [r7, #28]
 8004c98:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004c9c:	4641      	mov	r1, r8
 8004c9e:	1851      	adds	r1, r2, r1
 8004ca0:	6139      	str	r1, [r7, #16]
 8004ca2:	4649      	mov	r1, r9
 8004ca4:	414b      	adcs	r3, r1
 8004ca6:	617b      	str	r3, [r7, #20]
 8004ca8:	f04f 0200 	mov.w	r2, #0
 8004cac:	f04f 0300 	mov.w	r3, #0
 8004cb0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004cb4:	4659      	mov	r1, fp
 8004cb6:	00cb      	lsls	r3, r1, #3
 8004cb8:	4651      	mov	r1, sl
 8004cba:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004cbe:	4651      	mov	r1, sl
 8004cc0:	00ca      	lsls	r2, r1, #3
 8004cc2:	4610      	mov	r0, r2
 8004cc4:	4619      	mov	r1, r3
 8004cc6:	4603      	mov	r3, r0
 8004cc8:	4642      	mov	r2, r8
 8004cca:	189b      	adds	r3, r3, r2
 8004ccc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004cd0:	464b      	mov	r3, r9
 8004cd2:	460a      	mov	r2, r1
 8004cd4:	eb42 0303 	adc.w	r3, r2, r3
 8004cd8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004cdc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ce0:	685b      	ldr	r3, [r3, #4]
 8004ce2:	2200      	movs	r2, #0
 8004ce4:	67bb      	str	r3, [r7, #120]	; 0x78
 8004ce6:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004ce8:	f04f 0200 	mov.w	r2, #0
 8004cec:	f04f 0300 	mov.w	r3, #0
 8004cf0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004cf4:	4649      	mov	r1, r9
 8004cf6:	008b      	lsls	r3, r1, #2
 8004cf8:	4641      	mov	r1, r8
 8004cfa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004cfe:	4641      	mov	r1, r8
 8004d00:	008a      	lsls	r2, r1, #2
 8004d02:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004d06:	f7fb fb3b 	bl	8000380 <__aeabi_uldivmod>
 8004d0a:	4602      	mov	r2, r0
 8004d0c:	460b      	mov	r3, r1
 8004d0e:	4b39      	ldr	r3, [pc, #228]	; (8004df4 <UART_SetConfig+0x4e4>)
 8004d10:	fba3 1302 	umull	r1, r3, r3, r2
 8004d14:	095b      	lsrs	r3, r3, #5
 8004d16:	2164      	movs	r1, #100	; 0x64
 8004d18:	fb01 f303 	mul.w	r3, r1, r3
 8004d1c:	1ad3      	subs	r3, r2, r3
 8004d1e:	011b      	lsls	r3, r3, #4
 8004d20:	3332      	adds	r3, #50	; 0x32
 8004d22:	4a34      	ldr	r2, [pc, #208]	; (8004df4 <UART_SetConfig+0x4e4>)
 8004d24:	fba2 2303 	umull	r2, r3, r2, r3
 8004d28:	095b      	lsrs	r3, r3, #5
 8004d2a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004d2e:	441c      	add	r4, r3
 8004d30:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004d34:	2200      	movs	r2, #0
 8004d36:	673b      	str	r3, [r7, #112]	; 0x70
 8004d38:	677a      	str	r2, [r7, #116]	; 0x74
 8004d3a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004d3e:	4642      	mov	r2, r8
 8004d40:	464b      	mov	r3, r9
 8004d42:	1891      	adds	r1, r2, r2
 8004d44:	60b9      	str	r1, [r7, #8]
 8004d46:	415b      	adcs	r3, r3
 8004d48:	60fb      	str	r3, [r7, #12]
 8004d4a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004d4e:	4641      	mov	r1, r8
 8004d50:	1851      	adds	r1, r2, r1
 8004d52:	6039      	str	r1, [r7, #0]
 8004d54:	4649      	mov	r1, r9
 8004d56:	414b      	adcs	r3, r1
 8004d58:	607b      	str	r3, [r7, #4]
 8004d5a:	f04f 0200 	mov.w	r2, #0
 8004d5e:	f04f 0300 	mov.w	r3, #0
 8004d62:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004d66:	4659      	mov	r1, fp
 8004d68:	00cb      	lsls	r3, r1, #3
 8004d6a:	4651      	mov	r1, sl
 8004d6c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004d70:	4651      	mov	r1, sl
 8004d72:	00ca      	lsls	r2, r1, #3
 8004d74:	4610      	mov	r0, r2
 8004d76:	4619      	mov	r1, r3
 8004d78:	4603      	mov	r3, r0
 8004d7a:	4642      	mov	r2, r8
 8004d7c:	189b      	adds	r3, r3, r2
 8004d7e:	66bb      	str	r3, [r7, #104]	; 0x68
 8004d80:	464b      	mov	r3, r9
 8004d82:	460a      	mov	r2, r1
 8004d84:	eb42 0303 	adc.w	r3, r2, r3
 8004d88:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004d8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d8e:	685b      	ldr	r3, [r3, #4]
 8004d90:	2200      	movs	r2, #0
 8004d92:	663b      	str	r3, [r7, #96]	; 0x60
 8004d94:	667a      	str	r2, [r7, #100]	; 0x64
 8004d96:	f04f 0200 	mov.w	r2, #0
 8004d9a:	f04f 0300 	mov.w	r3, #0
 8004d9e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004da2:	4649      	mov	r1, r9
 8004da4:	008b      	lsls	r3, r1, #2
 8004da6:	4641      	mov	r1, r8
 8004da8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004dac:	4641      	mov	r1, r8
 8004dae:	008a      	lsls	r2, r1, #2
 8004db0:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004db4:	f7fb fae4 	bl	8000380 <__aeabi_uldivmod>
 8004db8:	4602      	mov	r2, r0
 8004dba:	460b      	mov	r3, r1
 8004dbc:	4b0d      	ldr	r3, [pc, #52]	; (8004df4 <UART_SetConfig+0x4e4>)
 8004dbe:	fba3 1302 	umull	r1, r3, r3, r2
 8004dc2:	095b      	lsrs	r3, r3, #5
 8004dc4:	2164      	movs	r1, #100	; 0x64
 8004dc6:	fb01 f303 	mul.w	r3, r1, r3
 8004dca:	1ad3      	subs	r3, r2, r3
 8004dcc:	011b      	lsls	r3, r3, #4
 8004dce:	3332      	adds	r3, #50	; 0x32
 8004dd0:	4a08      	ldr	r2, [pc, #32]	; (8004df4 <UART_SetConfig+0x4e4>)
 8004dd2:	fba2 2303 	umull	r2, r3, r2, r3
 8004dd6:	095b      	lsrs	r3, r3, #5
 8004dd8:	f003 020f 	and.w	r2, r3, #15
 8004ddc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	4422      	add	r2, r4
 8004de4:	609a      	str	r2, [r3, #8]
}
 8004de6:	bf00      	nop
 8004de8:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004dec:	46bd      	mov	sp, r7
 8004dee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004df2:	bf00      	nop
 8004df4:	51eb851f 	.word	0x51eb851f

08004df8 <__NVIC_SetPriority>:
{
 8004df8:	b480      	push	{r7}
 8004dfa:	b083      	sub	sp, #12
 8004dfc:	af00      	add	r7, sp, #0
 8004dfe:	4603      	mov	r3, r0
 8004e00:	6039      	str	r1, [r7, #0]
 8004e02:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004e04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	db0a      	blt.n	8004e22 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004e0c:	683b      	ldr	r3, [r7, #0]
 8004e0e:	b2da      	uxtb	r2, r3
 8004e10:	490c      	ldr	r1, [pc, #48]	; (8004e44 <__NVIC_SetPriority+0x4c>)
 8004e12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004e16:	0112      	lsls	r2, r2, #4
 8004e18:	b2d2      	uxtb	r2, r2
 8004e1a:	440b      	add	r3, r1
 8004e1c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8004e20:	e00a      	b.n	8004e38 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004e22:	683b      	ldr	r3, [r7, #0]
 8004e24:	b2da      	uxtb	r2, r3
 8004e26:	4908      	ldr	r1, [pc, #32]	; (8004e48 <__NVIC_SetPriority+0x50>)
 8004e28:	79fb      	ldrb	r3, [r7, #7]
 8004e2a:	f003 030f 	and.w	r3, r3, #15
 8004e2e:	3b04      	subs	r3, #4
 8004e30:	0112      	lsls	r2, r2, #4
 8004e32:	b2d2      	uxtb	r2, r2
 8004e34:	440b      	add	r3, r1
 8004e36:	761a      	strb	r2, [r3, #24]
}
 8004e38:	bf00      	nop
 8004e3a:	370c      	adds	r7, #12
 8004e3c:	46bd      	mov	sp, r7
 8004e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e42:	4770      	bx	lr
 8004e44:	e000e100 	.word	0xe000e100
 8004e48:	e000ed00 	.word	0xe000ed00

08004e4c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8004e4c:	b580      	push	{r7, lr}
 8004e4e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8004e50:	4b05      	ldr	r3, [pc, #20]	; (8004e68 <SysTick_Handler+0x1c>)
 8004e52:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8004e54:	f001 fd4e 	bl	80068f4 <xTaskGetSchedulerState>
 8004e58:	4603      	mov	r3, r0
 8004e5a:	2b01      	cmp	r3, #1
 8004e5c:	d001      	beq.n	8004e62 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8004e5e:	f002 fb33 	bl	80074c8 <xPortSysTickHandler>
  }
}
 8004e62:	bf00      	nop
 8004e64:	bd80      	pop	{r7, pc}
 8004e66:	bf00      	nop
 8004e68:	e000e010 	.word	0xe000e010

08004e6c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8004e6c:	b580      	push	{r7, lr}
 8004e6e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8004e70:	2100      	movs	r1, #0
 8004e72:	f06f 0004 	mvn.w	r0, #4
 8004e76:	f7ff ffbf 	bl	8004df8 <__NVIC_SetPriority>
#endif
}
 8004e7a:	bf00      	nop
 8004e7c:	bd80      	pop	{r7, pc}
	...

08004e80 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8004e80:	b480      	push	{r7}
 8004e82:	b083      	sub	sp, #12
 8004e84:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004e86:	f3ef 8305 	mrs	r3, IPSR
 8004e8a:	603b      	str	r3, [r7, #0]
  return(result);
 8004e8c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d003      	beq.n	8004e9a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8004e92:	f06f 0305 	mvn.w	r3, #5
 8004e96:	607b      	str	r3, [r7, #4]
 8004e98:	e00c      	b.n	8004eb4 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8004e9a:	4b0a      	ldr	r3, [pc, #40]	; (8004ec4 <osKernelInitialize+0x44>)
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d105      	bne.n	8004eae <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8004ea2:	4b08      	ldr	r3, [pc, #32]	; (8004ec4 <osKernelInitialize+0x44>)
 8004ea4:	2201      	movs	r2, #1
 8004ea6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8004ea8:	2300      	movs	r3, #0
 8004eaa:	607b      	str	r3, [r7, #4]
 8004eac:	e002      	b.n	8004eb4 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8004eae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004eb2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004eb4:	687b      	ldr	r3, [r7, #4]
}
 8004eb6:	4618      	mov	r0, r3
 8004eb8:	370c      	adds	r7, #12
 8004eba:	46bd      	mov	sp, r7
 8004ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec0:	4770      	bx	lr
 8004ec2:	bf00      	nop
 8004ec4:	200046fc 	.word	0x200046fc

08004ec8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8004ec8:	b580      	push	{r7, lr}
 8004eca:	b082      	sub	sp, #8
 8004ecc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004ece:	f3ef 8305 	mrs	r3, IPSR
 8004ed2:	603b      	str	r3, [r7, #0]
  return(result);
 8004ed4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d003      	beq.n	8004ee2 <osKernelStart+0x1a>
    stat = osErrorISR;
 8004eda:	f06f 0305 	mvn.w	r3, #5
 8004ede:	607b      	str	r3, [r7, #4]
 8004ee0:	e010      	b.n	8004f04 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8004ee2:	4b0b      	ldr	r3, [pc, #44]	; (8004f10 <osKernelStart+0x48>)
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	2b01      	cmp	r3, #1
 8004ee8:	d109      	bne.n	8004efe <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8004eea:	f7ff ffbf 	bl	8004e6c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8004eee:	4b08      	ldr	r3, [pc, #32]	; (8004f10 <osKernelStart+0x48>)
 8004ef0:	2202      	movs	r2, #2
 8004ef2:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8004ef4:	f001 f87c 	bl	8005ff0 <vTaskStartScheduler>
      stat = osOK;
 8004ef8:	2300      	movs	r3, #0
 8004efa:	607b      	str	r3, [r7, #4]
 8004efc:	e002      	b.n	8004f04 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8004efe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004f02:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004f04:	687b      	ldr	r3, [r7, #4]
}
 8004f06:	4618      	mov	r0, r3
 8004f08:	3708      	adds	r7, #8
 8004f0a:	46bd      	mov	sp, r7
 8004f0c:	bd80      	pop	{r7, pc}
 8004f0e:	bf00      	nop
 8004f10:	200046fc 	.word	0x200046fc

08004f14 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8004f14:	b580      	push	{r7, lr}
 8004f16:	b08e      	sub	sp, #56	; 0x38
 8004f18:	af04      	add	r7, sp, #16
 8004f1a:	60f8      	str	r0, [r7, #12]
 8004f1c:	60b9      	str	r1, [r7, #8]
 8004f1e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8004f20:	2300      	movs	r3, #0
 8004f22:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004f24:	f3ef 8305 	mrs	r3, IPSR
 8004f28:	617b      	str	r3, [r7, #20]
  return(result);
 8004f2a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d17e      	bne.n	800502e <osThreadNew+0x11a>
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d07b      	beq.n	800502e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8004f36:	2380      	movs	r3, #128	; 0x80
 8004f38:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8004f3a:	2318      	movs	r3, #24
 8004f3c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8004f3e:	2300      	movs	r3, #0
 8004f40:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8004f42:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004f46:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d045      	beq.n	8004fda <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d002      	beq.n	8004f5c <osThreadNew+0x48>
        name = attr->name;
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	699b      	ldr	r3, [r3, #24]
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d002      	beq.n	8004f6a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	699b      	ldr	r3, [r3, #24]
 8004f68:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8004f6a:	69fb      	ldr	r3, [r7, #28]
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d008      	beq.n	8004f82 <osThreadNew+0x6e>
 8004f70:	69fb      	ldr	r3, [r7, #28]
 8004f72:	2b38      	cmp	r3, #56	; 0x38
 8004f74:	d805      	bhi.n	8004f82 <osThreadNew+0x6e>
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	685b      	ldr	r3, [r3, #4]
 8004f7a:	f003 0301 	and.w	r3, r3, #1
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d001      	beq.n	8004f86 <osThreadNew+0x72>
        return (NULL);
 8004f82:	2300      	movs	r3, #0
 8004f84:	e054      	b.n	8005030 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	695b      	ldr	r3, [r3, #20]
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d003      	beq.n	8004f96 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	695b      	ldr	r3, [r3, #20]
 8004f92:	089b      	lsrs	r3, r3, #2
 8004f94:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	689b      	ldr	r3, [r3, #8]
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d00e      	beq.n	8004fbc <osThreadNew+0xa8>
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	68db      	ldr	r3, [r3, #12]
 8004fa2:	2bbb      	cmp	r3, #187	; 0xbb
 8004fa4:	d90a      	bls.n	8004fbc <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d006      	beq.n	8004fbc <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	695b      	ldr	r3, [r3, #20]
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d002      	beq.n	8004fbc <osThreadNew+0xa8>
        mem = 1;
 8004fb6:	2301      	movs	r3, #1
 8004fb8:	61bb      	str	r3, [r7, #24]
 8004fba:	e010      	b.n	8004fde <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	689b      	ldr	r3, [r3, #8]
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d10c      	bne.n	8004fde <osThreadNew+0xca>
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	68db      	ldr	r3, [r3, #12]
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d108      	bne.n	8004fde <osThreadNew+0xca>
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	691b      	ldr	r3, [r3, #16]
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d104      	bne.n	8004fde <osThreadNew+0xca>
          mem = 0;
 8004fd4:	2300      	movs	r3, #0
 8004fd6:	61bb      	str	r3, [r7, #24]
 8004fd8:	e001      	b.n	8004fde <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8004fda:	2300      	movs	r3, #0
 8004fdc:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8004fde:	69bb      	ldr	r3, [r7, #24]
 8004fe0:	2b01      	cmp	r3, #1
 8004fe2:	d110      	bne.n	8005006 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8004fe8:	687a      	ldr	r2, [r7, #4]
 8004fea:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004fec:	9202      	str	r2, [sp, #8]
 8004fee:	9301      	str	r3, [sp, #4]
 8004ff0:	69fb      	ldr	r3, [r7, #28]
 8004ff2:	9300      	str	r3, [sp, #0]
 8004ff4:	68bb      	ldr	r3, [r7, #8]
 8004ff6:	6a3a      	ldr	r2, [r7, #32]
 8004ff8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004ffa:	68f8      	ldr	r0, [r7, #12]
 8004ffc:	f000 fe0c 	bl	8005c18 <xTaskCreateStatic>
 8005000:	4603      	mov	r3, r0
 8005002:	613b      	str	r3, [r7, #16]
 8005004:	e013      	b.n	800502e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8005006:	69bb      	ldr	r3, [r7, #24]
 8005008:	2b00      	cmp	r3, #0
 800500a:	d110      	bne.n	800502e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800500c:	6a3b      	ldr	r3, [r7, #32]
 800500e:	b29a      	uxth	r2, r3
 8005010:	f107 0310 	add.w	r3, r7, #16
 8005014:	9301      	str	r3, [sp, #4]
 8005016:	69fb      	ldr	r3, [r7, #28]
 8005018:	9300      	str	r3, [sp, #0]
 800501a:	68bb      	ldr	r3, [r7, #8]
 800501c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800501e:	68f8      	ldr	r0, [r7, #12]
 8005020:	f000 fe57 	bl	8005cd2 <xTaskCreate>
 8005024:	4603      	mov	r3, r0
 8005026:	2b01      	cmp	r3, #1
 8005028:	d001      	beq.n	800502e <osThreadNew+0x11a>
            hTask = NULL;
 800502a:	2300      	movs	r3, #0
 800502c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800502e:	693b      	ldr	r3, [r7, #16]
}
 8005030:	4618      	mov	r0, r3
 8005032:	3728      	adds	r7, #40	; 0x28
 8005034:	46bd      	mov	sp, r7
 8005036:	bd80      	pop	{r7, pc}

08005038 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8005038:	b580      	push	{r7, lr}
 800503a:	b084      	sub	sp, #16
 800503c:	af00      	add	r7, sp, #0
 800503e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005040:	f3ef 8305 	mrs	r3, IPSR
 8005044:	60bb      	str	r3, [r7, #8]
  return(result);
 8005046:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005048:	2b00      	cmp	r3, #0
 800504a:	d003      	beq.n	8005054 <osDelay+0x1c>
    stat = osErrorISR;
 800504c:	f06f 0305 	mvn.w	r3, #5
 8005050:	60fb      	str	r3, [r7, #12]
 8005052:	e007      	b.n	8005064 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8005054:	2300      	movs	r3, #0
 8005056:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	2b00      	cmp	r3, #0
 800505c:	d002      	beq.n	8005064 <osDelay+0x2c>
      vTaskDelay(ticks);
 800505e:	6878      	ldr	r0, [r7, #4]
 8005060:	f000 ff92 	bl	8005f88 <vTaskDelay>
    }
  }

  return (stat);
 8005064:	68fb      	ldr	r3, [r7, #12]
}
 8005066:	4618      	mov	r0, r3
 8005068:	3710      	adds	r7, #16
 800506a:	46bd      	mov	sp, r7
 800506c:	bd80      	pop	{r7, pc}
	...

08005070 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8005070:	b480      	push	{r7}
 8005072:	b085      	sub	sp, #20
 8005074:	af00      	add	r7, sp, #0
 8005076:	60f8      	str	r0, [r7, #12]
 8005078:	60b9      	str	r1, [r7, #8]
 800507a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	4a07      	ldr	r2, [pc, #28]	; (800509c <vApplicationGetIdleTaskMemory+0x2c>)
 8005080:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8005082:	68bb      	ldr	r3, [r7, #8]
 8005084:	4a06      	ldr	r2, [pc, #24]	; (80050a0 <vApplicationGetIdleTaskMemory+0x30>)
 8005086:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	2280      	movs	r2, #128	; 0x80
 800508c:	601a      	str	r2, [r3, #0]
}
 800508e:	bf00      	nop
 8005090:	3714      	adds	r7, #20
 8005092:	46bd      	mov	sp, r7
 8005094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005098:	4770      	bx	lr
 800509a:	bf00      	nop
 800509c:	20004700 	.word	0x20004700
 80050a0:	200047bc 	.word	0x200047bc

080050a4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80050a4:	b480      	push	{r7}
 80050a6:	b085      	sub	sp, #20
 80050a8:	af00      	add	r7, sp, #0
 80050aa:	60f8      	str	r0, [r7, #12]
 80050ac:	60b9      	str	r1, [r7, #8]
 80050ae:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	4a07      	ldr	r2, [pc, #28]	; (80050d0 <vApplicationGetTimerTaskMemory+0x2c>)
 80050b4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80050b6:	68bb      	ldr	r3, [r7, #8]
 80050b8:	4a06      	ldr	r2, [pc, #24]	; (80050d4 <vApplicationGetTimerTaskMemory+0x30>)
 80050ba:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	f44f 7280 	mov.w	r2, #256	; 0x100
 80050c2:	601a      	str	r2, [r3, #0]
}
 80050c4:	bf00      	nop
 80050c6:	3714      	adds	r7, #20
 80050c8:	46bd      	mov	sp, r7
 80050ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ce:	4770      	bx	lr
 80050d0:	200049bc 	.word	0x200049bc
 80050d4:	20004a78 	.word	0x20004a78

080050d8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80050d8:	b480      	push	{r7}
 80050da:	b083      	sub	sp, #12
 80050dc:	af00      	add	r7, sp, #0
 80050de:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	f103 0208 	add.w	r2, r3, #8
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80050f0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	f103 0208 	add.w	r2, r3, #8
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	f103 0208 	add.w	r2, r3, #8
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	2200      	movs	r2, #0
 800510a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800510c:	bf00      	nop
 800510e:	370c      	adds	r7, #12
 8005110:	46bd      	mov	sp, r7
 8005112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005116:	4770      	bx	lr

08005118 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005118:	b480      	push	{r7}
 800511a:	b083      	sub	sp, #12
 800511c:	af00      	add	r7, sp, #0
 800511e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	2200      	movs	r2, #0
 8005124:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005126:	bf00      	nop
 8005128:	370c      	adds	r7, #12
 800512a:	46bd      	mov	sp, r7
 800512c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005130:	4770      	bx	lr

08005132 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005132:	b480      	push	{r7}
 8005134:	b085      	sub	sp, #20
 8005136:	af00      	add	r7, sp, #0
 8005138:	6078      	str	r0, [r7, #4]
 800513a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	685b      	ldr	r3, [r3, #4]
 8005140:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005142:	683b      	ldr	r3, [r7, #0]
 8005144:	68fa      	ldr	r2, [r7, #12]
 8005146:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	689a      	ldr	r2, [r3, #8]
 800514c:	683b      	ldr	r3, [r7, #0]
 800514e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	689b      	ldr	r3, [r3, #8]
 8005154:	683a      	ldr	r2, [r7, #0]
 8005156:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	683a      	ldr	r2, [r7, #0]
 800515c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800515e:	683b      	ldr	r3, [r7, #0]
 8005160:	687a      	ldr	r2, [r7, #4]
 8005162:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	1c5a      	adds	r2, r3, #1
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	601a      	str	r2, [r3, #0]
}
 800516e:	bf00      	nop
 8005170:	3714      	adds	r7, #20
 8005172:	46bd      	mov	sp, r7
 8005174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005178:	4770      	bx	lr

0800517a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800517a:	b480      	push	{r7}
 800517c:	b085      	sub	sp, #20
 800517e:	af00      	add	r7, sp, #0
 8005180:	6078      	str	r0, [r7, #4]
 8005182:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005184:	683b      	ldr	r3, [r7, #0]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800518a:	68bb      	ldr	r3, [r7, #8]
 800518c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005190:	d103      	bne.n	800519a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	691b      	ldr	r3, [r3, #16]
 8005196:	60fb      	str	r3, [r7, #12]
 8005198:	e00c      	b.n	80051b4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	3308      	adds	r3, #8
 800519e:	60fb      	str	r3, [r7, #12]
 80051a0:	e002      	b.n	80051a8 <vListInsert+0x2e>
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	685b      	ldr	r3, [r3, #4]
 80051a6:	60fb      	str	r3, [r7, #12]
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	685b      	ldr	r3, [r3, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	68ba      	ldr	r2, [r7, #8]
 80051b0:	429a      	cmp	r2, r3
 80051b2:	d2f6      	bcs.n	80051a2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	685a      	ldr	r2, [r3, #4]
 80051b8:	683b      	ldr	r3, [r7, #0]
 80051ba:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80051bc:	683b      	ldr	r3, [r7, #0]
 80051be:	685b      	ldr	r3, [r3, #4]
 80051c0:	683a      	ldr	r2, [r7, #0]
 80051c2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80051c4:	683b      	ldr	r3, [r7, #0]
 80051c6:	68fa      	ldr	r2, [r7, #12]
 80051c8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	683a      	ldr	r2, [r7, #0]
 80051ce:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80051d0:	683b      	ldr	r3, [r7, #0]
 80051d2:	687a      	ldr	r2, [r7, #4]
 80051d4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	1c5a      	adds	r2, r3, #1
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	601a      	str	r2, [r3, #0]
}
 80051e0:	bf00      	nop
 80051e2:	3714      	adds	r7, #20
 80051e4:	46bd      	mov	sp, r7
 80051e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ea:	4770      	bx	lr

080051ec <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80051ec:	b480      	push	{r7}
 80051ee:	b085      	sub	sp, #20
 80051f0:	af00      	add	r7, sp, #0
 80051f2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	691b      	ldr	r3, [r3, #16]
 80051f8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	685b      	ldr	r3, [r3, #4]
 80051fe:	687a      	ldr	r2, [r7, #4]
 8005200:	6892      	ldr	r2, [r2, #8]
 8005202:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	689b      	ldr	r3, [r3, #8]
 8005208:	687a      	ldr	r2, [r7, #4]
 800520a:	6852      	ldr	r2, [r2, #4]
 800520c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	685b      	ldr	r3, [r3, #4]
 8005212:	687a      	ldr	r2, [r7, #4]
 8005214:	429a      	cmp	r2, r3
 8005216:	d103      	bne.n	8005220 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	689a      	ldr	r2, [r3, #8]
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	2200      	movs	r2, #0
 8005224:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	1e5a      	subs	r2, r3, #1
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	681b      	ldr	r3, [r3, #0]
}
 8005234:	4618      	mov	r0, r3
 8005236:	3714      	adds	r7, #20
 8005238:	46bd      	mov	sp, r7
 800523a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800523e:	4770      	bx	lr

08005240 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005240:	b580      	push	{r7, lr}
 8005242:	b084      	sub	sp, #16
 8005244:	af00      	add	r7, sp, #0
 8005246:	6078      	str	r0, [r7, #4]
 8005248:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	2b00      	cmp	r3, #0
 8005252:	d10a      	bne.n	800526a <xQueueGenericReset+0x2a>
	__asm volatile
 8005254:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005258:	f383 8811 	msr	BASEPRI, r3
 800525c:	f3bf 8f6f 	isb	sy
 8005260:	f3bf 8f4f 	dsb	sy
 8005264:	60bb      	str	r3, [r7, #8]
}
 8005266:	bf00      	nop
 8005268:	e7fe      	b.n	8005268 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800526a:	f002 f89b 	bl	80073a4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	681a      	ldr	r2, [r3, #0]
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005276:	68f9      	ldr	r1, [r7, #12]
 8005278:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800527a:	fb01 f303 	mul.w	r3, r1, r3
 800527e:	441a      	add	r2, r3
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	2200      	movs	r2, #0
 8005288:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	681a      	ldr	r2, [r3, #0]
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	681a      	ldr	r2, [r3, #0]
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800529a:	3b01      	subs	r3, #1
 800529c:	68f9      	ldr	r1, [r7, #12]
 800529e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80052a0:	fb01 f303 	mul.w	r3, r1, r3
 80052a4:	441a      	add	r2, r3
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	22ff      	movs	r2, #255	; 0xff
 80052ae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	22ff      	movs	r2, #255	; 0xff
 80052b6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80052ba:	683b      	ldr	r3, [r7, #0]
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d114      	bne.n	80052ea <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	691b      	ldr	r3, [r3, #16]
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d01a      	beq.n	80052fe <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	3310      	adds	r3, #16
 80052cc:	4618      	mov	r0, r3
 80052ce:	f001 f929 	bl	8006524 <xTaskRemoveFromEventList>
 80052d2:	4603      	mov	r3, r0
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d012      	beq.n	80052fe <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80052d8:	4b0c      	ldr	r3, [pc, #48]	; (800530c <xQueueGenericReset+0xcc>)
 80052da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80052de:	601a      	str	r2, [r3, #0]
 80052e0:	f3bf 8f4f 	dsb	sy
 80052e4:	f3bf 8f6f 	isb	sy
 80052e8:	e009      	b.n	80052fe <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	3310      	adds	r3, #16
 80052ee:	4618      	mov	r0, r3
 80052f0:	f7ff fef2 	bl	80050d8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	3324      	adds	r3, #36	; 0x24
 80052f8:	4618      	mov	r0, r3
 80052fa:	f7ff feed 	bl	80050d8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80052fe:	f002 f881 	bl	8007404 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005302:	2301      	movs	r3, #1
}
 8005304:	4618      	mov	r0, r3
 8005306:	3710      	adds	r7, #16
 8005308:	46bd      	mov	sp, r7
 800530a:	bd80      	pop	{r7, pc}
 800530c:	e000ed04 	.word	0xe000ed04

08005310 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005310:	b580      	push	{r7, lr}
 8005312:	b08e      	sub	sp, #56	; 0x38
 8005314:	af02      	add	r7, sp, #8
 8005316:	60f8      	str	r0, [r7, #12]
 8005318:	60b9      	str	r1, [r7, #8]
 800531a:	607a      	str	r2, [r7, #4]
 800531c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	2b00      	cmp	r3, #0
 8005322:	d10a      	bne.n	800533a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8005324:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005328:	f383 8811 	msr	BASEPRI, r3
 800532c:	f3bf 8f6f 	isb	sy
 8005330:	f3bf 8f4f 	dsb	sy
 8005334:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005336:	bf00      	nop
 8005338:	e7fe      	b.n	8005338 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800533a:	683b      	ldr	r3, [r7, #0]
 800533c:	2b00      	cmp	r3, #0
 800533e:	d10a      	bne.n	8005356 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8005340:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005344:	f383 8811 	msr	BASEPRI, r3
 8005348:	f3bf 8f6f 	isb	sy
 800534c:	f3bf 8f4f 	dsb	sy
 8005350:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005352:	bf00      	nop
 8005354:	e7fe      	b.n	8005354 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	2b00      	cmp	r3, #0
 800535a:	d002      	beq.n	8005362 <xQueueGenericCreateStatic+0x52>
 800535c:	68bb      	ldr	r3, [r7, #8]
 800535e:	2b00      	cmp	r3, #0
 8005360:	d001      	beq.n	8005366 <xQueueGenericCreateStatic+0x56>
 8005362:	2301      	movs	r3, #1
 8005364:	e000      	b.n	8005368 <xQueueGenericCreateStatic+0x58>
 8005366:	2300      	movs	r3, #0
 8005368:	2b00      	cmp	r3, #0
 800536a:	d10a      	bne.n	8005382 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800536c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005370:	f383 8811 	msr	BASEPRI, r3
 8005374:	f3bf 8f6f 	isb	sy
 8005378:	f3bf 8f4f 	dsb	sy
 800537c:	623b      	str	r3, [r7, #32]
}
 800537e:	bf00      	nop
 8005380:	e7fe      	b.n	8005380 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	2b00      	cmp	r3, #0
 8005386:	d102      	bne.n	800538e <xQueueGenericCreateStatic+0x7e>
 8005388:	68bb      	ldr	r3, [r7, #8]
 800538a:	2b00      	cmp	r3, #0
 800538c:	d101      	bne.n	8005392 <xQueueGenericCreateStatic+0x82>
 800538e:	2301      	movs	r3, #1
 8005390:	e000      	b.n	8005394 <xQueueGenericCreateStatic+0x84>
 8005392:	2300      	movs	r3, #0
 8005394:	2b00      	cmp	r3, #0
 8005396:	d10a      	bne.n	80053ae <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8005398:	f04f 0350 	mov.w	r3, #80	; 0x50
 800539c:	f383 8811 	msr	BASEPRI, r3
 80053a0:	f3bf 8f6f 	isb	sy
 80053a4:	f3bf 8f4f 	dsb	sy
 80053a8:	61fb      	str	r3, [r7, #28]
}
 80053aa:	bf00      	nop
 80053ac:	e7fe      	b.n	80053ac <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80053ae:	2350      	movs	r3, #80	; 0x50
 80053b0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80053b2:	697b      	ldr	r3, [r7, #20]
 80053b4:	2b50      	cmp	r3, #80	; 0x50
 80053b6:	d00a      	beq.n	80053ce <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80053b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053bc:	f383 8811 	msr	BASEPRI, r3
 80053c0:	f3bf 8f6f 	isb	sy
 80053c4:	f3bf 8f4f 	dsb	sy
 80053c8:	61bb      	str	r3, [r7, #24]
}
 80053ca:	bf00      	nop
 80053cc:	e7fe      	b.n	80053cc <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80053ce:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80053d0:	683b      	ldr	r3, [r7, #0]
 80053d2:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80053d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d00d      	beq.n	80053f6 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80053da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053dc:	2201      	movs	r2, #1
 80053de:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80053e2:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80053e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053e8:	9300      	str	r3, [sp, #0]
 80053ea:	4613      	mov	r3, r2
 80053ec:	687a      	ldr	r2, [r7, #4]
 80053ee:	68b9      	ldr	r1, [r7, #8]
 80053f0:	68f8      	ldr	r0, [r7, #12]
 80053f2:	f000 f805 	bl	8005400 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80053f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80053f8:	4618      	mov	r0, r3
 80053fa:	3730      	adds	r7, #48	; 0x30
 80053fc:	46bd      	mov	sp, r7
 80053fe:	bd80      	pop	{r7, pc}

08005400 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005400:	b580      	push	{r7, lr}
 8005402:	b084      	sub	sp, #16
 8005404:	af00      	add	r7, sp, #0
 8005406:	60f8      	str	r0, [r7, #12]
 8005408:	60b9      	str	r1, [r7, #8]
 800540a:	607a      	str	r2, [r7, #4]
 800540c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800540e:	68bb      	ldr	r3, [r7, #8]
 8005410:	2b00      	cmp	r3, #0
 8005412:	d103      	bne.n	800541c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005414:	69bb      	ldr	r3, [r7, #24]
 8005416:	69ba      	ldr	r2, [r7, #24]
 8005418:	601a      	str	r2, [r3, #0]
 800541a:	e002      	b.n	8005422 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800541c:	69bb      	ldr	r3, [r7, #24]
 800541e:	687a      	ldr	r2, [r7, #4]
 8005420:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005422:	69bb      	ldr	r3, [r7, #24]
 8005424:	68fa      	ldr	r2, [r7, #12]
 8005426:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005428:	69bb      	ldr	r3, [r7, #24]
 800542a:	68ba      	ldr	r2, [r7, #8]
 800542c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800542e:	2101      	movs	r1, #1
 8005430:	69b8      	ldr	r0, [r7, #24]
 8005432:	f7ff ff05 	bl	8005240 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8005436:	69bb      	ldr	r3, [r7, #24]
 8005438:	78fa      	ldrb	r2, [r7, #3]
 800543a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800543e:	bf00      	nop
 8005440:	3710      	adds	r7, #16
 8005442:	46bd      	mov	sp, r7
 8005444:	bd80      	pop	{r7, pc}
	...

08005448 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005448:	b580      	push	{r7, lr}
 800544a:	b08e      	sub	sp, #56	; 0x38
 800544c:	af00      	add	r7, sp, #0
 800544e:	60f8      	str	r0, [r7, #12]
 8005450:	60b9      	str	r1, [r7, #8]
 8005452:	607a      	str	r2, [r7, #4]
 8005454:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005456:	2300      	movs	r3, #0
 8005458:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800545e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005460:	2b00      	cmp	r3, #0
 8005462:	d10a      	bne.n	800547a <xQueueGenericSend+0x32>
	__asm volatile
 8005464:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005468:	f383 8811 	msr	BASEPRI, r3
 800546c:	f3bf 8f6f 	isb	sy
 8005470:	f3bf 8f4f 	dsb	sy
 8005474:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005476:	bf00      	nop
 8005478:	e7fe      	b.n	8005478 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800547a:	68bb      	ldr	r3, [r7, #8]
 800547c:	2b00      	cmp	r3, #0
 800547e:	d103      	bne.n	8005488 <xQueueGenericSend+0x40>
 8005480:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005482:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005484:	2b00      	cmp	r3, #0
 8005486:	d101      	bne.n	800548c <xQueueGenericSend+0x44>
 8005488:	2301      	movs	r3, #1
 800548a:	e000      	b.n	800548e <xQueueGenericSend+0x46>
 800548c:	2300      	movs	r3, #0
 800548e:	2b00      	cmp	r3, #0
 8005490:	d10a      	bne.n	80054a8 <xQueueGenericSend+0x60>
	__asm volatile
 8005492:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005496:	f383 8811 	msr	BASEPRI, r3
 800549a:	f3bf 8f6f 	isb	sy
 800549e:	f3bf 8f4f 	dsb	sy
 80054a2:	627b      	str	r3, [r7, #36]	; 0x24
}
 80054a4:	bf00      	nop
 80054a6:	e7fe      	b.n	80054a6 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80054a8:	683b      	ldr	r3, [r7, #0]
 80054aa:	2b02      	cmp	r3, #2
 80054ac:	d103      	bne.n	80054b6 <xQueueGenericSend+0x6e>
 80054ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054b2:	2b01      	cmp	r3, #1
 80054b4:	d101      	bne.n	80054ba <xQueueGenericSend+0x72>
 80054b6:	2301      	movs	r3, #1
 80054b8:	e000      	b.n	80054bc <xQueueGenericSend+0x74>
 80054ba:	2300      	movs	r3, #0
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d10a      	bne.n	80054d6 <xQueueGenericSend+0x8e>
	__asm volatile
 80054c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054c4:	f383 8811 	msr	BASEPRI, r3
 80054c8:	f3bf 8f6f 	isb	sy
 80054cc:	f3bf 8f4f 	dsb	sy
 80054d0:	623b      	str	r3, [r7, #32]
}
 80054d2:	bf00      	nop
 80054d4:	e7fe      	b.n	80054d4 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80054d6:	f001 fa0d 	bl	80068f4 <xTaskGetSchedulerState>
 80054da:	4603      	mov	r3, r0
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d102      	bne.n	80054e6 <xQueueGenericSend+0x9e>
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d101      	bne.n	80054ea <xQueueGenericSend+0xa2>
 80054e6:	2301      	movs	r3, #1
 80054e8:	e000      	b.n	80054ec <xQueueGenericSend+0xa4>
 80054ea:	2300      	movs	r3, #0
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d10a      	bne.n	8005506 <xQueueGenericSend+0xbe>
	__asm volatile
 80054f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054f4:	f383 8811 	msr	BASEPRI, r3
 80054f8:	f3bf 8f6f 	isb	sy
 80054fc:	f3bf 8f4f 	dsb	sy
 8005500:	61fb      	str	r3, [r7, #28]
}
 8005502:	bf00      	nop
 8005504:	e7fe      	b.n	8005504 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005506:	f001 ff4d 	bl	80073a4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800550a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800550c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800550e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005510:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005512:	429a      	cmp	r2, r3
 8005514:	d302      	bcc.n	800551c <xQueueGenericSend+0xd4>
 8005516:	683b      	ldr	r3, [r7, #0]
 8005518:	2b02      	cmp	r3, #2
 800551a:	d129      	bne.n	8005570 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800551c:	683a      	ldr	r2, [r7, #0]
 800551e:	68b9      	ldr	r1, [r7, #8]
 8005520:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005522:	f000 fa0b 	bl	800593c <prvCopyDataToQueue>
 8005526:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005528:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800552a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800552c:	2b00      	cmp	r3, #0
 800552e:	d010      	beq.n	8005552 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005530:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005532:	3324      	adds	r3, #36	; 0x24
 8005534:	4618      	mov	r0, r3
 8005536:	f000 fff5 	bl	8006524 <xTaskRemoveFromEventList>
 800553a:	4603      	mov	r3, r0
 800553c:	2b00      	cmp	r3, #0
 800553e:	d013      	beq.n	8005568 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005540:	4b3f      	ldr	r3, [pc, #252]	; (8005640 <xQueueGenericSend+0x1f8>)
 8005542:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005546:	601a      	str	r2, [r3, #0]
 8005548:	f3bf 8f4f 	dsb	sy
 800554c:	f3bf 8f6f 	isb	sy
 8005550:	e00a      	b.n	8005568 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8005552:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005554:	2b00      	cmp	r3, #0
 8005556:	d007      	beq.n	8005568 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005558:	4b39      	ldr	r3, [pc, #228]	; (8005640 <xQueueGenericSend+0x1f8>)
 800555a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800555e:	601a      	str	r2, [r3, #0]
 8005560:	f3bf 8f4f 	dsb	sy
 8005564:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005568:	f001 ff4c 	bl	8007404 <vPortExitCritical>
				return pdPASS;
 800556c:	2301      	movs	r3, #1
 800556e:	e063      	b.n	8005638 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	2b00      	cmp	r3, #0
 8005574:	d103      	bne.n	800557e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005576:	f001 ff45 	bl	8007404 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800557a:	2300      	movs	r3, #0
 800557c:	e05c      	b.n	8005638 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800557e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005580:	2b00      	cmp	r3, #0
 8005582:	d106      	bne.n	8005592 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005584:	f107 0314 	add.w	r3, r7, #20
 8005588:	4618      	mov	r0, r3
 800558a:	f001 f855 	bl	8006638 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800558e:	2301      	movs	r3, #1
 8005590:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005592:	f001 ff37 	bl	8007404 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005596:	f000 fd9b 	bl	80060d0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800559a:	f001 ff03 	bl	80073a4 <vPortEnterCritical>
 800559e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055a0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80055a4:	b25b      	sxtb	r3, r3
 80055a6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80055aa:	d103      	bne.n	80055b4 <xQueueGenericSend+0x16c>
 80055ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055ae:	2200      	movs	r2, #0
 80055b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80055b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055b6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80055ba:	b25b      	sxtb	r3, r3
 80055bc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80055c0:	d103      	bne.n	80055ca <xQueueGenericSend+0x182>
 80055c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055c4:	2200      	movs	r2, #0
 80055c6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80055ca:	f001 ff1b 	bl	8007404 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80055ce:	1d3a      	adds	r2, r7, #4
 80055d0:	f107 0314 	add.w	r3, r7, #20
 80055d4:	4611      	mov	r1, r2
 80055d6:	4618      	mov	r0, r3
 80055d8:	f001 f844 	bl	8006664 <xTaskCheckForTimeOut>
 80055dc:	4603      	mov	r3, r0
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d124      	bne.n	800562c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80055e2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80055e4:	f000 faa2 	bl	8005b2c <prvIsQueueFull>
 80055e8:	4603      	mov	r3, r0
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d018      	beq.n	8005620 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80055ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055f0:	3310      	adds	r3, #16
 80055f2:	687a      	ldr	r2, [r7, #4]
 80055f4:	4611      	mov	r1, r2
 80055f6:	4618      	mov	r0, r3
 80055f8:	f000 ff44 	bl	8006484 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80055fc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80055fe:	f000 fa2d 	bl	8005a5c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8005602:	f000 fd73 	bl	80060ec <xTaskResumeAll>
 8005606:	4603      	mov	r3, r0
 8005608:	2b00      	cmp	r3, #0
 800560a:	f47f af7c 	bne.w	8005506 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800560e:	4b0c      	ldr	r3, [pc, #48]	; (8005640 <xQueueGenericSend+0x1f8>)
 8005610:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005614:	601a      	str	r2, [r3, #0]
 8005616:	f3bf 8f4f 	dsb	sy
 800561a:	f3bf 8f6f 	isb	sy
 800561e:	e772      	b.n	8005506 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005620:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005622:	f000 fa1b 	bl	8005a5c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005626:	f000 fd61 	bl	80060ec <xTaskResumeAll>
 800562a:	e76c      	b.n	8005506 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800562c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800562e:	f000 fa15 	bl	8005a5c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005632:	f000 fd5b 	bl	80060ec <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8005636:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8005638:	4618      	mov	r0, r3
 800563a:	3738      	adds	r7, #56	; 0x38
 800563c:	46bd      	mov	sp, r7
 800563e:	bd80      	pop	{r7, pc}
 8005640:	e000ed04 	.word	0xe000ed04

08005644 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005644:	b580      	push	{r7, lr}
 8005646:	b090      	sub	sp, #64	; 0x40
 8005648:	af00      	add	r7, sp, #0
 800564a:	60f8      	str	r0, [r7, #12]
 800564c:	60b9      	str	r1, [r7, #8]
 800564e:	607a      	str	r2, [r7, #4]
 8005650:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8005656:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005658:	2b00      	cmp	r3, #0
 800565a:	d10a      	bne.n	8005672 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800565c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005660:	f383 8811 	msr	BASEPRI, r3
 8005664:	f3bf 8f6f 	isb	sy
 8005668:	f3bf 8f4f 	dsb	sy
 800566c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800566e:	bf00      	nop
 8005670:	e7fe      	b.n	8005670 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005672:	68bb      	ldr	r3, [r7, #8]
 8005674:	2b00      	cmp	r3, #0
 8005676:	d103      	bne.n	8005680 <xQueueGenericSendFromISR+0x3c>
 8005678:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800567a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800567c:	2b00      	cmp	r3, #0
 800567e:	d101      	bne.n	8005684 <xQueueGenericSendFromISR+0x40>
 8005680:	2301      	movs	r3, #1
 8005682:	e000      	b.n	8005686 <xQueueGenericSendFromISR+0x42>
 8005684:	2300      	movs	r3, #0
 8005686:	2b00      	cmp	r3, #0
 8005688:	d10a      	bne.n	80056a0 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800568a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800568e:	f383 8811 	msr	BASEPRI, r3
 8005692:	f3bf 8f6f 	isb	sy
 8005696:	f3bf 8f4f 	dsb	sy
 800569a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800569c:	bf00      	nop
 800569e:	e7fe      	b.n	800569e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80056a0:	683b      	ldr	r3, [r7, #0]
 80056a2:	2b02      	cmp	r3, #2
 80056a4:	d103      	bne.n	80056ae <xQueueGenericSendFromISR+0x6a>
 80056a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056aa:	2b01      	cmp	r3, #1
 80056ac:	d101      	bne.n	80056b2 <xQueueGenericSendFromISR+0x6e>
 80056ae:	2301      	movs	r3, #1
 80056b0:	e000      	b.n	80056b4 <xQueueGenericSendFromISR+0x70>
 80056b2:	2300      	movs	r3, #0
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d10a      	bne.n	80056ce <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80056b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056bc:	f383 8811 	msr	BASEPRI, r3
 80056c0:	f3bf 8f6f 	isb	sy
 80056c4:	f3bf 8f4f 	dsb	sy
 80056c8:	623b      	str	r3, [r7, #32]
}
 80056ca:	bf00      	nop
 80056cc:	e7fe      	b.n	80056cc <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80056ce:	f001 ff4b 	bl	8007568 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80056d2:	f3ef 8211 	mrs	r2, BASEPRI
 80056d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056da:	f383 8811 	msr	BASEPRI, r3
 80056de:	f3bf 8f6f 	isb	sy
 80056e2:	f3bf 8f4f 	dsb	sy
 80056e6:	61fa      	str	r2, [r7, #28]
 80056e8:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80056ea:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80056ec:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80056ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056f0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80056f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056f6:	429a      	cmp	r2, r3
 80056f8:	d302      	bcc.n	8005700 <xQueueGenericSendFromISR+0xbc>
 80056fa:	683b      	ldr	r3, [r7, #0]
 80056fc:	2b02      	cmp	r3, #2
 80056fe:	d12f      	bne.n	8005760 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005700:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005702:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005706:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800570a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800570c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800570e:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005710:	683a      	ldr	r2, [r7, #0]
 8005712:	68b9      	ldr	r1, [r7, #8]
 8005714:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005716:	f000 f911 	bl	800593c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800571a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800571e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005722:	d112      	bne.n	800574a <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005724:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005726:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005728:	2b00      	cmp	r3, #0
 800572a:	d016      	beq.n	800575a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800572c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800572e:	3324      	adds	r3, #36	; 0x24
 8005730:	4618      	mov	r0, r3
 8005732:	f000 fef7 	bl	8006524 <xTaskRemoveFromEventList>
 8005736:	4603      	mov	r3, r0
 8005738:	2b00      	cmp	r3, #0
 800573a:	d00e      	beq.n	800575a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	2b00      	cmp	r3, #0
 8005740:	d00b      	beq.n	800575a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	2201      	movs	r2, #1
 8005746:	601a      	str	r2, [r3, #0]
 8005748:	e007      	b.n	800575a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800574a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800574e:	3301      	adds	r3, #1
 8005750:	b2db      	uxtb	r3, r3
 8005752:	b25a      	sxtb	r2, r3
 8005754:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005756:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800575a:	2301      	movs	r3, #1
 800575c:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800575e:	e001      	b.n	8005764 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005760:	2300      	movs	r3, #0
 8005762:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005764:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005766:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005768:	697b      	ldr	r3, [r7, #20]
 800576a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800576e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005770:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8005772:	4618      	mov	r0, r3
 8005774:	3740      	adds	r7, #64	; 0x40
 8005776:	46bd      	mov	sp, r7
 8005778:	bd80      	pop	{r7, pc}
	...

0800577c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800577c:	b580      	push	{r7, lr}
 800577e:	b08c      	sub	sp, #48	; 0x30
 8005780:	af00      	add	r7, sp, #0
 8005782:	60f8      	str	r0, [r7, #12]
 8005784:	60b9      	str	r1, [r7, #8]
 8005786:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005788:	2300      	movs	r3, #0
 800578a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005790:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005792:	2b00      	cmp	r3, #0
 8005794:	d10a      	bne.n	80057ac <xQueueReceive+0x30>
	__asm volatile
 8005796:	f04f 0350 	mov.w	r3, #80	; 0x50
 800579a:	f383 8811 	msr	BASEPRI, r3
 800579e:	f3bf 8f6f 	isb	sy
 80057a2:	f3bf 8f4f 	dsb	sy
 80057a6:	623b      	str	r3, [r7, #32]
}
 80057a8:	bf00      	nop
 80057aa:	e7fe      	b.n	80057aa <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80057ac:	68bb      	ldr	r3, [r7, #8]
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d103      	bne.n	80057ba <xQueueReceive+0x3e>
 80057b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d101      	bne.n	80057be <xQueueReceive+0x42>
 80057ba:	2301      	movs	r3, #1
 80057bc:	e000      	b.n	80057c0 <xQueueReceive+0x44>
 80057be:	2300      	movs	r3, #0
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d10a      	bne.n	80057da <xQueueReceive+0x5e>
	__asm volatile
 80057c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057c8:	f383 8811 	msr	BASEPRI, r3
 80057cc:	f3bf 8f6f 	isb	sy
 80057d0:	f3bf 8f4f 	dsb	sy
 80057d4:	61fb      	str	r3, [r7, #28]
}
 80057d6:	bf00      	nop
 80057d8:	e7fe      	b.n	80057d8 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80057da:	f001 f88b 	bl	80068f4 <xTaskGetSchedulerState>
 80057de:	4603      	mov	r3, r0
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d102      	bne.n	80057ea <xQueueReceive+0x6e>
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d101      	bne.n	80057ee <xQueueReceive+0x72>
 80057ea:	2301      	movs	r3, #1
 80057ec:	e000      	b.n	80057f0 <xQueueReceive+0x74>
 80057ee:	2300      	movs	r3, #0
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d10a      	bne.n	800580a <xQueueReceive+0x8e>
	__asm volatile
 80057f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057f8:	f383 8811 	msr	BASEPRI, r3
 80057fc:	f3bf 8f6f 	isb	sy
 8005800:	f3bf 8f4f 	dsb	sy
 8005804:	61bb      	str	r3, [r7, #24]
}
 8005806:	bf00      	nop
 8005808:	e7fe      	b.n	8005808 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800580a:	f001 fdcb 	bl	80073a4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800580e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005810:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005812:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005814:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005816:	2b00      	cmp	r3, #0
 8005818:	d01f      	beq.n	800585a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800581a:	68b9      	ldr	r1, [r7, #8]
 800581c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800581e:	f000 f8f7 	bl	8005a10 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005822:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005824:	1e5a      	subs	r2, r3, #1
 8005826:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005828:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800582a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800582c:	691b      	ldr	r3, [r3, #16]
 800582e:	2b00      	cmp	r3, #0
 8005830:	d00f      	beq.n	8005852 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005832:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005834:	3310      	adds	r3, #16
 8005836:	4618      	mov	r0, r3
 8005838:	f000 fe74 	bl	8006524 <xTaskRemoveFromEventList>
 800583c:	4603      	mov	r3, r0
 800583e:	2b00      	cmp	r3, #0
 8005840:	d007      	beq.n	8005852 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005842:	4b3d      	ldr	r3, [pc, #244]	; (8005938 <xQueueReceive+0x1bc>)
 8005844:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005848:	601a      	str	r2, [r3, #0]
 800584a:	f3bf 8f4f 	dsb	sy
 800584e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005852:	f001 fdd7 	bl	8007404 <vPortExitCritical>
				return pdPASS;
 8005856:	2301      	movs	r3, #1
 8005858:	e069      	b.n	800592e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	2b00      	cmp	r3, #0
 800585e:	d103      	bne.n	8005868 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005860:	f001 fdd0 	bl	8007404 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005864:	2300      	movs	r3, #0
 8005866:	e062      	b.n	800592e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005868:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800586a:	2b00      	cmp	r3, #0
 800586c:	d106      	bne.n	800587c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800586e:	f107 0310 	add.w	r3, r7, #16
 8005872:	4618      	mov	r0, r3
 8005874:	f000 fee0 	bl	8006638 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005878:	2301      	movs	r3, #1
 800587a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800587c:	f001 fdc2 	bl	8007404 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005880:	f000 fc26 	bl	80060d0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005884:	f001 fd8e 	bl	80073a4 <vPortEnterCritical>
 8005888:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800588a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800588e:	b25b      	sxtb	r3, r3
 8005890:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005894:	d103      	bne.n	800589e <xQueueReceive+0x122>
 8005896:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005898:	2200      	movs	r2, #0
 800589a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800589e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058a0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80058a4:	b25b      	sxtb	r3, r3
 80058a6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80058aa:	d103      	bne.n	80058b4 <xQueueReceive+0x138>
 80058ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058ae:	2200      	movs	r2, #0
 80058b0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80058b4:	f001 fda6 	bl	8007404 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80058b8:	1d3a      	adds	r2, r7, #4
 80058ba:	f107 0310 	add.w	r3, r7, #16
 80058be:	4611      	mov	r1, r2
 80058c0:	4618      	mov	r0, r3
 80058c2:	f000 fecf 	bl	8006664 <xTaskCheckForTimeOut>
 80058c6:	4603      	mov	r3, r0
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d123      	bne.n	8005914 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80058cc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80058ce:	f000 f917 	bl	8005b00 <prvIsQueueEmpty>
 80058d2:	4603      	mov	r3, r0
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d017      	beq.n	8005908 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80058d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058da:	3324      	adds	r3, #36	; 0x24
 80058dc:	687a      	ldr	r2, [r7, #4]
 80058de:	4611      	mov	r1, r2
 80058e0:	4618      	mov	r0, r3
 80058e2:	f000 fdcf 	bl	8006484 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80058e6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80058e8:	f000 f8b8 	bl	8005a5c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80058ec:	f000 fbfe 	bl	80060ec <xTaskResumeAll>
 80058f0:	4603      	mov	r3, r0
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d189      	bne.n	800580a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80058f6:	4b10      	ldr	r3, [pc, #64]	; (8005938 <xQueueReceive+0x1bc>)
 80058f8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80058fc:	601a      	str	r2, [r3, #0]
 80058fe:	f3bf 8f4f 	dsb	sy
 8005902:	f3bf 8f6f 	isb	sy
 8005906:	e780      	b.n	800580a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005908:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800590a:	f000 f8a7 	bl	8005a5c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800590e:	f000 fbed 	bl	80060ec <xTaskResumeAll>
 8005912:	e77a      	b.n	800580a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005914:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005916:	f000 f8a1 	bl	8005a5c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800591a:	f000 fbe7 	bl	80060ec <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800591e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005920:	f000 f8ee 	bl	8005b00 <prvIsQueueEmpty>
 8005924:	4603      	mov	r3, r0
 8005926:	2b00      	cmp	r3, #0
 8005928:	f43f af6f 	beq.w	800580a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800592c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800592e:	4618      	mov	r0, r3
 8005930:	3730      	adds	r7, #48	; 0x30
 8005932:	46bd      	mov	sp, r7
 8005934:	bd80      	pop	{r7, pc}
 8005936:	bf00      	nop
 8005938:	e000ed04 	.word	0xe000ed04

0800593c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800593c:	b580      	push	{r7, lr}
 800593e:	b086      	sub	sp, #24
 8005940:	af00      	add	r7, sp, #0
 8005942:	60f8      	str	r0, [r7, #12]
 8005944:	60b9      	str	r1, [r7, #8]
 8005946:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005948:	2300      	movs	r3, #0
 800594a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005950:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005956:	2b00      	cmp	r3, #0
 8005958:	d10d      	bne.n	8005976 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	2b00      	cmp	r3, #0
 8005960:	d14d      	bne.n	80059fe <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	689b      	ldr	r3, [r3, #8]
 8005966:	4618      	mov	r0, r3
 8005968:	f000 ffe2 	bl	8006930 <xTaskPriorityDisinherit>
 800596c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	2200      	movs	r2, #0
 8005972:	609a      	str	r2, [r3, #8]
 8005974:	e043      	b.n	80059fe <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	2b00      	cmp	r3, #0
 800597a:	d119      	bne.n	80059b0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	6858      	ldr	r0, [r3, #4]
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005984:	461a      	mov	r2, r3
 8005986:	68b9      	ldr	r1, [r7, #8]
 8005988:	f00a ffb6 	bl	80108f8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	685a      	ldr	r2, [r3, #4]
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005994:	441a      	add	r2, r3
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	685a      	ldr	r2, [r3, #4]
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	689b      	ldr	r3, [r3, #8]
 80059a2:	429a      	cmp	r2, r3
 80059a4:	d32b      	bcc.n	80059fe <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	681a      	ldr	r2, [r3, #0]
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	605a      	str	r2, [r3, #4]
 80059ae:	e026      	b.n	80059fe <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	68d8      	ldr	r0, [r3, #12]
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059b8:	461a      	mov	r2, r3
 80059ba:	68b9      	ldr	r1, [r7, #8]
 80059bc:	f00a ff9c 	bl	80108f8 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	68da      	ldr	r2, [r3, #12]
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059c8:	425b      	negs	r3, r3
 80059ca:	441a      	add	r2, r3
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	68da      	ldr	r2, [r3, #12]
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	429a      	cmp	r2, r3
 80059da:	d207      	bcs.n	80059ec <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	689a      	ldr	r2, [r3, #8]
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059e4:	425b      	negs	r3, r3
 80059e6:	441a      	add	r2, r3
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	2b02      	cmp	r3, #2
 80059f0:	d105      	bne.n	80059fe <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80059f2:	693b      	ldr	r3, [r7, #16]
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d002      	beq.n	80059fe <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80059f8:	693b      	ldr	r3, [r7, #16]
 80059fa:	3b01      	subs	r3, #1
 80059fc:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80059fe:	693b      	ldr	r3, [r7, #16]
 8005a00:	1c5a      	adds	r2, r3, #1
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8005a06:	697b      	ldr	r3, [r7, #20]
}
 8005a08:	4618      	mov	r0, r3
 8005a0a:	3718      	adds	r7, #24
 8005a0c:	46bd      	mov	sp, r7
 8005a0e:	bd80      	pop	{r7, pc}

08005a10 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005a10:	b580      	push	{r7, lr}
 8005a12:	b082      	sub	sp, #8
 8005a14:	af00      	add	r7, sp, #0
 8005a16:	6078      	str	r0, [r7, #4]
 8005a18:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d018      	beq.n	8005a54 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	68da      	ldr	r2, [r3, #12]
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a2a:	441a      	add	r2, r3
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	68da      	ldr	r2, [r3, #12]
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	689b      	ldr	r3, [r3, #8]
 8005a38:	429a      	cmp	r2, r3
 8005a3a:	d303      	bcc.n	8005a44 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681a      	ldr	r2, [r3, #0]
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	68d9      	ldr	r1, [r3, #12]
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a4c:	461a      	mov	r2, r3
 8005a4e:	6838      	ldr	r0, [r7, #0]
 8005a50:	f00a ff52 	bl	80108f8 <memcpy>
	}
}
 8005a54:	bf00      	nop
 8005a56:	3708      	adds	r7, #8
 8005a58:	46bd      	mov	sp, r7
 8005a5a:	bd80      	pop	{r7, pc}

08005a5c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005a5c:	b580      	push	{r7, lr}
 8005a5e:	b084      	sub	sp, #16
 8005a60:	af00      	add	r7, sp, #0
 8005a62:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005a64:	f001 fc9e 	bl	80073a4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005a6e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005a70:	e011      	b.n	8005a96 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d012      	beq.n	8005aa0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	3324      	adds	r3, #36	; 0x24
 8005a7e:	4618      	mov	r0, r3
 8005a80:	f000 fd50 	bl	8006524 <xTaskRemoveFromEventList>
 8005a84:	4603      	mov	r3, r0
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d001      	beq.n	8005a8e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005a8a:	f000 fe4d 	bl	8006728 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005a8e:	7bfb      	ldrb	r3, [r7, #15]
 8005a90:	3b01      	subs	r3, #1
 8005a92:	b2db      	uxtb	r3, r3
 8005a94:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005a96:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	dce9      	bgt.n	8005a72 <prvUnlockQueue+0x16>
 8005a9e:	e000      	b.n	8005aa2 <prvUnlockQueue+0x46>
					break;
 8005aa0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	22ff      	movs	r2, #255	; 0xff
 8005aa6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8005aaa:	f001 fcab 	bl	8007404 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005aae:	f001 fc79 	bl	80073a4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005ab8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005aba:	e011      	b.n	8005ae0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	691b      	ldr	r3, [r3, #16]
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d012      	beq.n	8005aea <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	3310      	adds	r3, #16
 8005ac8:	4618      	mov	r0, r3
 8005aca:	f000 fd2b 	bl	8006524 <xTaskRemoveFromEventList>
 8005ace:	4603      	mov	r3, r0
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d001      	beq.n	8005ad8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005ad4:	f000 fe28 	bl	8006728 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005ad8:	7bbb      	ldrb	r3, [r7, #14]
 8005ada:	3b01      	subs	r3, #1
 8005adc:	b2db      	uxtb	r3, r3
 8005ade:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005ae0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	dce9      	bgt.n	8005abc <prvUnlockQueue+0x60>
 8005ae8:	e000      	b.n	8005aec <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005aea:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	22ff      	movs	r2, #255	; 0xff
 8005af0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8005af4:	f001 fc86 	bl	8007404 <vPortExitCritical>
}
 8005af8:	bf00      	nop
 8005afa:	3710      	adds	r7, #16
 8005afc:	46bd      	mov	sp, r7
 8005afe:	bd80      	pop	{r7, pc}

08005b00 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005b00:	b580      	push	{r7, lr}
 8005b02:	b084      	sub	sp, #16
 8005b04:	af00      	add	r7, sp, #0
 8005b06:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005b08:	f001 fc4c 	bl	80073a4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d102      	bne.n	8005b1a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005b14:	2301      	movs	r3, #1
 8005b16:	60fb      	str	r3, [r7, #12]
 8005b18:	e001      	b.n	8005b1e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005b1a:	2300      	movs	r3, #0
 8005b1c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005b1e:	f001 fc71 	bl	8007404 <vPortExitCritical>

	return xReturn;
 8005b22:	68fb      	ldr	r3, [r7, #12]
}
 8005b24:	4618      	mov	r0, r3
 8005b26:	3710      	adds	r7, #16
 8005b28:	46bd      	mov	sp, r7
 8005b2a:	bd80      	pop	{r7, pc}

08005b2c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005b2c:	b580      	push	{r7, lr}
 8005b2e:	b084      	sub	sp, #16
 8005b30:	af00      	add	r7, sp, #0
 8005b32:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005b34:	f001 fc36 	bl	80073a4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b40:	429a      	cmp	r2, r3
 8005b42:	d102      	bne.n	8005b4a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005b44:	2301      	movs	r3, #1
 8005b46:	60fb      	str	r3, [r7, #12]
 8005b48:	e001      	b.n	8005b4e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005b4a:	2300      	movs	r3, #0
 8005b4c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005b4e:	f001 fc59 	bl	8007404 <vPortExitCritical>

	return xReturn;
 8005b52:	68fb      	ldr	r3, [r7, #12]
}
 8005b54:	4618      	mov	r0, r3
 8005b56:	3710      	adds	r7, #16
 8005b58:	46bd      	mov	sp, r7
 8005b5a:	bd80      	pop	{r7, pc}

08005b5c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8005b5c:	b480      	push	{r7}
 8005b5e:	b085      	sub	sp, #20
 8005b60:	af00      	add	r7, sp, #0
 8005b62:	6078      	str	r0, [r7, #4]
 8005b64:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005b66:	2300      	movs	r3, #0
 8005b68:	60fb      	str	r3, [r7, #12]
 8005b6a:	e014      	b.n	8005b96 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8005b6c:	4a0f      	ldr	r2, [pc, #60]	; (8005bac <vQueueAddToRegistry+0x50>)
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d10b      	bne.n	8005b90 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8005b78:	490c      	ldr	r1, [pc, #48]	; (8005bac <vQueueAddToRegistry+0x50>)
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	683a      	ldr	r2, [r7, #0]
 8005b7e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8005b82:	4a0a      	ldr	r2, [pc, #40]	; (8005bac <vQueueAddToRegistry+0x50>)
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	00db      	lsls	r3, r3, #3
 8005b88:	4413      	add	r3, r2
 8005b8a:	687a      	ldr	r2, [r7, #4]
 8005b8c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8005b8e:	e006      	b.n	8005b9e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	3301      	adds	r3, #1
 8005b94:	60fb      	str	r3, [r7, #12]
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	2b07      	cmp	r3, #7
 8005b9a:	d9e7      	bls.n	8005b6c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8005b9c:	bf00      	nop
 8005b9e:	bf00      	nop
 8005ba0:	3714      	adds	r7, #20
 8005ba2:	46bd      	mov	sp, r7
 8005ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba8:	4770      	bx	lr
 8005baa:	bf00      	nop
 8005bac:	20004e78 	.word	0x20004e78

08005bb0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005bb0:	b580      	push	{r7, lr}
 8005bb2:	b086      	sub	sp, #24
 8005bb4:	af00      	add	r7, sp, #0
 8005bb6:	60f8      	str	r0, [r7, #12]
 8005bb8:	60b9      	str	r1, [r7, #8]
 8005bba:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8005bc0:	f001 fbf0 	bl	80073a4 <vPortEnterCritical>
 8005bc4:	697b      	ldr	r3, [r7, #20]
 8005bc6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005bca:	b25b      	sxtb	r3, r3
 8005bcc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005bd0:	d103      	bne.n	8005bda <vQueueWaitForMessageRestricted+0x2a>
 8005bd2:	697b      	ldr	r3, [r7, #20]
 8005bd4:	2200      	movs	r2, #0
 8005bd6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005bda:	697b      	ldr	r3, [r7, #20]
 8005bdc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005be0:	b25b      	sxtb	r3, r3
 8005be2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005be6:	d103      	bne.n	8005bf0 <vQueueWaitForMessageRestricted+0x40>
 8005be8:	697b      	ldr	r3, [r7, #20]
 8005bea:	2200      	movs	r2, #0
 8005bec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005bf0:	f001 fc08 	bl	8007404 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005bf4:	697b      	ldr	r3, [r7, #20]
 8005bf6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d106      	bne.n	8005c0a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005bfc:	697b      	ldr	r3, [r7, #20]
 8005bfe:	3324      	adds	r3, #36	; 0x24
 8005c00:	687a      	ldr	r2, [r7, #4]
 8005c02:	68b9      	ldr	r1, [r7, #8]
 8005c04:	4618      	mov	r0, r3
 8005c06:	f000 fc61 	bl	80064cc <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8005c0a:	6978      	ldr	r0, [r7, #20]
 8005c0c:	f7ff ff26 	bl	8005a5c <prvUnlockQueue>
	}
 8005c10:	bf00      	nop
 8005c12:	3718      	adds	r7, #24
 8005c14:	46bd      	mov	sp, r7
 8005c16:	bd80      	pop	{r7, pc}

08005c18 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005c18:	b580      	push	{r7, lr}
 8005c1a:	b08e      	sub	sp, #56	; 0x38
 8005c1c:	af04      	add	r7, sp, #16
 8005c1e:	60f8      	str	r0, [r7, #12]
 8005c20:	60b9      	str	r1, [r7, #8]
 8005c22:	607a      	str	r2, [r7, #4]
 8005c24:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005c26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d10a      	bne.n	8005c42 <xTaskCreateStatic+0x2a>
	__asm volatile
 8005c2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c30:	f383 8811 	msr	BASEPRI, r3
 8005c34:	f3bf 8f6f 	isb	sy
 8005c38:	f3bf 8f4f 	dsb	sy
 8005c3c:	623b      	str	r3, [r7, #32]
}
 8005c3e:	bf00      	nop
 8005c40:	e7fe      	b.n	8005c40 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8005c42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d10a      	bne.n	8005c5e <xTaskCreateStatic+0x46>
	__asm volatile
 8005c48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c4c:	f383 8811 	msr	BASEPRI, r3
 8005c50:	f3bf 8f6f 	isb	sy
 8005c54:	f3bf 8f4f 	dsb	sy
 8005c58:	61fb      	str	r3, [r7, #28]
}
 8005c5a:	bf00      	nop
 8005c5c:	e7fe      	b.n	8005c5c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005c5e:	23bc      	movs	r3, #188	; 0xbc
 8005c60:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005c62:	693b      	ldr	r3, [r7, #16]
 8005c64:	2bbc      	cmp	r3, #188	; 0xbc
 8005c66:	d00a      	beq.n	8005c7e <xTaskCreateStatic+0x66>
	__asm volatile
 8005c68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c6c:	f383 8811 	msr	BASEPRI, r3
 8005c70:	f3bf 8f6f 	isb	sy
 8005c74:	f3bf 8f4f 	dsb	sy
 8005c78:	61bb      	str	r3, [r7, #24]
}
 8005c7a:	bf00      	nop
 8005c7c:	e7fe      	b.n	8005c7c <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8005c7e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005c80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d01e      	beq.n	8005cc4 <xTaskCreateStatic+0xac>
 8005c86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d01b      	beq.n	8005cc4 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005c8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c8e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005c90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c92:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005c94:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005c96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c98:	2202      	movs	r2, #2
 8005c9a:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005c9e:	2300      	movs	r3, #0
 8005ca0:	9303      	str	r3, [sp, #12]
 8005ca2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ca4:	9302      	str	r3, [sp, #8]
 8005ca6:	f107 0314 	add.w	r3, r7, #20
 8005caa:	9301      	str	r3, [sp, #4]
 8005cac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cae:	9300      	str	r3, [sp, #0]
 8005cb0:	683b      	ldr	r3, [r7, #0]
 8005cb2:	687a      	ldr	r2, [r7, #4]
 8005cb4:	68b9      	ldr	r1, [r7, #8]
 8005cb6:	68f8      	ldr	r0, [r7, #12]
 8005cb8:	f000 f850 	bl	8005d5c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005cbc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005cbe:	f000 f8f3 	bl	8005ea8 <prvAddNewTaskToReadyList>
 8005cc2:	e001      	b.n	8005cc8 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8005cc4:	2300      	movs	r3, #0
 8005cc6:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005cc8:	697b      	ldr	r3, [r7, #20]
	}
 8005cca:	4618      	mov	r0, r3
 8005ccc:	3728      	adds	r7, #40	; 0x28
 8005cce:	46bd      	mov	sp, r7
 8005cd0:	bd80      	pop	{r7, pc}

08005cd2 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005cd2:	b580      	push	{r7, lr}
 8005cd4:	b08c      	sub	sp, #48	; 0x30
 8005cd6:	af04      	add	r7, sp, #16
 8005cd8:	60f8      	str	r0, [r7, #12]
 8005cda:	60b9      	str	r1, [r7, #8]
 8005cdc:	603b      	str	r3, [r7, #0]
 8005cde:	4613      	mov	r3, r2
 8005ce0:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005ce2:	88fb      	ldrh	r3, [r7, #6]
 8005ce4:	009b      	lsls	r3, r3, #2
 8005ce6:	4618      	mov	r0, r3
 8005ce8:	f001 fc7e 	bl	80075e8 <pvPortMalloc>
 8005cec:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005cee:	697b      	ldr	r3, [r7, #20]
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d00e      	beq.n	8005d12 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005cf4:	20bc      	movs	r0, #188	; 0xbc
 8005cf6:	f001 fc77 	bl	80075e8 <pvPortMalloc>
 8005cfa:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005cfc:	69fb      	ldr	r3, [r7, #28]
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d003      	beq.n	8005d0a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005d02:	69fb      	ldr	r3, [r7, #28]
 8005d04:	697a      	ldr	r2, [r7, #20]
 8005d06:	631a      	str	r2, [r3, #48]	; 0x30
 8005d08:	e005      	b.n	8005d16 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005d0a:	6978      	ldr	r0, [r7, #20]
 8005d0c:	f001 fd38 	bl	8007780 <vPortFree>
 8005d10:	e001      	b.n	8005d16 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005d12:	2300      	movs	r3, #0
 8005d14:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005d16:	69fb      	ldr	r3, [r7, #28]
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d017      	beq.n	8005d4c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005d1c:	69fb      	ldr	r3, [r7, #28]
 8005d1e:	2200      	movs	r2, #0
 8005d20:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005d24:	88fa      	ldrh	r2, [r7, #6]
 8005d26:	2300      	movs	r3, #0
 8005d28:	9303      	str	r3, [sp, #12]
 8005d2a:	69fb      	ldr	r3, [r7, #28]
 8005d2c:	9302      	str	r3, [sp, #8]
 8005d2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d30:	9301      	str	r3, [sp, #4]
 8005d32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d34:	9300      	str	r3, [sp, #0]
 8005d36:	683b      	ldr	r3, [r7, #0]
 8005d38:	68b9      	ldr	r1, [r7, #8]
 8005d3a:	68f8      	ldr	r0, [r7, #12]
 8005d3c:	f000 f80e 	bl	8005d5c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005d40:	69f8      	ldr	r0, [r7, #28]
 8005d42:	f000 f8b1 	bl	8005ea8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005d46:	2301      	movs	r3, #1
 8005d48:	61bb      	str	r3, [r7, #24]
 8005d4a:	e002      	b.n	8005d52 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005d4c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005d50:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005d52:	69bb      	ldr	r3, [r7, #24]
	}
 8005d54:	4618      	mov	r0, r3
 8005d56:	3720      	adds	r7, #32
 8005d58:	46bd      	mov	sp, r7
 8005d5a:	bd80      	pop	{r7, pc}

08005d5c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005d5c:	b580      	push	{r7, lr}
 8005d5e:	b088      	sub	sp, #32
 8005d60:	af00      	add	r7, sp, #0
 8005d62:	60f8      	str	r0, [r7, #12]
 8005d64:	60b9      	str	r1, [r7, #8]
 8005d66:	607a      	str	r2, [r7, #4]
 8005d68:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8005d6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d6c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	009b      	lsls	r3, r3, #2
 8005d72:	461a      	mov	r2, r3
 8005d74:	21a5      	movs	r1, #165	; 0xa5
 8005d76:	f00a fdcd 	bl	8010914 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005d7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d7c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005d84:	3b01      	subs	r3, #1
 8005d86:	009b      	lsls	r3, r3, #2
 8005d88:	4413      	add	r3, r2
 8005d8a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005d8c:	69bb      	ldr	r3, [r7, #24]
 8005d8e:	f023 0307 	bic.w	r3, r3, #7
 8005d92:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005d94:	69bb      	ldr	r3, [r7, #24]
 8005d96:	f003 0307 	and.w	r3, r3, #7
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d00a      	beq.n	8005db4 <prvInitialiseNewTask+0x58>
	__asm volatile
 8005d9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005da2:	f383 8811 	msr	BASEPRI, r3
 8005da6:	f3bf 8f6f 	isb	sy
 8005daa:	f3bf 8f4f 	dsb	sy
 8005dae:	617b      	str	r3, [r7, #20]
}
 8005db0:	bf00      	nop
 8005db2:	e7fe      	b.n	8005db2 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005db4:	68bb      	ldr	r3, [r7, #8]
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d01f      	beq.n	8005dfa <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005dba:	2300      	movs	r3, #0
 8005dbc:	61fb      	str	r3, [r7, #28]
 8005dbe:	e012      	b.n	8005de6 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005dc0:	68ba      	ldr	r2, [r7, #8]
 8005dc2:	69fb      	ldr	r3, [r7, #28]
 8005dc4:	4413      	add	r3, r2
 8005dc6:	7819      	ldrb	r1, [r3, #0]
 8005dc8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005dca:	69fb      	ldr	r3, [r7, #28]
 8005dcc:	4413      	add	r3, r2
 8005dce:	3334      	adds	r3, #52	; 0x34
 8005dd0:	460a      	mov	r2, r1
 8005dd2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005dd4:	68ba      	ldr	r2, [r7, #8]
 8005dd6:	69fb      	ldr	r3, [r7, #28]
 8005dd8:	4413      	add	r3, r2
 8005dda:	781b      	ldrb	r3, [r3, #0]
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d006      	beq.n	8005dee <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005de0:	69fb      	ldr	r3, [r7, #28]
 8005de2:	3301      	adds	r3, #1
 8005de4:	61fb      	str	r3, [r7, #28]
 8005de6:	69fb      	ldr	r3, [r7, #28]
 8005de8:	2b0f      	cmp	r3, #15
 8005dea:	d9e9      	bls.n	8005dc0 <prvInitialiseNewTask+0x64>
 8005dec:	e000      	b.n	8005df0 <prvInitialiseNewTask+0x94>
			{
				break;
 8005dee:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005df0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005df2:	2200      	movs	r2, #0
 8005df4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005df8:	e003      	b.n	8005e02 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005dfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dfc:	2200      	movs	r2, #0
 8005dfe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005e02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e04:	2b37      	cmp	r3, #55	; 0x37
 8005e06:	d901      	bls.n	8005e0c <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005e08:	2337      	movs	r3, #55	; 0x37
 8005e0a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005e0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e0e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005e10:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005e12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e14:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005e16:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8005e18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e1a:	2200      	movs	r2, #0
 8005e1c:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005e1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e20:	3304      	adds	r3, #4
 8005e22:	4618      	mov	r0, r3
 8005e24:	f7ff f978 	bl	8005118 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005e28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e2a:	3318      	adds	r3, #24
 8005e2c:	4618      	mov	r0, r3
 8005e2e:	f7ff f973 	bl	8005118 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005e32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e34:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005e36:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005e38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e3a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005e3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e40:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005e42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e44:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005e46:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005e48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e4a:	2200      	movs	r2, #0
 8005e4c:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005e50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e52:	2200      	movs	r2, #0
 8005e54:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8005e58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e5a:	3354      	adds	r3, #84	; 0x54
 8005e5c:	2260      	movs	r2, #96	; 0x60
 8005e5e:	2100      	movs	r1, #0
 8005e60:	4618      	mov	r0, r3
 8005e62:	f00a fd57 	bl	8010914 <memset>
 8005e66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e68:	4a0c      	ldr	r2, [pc, #48]	; (8005e9c <prvInitialiseNewTask+0x140>)
 8005e6a:	659a      	str	r2, [r3, #88]	; 0x58
 8005e6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e6e:	4a0c      	ldr	r2, [pc, #48]	; (8005ea0 <prvInitialiseNewTask+0x144>)
 8005e70:	65da      	str	r2, [r3, #92]	; 0x5c
 8005e72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e74:	4a0b      	ldr	r2, [pc, #44]	; (8005ea4 <prvInitialiseNewTask+0x148>)
 8005e76:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005e78:	683a      	ldr	r2, [r7, #0]
 8005e7a:	68f9      	ldr	r1, [r7, #12]
 8005e7c:	69b8      	ldr	r0, [r7, #24]
 8005e7e:	f001 f967 	bl	8007150 <pxPortInitialiseStack>
 8005e82:	4602      	mov	r2, r0
 8005e84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e86:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8005e88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d002      	beq.n	8005e94 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005e8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e90:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005e92:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005e94:	bf00      	nop
 8005e96:	3720      	adds	r7, #32
 8005e98:	46bd      	mov	sp, r7
 8005e9a:	bd80      	pop	{r7, pc}
 8005e9c:	08012a48 	.word	0x08012a48
 8005ea0:	08012a68 	.word	0x08012a68
 8005ea4:	08012a28 	.word	0x08012a28

08005ea8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005ea8:	b580      	push	{r7, lr}
 8005eaa:	b082      	sub	sp, #8
 8005eac:	af00      	add	r7, sp, #0
 8005eae:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005eb0:	f001 fa78 	bl	80073a4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005eb4:	4b2d      	ldr	r3, [pc, #180]	; (8005f6c <prvAddNewTaskToReadyList+0xc4>)
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	3301      	adds	r3, #1
 8005eba:	4a2c      	ldr	r2, [pc, #176]	; (8005f6c <prvAddNewTaskToReadyList+0xc4>)
 8005ebc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005ebe:	4b2c      	ldr	r3, [pc, #176]	; (8005f70 <prvAddNewTaskToReadyList+0xc8>)
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d109      	bne.n	8005eda <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005ec6:	4a2a      	ldr	r2, [pc, #168]	; (8005f70 <prvAddNewTaskToReadyList+0xc8>)
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005ecc:	4b27      	ldr	r3, [pc, #156]	; (8005f6c <prvAddNewTaskToReadyList+0xc4>)
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	2b01      	cmp	r3, #1
 8005ed2:	d110      	bne.n	8005ef6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005ed4:	f000 fc4c 	bl	8006770 <prvInitialiseTaskLists>
 8005ed8:	e00d      	b.n	8005ef6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005eda:	4b26      	ldr	r3, [pc, #152]	; (8005f74 <prvAddNewTaskToReadyList+0xcc>)
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d109      	bne.n	8005ef6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005ee2:	4b23      	ldr	r3, [pc, #140]	; (8005f70 <prvAddNewTaskToReadyList+0xc8>)
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005eec:	429a      	cmp	r2, r3
 8005eee:	d802      	bhi.n	8005ef6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005ef0:	4a1f      	ldr	r2, [pc, #124]	; (8005f70 <prvAddNewTaskToReadyList+0xc8>)
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005ef6:	4b20      	ldr	r3, [pc, #128]	; (8005f78 <prvAddNewTaskToReadyList+0xd0>)
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	3301      	adds	r3, #1
 8005efc:	4a1e      	ldr	r2, [pc, #120]	; (8005f78 <prvAddNewTaskToReadyList+0xd0>)
 8005efe:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005f00:	4b1d      	ldr	r3, [pc, #116]	; (8005f78 <prvAddNewTaskToReadyList+0xd0>)
 8005f02:	681a      	ldr	r2, [r3, #0]
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f0c:	4b1b      	ldr	r3, [pc, #108]	; (8005f7c <prvAddNewTaskToReadyList+0xd4>)
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	429a      	cmp	r2, r3
 8005f12:	d903      	bls.n	8005f1c <prvAddNewTaskToReadyList+0x74>
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f18:	4a18      	ldr	r2, [pc, #96]	; (8005f7c <prvAddNewTaskToReadyList+0xd4>)
 8005f1a:	6013      	str	r3, [r2, #0]
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f20:	4613      	mov	r3, r2
 8005f22:	009b      	lsls	r3, r3, #2
 8005f24:	4413      	add	r3, r2
 8005f26:	009b      	lsls	r3, r3, #2
 8005f28:	4a15      	ldr	r2, [pc, #84]	; (8005f80 <prvAddNewTaskToReadyList+0xd8>)
 8005f2a:	441a      	add	r2, r3
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	3304      	adds	r3, #4
 8005f30:	4619      	mov	r1, r3
 8005f32:	4610      	mov	r0, r2
 8005f34:	f7ff f8fd 	bl	8005132 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005f38:	f001 fa64 	bl	8007404 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005f3c:	4b0d      	ldr	r3, [pc, #52]	; (8005f74 <prvAddNewTaskToReadyList+0xcc>)
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d00e      	beq.n	8005f62 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005f44:	4b0a      	ldr	r3, [pc, #40]	; (8005f70 <prvAddNewTaskToReadyList+0xc8>)
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f4e:	429a      	cmp	r2, r3
 8005f50:	d207      	bcs.n	8005f62 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005f52:	4b0c      	ldr	r3, [pc, #48]	; (8005f84 <prvAddNewTaskToReadyList+0xdc>)
 8005f54:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005f58:	601a      	str	r2, [r3, #0]
 8005f5a:	f3bf 8f4f 	dsb	sy
 8005f5e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005f62:	bf00      	nop
 8005f64:	3708      	adds	r7, #8
 8005f66:	46bd      	mov	sp, r7
 8005f68:	bd80      	pop	{r7, pc}
 8005f6a:	bf00      	nop
 8005f6c:	2000538c 	.word	0x2000538c
 8005f70:	20004eb8 	.word	0x20004eb8
 8005f74:	20005398 	.word	0x20005398
 8005f78:	200053a8 	.word	0x200053a8
 8005f7c:	20005394 	.word	0x20005394
 8005f80:	20004ebc 	.word	0x20004ebc
 8005f84:	e000ed04 	.word	0xe000ed04

08005f88 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005f88:	b580      	push	{r7, lr}
 8005f8a:	b084      	sub	sp, #16
 8005f8c:	af00      	add	r7, sp, #0
 8005f8e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005f90:	2300      	movs	r3, #0
 8005f92:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d017      	beq.n	8005fca <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005f9a:	4b13      	ldr	r3, [pc, #76]	; (8005fe8 <vTaskDelay+0x60>)
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d00a      	beq.n	8005fb8 <vTaskDelay+0x30>
	__asm volatile
 8005fa2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fa6:	f383 8811 	msr	BASEPRI, r3
 8005faa:	f3bf 8f6f 	isb	sy
 8005fae:	f3bf 8f4f 	dsb	sy
 8005fb2:	60bb      	str	r3, [r7, #8]
}
 8005fb4:	bf00      	nop
 8005fb6:	e7fe      	b.n	8005fb6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8005fb8:	f000 f88a 	bl	80060d0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005fbc:	2100      	movs	r1, #0
 8005fbe:	6878      	ldr	r0, [r7, #4]
 8005fc0:	f000 fd24 	bl	8006a0c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005fc4:	f000 f892 	bl	80060ec <xTaskResumeAll>
 8005fc8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d107      	bne.n	8005fe0 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8005fd0:	4b06      	ldr	r3, [pc, #24]	; (8005fec <vTaskDelay+0x64>)
 8005fd2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005fd6:	601a      	str	r2, [r3, #0]
 8005fd8:	f3bf 8f4f 	dsb	sy
 8005fdc:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005fe0:	bf00      	nop
 8005fe2:	3710      	adds	r7, #16
 8005fe4:	46bd      	mov	sp, r7
 8005fe6:	bd80      	pop	{r7, pc}
 8005fe8:	200053b4 	.word	0x200053b4
 8005fec:	e000ed04 	.word	0xe000ed04

08005ff0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005ff0:	b580      	push	{r7, lr}
 8005ff2:	b08a      	sub	sp, #40	; 0x28
 8005ff4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005ff6:	2300      	movs	r3, #0
 8005ff8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005ffa:	2300      	movs	r3, #0
 8005ffc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005ffe:	463a      	mov	r2, r7
 8006000:	1d39      	adds	r1, r7, #4
 8006002:	f107 0308 	add.w	r3, r7, #8
 8006006:	4618      	mov	r0, r3
 8006008:	f7ff f832 	bl	8005070 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800600c:	6839      	ldr	r1, [r7, #0]
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	68ba      	ldr	r2, [r7, #8]
 8006012:	9202      	str	r2, [sp, #8]
 8006014:	9301      	str	r3, [sp, #4]
 8006016:	2300      	movs	r3, #0
 8006018:	9300      	str	r3, [sp, #0]
 800601a:	2300      	movs	r3, #0
 800601c:	460a      	mov	r2, r1
 800601e:	4924      	ldr	r1, [pc, #144]	; (80060b0 <vTaskStartScheduler+0xc0>)
 8006020:	4824      	ldr	r0, [pc, #144]	; (80060b4 <vTaskStartScheduler+0xc4>)
 8006022:	f7ff fdf9 	bl	8005c18 <xTaskCreateStatic>
 8006026:	4603      	mov	r3, r0
 8006028:	4a23      	ldr	r2, [pc, #140]	; (80060b8 <vTaskStartScheduler+0xc8>)
 800602a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800602c:	4b22      	ldr	r3, [pc, #136]	; (80060b8 <vTaskStartScheduler+0xc8>)
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	2b00      	cmp	r3, #0
 8006032:	d002      	beq.n	800603a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006034:	2301      	movs	r3, #1
 8006036:	617b      	str	r3, [r7, #20]
 8006038:	e001      	b.n	800603e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800603a:	2300      	movs	r3, #0
 800603c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800603e:	697b      	ldr	r3, [r7, #20]
 8006040:	2b01      	cmp	r3, #1
 8006042:	d102      	bne.n	800604a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8006044:	f000 fd36 	bl	8006ab4 <xTimerCreateTimerTask>
 8006048:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800604a:	697b      	ldr	r3, [r7, #20]
 800604c:	2b01      	cmp	r3, #1
 800604e:	d11b      	bne.n	8006088 <vTaskStartScheduler+0x98>
	__asm volatile
 8006050:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006054:	f383 8811 	msr	BASEPRI, r3
 8006058:	f3bf 8f6f 	isb	sy
 800605c:	f3bf 8f4f 	dsb	sy
 8006060:	613b      	str	r3, [r7, #16]
}
 8006062:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006064:	4b15      	ldr	r3, [pc, #84]	; (80060bc <vTaskStartScheduler+0xcc>)
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	3354      	adds	r3, #84	; 0x54
 800606a:	4a15      	ldr	r2, [pc, #84]	; (80060c0 <vTaskStartScheduler+0xd0>)
 800606c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800606e:	4b15      	ldr	r3, [pc, #84]	; (80060c4 <vTaskStartScheduler+0xd4>)
 8006070:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006074:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006076:	4b14      	ldr	r3, [pc, #80]	; (80060c8 <vTaskStartScheduler+0xd8>)
 8006078:	2201      	movs	r2, #1
 800607a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800607c:	4b13      	ldr	r3, [pc, #76]	; (80060cc <vTaskStartScheduler+0xdc>)
 800607e:	2200      	movs	r2, #0
 8006080:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006082:	f001 f8ed 	bl	8007260 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006086:	e00e      	b.n	80060a6 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006088:	697b      	ldr	r3, [r7, #20]
 800608a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800608e:	d10a      	bne.n	80060a6 <vTaskStartScheduler+0xb6>
	__asm volatile
 8006090:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006094:	f383 8811 	msr	BASEPRI, r3
 8006098:	f3bf 8f6f 	isb	sy
 800609c:	f3bf 8f4f 	dsb	sy
 80060a0:	60fb      	str	r3, [r7, #12]
}
 80060a2:	bf00      	nop
 80060a4:	e7fe      	b.n	80060a4 <vTaskStartScheduler+0xb4>
}
 80060a6:	bf00      	nop
 80060a8:	3718      	adds	r7, #24
 80060aa:	46bd      	mov	sp, r7
 80060ac:	bd80      	pop	{r7, pc}
 80060ae:	bf00      	nop
 80060b0:	08011f88 	.word	0x08011f88
 80060b4:	08006741 	.word	0x08006741
 80060b8:	200053b0 	.word	0x200053b0
 80060bc:	20004eb8 	.word	0x20004eb8
 80060c0:	200000b4 	.word	0x200000b4
 80060c4:	200053ac 	.word	0x200053ac
 80060c8:	20005398 	.word	0x20005398
 80060cc:	20005390 	.word	0x20005390

080060d0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80060d0:	b480      	push	{r7}
 80060d2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80060d4:	4b04      	ldr	r3, [pc, #16]	; (80060e8 <vTaskSuspendAll+0x18>)
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	3301      	adds	r3, #1
 80060da:	4a03      	ldr	r2, [pc, #12]	; (80060e8 <vTaskSuspendAll+0x18>)
 80060dc:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80060de:	bf00      	nop
 80060e0:	46bd      	mov	sp, r7
 80060e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e6:	4770      	bx	lr
 80060e8:	200053b4 	.word	0x200053b4

080060ec <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80060ec:	b580      	push	{r7, lr}
 80060ee:	b084      	sub	sp, #16
 80060f0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80060f2:	2300      	movs	r3, #0
 80060f4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80060f6:	2300      	movs	r3, #0
 80060f8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80060fa:	4b42      	ldr	r3, [pc, #264]	; (8006204 <xTaskResumeAll+0x118>)
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d10a      	bne.n	8006118 <xTaskResumeAll+0x2c>
	__asm volatile
 8006102:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006106:	f383 8811 	msr	BASEPRI, r3
 800610a:	f3bf 8f6f 	isb	sy
 800610e:	f3bf 8f4f 	dsb	sy
 8006112:	603b      	str	r3, [r7, #0]
}
 8006114:	bf00      	nop
 8006116:	e7fe      	b.n	8006116 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006118:	f001 f944 	bl	80073a4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800611c:	4b39      	ldr	r3, [pc, #228]	; (8006204 <xTaskResumeAll+0x118>)
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	3b01      	subs	r3, #1
 8006122:	4a38      	ldr	r2, [pc, #224]	; (8006204 <xTaskResumeAll+0x118>)
 8006124:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006126:	4b37      	ldr	r3, [pc, #220]	; (8006204 <xTaskResumeAll+0x118>)
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	2b00      	cmp	r3, #0
 800612c:	d162      	bne.n	80061f4 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800612e:	4b36      	ldr	r3, [pc, #216]	; (8006208 <xTaskResumeAll+0x11c>)
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	2b00      	cmp	r3, #0
 8006134:	d05e      	beq.n	80061f4 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006136:	e02f      	b.n	8006198 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006138:	4b34      	ldr	r3, [pc, #208]	; (800620c <xTaskResumeAll+0x120>)
 800613a:	68db      	ldr	r3, [r3, #12]
 800613c:	68db      	ldr	r3, [r3, #12]
 800613e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	3318      	adds	r3, #24
 8006144:	4618      	mov	r0, r3
 8006146:	f7ff f851 	bl	80051ec <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	3304      	adds	r3, #4
 800614e:	4618      	mov	r0, r3
 8006150:	f7ff f84c 	bl	80051ec <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006158:	4b2d      	ldr	r3, [pc, #180]	; (8006210 <xTaskResumeAll+0x124>)
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	429a      	cmp	r2, r3
 800615e:	d903      	bls.n	8006168 <xTaskResumeAll+0x7c>
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006164:	4a2a      	ldr	r2, [pc, #168]	; (8006210 <xTaskResumeAll+0x124>)
 8006166:	6013      	str	r3, [r2, #0]
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800616c:	4613      	mov	r3, r2
 800616e:	009b      	lsls	r3, r3, #2
 8006170:	4413      	add	r3, r2
 8006172:	009b      	lsls	r3, r3, #2
 8006174:	4a27      	ldr	r2, [pc, #156]	; (8006214 <xTaskResumeAll+0x128>)
 8006176:	441a      	add	r2, r3
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	3304      	adds	r3, #4
 800617c:	4619      	mov	r1, r3
 800617e:	4610      	mov	r0, r2
 8006180:	f7fe ffd7 	bl	8005132 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006188:	4b23      	ldr	r3, [pc, #140]	; (8006218 <xTaskResumeAll+0x12c>)
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800618e:	429a      	cmp	r2, r3
 8006190:	d302      	bcc.n	8006198 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8006192:	4b22      	ldr	r3, [pc, #136]	; (800621c <xTaskResumeAll+0x130>)
 8006194:	2201      	movs	r2, #1
 8006196:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006198:	4b1c      	ldr	r3, [pc, #112]	; (800620c <xTaskResumeAll+0x120>)
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	2b00      	cmp	r3, #0
 800619e:	d1cb      	bne.n	8006138 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d001      	beq.n	80061aa <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80061a6:	f000 fb85 	bl	80068b4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80061aa:	4b1d      	ldr	r3, [pc, #116]	; (8006220 <xTaskResumeAll+0x134>)
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d010      	beq.n	80061d8 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80061b6:	f000 f847 	bl	8006248 <xTaskIncrementTick>
 80061ba:	4603      	mov	r3, r0
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d002      	beq.n	80061c6 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80061c0:	4b16      	ldr	r3, [pc, #88]	; (800621c <xTaskResumeAll+0x130>)
 80061c2:	2201      	movs	r2, #1
 80061c4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	3b01      	subs	r3, #1
 80061ca:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d1f1      	bne.n	80061b6 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80061d2:	4b13      	ldr	r3, [pc, #76]	; (8006220 <xTaskResumeAll+0x134>)
 80061d4:	2200      	movs	r2, #0
 80061d6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80061d8:	4b10      	ldr	r3, [pc, #64]	; (800621c <xTaskResumeAll+0x130>)
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d009      	beq.n	80061f4 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80061e0:	2301      	movs	r3, #1
 80061e2:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80061e4:	4b0f      	ldr	r3, [pc, #60]	; (8006224 <xTaskResumeAll+0x138>)
 80061e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80061ea:	601a      	str	r2, [r3, #0]
 80061ec:	f3bf 8f4f 	dsb	sy
 80061f0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80061f4:	f001 f906 	bl	8007404 <vPortExitCritical>

	return xAlreadyYielded;
 80061f8:	68bb      	ldr	r3, [r7, #8]
}
 80061fa:	4618      	mov	r0, r3
 80061fc:	3710      	adds	r7, #16
 80061fe:	46bd      	mov	sp, r7
 8006200:	bd80      	pop	{r7, pc}
 8006202:	bf00      	nop
 8006204:	200053b4 	.word	0x200053b4
 8006208:	2000538c 	.word	0x2000538c
 800620c:	2000534c 	.word	0x2000534c
 8006210:	20005394 	.word	0x20005394
 8006214:	20004ebc 	.word	0x20004ebc
 8006218:	20004eb8 	.word	0x20004eb8
 800621c:	200053a0 	.word	0x200053a0
 8006220:	2000539c 	.word	0x2000539c
 8006224:	e000ed04 	.word	0xe000ed04

08006228 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006228:	b480      	push	{r7}
 800622a:	b083      	sub	sp, #12
 800622c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800622e:	4b05      	ldr	r3, [pc, #20]	; (8006244 <xTaskGetTickCount+0x1c>)
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006234:	687b      	ldr	r3, [r7, #4]
}
 8006236:	4618      	mov	r0, r3
 8006238:	370c      	adds	r7, #12
 800623a:	46bd      	mov	sp, r7
 800623c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006240:	4770      	bx	lr
 8006242:	bf00      	nop
 8006244:	20005390 	.word	0x20005390

08006248 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006248:	b580      	push	{r7, lr}
 800624a:	b086      	sub	sp, #24
 800624c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800624e:	2300      	movs	r3, #0
 8006250:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006252:	4b4f      	ldr	r3, [pc, #316]	; (8006390 <xTaskIncrementTick+0x148>)
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	2b00      	cmp	r3, #0
 8006258:	f040 808f 	bne.w	800637a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800625c:	4b4d      	ldr	r3, [pc, #308]	; (8006394 <xTaskIncrementTick+0x14c>)
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	3301      	adds	r3, #1
 8006262:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006264:	4a4b      	ldr	r2, [pc, #300]	; (8006394 <xTaskIncrementTick+0x14c>)
 8006266:	693b      	ldr	r3, [r7, #16]
 8006268:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800626a:	693b      	ldr	r3, [r7, #16]
 800626c:	2b00      	cmp	r3, #0
 800626e:	d120      	bne.n	80062b2 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8006270:	4b49      	ldr	r3, [pc, #292]	; (8006398 <xTaskIncrementTick+0x150>)
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	2b00      	cmp	r3, #0
 8006278:	d00a      	beq.n	8006290 <xTaskIncrementTick+0x48>
	__asm volatile
 800627a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800627e:	f383 8811 	msr	BASEPRI, r3
 8006282:	f3bf 8f6f 	isb	sy
 8006286:	f3bf 8f4f 	dsb	sy
 800628a:	603b      	str	r3, [r7, #0]
}
 800628c:	bf00      	nop
 800628e:	e7fe      	b.n	800628e <xTaskIncrementTick+0x46>
 8006290:	4b41      	ldr	r3, [pc, #260]	; (8006398 <xTaskIncrementTick+0x150>)
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	60fb      	str	r3, [r7, #12]
 8006296:	4b41      	ldr	r3, [pc, #260]	; (800639c <xTaskIncrementTick+0x154>)
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	4a3f      	ldr	r2, [pc, #252]	; (8006398 <xTaskIncrementTick+0x150>)
 800629c:	6013      	str	r3, [r2, #0]
 800629e:	4a3f      	ldr	r2, [pc, #252]	; (800639c <xTaskIncrementTick+0x154>)
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	6013      	str	r3, [r2, #0]
 80062a4:	4b3e      	ldr	r3, [pc, #248]	; (80063a0 <xTaskIncrementTick+0x158>)
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	3301      	adds	r3, #1
 80062aa:	4a3d      	ldr	r2, [pc, #244]	; (80063a0 <xTaskIncrementTick+0x158>)
 80062ac:	6013      	str	r3, [r2, #0]
 80062ae:	f000 fb01 	bl	80068b4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80062b2:	4b3c      	ldr	r3, [pc, #240]	; (80063a4 <xTaskIncrementTick+0x15c>)
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	693a      	ldr	r2, [r7, #16]
 80062b8:	429a      	cmp	r2, r3
 80062ba:	d349      	bcc.n	8006350 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80062bc:	4b36      	ldr	r3, [pc, #216]	; (8006398 <xTaskIncrementTick+0x150>)
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d104      	bne.n	80062d0 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80062c6:	4b37      	ldr	r3, [pc, #220]	; (80063a4 <xTaskIncrementTick+0x15c>)
 80062c8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80062cc:	601a      	str	r2, [r3, #0]
					break;
 80062ce:	e03f      	b.n	8006350 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80062d0:	4b31      	ldr	r3, [pc, #196]	; (8006398 <xTaskIncrementTick+0x150>)
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	68db      	ldr	r3, [r3, #12]
 80062d6:	68db      	ldr	r3, [r3, #12]
 80062d8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80062da:	68bb      	ldr	r3, [r7, #8]
 80062dc:	685b      	ldr	r3, [r3, #4]
 80062de:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80062e0:	693a      	ldr	r2, [r7, #16]
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	429a      	cmp	r2, r3
 80062e6:	d203      	bcs.n	80062f0 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80062e8:	4a2e      	ldr	r2, [pc, #184]	; (80063a4 <xTaskIncrementTick+0x15c>)
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80062ee:	e02f      	b.n	8006350 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80062f0:	68bb      	ldr	r3, [r7, #8]
 80062f2:	3304      	adds	r3, #4
 80062f4:	4618      	mov	r0, r3
 80062f6:	f7fe ff79 	bl	80051ec <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80062fa:	68bb      	ldr	r3, [r7, #8]
 80062fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d004      	beq.n	800630c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006302:	68bb      	ldr	r3, [r7, #8]
 8006304:	3318      	adds	r3, #24
 8006306:	4618      	mov	r0, r3
 8006308:	f7fe ff70 	bl	80051ec <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800630c:	68bb      	ldr	r3, [r7, #8]
 800630e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006310:	4b25      	ldr	r3, [pc, #148]	; (80063a8 <xTaskIncrementTick+0x160>)
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	429a      	cmp	r2, r3
 8006316:	d903      	bls.n	8006320 <xTaskIncrementTick+0xd8>
 8006318:	68bb      	ldr	r3, [r7, #8]
 800631a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800631c:	4a22      	ldr	r2, [pc, #136]	; (80063a8 <xTaskIncrementTick+0x160>)
 800631e:	6013      	str	r3, [r2, #0]
 8006320:	68bb      	ldr	r3, [r7, #8]
 8006322:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006324:	4613      	mov	r3, r2
 8006326:	009b      	lsls	r3, r3, #2
 8006328:	4413      	add	r3, r2
 800632a:	009b      	lsls	r3, r3, #2
 800632c:	4a1f      	ldr	r2, [pc, #124]	; (80063ac <xTaskIncrementTick+0x164>)
 800632e:	441a      	add	r2, r3
 8006330:	68bb      	ldr	r3, [r7, #8]
 8006332:	3304      	adds	r3, #4
 8006334:	4619      	mov	r1, r3
 8006336:	4610      	mov	r0, r2
 8006338:	f7fe fefb 	bl	8005132 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800633c:	68bb      	ldr	r3, [r7, #8]
 800633e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006340:	4b1b      	ldr	r3, [pc, #108]	; (80063b0 <xTaskIncrementTick+0x168>)
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006346:	429a      	cmp	r2, r3
 8006348:	d3b8      	bcc.n	80062bc <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800634a:	2301      	movs	r3, #1
 800634c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800634e:	e7b5      	b.n	80062bc <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006350:	4b17      	ldr	r3, [pc, #92]	; (80063b0 <xTaskIncrementTick+0x168>)
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006356:	4915      	ldr	r1, [pc, #84]	; (80063ac <xTaskIncrementTick+0x164>)
 8006358:	4613      	mov	r3, r2
 800635a:	009b      	lsls	r3, r3, #2
 800635c:	4413      	add	r3, r2
 800635e:	009b      	lsls	r3, r3, #2
 8006360:	440b      	add	r3, r1
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	2b01      	cmp	r3, #1
 8006366:	d901      	bls.n	800636c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8006368:	2301      	movs	r3, #1
 800636a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800636c:	4b11      	ldr	r3, [pc, #68]	; (80063b4 <xTaskIncrementTick+0x16c>)
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	2b00      	cmp	r3, #0
 8006372:	d007      	beq.n	8006384 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8006374:	2301      	movs	r3, #1
 8006376:	617b      	str	r3, [r7, #20]
 8006378:	e004      	b.n	8006384 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800637a:	4b0f      	ldr	r3, [pc, #60]	; (80063b8 <xTaskIncrementTick+0x170>)
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	3301      	adds	r3, #1
 8006380:	4a0d      	ldr	r2, [pc, #52]	; (80063b8 <xTaskIncrementTick+0x170>)
 8006382:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8006384:	697b      	ldr	r3, [r7, #20]
}
 8006386:	4618      	mov	r0, r3
 8006388:	3718      	adds	r7, #24
 800638a:	46bd      	mov	sp, r7
 800638c:	bd80      	pop	{r7, pc}
 800638e:	bf00      	nop
 8006390:	200053b4 	.word	0x200053b4
 8006394:	20005390 	.word	0x20005390
 8006398:	20005344 	.word	0x20005344
 800639c:	20005348 	.word	0x20005348
 80063a0:	200053a4 	.word	0x200053a4
 80063a4:	200053ac 	.word	0x200053ac
 80063a8:	20005394 	.word	0x20005394
 80063ac:	20004ebc 	.word	0x20004ebc
 80063b0:	20004eb8 	.word	0x20004eb8
 80063b4:	200053a0 	.word	0x200053a0
 80063b8:	2000539c 	.word	0x2000539c

080063bc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80063bc:	b480      	push	{r7}
 80063be:	b085      	sub	sp, #20
 80063c0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80063c2:	4b2a      	ldr	r3, [pc, #168]	; (800646c <vTaskSwitchContext+0xb0>)
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d003      	beq.n	80063d2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80063ca:	4b29      	ldr	r3, [pc, #164]	; (8006470 <vTaskSwitchContext+0xb4>)
 80063cc:	2201      	movs	r2, #1
 80063ce:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80063d0:	e046      	b.n	8006460 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 80063d2:	4b27      	ldr	r3, [pc, #156]	; (8006470 <vTaskSwitchContext+0xb4>)
 80063d4:	2200      	movs	r2, #0
 80063d6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80063d8:	4b26      	ldr	r3, [pc, #152]	; (8006474 <vTaskSwitchContext+0xb8>)
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	60fb      	str	r3, [r7, #12]
 80063de:	e010      	b.n	8006402 <vTaskSwitchContext+0x46>
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d10a      	bne.n	80063fc <vTaskSwitchContext+0x40>
	__asm volatile
 80063e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063ea:	f383 8811 	msr	BASEPRI, r3
 80063ee:	f3bf 8f6f 	isb	sy
 80063f2:	f3bf 8f4f 	dsb	sy
 80063f6:	607b      	str	r3, [r7, #4]
}
 80063f8:	bf00      	nop
 80063fa:	e7fe      	b.n	80063fa <vTaskSwitchContext+0x3e>
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	3b01      	subs	r3, #1
 8006400:	60fb      	str	r3, [r7, #12]
 8006402:	491d      	ldr	r1, [pc, #116]	; (8006478 <vTaskSwitchContext+0xbc>)
 8006404:	68fa      	ldr	r2, [r7, #12]
 8006406:	4613      	mov	r3, r2
 8006408:	009b      	lsls	r3, r3, #2
 800640a:	4413      	add	r3, r2
 800640c:	009b      	lsls	r3, r3, #2
 800640e:	440b      	add	r3, r1
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	2b00      	cmp	r3, #0
 8006414:	d0e4      	beq.n	80063e0 <vTaskSwitchContext+0x24>
 8006416:	68fa      	ldr	r2, [r7, #12]
 8006418:	4613      	mov	r3, r2
 800641a:	009b      	lsls	r3, r3, #2
 800641c:	4413      	add	r3, r2
 800641e:	009b      	lsls	r3, r3, #2
 8006420:	4a15      	ldr	r2, [pc, #84]	; (8006478 <vTaskSwitchContext+0xbc>)
 8006422:	4413      	add	r3, r2
 8006424:	60bb      	str	r3, [r7, #8]
 8006426:	68bb      	ldr	r3, [r7, #8]
 8006428:	685b      	ldr	r3, [r3, #4]
 800642a:	685a      	ldr	r2, [r3, #4]
 800642c:	68bb      	ldr	r3, [r7, #8]
 800642e:	605a      	str	r2, [r3, #4]
 8006430:	68bb      	ldr	r3, [r7, #8]
 8006432:	685a      	ldr	r2, [r3, #4]
 8006434:	68bb      	ldr	r3, [r7, #8]
 8006436:	3308      	adds	r3, #8
 8006438:	429a      	cmp	r2, r3
 800643a:	d104      	bne.n	8006446 <vTaskSwitchContext+0x8a>
 800643c:	68bb      	ldr	r3, [r7, #8]
 800643e:	685b      	ldr	r3, [r3, #4]
 8006440:	685a      	ldr	r2, [r3, #4]
 8006442:	68bb      	ldr	r3, [r7, #8]
 8006444:	605a      	str	r2, [r3, #4]
 8006446:	68bb      	ldr	r3, [r7, #8]
 8006448:	685b      	ldr	r3, [r3, #4]
 800644a:	68db      	ldr	r3, [r3, #12]
 800644c:	4a0b      	ldr	r2, [pc, #44]	; (800647c <vTaskSwitchContext+0xc0>)
 800644e:	6013      	str	r3, [r2, #0]
 8006450:	4a08      	ldr	r2, [pc, #32]	; (8006474 <vTaskSwitchContext+0xb8>)
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006456:	4b09      	ldr	r3, [pc, #36]	; (800647c <vTaskSwitchContext+0xc0>)
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	3354      	adds	r3, #84	; 0x54
 800645c:	4a08      	ldr	r2, [pc, #32]	; (8006480 <vTaskSwitchContext+0xc4>)
 800645e:	6013      	str	r3, [r2, #0]
}
 8006460:	bf00      	nop
 8006462:	3714      	adds	r7, #20
 8006464:	46bd      	mov	sp, r7
 8006466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800646a:	4770      	bx	lr
 800646c:	200053b4 	.word	0x200053b4
 8006470:	200053a0 	.word	0x200053a0
 8006474:	20005394 	.word	0x20005394
 8006478:	20004ebc 	.word	0x20004ebc
 800647c:	20004eb8 	.word	0x20004eb8
 8006480:	200000b4 	.word	0x200000b4

08006484 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006484:	b580      	push	{r7, lr}
 8006486:	b084      	sub	sp, #16
 8006488:	af00      	add	r7, sp, #0
 800648a:	6078      	str	r0, [r7, #4]
 800648c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	2b00      	cmp	r3, #0
 8006492:	d10a      	bne.n	80064aa <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8006494:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006498:	f383 8811 	msr	BASEPRI, r3
 800649c:	f3bf 8f6f 	isb	sy
 80064a0:	f3bf 8f4f 	dsb	sy
 80064a4:	60fb      	str	r3, [r7, #12]
}
 80064a6:	bf00      	nop
 80064a8:	e7fe      	b.n	80064a8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80064aa:	4b07      	ldr	r3, [pc, #28]	; (80064c8 <vTaskPlaceOnEventList+0x44>)
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	3318      	adds	r3, #24
 80064b0:	4619      	mov	r1, r3
 80064b2:	6878      	ldr	r0, [r7, #4]
 80064b4:	f7fe fe61 	bl	800517a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80064b8:	2101      	movs	r1, #1
 80064ba:	6838      	ldr	r0, [r7, #0]
 80064bc:	f000 faa6 	bl	8006a0c <prvAddCurrentTaskToDelayedList>
}
 80064c0:	bf00      	nop
 80064c2:	3710      	adds	r7, #16
 80064c4:	46bd      	mov	sp, r7
 80064c6:	bd80      	pop	{r7, pc}
 80064c8:	20004eb8 	.word	0x20004eb8

080064cc <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80064cc:	b580      	push	{r7, lr}
 80064ce:	b086      	sub	sp, #24
 80064d0:	af00      	add	r7, sp, #0
 80064d2:	60f8      	str	r0, [r7, #12]
 80064d4:	60b9      	str	r1, [r7, #8]
 80064d6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d10a      	bne.n	80064f4 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80064de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064e2:	f383 8811 	msr	BASEPRI, r3
 80064e6:	f3bf 8f6f 	isb	sy
 80064ea:	f3bf 8f4f 	dsb	sy
 80064ee:	617b      	str	r3, [r7, #20]
}
 80064f0:	bf00      	nop
 80064f2:	e7fe      	b.n	80064f2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80064f4:	4b0a      	ldr	r3, [pc, #40]	; (8006520 <vTaskPlaceOnEventListRestricted+0x54>)
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	3318      	adds	r3, #24
 80064fa:	4619      	mov	r1, r3
 80064fc:	68f8      	ldr	r0, [r7, #12]
 80064fe:	f7fe fe18 	bl	8005132 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	2b00      	cmp	r3, #0
 8006506:	d002      	beq.n	800650e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8006508:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800650c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800650e:	6879      	ldr	r1, [r7, #4]
 8006510:	68b8      	ldr	r0, [r7, #8]
 8006512:	f000 fa7b 	bl	8006a0c <prvAddCurrentTaskToDelayedList>
	}
 8006516:	bf00      	nop
 8006518:	3718      	adds	r7, #24
 800651a:	46bd      	mov	sp, r7
 800651c:	bd80      	pop	{r7, pc}
 800651e:	bf00      	nop
 8006520:	20004eb8 	.word	0x20004eb8

08006524 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006524:	b580      	push	{r7, lr}
 8006526:	b086      	sub	sp, #24
 8006528:	af00      	add	r7, sp, #0
 800652a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	68db      	ldr	r3, [r3, #12]
 8006530:	68db      	ldr	r3, [r3, #12]
 8006532:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006534:	693b      	ldr	r3, [r7, #16]
 8006536:	2b00      	cmp	r3, #0
 8006538:	d10a      	bne.n	8006550 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800653a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800653e:	f383 8811 	msr	BASEPRI, r3
 8006542:	f3bf 8f6f 	isb	sy
 8006546:	f3bf 8f4f 	dsb	sy
 800654a:	60fb      	str	r3, [r7, #12]
}
 800654c:	bf00      	nop
 800654e:	e7fe      	b.n	800654e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006550:	693b      	ldr	r3, [r7, #16]
 8006552:	3318      	adds	r3, #24
 8006554:	4618      	mov	r0, r3
 8006556:	f7fe fe49 	bl	80051ec <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800655a:	4b1e      	ldr	r3, [pc, #120]	; (80065d4 <xTaskRemoveFromEventList+0xb0>)
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	2b00      	cmp	r3, #0
 8006560:	d11d      	bne.n	800659e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006562:	693b      	ldr	r3, [r7, #16]
 8006564:	3304      	adds	r3, #4
 8006566:	4618      	mov	r0, r3
 8006568:	f7fe fe40 	bl	80051ec <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800656c:	693b      	ldr	r3, [r7, #16]
 800656e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006570:	4b19      	ldr	r3, [pc, #100]	; (80065d8 <xTaskRemoveFromEventList+0xb4>)
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	429a      	cmp	r2, r3
 8006576:	d903      	bls.n	8006580 <xTaskRemoveFromEventList+0x5c>
 8006578:	693b      	ldr	r3, [r7, #16]
 800657a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800657c:	4a16      	ldr	r2, [pc, #88]	; (80065d8 <xTaskRemoveFromEventList+0xb4>)
 800657e:	6013      	str	r3, [r2, #0]
 8006580:	693b      	ldr	r3, [r7, #16]
 8006582:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006584:	4613      	mov	r3, r2
 8006586:	009b      	lsls	r3, r3, #2
 8006588:	4413      	add	r3, r2
 800658a:	009b      	lsls	r3, r3, #2
 800658c:	4a13      	ldr	r2, [pc, #76]	; (80065dc <xTaskRemoveFromEventList+0xb8>)
 800658e:	441a      	add	r2, r3
 8006590:	693b      	ldr	r3, [r7, #16]
 8006592:	3304      	adds	r3, #4
 8006594:	4619      	mov	r1, r3
 8006596:	4610      	mov	r0, r2
 8006598:	f7fe fdcb 	bl	8005132 <vListInsertEnd>
 800659c:	e005      	b.n	80065aa <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800659e:	693b      	ldr	r3, [r7, #16]
 80065a0:	3318      	adds	r3, #24
 80065a2:	4619      	mov	r1, r3
 80065a4:	480e      	ldr	r0, [pc, #56]	; (80065e0 <xTaskRemoveFromEventList+0xbc>)
 80065a6:	f7fe fdc4 	bl	8005132 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80065aa:	693b      	ldr	r3, [r7, #16]
 80065ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80065ae:	4b0d      	ldr	r3, [pc, #52]	; (80065e4 <xTaskRemoveFromEventList+0xc0>)
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065b4:	429a      	cmp	r2, r3
 80065b6:	d905      	bls.n	80065c4 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80065b8:	2301      	movs	r3, #1
 80065ba:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80065bc:	4b0a      	ldr	r3, [pc, #40]	; (80065e8 <xTaskRemoveFromEventList+0xc4>)
 80065be:	2201      	movs	r2, #1
 80065c0:	601a      	str	r2, [r3, #0]
 80065c2:	e001      	b.n	80065c8 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80065c4:	2300      	movs	r3, #0
 80065c6:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80065c8:	697b      	ldr	r3, [r7, #20]
}
 80065ca:	4618      	mov	r0, r3
 80065cc:	3718      	adds	r7, #24
 80065ce:	46bd      	mov	sp, r7
 80065d0:	bd80      	pop	{r7, pc}
 80065d2:	bf00      	nop
 80065d4:	200053b4 	.word	0x200053b4
 80065d8:	20005394 	.word	0x20005394
 80065dc:	20004ebc 	.word	0x20004ebc
 80065e0:	2000534c 	.word	0x2000534c
 80065e4:	20004eb8 	.word	0x20004eb8
 80065e8:	200053a0 	.word	0x200053a0

080065ec <vTaskSetTimeOutState>:
	}
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80065ec:	b580      	push	{r7, lr}
 80065ee:	b084      	sub	sp, #16
 80065f0:	af00      	add	r7, sp, #0
 80065f2:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d10a      	bne.n	8006610 <vTaskSetTimeOutState+0x24>
	__asm volatile
 80065fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065fe:	f383 8811 	msr	BASEPRI, r3
 8006602:	f3bf 8f6f 	isb	sy
 8006606:	f3bf 8f4f 	dsb	sy
 800660a:	60fb      	str	r3, [r7, #12]
}
 800660c:	bf00      	nop
 800660e:	e7fe      	b.n	800660e <vTaskSetTimeOutState+0x22>
	taskENTER_CRITICAL();
 8006610:	f000 fec8 	bl	80073a4 <vPortEnterCritical>
	{
		pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006614:	4b06      	ldr	r3, [pc, #24]	; (8006630 <vTaskSetTimeOutState+0x44>)
 8006616:	681a      	ldr	r2, [r3, #0]
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	601a      	str	r2, [r3, #0]
		pxTimeOut->xTimeOnEntering = xTickCount;
 800661c:	4b05      	ldr	r3, [pc, #20]	; (8006634 <vTaskSetTimeOutState+0x48>)
 800661e:	681a      	ldr	r2, [r3, #0]
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	605a      	str	r2, [r3, #4]
	}
	taskEXIT_CRITICAL();
 8006624:	f000 feee 	bl	8007404 <vPortExitCritical>
}
 8006628:	bf00      	nop
 800662a:	3710      	adds	r7, #16
 800662c:	46bd      	mov	sp, r7
 800662e:	bd80      	pop	{r7, pc}
 8006630:	200053a4 	.word	0x200053a4
 8006634:	20005390 	.word	0x20005390

08006638 <vTaskInternalSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006638:	b480      	push	{r7}
 800663a:	b083      	sub	sp, #12
 800663c:	af00      	add	r7, sp, #0
 800663e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006640:	4b06      	ldr	r3, [pc, #24]	; (800665c <vTaskInternalSetTimeOutState+0x24>)
 8006642:	681a      	ldr	r2, [r3, #0]
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006648:	4b05      	ldr	r3, [pc, #20]	; (8006660 <vTaskInternalSetTimeOutState+0x28>)
 800664a:	681a      	ldr	r2, [r3, #0]
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	605a      	str	r2, [r3, #4]
}
 8006650:	bf00      	nop
 8006652:	370c      	adds	r7, #12
 8006654:	46bd      	mov	sp, r7
 8006656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800665a:	4770      	bx	lr
 800665c:	200053a4 	.word	0x200053a4
 8006660:	20005390 	.word	0x20005390

08006664 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006664:	b580      	push	{r7, lr}
 8006666:	b088      	sub	sp, #32
 8006668:	af00      	add	r7, sp, #0
 800666a:	6078      	str	r0, [r7, #4]
 800666c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	2b00      	cmp	r3, #0
 8006672:	d10a      	bne.n	800668a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8006674:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006678:	f383 8811 	msr	BASEPRI, r3
 800667c:	f3bf 8f6f 	isb	sy
 8006680:	f3bf 8f4f 	dsb	sy
 8006684:	613b      	str	r3, [r7, #16]
}
 8006686:	bf00      	nop
 8006688:	e7fe      	b.n	8006688 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800668a:	683b      	ldr	r3, [r7, #0]
 800668c:	2b00      	cmp	r3, #0
 800668e:	d10a      	bne.n	80066a6 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8006690:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006694:	f383 8811 	msr	BASEPRI, r3
 8006698:	f3bf 8f6f 	isb	sy
 800669c:	f3bf 8f4f 	dsb	sy
 80066a0:	60fb      	str	r3, [r7, #12]
}
 80066a2:	bf00      	nop
 80066a4:	e7fe      	b.n	80066a4 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80066a6:	f000 fe7d 	bl	80073a4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80066aa:	4b1d      	ldr	r3, [pc, #116]	; (8006720 <xTaskCheckForTimeOut+0xbc>)
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	685b      	ldr	r3, [r3, #4]
 80066b4:	69ba      	ldr	r2, [r7, #24]
 80066b6:	1ad3      	subs	r3, r2, r3
 80066b8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80066ba:	683b      	ldr	r3, [r7, #0]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80066c2:	d102      	bne.n	80066ca <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80066c4:	2300      	movs	r3, #0
 80066c6:	61fb      	str	r3, [r7, #28]
 80066c8:	e023      	b.n	8006712 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	681a      	ldr	r2, [r3, #0]
 80066ce:	4b15      	ldr	r3, [pc, #84]	; (8006724 <xTaskCheckForTimeOut+0xc0>)
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	429a      	cmp	r2, r3
 80066d4:	d007      	beq.n	80066e6 <xTaskCheckForTimeOut+0x82>
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	685b      	ldr	r3, [r3, #4]
 80066da:	69ba      	ldr	r2, [r7, #24]
 80066dc:	429a      	cmp	r2, r3
 80066de:	d302      	bcc.n	80066e6 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80066e0:	2301      	movs	r3, #1
 80066e2:	61fb      	str	r3, [r7, #28]
 80066e4:	e015      	b.n	8006712 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80066e6:	683b      	ldr	r3, [r7, #0]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	697a      	ldr	r2, [r7, #20]
 80066ec:	429a      	cmp	r2, r3
 80066ee:	d20b      	bcs.n	8006708 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80066f0:	683b      	ldr	r3, [r7, #0]
 80066f2:	681a      	ldr	r2, [r3, #0]
 80066f4:	697b      	ldr	r3, [r7, #20]
 80066f6:	1ad2      	subs	r2, r2, r3
 80066f8:	683b      	ldr	r3, [r7, #0]
 80066fa:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80066fc:	6878      	ldr	r0, [r7, #4]
 80066fe:	f7ff ff9b 	bl	8006638 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006702:	2300      	movs	r3, #0
 8006704:	61fb      	str	r3, [r7, #28]
 8006706:	e004      	b.n	8006712 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8006708:	683b      	ldr	r3, [r7, #0]
 800670a:	2200      	movs	r2, #0
 800670c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800670e:	2301      	movs	r3, #1
 8006710:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8006712:	f000 fe77 	bl	8007404 <vPortExitCritical>

	return xReturn;
 8006716:	69fb      	ldr	r3, [r7, #28]
}
 8006718:	4618      	mov	r0, r3
 800671a:	3720      	adds	r7, #32
 800671c:	46bd      	mov	sp, r7
 800671e:	bd80      	pop	{r7, pc}
 8006720:	20005390 	.word	0x20005390
 8006724:	200053a4 	.word	0x200053a4

08006728 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006728:	b480      	push	{r7}
 800672a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800672c:	4b03      	ldr	r3, [pc, #12]	; (800673c <vTaskMissedYield+0x14>)
 800672e:	2201      	movs	r2, #1
 8006730:	601a      	str	r2, [r3, #0]
}
 8006732:	bf00      	nop
 8006734:	46bd      	mov	sp, r7
 8006736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800673a:	4770      	bx	lr
 800673c:	200053a0 	.word	0x200053a0

08006740 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006740:	b580      	push	{r7, lr}
 8006742:	b082      	sub	sp, #8
 8006744:	af00      	add	r7, sp, #0
 8006746:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006748:	f000 f852 	bl	80067f0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800674c:	4b06      	ldr	r3, [pc, #24]	; (8006768 <prvIdleTask+0x28>)
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	2b01      	cmp	r3, #1
 8006752:	d9f9      	bls.n	8006748 <prvIdleTask+0x8>
			{
				taskYIELD();
 8006754:	4b05      	ldr	r3, [pc, #20]	; (800676c <prvIdleTask+0x2c>)
 8006756:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800675a:	601a      	str	r2, [r3, #0]
 800675c:	f3bf 8f4f 	dsb	sy
 8006760:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006764:	e7f0      	b.n	8006748 <prvIdleTask+0x8>
 8006766:	bf00      	nop
 8006768:	20004ebc 	.word	0x20004ebc
 800676c:	e000ed04 	.word	0xe000ed04

08006770 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006770:	b580      	push	{r7, lr}
 8006772:	b082      	sub	sp, #8
 8006774:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006776:	2300      	movs	r3, #0
 8006778:	607b      	str	r3, [r7, #4]
 800677a:	e00c      	b.n	8006796 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800677c:	687a      	ldr	r2, [r7, #4]
 800677e:	4613      	mov	r3, r2
 8006780:	009b      	lsls	r3, r3, #2
 8006782:	4413      	add	r3, r2
 8006784:	009b      	lsls	r3, r3, #2
 8006786:	4a12      	ldr	r2, [pc, #72]	; (80067d0 <prvInitialiseTaskLists+0x60>)
 8006788:	4413      	add	r3, r2
 800678a:	4618      	mov	r0, r3
 800678c:	f7fe fca4 	bl	80050d8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	3301      	adds	r3, #1
 8006794:	607b      	str	r3, [r7, #4]
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	2b37      	cmp	r3, #55	; 0x37
 800679a:	d9ef      	bls.n	800677c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800679c:	480d      	ldr	r0, [pc, #52]	; (80067d4 <prvInitialiseTaskLists+0x64>)
 800679e:	f7fe fc9b 	bl	80050d8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80067a2:	480d      	ldr	r0, [pc, #52]	; (80067d8 <prvInitialiseTaskLists+0x68>)
 80067a4:	f7fe fc98 	bl	80050d8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80067a8:	480c      	ldr	r0, [pc, #48]	; (80067dc <prvInitialiseTaskLists+0x6c>)
 80067aa:	f7fe fc95 	bl	80050d8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80067ae:	480c      	ldr	r0, [pc, #48]	; (80067e0 <prvInitialiseTaskLists+0x70>)
 80067b0:	f7fe fc92 	bl	80050d8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80067b4:	480b      	ldr	r0, [pc, #44]	; (80067e4 <prvInitialiseTaskLists+0x74>)
 80067b6:	f7fe fc8f 	bl	80050d8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80067ba:	4b0b      	ldr	r3, [pc, #44]	; (80067e8 <prvInitialiseTaskLists+0x78>)
 80067bc:	4a05      	ldr	r2, [pc, #20]	; (80067d4 <prvInitialiseTaskLists+0x64>)
 80067be:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80067c0:	4b0a      	ldr	r3, [pc, #40]	; (80067ec <prvInitialiseTaskLists+0x7c>)
 80067c2:	4a05      	ldr	r2, [pc, #20]	; (80067d8 <prvInitialiseTaskLists+0x68>)
 80067c4:	601a      	str	r2, [r3, #0]
}
 80067c6:	bf00      	nop
 80067c8:	3708      	adds	r7, #8
 80067ca:	46bd      	mov	sp, r7
 80067cc:	bd80      	pop	{r7, pc}
 80067ce:	bf00      	nop
 80067d0:	20004ebc 	.word	0x20004ebc
 80067d4:	2000531c 	.word	0x2000531c
 80067d8:	20005330 	.word	0x20005330
 80067dc:	2000534c 	.word	0x2000534c
 80067e0:	20005360 	.word	0x20005360
 80067e4:	20005378 	.word	0x20005378
 80067e8:	20005344 	.word	0x20005344
 80067ec:	20005348 	.word	0x20005348

080067f0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80067f0:	b580      	push	{r7, lr}
 80067f2:	b082      	sub	sp, #8
 80067f4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80067f6:	e019      	b.n	800682c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80067f8:	f000 fdd4 	bl	80073a4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80067fc:	4b10      	ldr	r3, [pc, #64]	; (8006840 <prvCheckTasksWaitingTermination+0x50>)
 80067fe:	68db      	ldr	r3, [r3, #12]
 8006800:	68db      	ldr	r3, [r3, #12]
 8006802:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	3304      	adds	r3, #4
 8006808:	4618      	mov	r0, r3
 800680a:	f7fe fcef 	bl	80051ec <uxListRemove>
				--uxCurrentNumberOfTasks;
 800680e:	4b0d      	ldr	r3, [pc, #52]	; (8006844 <prvCheckTasksWaitingTermination+0x54>)
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	3b01      	subs	r3, #1
 8006814:	4a0b      	ldr	r2, [pc, #44]	; (8006844 <prvCheckTasksWaitingTermination+0x54>)
 8006816:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006818:	4b0b      	ldr	r3, [pc, #44]	; (8006848 <prvCheckTasksWaitingTermination+0x58>)
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	3b01      	subs	r3, #1
 800681e:	4a0a      	ldr	r2, [pc, #40]	; (8006848 <prvCheckTasksWaitingTermination+0x58>)
 8006820:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006822:	f000 fdef 	bl	8007404 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006826:	6878      	ldr	r0, [r7, #4]
 8006828:	f000 f810 	bl	800684c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800682c:	4b06      	ldr	r3, [pc, #24]	; (8006848 <prvCheckTasksWaitingTermination+0x58>)
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	2b00      	cmp	r3, #0
 8006832:	d1e1      	bne.n	80067f8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006834:	bf00      	nop
 8006836:	bf00      	nop
 8006838:	3708      	adds	r7, #8
 800683a:	46bd      	mov	sp, r7
 800683c:	bd80      	pop	{r7, pc}
 800683e:	bf00      	nop
 8006840:	20005360 	.word	0x20005360
 8006844:	2000538c 	.word	0x2000538c
 8006848:	20005374 	.word	0x20005374

0800684c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800684c:	b580      	push	{r7, lr}
 800684e:	b084      	sub	sp, #16
 8006850:	af00      	add	r7, sp, #0
 8006852:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	3354      	adds	r3, #84	; 0x54
 8006858:	4618      	mov	r0, r3
 800685a:	f00a f9f3 	bl	8010c44 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8006864:	2b00      	cmp	r3, #0
 8006866:	d108      	bne.n	800687a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800686c:	4618      	mov	r0, r3
 800686e:	f000 ff87 	bl	8007780 <vPortFree>
				vPortFree( pxTCB );
 8006872:	6878      	ldr	r0, [r7, #4]
 8006874:	f000 ff84 	bl	8007780 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006878:	e018      	b.n	80068ac <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8006880:	2b01      	cmp	r3, #1
 8006882:	d103      	bne.n	800688c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8006884:	6878      	ldr	r0, [r7, #4]
 8006886:	f000 ff7b 	bl	8007780 <vPortFree>
	}
 800688a:	e00f      	b.n	80068ac <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8006892:	2b02      	cmp	r3, #2
 8006894:	d00a      	beq.n	80068ac <prvDeleteTCB+0x60>
	__asm volatile
 8006896:	f04f 0350 	mov.w	r3, #80	; 0x50
 800689a:	f383 8811 	msr	BASEPRI, r3
 800689e:	f3bf 8f6f 	isb	sy
 80068a2:	f3bf 8f4f 	dsb	sy
 80068a6:	60fb      	str	r3, [r7, #12]
}
 80068a8:	bf00      	nop
 80068aa:	e7fe      	b.n	80068aa <prvDeleteTCB+0x5e>
	}
 80068ac:	bf00      	nop
 80068ae:	3710      	adds	r7, #16
 80068b0:	46bd      	mov	sp, r7
 80068b2:	bd80      	pop	{r7, pc}

080068b4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80068b4:	b480      	push	{r7}
 80068b6:	b083      	sub	sp, #12
 80068b8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80068ba:	4b0c      	ldr	r3, [pc, #48]	; (80068ec <prvResetNextTaskUnblockTime+0x38>)
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d104      	bne.n	80068ce <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80068c4:	4b0a      	ldr	r3, [pc, #40]	; (80068f0 <prvResetNextTaskUnblockTime+0x3c>)
 80068c6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80068ca:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80068cc:	e008      	b.n	80068e0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80068ce:	4b07      	ldr	r3, [pc, #28]	; (80068ec <prvResetNextTaskUnblockTime+0x38>)
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	68db      	ldr	r3, [r3, #12]
 80068d4:	68db      	ldr	r3, [r3, #12]
 80068d6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	685b      	ldr	r3, [r3, #4]
 80068dc:	4a04      	ldr	r2, [pc, #16]	; (80068f0 <prvResetNextTaskUnblockTime+0x3c>)
 80068de:	6013      	str	r3, [r2, #0]
}
 80068e0:	bf00      	nop
 80068e2:	370c      	adds	r7, #12
 80068e4:	46bd      	mov	sp, r7
 80068e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ea:	4770      	bx	lr
 80068ec:	20005344 	.word	0x20005344
 80068f0:	200053ac 	.word	0x200053ac

080068f4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80068f4:	b480      	push	{r7}
 80068f6:	b083      	sub	sp, #12
 80068f8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80068fa:	4b0b      	ldr	r3, [pc, #44]	; (8006928 <xTaskGetSchedulerState+0x34>)
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d102      	bne.n	8006908 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006902:	2301      	movs	r3, #1
 8006904:	607b      	str	r3, [r7, #4]
 8006906:	e008      	b.n	800691a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006908:	4b08      	ldr	r3, [pc, #32]	; (800692c <xTaskGetSchedulerState+0x38>)
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	2b00      	cmp	r3, #0
 800690e:	d102      	bne.n	8006916 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006910:	2302      	movs	r3, #2
 8006912:	607b      	str	r3, [r7, #4]
 8006914:	e001      	b.n	800691a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006916:	2300      	movs	r3, #0
 8006918:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800691a:	687b      	ldr	r3, [r7, #4]
	}
 800691c:	4618      	mov	r0, r3
 800691e:	370c      	adds	r7, #12
 8006920:	46bd      	mov	sp, r7
 8006922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006926:	4770      	bx	lr
 8006928:	20005398 	.word	0x20005398
 800692c:	200053b4 	.word	0x200053b4

08006930 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006930:	b580      	push	{r7, lr}
 8006932:	b086      	sub	sp, #24
 8006934:	af00      	add	r7, sp, #0
 8006936:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800693c:	2300      	movs	r3, #0
 800693e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	2b00      	cmp	r3, #0
 8006944:	d056      	beq.n	80069f4 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006946:	4b2e      	ldr	r3, [pc, #184]	; (8006a00 <xTaskPriorityDisinherit+0xd0>)
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	693a      	ldr	r2, [r7, #16]
 800694c:	429a      	cmp	r2, r3
 800694e:	d00a      	beq.n	8006966 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8006950:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006954:	f383 8811 	msr	BASEPRI, r3
 8006958:	f3bf 8f6f 	isb	sy
 800695c:	f3bf 8f4f 	dsb	sy
 8006960:	60fb      	str	r3, [r7, #12]
}
 8006962:	bf00      	nop
 8006964:	e7fe      	b.n	8006964 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8006966:	693b      	ldr	r3, [r7, #16]
 8006968:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800696a:	2b00      	cmp	r3, #0
 800696c:	d10a      	bne.n	8006984 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800696e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006972:	f383 8811 	msr	BASEPRI, r3
 8006976:	f3bf 8f6f 	isb	sy
 800697a:	f3bf 8f4f 	dsb	sy
 800697e:	60bb      	str	r3, [r7, #8]
}
 8006980:	bf00      	nop
 8006982:	e7fe      	b.n	8006982 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8006984:	693b      	ldr	r3, [r7, #16]
 8006986:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006988:	1e5a      	subs	r2, r3, #1
 800698a:	693b      	ldr	r3, [r7, #16]
 800698c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800698e:	693b      	ldr	r3, [r7, #16]
 8006990:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006992:	693b      	ldr	r3, [r7, #16]
 8006994:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006996:	429a      	cmp	r2, r3
 8006998:	d02c      	beq.n	80069f4 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800699a:	693b      	ldr	r3, [r7, #16]
 800699c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d128      	bne.n	80069f4 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80069a2:	693b      	ldr	r3, [r7, #16]
 80069a4:	3304      	adds	r3, #4
 80069a6:	4618      	mov	r0, r3
 80069a8:	f7fe fc20 	bl	80051ec <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80069ac:	693b      	ldr	r3, [r7, #16]
 80069ae:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80069b0:	693b      	ldr	r3, [r7, #16]
 80069b2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80069b4:	693b      	ldr	r3, [r7, #16]
 80069b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069b8:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80069bc:	693b      	ldr	r3, [r7, #16]
 80069be:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80069c0:	693b      	ldr	r3, [r7, #16]
 80069c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80069c4:	4b0f      	ldr	r3, [pc, #60]	; (8006a04 <xTaskPriorityDisinherit+0xd4>)
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	429a      	cmp	r2, r3
 80069ca:	d903      	bls.n	80069d4 <xTaskPriorityDisinherit+0xa4>
 80069cc:	693b      	ldr	r3, [r7, #16]
 80069ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069d0:	4a0c      	ldr	r2, [pc, #48]	; (8006a04 <xTaskPriorityDisinherit+0xd4>)
 80069d2:	6013      	str	r3, [r2, #0]
 80069d4:	693b      	ldr	r3, [r7, #16]
 80069d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80069d8:	4613      	mov	r3, r2
 80069da:	009b      	lsls	r3, r3, #2
 80069dc:	4413      	add	r3, r2
 80069de:	009b      	lsls	r3, r3, #2
 80069e0:	4a09      	ldr	r2, [pc, #36]	; (8006a08 <xTaskPriorityDisinherit+0xd8>)
 80069e2:	441a      	add	r2, r3
 80069e4:	693b      	ldr	r3, [r7, #16]
 80069e6:	3304      	adds	r3, #4
 80069e8:	4619      	mov	r1, r3
 80069ea:	4610      	mov	r0, r2
 80069ec:	f7fe fba1 	bl	8005132 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80069f0:	2301      	movs	r3, #1
 80069f2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80069f4:	697b      	ldr	r3, [r7, #20]
	}
 80069f6:	4618      	mov	r0, r3
 80069f8:	3718      	adds	r7, #24
 80069fa:	46bd      	mov	sp, r7
 80069fc:	bd80      	pop	{r7, pc}
 80069fe:	bf00      	nop
 8006a00:	20004eb8 	.word	0x20004eb8
 8006a04:	20005394 	.word	0x20005394
 8006a08:	20004ebc 	.word	0x20004ebc

08006a0c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006a0c:	b580      	push	{r7, lr}
 8006a0e:	b084      	sub	sp, #16
 8006a10:	af00      	add	r7, sp, #0
 8006a12:	6078      	str	r0, [r7, #4]
 8006a14:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006a16:	4b21      	ldr	r3, [pc, #132]	; (8006a9c <prvAddCurrentTaskToDelayedList+0x90>)
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006a1c:	4b20      	ldr	r3, [pc, #128]	; (8006aa0 <prvAddCurrentTaskToDelayedList+0x94>)
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	3304      	adds	r3, #4
 8006a22:	4618      	mov	r0, r3
 8006a24:	f7fe fbe2 	bl	80051ec <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006a2e:	d10a      	bne.n	8006a46 <prvAddCurrentTaskToDelayedList+0x3a>
 8006a30:	683b      	ldr	r3, [r7, #0]
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d007      	beq.n	8006a46 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006a36:	4b1a      	ldr	r3, [pc, #104]	; (8006aa0 <prvAddCurrentTaskToDelayedList+0x94>)
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	3304      	adds	r3, #4
 8006a3c:	4619      	mov	r1, r3
 8006a3e:	4819      	ldr	r0, [pc, #100]	; (8006aa4 <prvAddCurrentTaskToDelayedList+0x98>)
 8006a40:	f7fe fb77 	bl	8005132 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006a44:	e026      	b.n	8006a94 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006a46:	68fa      	ldr	r2, [r7, #12]
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	4413      	add	r3, r2
 8006a4c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006a4e:	4b14      	ldr	r3, [pc, #80]	; (8006aa0 <prvAddCurrentTaskToDelayedList+0x94>)
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	68ba      	ldr	r2, [r7, #8]
 8006a54:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006a56:	68ba      	ldr	r2, [r7, #8]
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	429a      	cmp	r2, r3
 8006a5c:	d209      	bcs.n	8006a72 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006a5e:	4b12      	ldr	r3, [pc, #72]	; (8006aa8 <prvAddCurrentTaskToDelayedList+0x9c>)
 8006a60:	681a      	ldr	r2, [r3, #0]
 8006a62:	4b0f      	ldr	r3, [pc, #60]	; (8006aa0 <prvAddCurrentTaskToDelayedList+0x94>)
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	3304      	adds	r3, #4
 8006a68:	4619      	mov	r1, r3
 8006a6a:	4610      	mov	r0, r2
 8006a6c:	f7fe fb85 	bl	800517a <vListInsert>
}
 8006a70:	e010      	b.n	8006a94 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006a72:	4b0e      	ldr	r3, [pc, #56]	; (8006aac <prvAddCurrentTaskToDelayedList+0xa0>)
 8006a74:	681a      	ldr	r2, [r3, #0]
 8006a76:	4b0a      	ldr	r3, [pc, #40]	; (8006aa0 <prvAddCurrentTaskToDelayedList+0x94>)
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	3304      	adds	r3, #4
 8006a7c:	4619      	mov	r1, r3
 8006a7e:	4610      	mov	r0, r2
 8006a80:	f7fe fb7b 	bl	800517a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006a84:	4b0a      	ldr	r3, [pc, #40]	; (8006ab0 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	68ba      	ldr	r2, [r7, #8]
 8006a8a:	429a      	cmp	r2, r3
 8006a8c:	d202      	bcs.n	8006a94 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8006a8e:	4a08      	ldr	r2, [pc, #32]	; (8006ab0 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006a90:	68bb      	ldr	r3, [r7, #8]
 8006a92:	6013      	str	r3, [r2, #0]
}
 8006a94:	bf00      	nop
 8006a96:	3710      	adds	r7, #16
 8006a98:	46bd      	mov	sp, r7
 8006a9a:	bd80      	pop	{r7, pc}
 8006a9c:	20005390 	.word	0x20005390
 8006aa0:	20004eb8 	.word	0x20004eb8
 8006aa4:	20005378 	.word	0x20005378
 8006aa8:	20005348 	.word	0x20005348
 8006aac:	20005344 	.word	0x20005344
 8006ab0:	200053ac 	.word	0x200053ac

08006ab4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8006ab4:	b580      	push	{r7, lr}
 8006ab6:	b08a      	sub	sp, #40	; 0x28
 8006ab8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8006aba:	2300      	movs	r3, #0
 8006abc:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8006abe:	f000 fb07 	bl	80070d0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8006ac2:	4b1c      	ldr	r3, [pc, #112]	; (8006b34 <xTimerCreateTimerTask+0x80>)
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d021      	beq.n	8006b0e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8006aca:	2300      	movs	r3, #0
 8006acc:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8006ace:	2300      	movs	r3, #0
 8006ad0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8006ad2:	1d3a      	adds	r2, r7, #4
 8006ad4:	f107 0108 	add.w	r1, r7, #8
 8006ad8:	f107 030c 	add.w	r3, r7, #12
 8006adc:	4618      	mov	r0, r3
 8006ade:	f7fe fae1 	bl	80050a4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8006ae2:	6879      	ldr	r1, [r7, #4]
 8006ae4:	68bb      	ldr	r3, [r7, #8]
 8006ae6:	68fa      	ldr	r2, [r7, #12]
 8006ae8:	9202      	str	r2, [sp, #8]
 8006aea:	9301      	str	r3, [sp, #4]
 8006aec:	2302      	movs	r3, #2
 8006aee:	9300      	str	r3, [sp, #0]
 8006af0:	2300      	movs	r3, #0
 8006af2:	460a      	mov	r2, r1
 8006af4:	4910      	ldr	r1, [pc, #64]	; (8006b38 <xTimerCreateTimerTask+0x84>)
 8006af6:	4811      	ldr	r0, [pc, #68]	; (8006b3c <xTimerCreateTimerTask+0x88>)
 8006af8:	f7ff f88e 	bl	8005c18 <xTaskCreateStatic>
 8006afc:	4603      	mov	r3, r0
 8006afe:	4a10      	ldr	r2, [pc, #64]	; (8006b40 <xTimerCreateTimerTask+0x8c>)
 8006b00:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8006b02:	4b0f      	ldr	r3, [pc, #60]	; (8006b40 <xTimerCreateTimerTask+0x8c>)
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d001      	beq.n	8006b0e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8006b0a:	2301      	movs	r3, #1
 8006b0c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8006b0e:	697b      	ldr	r3, [r7, #20]
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d10a      	bne.n	8006b2a <xTimerCreateTimerTask+0x76>
	__asm volatile
 8006b14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b18:	f383 8811 	msr	BASEPRI, r3
 8006b1c:	f3bf 8f6f 	isb	sy
 8006b20:	f3bf 8f4f 	dsb	sy
 8006b24:	613b      	str	r3, [r7, #16]
}
 8006b26:	bf00      	nop
 8006b28:	e7fe      	b.n	8006b28 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8006b2a:	697b      	ldr	r3, [r7, #20]
}
 8006b2c:	4618      	mov	r0, r3
 8006b2e:	3718      	adds	r7, #24
 8006b30:	46bd      	mov	sp, r7
 8006b32:	bd80      	pop	{r7, pc}
 8006b34:	200053e8 	.word	0x200053e8
 8006b38:	08011f90 	.word	0x08011f90
 8006b3c:	08006c79 	.word	0x08006c79
 8006b40:	200053ec 	.word	0x200053ec

08006b44 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8006b44:	b580      	push	{r7, lr}
 8006b46:	b08a      	sub	sp, #40	; 0x28
 8006b48:	af00      	add	r7, sp, #0
 8006b4a:	60f8      	str	r0, [r7, #12]
 8006b4c:	60b9      	str	r1, [r7, #8]
 8006b4e:	607a      	str	r2, [r7, #4]
 8006b50:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8006b52:	2300      	movs	r3, #0
 8006b54:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d10a      	bne.n	8006b72 <xTimerGenericCommand+0x2e>
	__asm volatile
 8006b5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b60:	f383 8811 	msr	BASEPRI, r3
 8006b64:	f3bf 8f6f 	isb	sy
 8006b68:	f3bf 8f4f 	dsb	sy
 8006b6c:	623b      	str	r3, [r7, #32]
}
 8006b6e:	bf00      	nop
 8006b70:	e7fe      	b.n	8006b70 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8006b72:	4b1a      	ldr	r3, [pc, #104]	; (8006bdc <xTimerGenericCommand+0x98>)
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d02a      	beq.n	8006bd0 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8006b7a:	68bb      	ldr	r3, [r7, #8]
 8006b7c:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8006b86:	68bb      	ldr	r3, [r7, #8]
 8006b88:	2b05      	cmp	r3, #5
 8006b8a:	dc18      	bgt.n	8006bbe <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8006b8c:	f7ff feb2 	bl	80068f4 <xTaskGetSchedulerState>
 8006b90:	4603      	mov	r3, r0
 8006b92:	2b02      	cmp	r3, #2
 8006b94:	d109      	bne.n	8006baa <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8006b96:	4b11      	ldr	r3, [pc, #68]	; (8006bdc <xTimerGenericCommand+0x98>)
 8006b98:	6818      	ldr	r0, [r3, #0]
 8006b9a:	f107 0110 	add.w	r1, r7, #16
 8006b9e:	2300      	movs	r3, #0
 8006ba0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006ba2:	f7fe fc51 	bl	8005448 <xQueueGenericSend>
 8006ba6:	6278      	str	r0, [r7, #36]	; 0x24
 8006ba8:	e012      	b.n	8006bd0 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8006baa:	4b0c      	ldr	r3, [pc, #48]	; (8006bdc <xTimerGenericCommand+0x98>)
 8006bac:	6818      	ldr	r0, [r3, #0]
 8006bae:	f107 0110 	add.w	r1, r7, #16
 8006bb2:	2300      	movs	r3, #0
 8006bb4:	2200      	movs	r2, #0
 8006bb6:	f7fe fc47 	bl	8005448 <xQueueGenericSend>
 8006bba:	6278      	str	r0, [r7, #36]	; 0x24
 8006bbc:	e008      	b.n	8006bd0 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8006bbe:	4b07      	ldr	r3, [pc, #28]	; (8006bdc <xTimerGenericCommand+0x98>)
 8006bc0:	6818      	ldr	r0, [r3, #0]
 8006bc2:	f107 0110 	add.w	r1, r7, #16
 8006bc6:	2300      	movs	r3, #0
 8006bc8:	683a      	ldr	r2, [r7, #0]
 8006bca:	f7fe fd3b 	bl	8005644 <xQueueGenericSendFromISR>
 8006bce:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8006bd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006bd2:	4618      	mov	r0, r3
 8006bd4:	3728      	adds	r7, #40	; 0x28
 8006bd6:	46bd      	mov	sp, r7
 8006bd8:	bd80      	pop	{r7, pc}
 8006bda:	bf00      	nop
 8006bdc:	200053e8 	.word	0x200053e8

08006be0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8006be0:	b580      	push	{r7, lr}
 8006be2:	b088      	sub	sp, #32
 8006be4:	af02      	add	r7, sp, #8
 8006be6:	6078      	str	r0, [r7, #4]
 8006be8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006bea:	4b22      	ldr	r3, [pc, #136]	; (8006c74 <prvProcessExpiredTimer+0x94>)
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	68db      	ldr	r3, [r3, #12]
 8006bf0:	68db      	ldr	r3, [r3, #12]
 8006bf2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006bf4:	697b      	ldr	r3, [r7, #20]
 8006bf6:	3304      	adds	r3, #4
 8006bf8:	4618      	mov	r0, r3
 8006bfa:	f7fe faf7 	bl	80051ec <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006bfe:	697b      	ldr	r3, [r7, #20]
 8006c00:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006c04:	f003 0304 	and.w	r3, r3, #4
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d022      	beq.n	8006c52 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8006c0c:	697b      	ldr	r3, [r7, #20]
 8006c0e:	699a      	ldr	r2, [r3, #24]
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	18d1      	adds	r1, r2, r3
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	683a      	ldr	r2, [r7, #0]
 8006c18:	6978      	ldr	r0, [r7, #20]
 8006c1a:	f000 f8d1 	bl	8006dc0 <prvInsertTimerInActiveList>
 8006c1e:	4603      	mov	r3, r0
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d01f      	beq.n	8006c64 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006c24:	2300      	movs	r3, #0
 8006c26:	9300      	str	r3, [sp, #0]
 8006c28:	2300      	movs	r3, #0
 8006c2a:	687a      	ldr	r2, [r7, #4]
 8006c2c:	2100      	movs	r1, #0
 8006c2e:	6978      	ldr	r0, [r7, #20]
 8006c30:	f7ff ff88 	bl	8006b44 <xTimerGenericCommand>
 8006c34:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8006c36:	693b      	ldr	r3, [r7, #16]
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d113      	bne.n	8006c64 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8006c3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c40:	f383 8811 	msr	BASEPRI, r3
 8006c44:	f3bf 8f6f 	isb	sy
 8006c48:	f3bf 8f4f 	dsb	sy
 8006c4c:	60fb      	str	r3, [r7, #12]
}
 8006c4e:	bf00      	nop
 8006c50:	e7fe      	b.n	8006c50 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006c52:	697b      	ldr	r3, [r7, #20]
 8006c54:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006c58:	f023 0301 	bic.w	r3, r3, #1
 8006c5c:	b2da      	uxtb	r2, r3
 8006c5e:	697b      	ldr	r3, [r7, #20]
 8006c60:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006c64:	697b      	ldr	r3, [r7, #20]
 8006c66:	6a1b      	ldr	r3, [r3, #32]
 8006c68:	6978      	ldr	r0, [r7, #20]
 8006c6a:	4798      	blx	r3
}
 8006c6c:	bf00      	nop
 8006c6e:	3718      	adds	r7, #24
 8006c70:	46bd      	mov	sp, r7
 8006c72:	bd80      	pop	{r7, pc}
 8006c74:	200053e0 	.word	0x200053e0

08006c78 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8006c78:	b580      	push	{r7, lr}
 8006c7a:	b084      	sub	sp, #16
 8006c7c:	af00      	add	r7, sp, #0
 8006c7e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006c80:	f107 0308 	add.w	r3, r7, #8
 8006c84:	4618      	mov	r0, r3
 8006c86:	f000 f857 	bl	8006d38 <prvGetNextExpireTime>
 8006c8a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006c8c:	68bb      	ldr	r3, [r7, #8]
 8006c8e:	4619      	mov	r1, r3
 8006c90:	68f8      	ldr	r0, [r7, #12]
 8006c92:	f000 f803 	bl	8006c9c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8006c96:	f000 f8d5 	bl	8006e44 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006c9a:	e7f1      	b.n	8006c80 <prvTimerTask+0x8>

08006c9c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8006c9c:	b580      	push	{r7, lr}
 8006c9e:	b084      	sub	sp, #16
 8006ca0:	af00      	add	r7, sp, #0
 8006ca2:	6078      	str	r0, [r7, #4]
 8006ca4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8006ca6:	f7ff fa13 	bl	80060d0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006caa:	f107 0308 	add.w	r3, r7, #8
 8006cae:	4618      	mov	r0, r3
 8006cb0:	f000 f866 	bl	8006d80 <prvSampleTimeNow>
 8006cb4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8006cb6:	68bb      	ldr	r3, [r7, #8]
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d130      	bne.n	8006d1e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006cbc:	683b      	ldr	r3, [r7, #0]
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d10a      	bne.n	8006cd8 <prvProcessTimerOrBlockTask+0x3c>
 8006cc2:	687a      	ldr	r2, [r7, #4]
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	429a      	cmp	r2, r3
 8006cc8:	d806      	bhi.n	8006cd8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8006cca:	f7ff fa0f 	bl	80060ec <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8006cce:	68f9      	ldr	r1, [r7, #12]
 8006cd0:	6878      	ldr	r0, [r7, #4]
 8006cd2:	f7ff ff85 	bl	8006be0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8006cd6:	e024      	b.n	8006d22 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8006cd8:	683b      	ldr	r3, [r7, #0]
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d008      	beq.n	8006cf0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8006cde:	4b13      	ldr	r3, [pc, #76]	; (8006d2c <prvProcessTimerOrBlockTask+0x90>)
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d101      	bne.n	8006cec <prvProcessTimerOrBlockTask+0x50>
 8006ce8:	2301      	movs	r3, #1
 8006cea:	e000      	b.n	8006cee <prvProcessTimerOrBlockTask+0x52>
 8006cec:	2300      	movs	r3, #0
 8006cee:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006cf0:	4b0f      	ldr	r3, [pc, #60]	; (8006d30 <prvProcessTimerOrBlockTask+0x94>)
 8006cf2:	6818      	ldr	r0, [r3, #0]
 8006cf4:	687a      	ldr	r2, [r7, #4]
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	1ad3      	subs	r3, r2, r3
 8006cfa:	683a      	ldr	r2, [r7, #0]
 8006cfc:	4619      	mov	r1, r3
 8006cfe:	f7fe ff57 	bl	8005bb0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8006d02:	f7ff f9f3 	bl	80060ec <xTaskResumeAll>
 8006d06:	4603      	mov	r3, r0
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d10a      	bne.n	8006d22 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8006d0c:	4b09      	ldr	r3, [pc, #36]	; (8006d34 <prvProcessTimerOrBlockTask+0x98>)
 8006d0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006d12:	601a      	str	r2, [r3, #0]
 8006d14:	f3bf 8f4f 	dsb	sy
 8006d18:	f3bf 8f6f 	isb	sy
}
 8006d1c:	e001      	b.n	8006d22 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8006d1e:	f7ff f9e5 	bl	80060ec <xTaskResumeAll>
}
 8006d22:	bf00      	nop
 8006d24:	3710      	adds	r7, #16
 8006d26:	46bd      	mov	sp, r7
 8006d28:	bd80      	pop	{r7, pc}
 8006d2a:	bf00      	nop
 8006d2c:	200053e4 	.word	0x200053e4
 8006d30:	200053e8 	.word	0x200053e8
 8006d34:	e000ed04 	.word	0xe000ed04

08006d38 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8006d38:	b480      	push	{r7}
 8006d3a:	b085      	sub	sp, #20
 8006d3c:	af00      	add	r7, sp, #0
 8006d3e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006d40:	4b0e      	ldr	r3, [pc, #56]	; (8006d7c <prvGetNextExpireTime+0x44>)
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d101      	bne.n	8006d4e <prvGetNextExpireTime+0x16>
 8006d4a:	2201      	movs	r2, #1
 8006d4c:	e000      	b.n	8006d50 <prvGetNextExpireTime+0x18>
 8006d4e:	2200      	movs	r2, #0
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d105      	bne.n	8006d68 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006d5c:	4b07      	ldr	r3, [pc, #28]	; (8006d7c <prvGetNextExpireTime+0x44>)
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	68db      	ldr	r3, [r3, #12]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	60fb      	str	r3, [r7, #12]
 8006d66:	e001      	b.n	8006d6c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8006d68:	2300      	movs	r3, #0
 8006d6a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8006d6c:	68fb      	ldr	r3, [r7, #12]
}
 8006d6e:	4618      	mov	r0, r3
 8006d70:	3714      	adds	r7, #20
 8006d72:	46bd      	mov	sp, r7
 8006d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d78:	4770      	bx	lr
 8006d7a:	bf00      	nop
 8006d7c:	200053e0 	.word	0x200053e0

08006d80 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8006d80:	b580      	push	{r7, lr}
 8006d82:	b084      	sub	sp, #16
 8006d84:	af00      	add	r7, sp, #0
 8006d86:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8006d88:	f7ff fa4e 	bl	8006228 <xTaskGetTickCount>
 8006d8c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8006d8e:	4b0b      	ldr	r3, [pc, #44]	; (8006dbc <prvSampleTimeNow+0x3c>)
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	68fa      	ldr	r2, [r7, #12]
 8006d94:	429a      	cmp	r2, r3
 8006d96:	d205      	bcs.n	8006da4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8006d98:	f000 f936 	bl	8007008 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	2201      	movs	r2, #1
 8006da0:	601a      	str	r2, [r3, #0]
 8006da2:	e002      	b.n	8006daa <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	2200      	movs	r2, #0
 8006da8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8006daa:	4a04      	ldr	r2, [pc, #16]	; (8006dbc <prvSampleTimeNow+0x3c>)
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8006db0:	68fb      	ldr	r3, [r7, #12]
}
 8006db2:	4618      	mov	r0, r3
 8006db4:	3710      	adds	r7, #16
 8006db6:	46bd      	mov	sp, r7
 8006db8:	bd80      	pop	{r7, pc}
 8006dba:	bf00      	nop
 8006dbc:	200053f0 	.word	0x200053f0

08006dc0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8006dc0:	b580      	push	{r7, lr}
 8006dc2:	b086      	sub	sp, #24
 8006dc4:	af00      	add	r7, sp, #0
 8006dc6:	60f8      	str	r0, [r7, #12]
 8006dc8:	60b9      	str	r1, [r7, #8]
 8006dca:	607a      	str	r2, [r7, #4]
 8006dcc:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8006dce:	2300      	movs	r3, #0
 8006dd0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	68ba      	ldr	r2, [r7, #8]
 8006dd6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	68fa      	ldr	r2, [r7, #12]
 8006ddc:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8006dde:	68ba      	ldr	r2, [r7, #8]
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	429a      	cmp	r2, r3
 8006de4:	d812      	bhi.n	8006e0c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006de6:	687a      	ldr	r2, [r7, #4]
 8006de8:	683b      	ldr	r3, [r7, #0]
 8006dea:	1ad2      	subs	r2, r2, r3
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	699b      	ldr	r3, [r3, #24]
 8006df0:	429a      	cmp	r2, r3
 8006df2:	d302      	bcc.n	8006dfa <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8006df4:	2301      	movs	r3, #1
 8006df6:	617b      	str	r3, [r7, #20]
 8006df8:	e01b      	b.n	8006e32 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8006dfa:	4b10      	ldr	r3, [pc, #64]	; (8006e3c <prvInsertTimerInActiveList+0x7c>)
 8006dfc:	681a      	ldr	r2, [r3, #0]
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	3304      	adds	r3, #4
 8006e02:	4619      	mov	r1, r3
 8006e04:	4610      	mov	r0, r2
 8006e06:	f7fe f9b8 	bl	800517a <vListInsert>
 8006e0a:	e012      	b.n	8006e32 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006e0c:	687a      	ldr	r2, [r7, #4]
 8006e0e:	683b      	ldr	r3, [r7, #0]
 8006e10:	429a      	cmp	r2, r3
 8006e12:	d206      	bcs.n	8006e22 <prvInsertTimerInActiveList+0x62>
 8006e14:	68ba      	ldr	r2, [r7, #8]
 8006e16:	683b      	ldr	r3, [r7, #0]
 8006e18:	429a      	cmp	r2, r3
 8006e1a:	d302      	bcc.n	8006e22 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8006e1c:	2301      	movs	r3, #1
 8006e1e:	617b      	str	r3, [r7, #20]
 8006e20:	e007      	b.n	8006e32 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006e22:	4b07      	ldr	r3, [pc, #28]	; (8006e40 <prvInsertTimerInActiveList+0x80>)
 8006e24:	681a      	ldr	r2, [r3, #0]
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	3304      	adds	r3, #4
 8006e2a:	4619      	mov	r1, r3
 8006e2c:	4610      	mov	r0, r2
 8006e2e:	f7fe f9a4 	bl	800517a <vListInsert>
		}
	}

	return xProcessTimerNow;
 8006e32:	697b      	ldr	r3, [r7, #20]
}
 8006e34:	4618      	mov	r0, r3
 8006e36:	3718      	adds	r7, #24
 8006e38:	46bd      	mov	sp, r7
 8006e3a:	bd80      	pop	{r7, pc}
 8006e3c:	200053e4 	.word	0x200053e4
 8006e40:	200053e0 	.word	0x200053e0

08006e44 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8006e44:	b580      	push	{r7, lr}
 8006e46:	b08e      	sub	sp, #56	; 0x38
 8006e48:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006e4a:	e0ca      	b.n	8006fe2 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	da18      	bge.n	8006e84 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8006e52:	1d3b      	adds	r3, r7, #4
 8006e54:	3304      	adds	r3, #4
 8006e56:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8006e58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d10a      	bne.n	8006e74 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8006e5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e62:	f383 8811 	msr	BASEPRI, r3
 8006e66:	f3bf 8f6f 	isb	sy
 8006e6a:	f3bf 8f4f 	dsb	sy
 8006e6e:	61fb      	str	r3, [r7, #28]
}
 8006e70:	bf00      	nop
 8006e72:	e7fe      	b.n	8006e72 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8006e74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006e7a:	6850      	ldr	r0, [r2, #4]
 8006e7c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006e7e:	6892      	ldr	r2, [r2, #8]
 8006e80:	4611      	mov	r1, r2
 8006e82:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	f2c0 80aa 	blt.w	8006fe0 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8006e90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e92:	695b      	ldr	r3, [r3, #20]
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d004      	beq.n	8006ea2 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006e98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e9a:	3304      	adds	r3, #4
 8006e9c:	4618      	mov	r0, r3
 8006e9e:	f7fe f9a5 	bl	80051ec <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006ea2:	463b      	mov	r3, r7
 8006ea4:	4618      	mov	r0, r3
 8006ea6:	f7ff ff6b 	bl	8006d80 <prvSampleTimeNow>
 8006eaa:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	2b09      	cmp	r3, #9
 8006eb0:	f200 8097 	bhi.w	8006fe2 <prvProcessReceivedCommands+0x19e>
 8006eb4:	a201      	add	r2, pc, #4	; (adr r2, 8006ebc <prvProcessReceivedCommands+0x78>)
 8006eb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006eba:	bf00      	nop
 8006ebc:	08006ee5 	.word	0x08006ee5
 8006ec0:	08006ee5 	.word	0x08006ee5
 8006ec4:	08006ee5 	.word	0x08006ee5
 8006ec8:	08006f59 	.word	0x08006f59
 8006ecc:	08006f6d 	.word	0x08006f6d
 8006ed0:	08006fb7 	.word	0x08006fb7
 8006ed4:	08006ee5 	.word	0x08006ee5
 8006ed8:	08006ee5 	.word	0x08006ee5
 8006edc:	08006f59 	.word	0x08006f59
 8006ee0:	08006f6d 	.word	0x08006f6d
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006ee4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ee6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006eea:	f043 0301 	orr.w	r3, r3, #1
 8006eee:	b2da      	uxtb	r2, r3
 8006ef0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ef2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8006ef6:	68ba      	ldr	r2, [r7, #8]
 8006ef8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006efa:	699b      	ldr	r3, [r3, #24]
 8006efc:	18d1      	adds	r1, r2, r3
 8006efe:	68bb      	ldr	r3, [r7, #8]
 8006f00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006f02:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006f04:	f7ff ff5c 	bl	8006dc0 <prvInsertTimerInActiveList>
 8006f08:	4603      	mov	r3, r0
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d069      	beq.n	8006fe2 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006f0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f10:	6a1b      	ldr	r3, [r3, #32]
 8006f12:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006f14:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006f16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f18:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006f1c:	f003 0304 	and.w	r3, r3, #4
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d05e      	beq.n	8006fe2 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8006f24:	68ba      	ldr	r2, [r7, #8]
 8006f26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f28:	699b      	ldr	r3, [r3, #24]
 8006f2a:	441a      	add	r2, r3
 8006f2c:	2300      	movs	r3, #0
 8006f2e:	9300      	str	r3, [sp, #0]
 8006f30:	2300      	movs	r3, #0
 8006f32:	2100      	movs	r1, #0
 8006f34:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006f36:	f7ff fe05 	bl	8006b44 <xTimerGenericCommand>
 8006f3a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8006f3c:	6a3b      	ldr	r3, [r7, #32]
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d14f      	bne.n	8006fe2 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8006f42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f46:	f383 8811 	msr	BASEPRI, r3
 8006f4a:	f3bf 8f6f 	isb	sy
 8006f4e:	f3bf 8f4f 	dsb	sy
 8006f52:	61bb      	str	r3, [r7, #24]
}
 8006f54:	bf00      	nop
 8006f56:	e7fe      	b.n	8006f56 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006f58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f5a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006f5e:	f023 0301 	bic.w	r3, r3, #1
 8006f62:	b2da      	uxtb	r2, r3
 8006f64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f66:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8006f6a:	e03a      	b.n	8006fe2 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006f6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f6e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006f72:	f043 0301 	orr.w	r3, r3, #1
 8006f76:	b2da      	uxtb	r2, r3
 8006f78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f7a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8006f7e:	68ba      	ldr	r2, [r7, #8]
 8006f80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f82:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006f84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f86:	699b      	ldr	r3, [r3, #24]
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d10a      	bne.n	8006fa2 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8006f8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f90:	f383 8811 	msr	BASEPRI, r3
 8006f94:	f3bf 8f6f 	isb	sy
 8006f98:	f3bf 8f4f 	dsb	sy
 8006f9c:	617b      	str	r3, [r7, #20]
}
 8006f9e:	bf00      	nop
 8006fa0:	e7fe      	b.n	8006fa0 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8006fa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fa4:	699a      	ldr	r2, [r3, #24]
 8006fa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fa8:	18d1      	adds	r1, r2, r3
 8006faa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006fae:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006fb0:	f7ff ff06 	bl	8006dc0 <prvInsertTimerInActiveList>
					break;
 8006fb4:	e015      	b.n	8006fe2 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8006fb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fb8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006fbc:	f003 0302 	and.w	r3, r3, #2
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d103      	bne.n	8006fcc <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8006fc4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006fc6:	f000 fbdb 	bl	8007780 <vPortFree>
 8006fca:	e00a      	b.n	8006fe2 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006fcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fce:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006fd2:	f023 0301 	bic.w	r3, r3, #1
 8006fd6:	b2da      	uxtb	r2, r3
 8006fd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fda:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8006fde:	e000      	b.n	8006fe2 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8006fe0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006fe2:	4b08      	ldr	r3, [pc, #32]	; (8007004 <prvProcessReceivedCommands+0x1c0>)
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	1d39      	adds	r1, r7, #4
 8006fe8:	2200      	movs	r2, #0
 8006fea:	4618      	mov	r0, r3
 8006fec:	f7fe fbc6 	bl	800577c <xQueueReceive>
 8006ff0:	4603      	mov	r3, r0
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	f47f af2a 	bne.w	8006e4c <prvProcessReceivedCommands+0x8>
	}
}
 8006ff8:	bf00      	nop
 8006ffa:	bf00      	nop
 8006ffc:	3730      	adds	r7, #48	; 0x30
 8006ffe:	46bd      	mov	sp, r7
 8007000:	bd80      	pop	{r7, pc}
 8007002:	bf00      	nop
 8007004:	200053e8 	.word	0x200053e8

08007008 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8007008:	b580      	push	{r7, lr}
 800700a:	b088      	sub	sp, #32
 800700c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800700e:	e048      	b.n	80070a2 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007010:	4b2d      	ldr	r3, [pc, #180]	; (80070c8 <prvSwitchTimerLists+0xc0>)
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	68db      	ldr	r3, [r3, #12]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800701a:	4b2b      	ldr	r3, [pc, #172]	; (80070c8 <prvSwitchTimerLists+0xc0>)
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	68db      	ldr	r3, [r3, #12]
 8007020:	68db      	ldr	r3, [r3, #12]
 8007022:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	3304      	adds	r3, #4
 8007028:	4618      	mov	r0, r3
 800702a:	f7fe f8df 	bl	80051ec <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	6a1b      	ldr	r3, [r3, #32]
 8007032:	68f8      	ldr	r0, [r7, #12]
 8007034:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800703c:	f003 0304 	and.w	r3, r3, #4
 8007040:	2b00      	cmp	r3, #0
 8007042:	d02e      	beq.n	80070a2 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	699b      	ldr	r3, [r3, #24]
 8007048:	693a      	ldr	r2, [r7, #16]
 800704a:	4413      	add	r3, r2
 800704c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800704e:	68ba      	ldr	r2, [r7, #8]
 8007050:	693b      	ldr	r3, [r7, #16]
 8007052:	429a      	cmp	r2, r3
 8007054:	d90e      	bls.n	8007074 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	68ba      	ldr	r2, [r7, #8]
 800705a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	68fa      	ldr	r2, [r7, #12]
 8007060:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007062:	4b19      	ldr	r3, [pc, #100]	; (80070c8 <prvSwitchTimerLists+0xc0>)
 8007064:	681a      	ldr	r2, [r3, #0]
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	3304      	adds	r3, #4
 800706a:	4619      	mov	r1, r3
 800706c:	4610      	mov	r0, r2
 800706e:	f7fe f884 	bl	800517a <vListInsert>
 8007072:	e016      	b.n	80070a2 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007074:	2300      	movs	r3, #0
 8007076:	9300      	str	r3, [sp, #0]
 8007078:	2300      	movs	r3, #0
 800707a:	693a      	ldr	r2, [r7, #16]
 800707c:	2100      	movs	r1, #0
 800707e:	68f8      	ldr	r0, [r7, #12]
 8007080:	f7ff fd60 	bl	8006b44 <xTimerGenericCommand>
 8007084:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	2b00      	cmp	r3, #0
 800708a:	d10a      	bne.n	80070a2 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800708c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007090:	f383 8811 	msr	BASEPRI, r3
 8007094:	f3bf 8f6f 	isb	sy
 8007098:	f3bf 8f4f 	dsb	sy
 800709c:	603b      	str	r3, [r7, #0]
}
 800709e:	bf00      	nop
 80070a0:	e7fe      	b.n	80070a0 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80070a2:	4b09      	ldr	r3, [pc, #36]	; (80070c8 <prvSwitchTimerLists+0xc0>)
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d1b1      	bne.n	8007010 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80070ac:	4b06      	ldr	r3, [pc, #24]	; (80070c8 <prvSwitchTimerLists+0xc0>)
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80070b2:	4b06      	ldr	r3, [pc, #24]	; (80070cc <prvSwitchTimerLists+0xc4>)
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	4a04      	ldr	r2, [pc, #16]	; (80070c8 <prvSwitchTimerLists+0xc0>)
 80070b8:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80070ba:	4a04      	ldr	r2, [pc, #16]	; (80070cc <prvSwitchTimerLists+0xc4>)
 80070bc:	697b      	ldr	r3, [r7, #20]
 80070be:	6013      	str	r3, [r2, #0]
}
 80070c0:	bf00      	nop
 80070c2:	3718      	adds	r7, #24
 80070c4:	46bd      	mov	sp, r7
 80070c6:	bd80      	pop	{r7, pc}
 80070c8:	200053e0 	.word	0x200053e0
 80070cc:	200053e4 	.word	0x200053e4

080070d0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80070d0:	b580      	push	{r7, lr}
 80070d2:	b082      	sub	sp, #8
 80070d4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80070d6:	f000 f965 	bl	80073a4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80070da:	4b15      	ldr	r3, [pc, #84]	; (8007130 <prvCheckForValidListAndQueue+0x60>)
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d120      	bne.n	8007124 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80070e2:	4814      	ldr	r0, [pc, #80]	; (8007134 <prvCheckForValidListAndQueue+0x64>)
 80070e4:	f7fd fff8 	bl	80050d8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80070e8:	4813      	ldr	r0, [pc, #76]	; (8007138 <prvCheckForValidListAndQueue+0x68>)
 80070ea:	f7fd fff5 	bl	80050d8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80070ee:	4b13      	ldr	r3, [pc, #76]	; (800713c <prvCheckForValidListAndQueue+0x6c>)
 80070f0:	4a10      	ldr	r2, [pc, #64]	; (8007134 <prvCheckForValidListAndQueue+0x64>)
 80070f2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80070f4:	4b12      	ldr	r3, [pc, #72]	; (8007140 <prvCheckForValidListAndQueue+0x70>)
 80070f6:	4a10      	ldr	r2, [pc, #64]	; (8007138 <prvCheckForValidListAndQueue+0x68>)
 80070f8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80070fa:	2300      	movs	r3, #0
 80070fc:	9300      	str	r3, [sp, #0]
 80070fe:	4b11      	ldr	r3, [pc, #68]	; (8007144 <prvCheckForValidListAndQueue+0x74>)
 8007100:	4a11      	ldr	r2, [pc, #68]	; (8007148 <prvCheckForValidListAndQueue+0x78>)
 8007102:	2110      	movs	r1, #16
 8007104:	200a      	movs	r0, #10
 8007106:	f7fe f903 	bl	8005310 <xQueueGenericCreateStatic>
 800710a:	4603      	mov	r3, r0
 800710c:	4a08      	ldr	r2, [pc, #32]	; (8007130 <prvCheckForValidListAndQueue+0x60>)
 800710e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8007110:	4b07      	ldr	r3, [pc, #28]	; (8007130 <prvCheckForValidListAndQueue+0x60>)
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	2b00      	cmp	r3, #0
 8007116:	d005      	beq.n	8007124 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8007118:	4b05      	ldr	r3, [pc, #20]	; (8007130 <prvCheckForValidListAndQueue+0x60>)
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	490b      	ldr	r1, [pc, #44]	; (800714c <prvCheckForValidListAndQueue+0x7c>)
 800711e:	4618      	mov	r0, r3
 8007120:	f7fe fd1c 	bl	8005b5c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007124:	f000 f96e 	bl	8007404 <vPortExitCritical>
}
 8007128:	bf00      	nop
 800712a:	46bd      	mov	sp, r7
 800712c:	bd80      	pop	{r7, pc}
 800712e:	bf00      	nop
 8007130:	200053e8 	.word	0x200053e8
 8007134:	200053b8 	.word	0x200053b8
 8007138:	200053cc 	.word	0x200053cc
 800713c:	200053e0 	.word	0x200053e0
 8007140:	200053e4 	.word	0x200053e4
 8007144:	20005494 	.word	0x20005494
 8007148:	200053f4 	.word	0x200053f4
 800714c:	08011f98 	.word	0x08011f98

08007150 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007150:	b480      	push	{r7}
 8007152:	b085      	sub	sp, #20
 8007154:	af00      	add	r7, sp, #0
 8007156:	60f8      	str	r0, [r7, #12]
 8007158:	60b9      	str	r1, [r7, #8]
 800715a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	3b04      	subs	r3, #4
 8007160:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007168:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	3b04      	subs	r3, #4
 800716e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007170:	68bb      	ldr	r3, [r7, #8]
 8007172:	f023 0201 	bic.w	r2, r3, #1
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	3b04      	subs	r3, #4
 800717e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007180:	4a0c      	ldr	r2, [pc, #48]	; (80071b4 <pxPortInitialiseStack+0x64>)
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	3b14      	subs	r3, #20
 800718a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800718c:	687a      	ldr	r2, [r7, #4]
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	3b04      	subs	r3, #4
 8007196:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	f06f 0202 	mvn.w	r2, #2
 800719e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	3b20      	subs	r3, #32
 80071a4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80071a6:	68fb      	ldr	r3, [r7, #12]
}
 80071a8:	4618      	mov	r0, r3
 80071aa:	3714      	adds	r7, #20
 80071ac:	46bd      	mov	sp, r7
 80071ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071b2:	4770      	bx	lr
 80071b4:	080071b9 	.word	0x080071b9

080071b8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80071b8:	b480      	push	{r7}
 80071ba:	b085      	sub	sp, #20
 80071bc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80071be:	2300      	movs	r3, #0
 80071c0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80071c2:	4b12      	ldr	r3, [pc, #72]	; (800720c <prvTaskExitError+0x54>)
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80071ca:	d00a      	beq.n	80071e2 <prvTaskExitError+0x2a>
	__asm volatile
 80071cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071d0:	f383 8811 	msr	BASEPRI, r3
 80071d4:	f3bf 8f6f 	isb	sy
 80071d8:	f3bf 8f4f 	dsb	sy
 80071dc:	60fb      	str	r3, [r7, #12]
}
 80071de:	bf00      	nop
 80071e0:	e7fe      	b.n	80071e0 <prvTaskExitError+0x28>
	__asm volatile
 80071e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071e6:	f383 8811 	msr	BASEPRI, r3
 80071ea:	f3bf 8f6f 	isb	sy
 80071ee:	f3bf 8f4f 	dsb	sy
 80071f2:	60bb      	str	r3, [r7, #8]
}
 80071f4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80071f6:	bf00      	nop
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d0fc      	beq.n	80071f8 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80071fe:	bf00      	nop
 8007200:	bf00      	nop
 8007202:	3714      	adds	r7, #20
 8007204:	46bd      	mov	sp, r7
 8007206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800720a:	4770      	bx	lr
 800720c:	20000010 	.word	0x20000010

08007210 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007210:	4b07      	ldr	r3, [pc, #28]	; (8007230 <pxCurrentTCBConst2>)
 8007212:	6819      	ldr	r1, [r3, #0]
 8007214:	6808      	ldr	r0, [r1, #0]
 8007216:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800721a:	f380 8809 	msr	PSP, r0
 800721e:	f3bf 8f6f 	isb	sy
 8007222:	f04f 0000 	mov.w	r0, #0
 8007226:	f380 8811 	msr	BASEPRI, r0
 800722a:	4770      	bx	lr
 800722c:	f3af 8000 	nop.w

08007230 <pxCurrentTCBConst2>:
 8007230:	20004eb8 	.word	0x20004eb8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007234:	bf00      	nop
 8007236:	bf00      	nop

08007238 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007238:	4808      	ldr	r0, [pc, #32]	; (800725c <prvPortStartFirstTask+0x24>)
 800723a:	6800      	ldr	r0, [r0, #0]
 800723c:	6800      	ldr	r0, [r0, #0]
 800723e:	f380 8808 	msr	MSP, r0
 8007242:	f04f 0000 	mov.w	r0, #0
 8007246:	f380 8814 	msr	CONTROL, r0
 800724a:	b662      	cpsie	i
 800724c:	b661      	cpsie	f
 800724e:	f3bf 8f4f 	dsb	sy
 8007252:	f3bf 8f6f 	isb	sy
 8007256:	df00      	svc	0
 8007258:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800725a:	bf00      	nop
 800725c:	e000ed08 	.word	0xe000ed08

08007260 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007260:	b580      	push	{r7, lr}
 8007262:	b086      	sub	sp, #24
 8007264:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007266:	4b46      	ldr	r3, [pc, #280]	; (8007380 <xPortStartScheduler+0x120>)
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	4a46      	ldr	r2, [pc, #280]	; (8007384 <xPortStartScheduler+0x124>)
 800726c:	4293      	cmp	r3, r2
 800726e:	d10a      	bne.n	8007286 <xPortStartScheduler+0x26>
	__asm volatile
 8007270:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007274:	f383 8811 	msr	BASEPRI, r3
 8007278:	f3bf 8f6f 	isb	sy
 800727c:	f3bf 8f4f 	dsb	sy
 8007280:	613b      	str	r3, [r7, #16]
}
 8007282:	bf00      	nop
 8007284:	e7fe      	b.n	8007284 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007286:	4b3e      	ldr	r3, [pc, #248]	; (8007380 <xPortStartScheduler+0x120>)
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	4a3f      	ldr	r2, [pc, #252]	; (8007388 <xPortStartScheduler+0x128>)
 800728c:	4293      	cmp	r3, r2
 800728e:	d10a      	bne.n	80072a6 <xPortStartScheduler+0x46>
	__asm volatile
 8007290:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007294:	f383 8811 	msr	BASEPRI, r3
 8007298:	f3bf 8f6f 	isb	sy
 800729c:	f3bf 8f4f 	dsb	sy
 80072a0:	60fb      	str	r3, [r7, #12]
}
 80072a2:	bf00      	nop
 80072a4:	e7fe      	b.n	80072a4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80072a6:	4b39      	ldr	r3, [pc, #228]	; (800738c <xPortStartScheduler+0x12c>)
 80072a8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80072aa:	697b      	ldr	r3, [r7, #20]
 80072ac:	781b      	ldrb	r3, [r3, #0]
 80072ae:	b2db      	uxtb	r3, r3
 80072b0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80072b2:	697b      	ldr	r3, [r7, #20]
 80072b4:	22ff      	movs	r2, #255	; 0xff
 80072b6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80072b8:	697b      	ldr	r3, [r7, #20]
 80072ba:	781b      	ldrb	r3, [r3, #0]
 80072bc:	b2db      	uxtb	r3, r3
 80072be:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80072c0:	78fb      	ldrb	r3, [r7, #3]
 80072c2:	b2db      	uxtb	r3, r3
 80072c4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80072c8:	b2da      	uxtb	r2, r3
 80072ca:	4b31      	ldr	r3, [pc, #196]	; (8007390 <xPortStartScheduler+0x130>)
 80072cc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80072ce:	4b31      	ldr	r3, [pc, #196]	; (8007394 <xPortStartScheduler+0x134>)
 80072d0:	2207      	movs	r2, #7
 80072d2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80072d4:	e009      	b.n	80072ea <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80072d6:	4b2f      	ldr	r3, [pc, #188]	; (8007394 <xPortStartScheduler+0x134>)
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	3b01      	subs	r3, #1
 80072dc:	4a2d      	ldr	r2, [pc, #180]	; (8007394 <xPortStartScheduler+0x134>)
 80072de:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80072e0:	78fb      	ldrb	r3, [r7, #3]
 80072e2:	b2db      	uxtb	r3, r3
 80072e4:	005b      	lsls	r3, r3, #1
 80072e6:	b2db      	uxtb	r3, r3
 80072e8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80072ea:	78fb      	ldrb	r3, [r7, #3]
 80072ec:	b2db      	uxtb	r3, r3
 80072ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80072f2:	2b80      	cmp	r3, #128	; 0x80
 80072f4:	d0ef      	beq.n	80072d6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80072f6:	4b27      	ldr	r3, [pc, #156]	; (8007394 <xPortStartScheduler+0x134>)
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	f1c3 0307 	rsb	r3, r3, #7
 80072fe:	2b04      	cmp	r3, #4
 8007300:	d00a      	beq.n	8007318 <xPortStartScheduler+0xb8>
	__asm volatile
 8007302:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007306:	f383 8811 	msr	BASEPRI, r3
 800730a:	f3bf 8f6f 	isb	sy
 800730e:	f3bf 8f4f 	dsb	sy
 8007312:	60bb      	str	r3, [r7, #8]
}
 8007314:	bf00      	nop
 8007316:	e7fe      	b.n	8007316 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007318:	4b1e      	ldr	r3, [pc, #120]	; (8007394 <xPortStartScheduler+0x134>)
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	021b      	lsls	r3, r3, #8
 800731e:	4a1d      	ldr	r2, [pc, #116]	; (8007394 <xPortStartScheduler+0x134>)
 8007320:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007322:	4b1c      	ldr	r3, [pc, #112]	; (8007394 <xPortStartScheduler+0x134>)
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800732a:	4a1a      	ldr	r2, [pc, #104]	; (8007394 <xPortStartScheduler+0x134>)
 800732c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	b2da      	uxtb	r2, r3
 8007332:	697b      	ldr	r3, [r7, #20]
 8007334:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007336:	4b18      	ldr	r3, [pc, #96]	; (8007398 <xPortStartScheduler+0x138>)
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	4a17      	ldr	r2, [pc, #92]	; (8007398 <xPortStartScheduler+0x138>)
 800733c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007340:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007342:	4b15      	ldr	r3, [pc, #84]	; (8007398 <xPortStartScheduler+0x138>)
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	4a14      	ldr	r2, [pc, #80]	; (8007398 <xPortStartScheduler+0x138>)
 8007348:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800734c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800734e:	f000 f8dd 	bl	800750c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007352:	4b12      	ldr	r3, [pc, #72]	; (800739c <xPortStartScheduler+0x13c>)
 8007354:	2200      	movs	r2, #0
 8007356:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8007358:	f000 f8fc 	bl	8007554 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800735c:	4b10      	ldr	r3, [pc, #64]	; (80073a0 <xPortStartScheduler+0x140>)
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	4a0f      	ldr	r2, [pc, #60]	; (80073a0 <xPortStartScheduler+0x140>)
 8007362:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8007366:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007368:	f7ff ff66 	bl	8007238 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800736c:	f7ff f826 	bl	80063bc <vTaskSwitchContext>
	prvTaskExitError();
 8007370:	f7ff ff22 	bl	80071b8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007374:	2300      	movs	r3, #0
}
 8007376:	4618      	mov	r0, r3
 8007378:	3718      	adds	r7, #24
 800737a:	46bd      	mov	sp, r7
 800737c:	bd80      	pop	{r7, pc}
 800737e:	bf00      	nop
 8007380:	e000ed00 	.word	0xe000ed00
 8007384:	410fc271 	.word	0x410fc271
 8007388:	410fc270 	.word	0x410fc270
 800738c:	e000e400 	.word	0xe000e400
 8007390:	200054e4 	.word	0x200054e4
 8007394:	200054e8 	.word	0x200054e8
 8007398:	e000ed20 	.word	0xe000ed20
 800739c:	20000010 	.word	0x20000010
 80073a0:	e000ef34 	.word	0xe000ef34

080073a4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80073a4:	b480      	push	{r7}
 80073a6:	b083      	sub	sp, #12
 80073a8:	af00      	add	r7, sp, #0
	__asm volatile
 80073aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073ae:	f383 8811 	msr	BASEPRI, r3
 80073b2:	f3bf 8f6f 	isb	sy
 80073b6:	f3bf 8f4f 	dsb	sy
 80073ba:	607b      	str	r3, [r7, #4]
}
 80073bc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80073be:	4b0f      	ldr	r3, [pc, #60]	; (80073fc <vPortEnterCritical+0x58>)
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	3301      	adds	r3, #1
 80073c4:	4a0d      	ldr	r2, [pc, #52]	; (80073fc <vPortEnterCritical+0x58>)
 80073c6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80073c8:	4b0c      	ldr	r3, [pc, #48]	; (80073fc <vPortEnterCritical+0x58>)
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	2b01      	cmp	r3, #1
 80073ce:	d10f      	bne.n	80073f0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80073d0:	4b0b      	ldr	r3, [pc, #44]	; (8007400 <vPortEnterCritical+0x5c>)
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	b2db      	uxtb	r3, r3
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d00a      	beq.n	80073f0 <vPortEnterCritical+0x4c>
	__asm volatile
 80073da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073de:	f383 8811 	msr	BASEPRI, r3
 80073e2:	f3bf 8f6f 	isb	sy
 80073e6:	f3bf 8f4f 	dsb	sy
 80073ea:	603b      	str	r3, [r7, #0]
}
 80073ec:	bf00      	nop
 80073ee:	e7fe      	b.n	80073ee <vPortEnterCritical+0x4a>
	}
}
 80073f0:	bf00      	nop
 80073f2:	370c      	adds	r7, #12
 80073f4:	46bd      	mov	sp, r7
 80073f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073fa:	4770      	bx	lr
 80073fc:	20000010 	.word	0x20000010
 8007400:	e000ed04 	.word	0xe000ed04

08007404 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007404:	b480      	push	{r7}
 8007406:	b083      	sub	sp, #12
 8007408:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800740a:	4b12      	ldr	r3, [pc, #72]	; (8007454 <vPortExitCritical+0x50>)
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	2b00      	cmp	r3, #0
 8007410:	d10a      	bne.n	8007428 <vPortExitCritical+0x24>
	__asm volatile
 8007412:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007416:	f383 8811 	msr	BASEPRI, r3
 800741a:	f3bf 8f6f 	isb	sy
 800741e:	f3bf 8f4f 	dsb	sy
 8007422:	607b      	str	r3, [r7, #4]
}
 8007424:	bf00      	nop
 8007426:	e7fe      	b.n	8007426 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007428:	4b0a      	ldr	r3, [pc, #40]	; (8007454 <vPortExitCritical+0x50>)
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	3b01      	subs	r3, #1
 800742e:	4a09      	ldr	r2, [pc, #36]	; (8007454 <vPortExitCritical+0x50>)
 8007430:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007432:	4b08      	ldr	r3, [pc, #32]	; (8007454 <vPortExitCritical+0x50>)
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	2b00      	cmp	r3, #0
 8007438:	d105      	bne.n	8007446 <vPortExitCritical+0x42>
 800743a:	2300      	movs	r3, #0
 800743c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800743e:	683b      	ldr	r3, [r7, #0]
 8007440:	f383 8811 	msr	BASEPRI, r3
}
 8007444:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007446:	bf00      	nop
 8007448:	370c      	adds	r7, #12
 800744a:	46bd      	mov	sp, r7
 800744c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007450:	4770      	bx	lr
 8007452:	bf00      	nop
 8007454:	20000010 	.word	0x20000010
	...

08007460 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007460:	f3ef 8009 	mrs	r0, PSP
 8007464:	f3bf 8f6f 	isb	sy
 8007468:	4b15      	ldr	r3, [pc, #84]	; (80074c0 <pxCurrentTCBConst>)
 800746a:	681a      	ldr	r2, [r3, #0]
 800746c:	f01e 0f10 	tst.w	lr, #16
 8007470:	bf08      	it	eq
 8007472:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007476:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800747a:	6010      	str	r0, [r2, #0]
 800747c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007480:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007484:	f380 8811 	msr	BASEPRI, r0
 8007488:	f3bf 8f4f 	dsb	sy
 800748c:	f3bf 8f6f 	isb	sy
 8007490:	f7fe ff94 	bl	80063bc <vTaskSwitchContext>
 8007494:	f04f 0000 	mov.w	r0, #0
 8007498:	f380 8811 	msr	BASEPRI, r0
 800749c:	bc09      	pop	{r0, r3}
 800749e:	6819      	ldr	r1, [r3, #0]
 80074a0:	6808      	ldr	r0, [r1, #0]
 80074a2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80074a6:	f01e 0f10 	tst.w	lr, #16
 80074aa:	bf08      	it	eq
 80074ac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80074b0:	f380 8809 	msr	PSP, r0
 80074b4:	f3bf 8f6f 	isb	sy
 80074b8:	4770      	bx	lr
 80074ba:	bf00      	nop
 80074bc:	f3af 8000 	nop.w

080074c0 <pxCurrentTCBConst>:
 80074c0:	20004eb8 	.word	0x20004eb8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80074c4:	bf00      	nop
 80074c6:	bf00      	nop

080074c8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80074c8:	b580      	push	{r7, lr}
 80074ca:	b082      	sub	sp, #8
 80074cc:	af00      	add	r7, sp, #0
	__asm volatile
 80074ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074d2:	f383 8811 	msr	BASEPRI, r3
 80074d6:	f3bf 8f6f 	isb	sy
 80074da:	f3bf 8f4f 	dsb	sy
 80074de:	607b      	str	r3, [r7, #4]
}
 80074e0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80074e2:	f7fe feb1 	bl	8006248 <xTaskIncrementTick>
 80074e6:	4603      	mov	r3, r0
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d003      	beq.n	80074f4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80074ec:	4b06      	ldr	r3, [pc, #24]	; (8007508 <xPortSysTickHandler+0x40>)
 80074ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80074f2:	601a      	str	r2, [r3, #0]
 80074f4:	2300      	movs	r3, #0
 80074f6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80074f8:	683b      	ldr	r3, [r7, #0]
 80074fa:	f383 8811 	msr	BASEPRI, r3
}
 80074fe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007500:	bf00      	nop
 8007502:	3708      	adds	r7, #8
 8007504:	46bd      	mov	sp, r7
 8007506:	bd80      	pop	{r7, pc}
 8007508:	e000ed04 	.word	0xe000ed04

0800750c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800750c:	b480      	push	{r7}
 800750e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007510:	4b0b      	ldr	r3, [pc, #44]	; (8007540 <vPortSetupTimerInterrupt+0x34>)
 8007512:	2200      	movs	r2, #0
 8007514:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007516:	4b0b      	ldr	r3, [pc, #44]	; (8007544 <vPortSetupTimerInterrupt+0x38>)
 8007518:	2200      	movs	r2, #0
 800751a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800751c:	4b0a      	ldr	r3, [pc, #40]	; (8007548 <vPortSetupTimerInterrupt+0x3c>)
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	4a0a      	ldr	r2, [pc, #40]	; (800754c <vPortSetupTimerInterrupt+0x40>)
 8007522:	fba2 2303 	umull	r2, r3, r2, r3
 8007526:	099b      	lsrs	r3, r3, #6
 8007528:	4a09      	ldr	r2, [pc, #36]	; (8007550 <vPortSetupTimerInterrupt+0x44>)
 800752a:	3b01      	subs	r3, #1
 800752c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800752e:	4b04      	ldr	r3, [pc, #16]	; (8007540 <vPortSetupTimerInterrupt+0x34>)
 8007530:	2207      	movs	r2, #7
 8007532:	601a      	str	r2, [r3, #0]
}
 8007534:	bf00      	nop
 8007536:	46bd      	mov	sp, r7
 8007538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800753c:	4770      	bx	lr
 800753e:	bf00      	nop
 8007540:	e000e010 	.word	0xe000e010
 8007544:	e000e018 	.word	0xe000e018
 8007548:	20000004 	.word	0x20000004
 800754c:	10624dd3 	.word	0x10624dd3
 8007550:	e000e014 	.word	0xe000e014

08007554 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007554:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8007564 <vPortEnableVFP+0x10>
 8007558:	6801      	ldr	r1, [r0, #0]
 800755a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800755e:	6001      	str	r1, [r0, #0]
 8007560:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007562:	bf00      	nop
 8007564:	e000ed88 	.word	0xe000ed88

08007568 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007568:	b480      	push	{r7}
 800756a:	b085      	sub	sp, #20
 800756c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800756e:	f3ef 8305 	mrs	r3, IPSR
 8007572:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	2b0f      	cmp	r3, #15
 8007578:	d914      	bls.n	80075a4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800757a:	4a17      	ldr	r2, [pc, #92]	; (80075d8 <vPortValidateInterruptPriority+0x70>)
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	4413      	add	r3, r2
 8007580:	781b      	ldrb	r3, [r3, #0]
 8007582:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007584:	4b15      	ldr	r3, [pc, #84]	; (80075dc <vPortValidateInterruptPriority+0x74>)
 8007586:	781b      	ldrb	r3, [r3, #0]
 8007588:	7afa      	ldrb	r2, [r7, #11]
 800758a:	429a      	cmp	r2, r3
 800758c:	d20a      	bcs.n	80075a4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800758e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007592:	f383 8811 	msr	BASEPRI, r3
 8007596:	f3bf 8f6f 	isb	sy
 800759a:	f3bf 8f4f 	dsb	sy
 800759e:	607b      	str	r3, [r7, #4]
}
 80075a0:	bf00      	nop
 80075a2:	e7fe      	b.n	80075a2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80075a4:	4b0e      	ldr	r3, [pc, #56]	; (80075e0 <vPortValidateInterruptPriority+0x78>)
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80075ac:	4b0d      	ldr	r3, [pc, #52]	; (80075e4 <vPortValidateInterruptPriority+0x7c>)
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	429a      	cmp	r2, r3
 80075b2:	d90a      	bls.n	80075ca <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80075b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075b8:	f383 8811 	msr	BASEPRI, r3
 80075bc:	f3bf 8f6f 	isb	sy
 80075c0:	f3bf 8f4f 	dsb	sy
 80075c4:	603b      	str	r3, [r7, #0]
}
 80075c6:	bf00      	nop
 80075c8:	e7fe      	b.n	80075c8 <vPortValidateInterruptPriority+0x60>
	}
 80075ca:	bf00      	nop
 80075cc:	3714      	adds	r7, #20
 80075ce:	46bd      	mov	sp, r7
 80075d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075d4:	4770      	bx	lr
 80075d6:	bf00      	nop
 80075d8:	e000e3f0 	.word	0xe000e3f0
 80075dc:	200054e4 	.word	0x200054e4
 80075e0:	e000ed0c 	.word	0xe000ed0c
 80075e4:	200054e8 	.word	0x200054e8

080075e8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80075e8:	b580      	push	{r7, lr}
 80075ea:	b08a      	sub	sp, #40	; 0x28
 80075ec:	af00      	add	r7, sp, #0
 80075ee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80075f0:	2300      	movs	r3, #0
 80075f2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80075f4:	f7fe fd6c 	bl	80060d0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80075f8:	4b5b      	ldr	r3, [pc, #364]	; (8007768 <pvPortMalloc+0x180>)
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d101      	bne.n	8007604 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007600:	f000 f920 	bl	8007844 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007604:	4b59      	ldr	r3, [pc, #356]	; (800776c <pvPortMalloc+0x184>)
 8007606:	681a      	ldr	r2, [r3, #0]
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	4013      	ands	r3, r2
 800760c:	2b00      	cmp	r3, #0
 800760e:	f040 8093 	bne.w	8007738 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	2b00      	cmp	r3, #0
 8007616:	d01d      	beq.n	8007654 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8007618:	2208      	movs	r2, #8
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	4413      	add	r3, r2
 800761e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	f003 0307 	and.w	r3, r3, #7
 8007626:	2b00      	cmp	r3, #0
 8007628:	d014      	beq.n	8007654 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	f023 0307 	bic.w	r3, r3, #7
 8007630:	3308      	adds	r3, #8
 8007632:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	f003 0307 	and.w	r3, r3, #7
 800763a:	2b00      	cmp	r3, #0
 800763c:	d00a      	beq.n	8007654 <pvPortMalloc+0x6c>
	__asm volatile
 800763e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007642:	f383 8811 	msr	BASEPRI, r3
 8007646:	f3bf 8f6f 	isb	sy
 800764a:	f3bf 8f4f 	dsb	sy
 800764e:	617b      	str	r3, [r7, #20]
}
 8007650:	bf00      	nop
 8007652:	e7fe      	b.n	8007652 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	2b00      	cmp	r3, #0
 8007658:	d06e      	beq.n	8007738 <pvPortMalloc+0x150>
 800765a:	4b45      	ldr	r3, [pc, #276]	; (8007770 <pvPortMalloc+0x188>)
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	687a      	ldr	r2, [r7, #4]
 8007660:	429a      	cmp	r2, r3
 8007662:	d869      	bhi.n	8007738 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007664:	4b43      	ldr	r3, [pc, #268]	; (8007774 <pvPortMalloc+0x18c>)
 8007666:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007668:	4b42      	ldr	r3, [pc, #264]	; (8007774 <pvPortMalloc+0x18c>)
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800766e:	e004      	b.n	800767a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8007670:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007672:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007674:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800767a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800767c:	685b      	ldr	r3, [r3, #4]
 800767e:	687a      	ldr	r2, [r7, #4]
 8007680:	429a      	cmp	r2, r3
 8007682:	d903      	bls.n	800768c <pvPortMalloc+0xa4>
 8007684:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	2b00      	cmp	r3, #0
 800768a:	d1f1      	bne.n	8007670 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800768c:	4b36      	ldr	r3, [pc, #216]	; (8007768 <pvPortMalloc+0x180>)
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007692:	429a      	cmp	r2, r3
 8007694:	d050      	beq.n	8007738 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007696:	6a3b      	ldr	r3, [r7, #32]
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	2208      	movs	r2, #8
 800769c:	4413      	add	r3, r2
 800769e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80076a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076a2:	681a      	ldr	r2, [r3, #0]
 80076a4:	6a3b      	ldr	r3, [r7, #32]
 80076a6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80076a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076aa:	685a      	ldr	r2, [r3, #4]
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	1ad2      	subs	r2, r2, r3
 80076b0:	2308      	movs	r3, #8
 80076b2:	005b      	lsls	r3, r3, #1
 80076b4:	429a      	cmp	r2, r3
 80076b6:	d91f      	bls.n	80076f8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80076b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	4413      	add	r3, r2
 80076be:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80076c0:	69bb      	ldr	r3, [r7, #24]
 80076c2:	f003 0307 	and.w	r3, r3, #7
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d00a      	beq.n	80076e0 <pvPortMalloc+0xf8>
	__asm volatile
 80076ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076ce:	f383 8811 	msr	BASEPRI, r3
 80076d2:	f3bf 8f6f 	isb	sy
 80076d6:	f3bf 8f4f 	dsb	sy
 80076da:	613b      	str	r3, [r7, #16]
}
 80076dc:	bf00      	nop
 80076de:	e7fe      	b.n	80076de <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80076e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076e2:	685a      	ldr	r2, [r3, #4]
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	1ad2      	subs	r2, r2, r3
 80076e8:	69bb      	ldr	r3, [r7, #24]
 80076ea:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80076ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076ee:	687a      	ldr	r2, [r7, #4]
 80076f0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80076f2:	69b8      	ldr	r0, [r7, #24]
 80076f4:	f000 f908 	bl	8007908 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80076f8:	4b1d      	ldr	r3, [pc, #116]	; (8007770 <pvPortMalloc+0x188>)
 80076fa:	681a      	ldr	r2, [r3, #0]
 80076fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076fe:	685b      	ldr	r3, [r3, #4]
 8007700:	1ad3      	subs	r3, r2, r3
 8007702:	4a1b      	ldr	r2, [pc, #108]	; (8007770 <pvPortMalloc+0x188>)
 8007704:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007706:	4b1a      	ldr	r3, [pc, #104]	; (8007770 <pvPortMalloc+0x188>)
 8007708:	681a      	ldr	r2, [r3, #0]
 800770a:	4b1b      	ldr	r3, [pc, #108]	; (8007778 <pvPortMalloc+0x190>)
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	429a      	cmp	r2, r3
 8007710:	d203      	bcs.n	800771a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007712:	4b17      	ldr	r3, [pc, #92]	; (8007770 <pvPortMalloc+0x188>)
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	4a18      	ldr	r2, [pc, #96]	; (8007778 <pvPortMalloc+0x190>)
 8007718:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800771a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800771c:	685a      	ldr	r2, [r3, #4]
 800771e:	4b13      	ldr	r3, [pc, #76]	; (800776c <pvPortMalloc+0x184>)
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	431a      	orrs	r2, r3
 8007724:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007726:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007728:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800772a:	2200      	movs	r2, #0
 800772c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800772e:	4b13      	ldr	r3, [pc, #76]	; (800777c <pvPortMalloc+0x194>)
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	3301      	adds	r3, #1
 8007734:	4a11      	ldr	r2, [pc, #68]	; (800777c <pvPortMalloc+0x194>)
 8007736:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007738:	f7fe fcd8 	bl	80060ec <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800773c:	69fb      	ldr	r3, [r7, #28]
 800773e:	f003 0307 	and.w	r3, r3, #7
 8007742:	2b00      	cmp	r3, #0
 8007744:	d00a      	beq.n	800775c <pvPortMalloc+0x174>
	__asm volatile
 8007746:	f04f 0350 	mov.w	r3, #80	; 0x50
 800774a:	f383 8811 	msr	BASEPRI, r3
 800774e:	f3bf 8f6f 	isb	sy
 8007752:	f3bf 8f4f 	dsb	sy
 8007756:	60fb      	str	r3, [r7, #12]
}
 8007758:	bf00      	nop
 800775a:	e7fe      	b.n	800775a <pvPortMalloc+0x172>
	return pvReturn;
 800775c:	69fb      	ldr	r3, [r7, #28]
}
 800775e:	4618      	mov	r0, r3
 8007760:	3728      	adds	r7, #40	; 0x28
 8007762:	46bd      	mov	sp, r7
 8007764:	bd80      	pop	{r7, pc}
 8007766:	bf00      	nop
 8007768:	200090f4 	.word	0x200090f4
 800776c:	20009108 	.word	0x20009108
 8007770:	200090f8 	.word	0x200090f8
 8007774:	200090ec 	.word	0x200090ec
 8007778:	200090fc 	.word	0x200090fc
 800777c:	20009100 	.word	0x20009100

08007780 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007780:	b580      	push	{r7, lr}
 8007782:	b086      	sub	sp, #24
 8007784:	af00      	add	r7, sp, #0
 8007786:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	2b00      	cmp	r3, #0
 8007790:	d04d      	beq.n	800782e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007792:	2308      	movs	r3, #8
 8007794:	425b      	negs	r3, r3
 8007796:	697a      	ldr	r2, [r7, #20]
 8007798:	4413      	add	r3, r2
 800779a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800779c:	697b      	ldr	r3, [r7, #20]
 800779e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80077a0:	693b      	ldr	r3, [r7, #16]
 80077a2:	685a      	ldr	r2, [r3, #4]
 80077a4:	4b24      	ldr	r3, [pc, #144]	; (8007838 <vPortFree+0xb8>)
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	4013      	ands	r3, r2
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d10a      	bne.n	80077c4 <vPortFree+0x44>
	__asm volatile
 80077ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077b2:	f383 8811 	msr	BASEPRI, r3
 80077b6:	f3bf 8f6f 	isb	sy
 80077ba:	f3bf 8f4f 	dsb	sy
 80077be:	60fb      	str	r3, [r7, #12]
}
 80077c0:	bf00      	nop
 80077c2:	e7fe      	b.n	80077c2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80077c4:	693b      	ldr	r3, [r7, #16]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	d00a      	beq.n	80077e2 <vPortFree+0x62>
	__asm volatile
 80077cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077d0:	f383 8811 	msr	BASEPRI, r3
 80077d4:	f3bf 8f6f 	isb	sy
 80077d8:	f3bf 8f4f 	dsb	sy
 80077dc:	60bb      	str	r3, [r7, #8]
}
 80077de:	bf00      	nop
 80077e0:	e7fe      	b.n	80077e0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80077e2:	693b      	ldr	r3, [r7, #16]
 80077e4:	685a      	ldr	r2, [r3, #4]
 80077e6:	4b14      	ldr	r3, [pc, #80]	; (8007838 <vPortFree+0xb8>)
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	4013      	ands	r3, r2
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	d01e      	beq.n	800782e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80077f0:	693b      	ldr	r3, [r7, #16]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d11a      	bne.n	800782e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80077f8:	693b      	ldr	r3, [r7, #16]
 80077fa:	685a      	ldr	r2, [r3, #4]
 80077fc:	4b0e      	ldr	r3, [pc, #56]	; (8007838 <vPortFree+0xb8>)
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	43db      	mvns	r3, r3
 8007802:	401a      	ands	r2, r3
 8007804:	693b      	ldr	r3, [r7, #16]
 8007806:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007808:	f7fe fc62 	bl	80060d0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800780c:	693b      	ldr	r3, [r7, #16]
 800780e:	685a      	ldr	r2, [r3, #4]
 8007810:	4b0a      	ldr	r3, [pc, #40]	; (800783c <vPortFree+0xbc>)
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	4413      	add	r3, r2
 8007816:	4a09      	ldr	r2, [pc, #36]	; (800783c <vPortFree+0xbc>)
 8007818:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800781a:	6938      	ldr	r0, [r7, #16]
 800781c:	f000 f874 	bl	8007908 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8007820:	4b07      	ldr	r3, [pc, #28]	; (8007840 <vPortFree+0xc0>)
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	3301      	adds	r3, #1
 8007826:	4a06      	ldr	r2, [pc, #24]	; (8007840 <vPortFree+0xc0>)
 8007828:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800782a:	f7fe fc5f 	bl	80060ec <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800782e:	bf00      	nop
 8007830:	3718      	adds	r7, #24
 8007832:	46bd      	mov	sp, r7
 8007834:	bd80      	pop	{r7, pc}
 8007836:	bf00      	nop
 8007838:	20009108 	.word	0x20009108
 800783c:	200090f8 	.word	0x200090f8
 8007840:	20009104 	.word	0x20009104

08007844 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007844:	b480      	push	{r7}
 8007846:	b085      	sub	sp, #20
 8007848:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800784a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800784e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007850:	4b27      	ldr	r3, [pc, #156]	; (80078f0 <prvHeapInit+0xac>)
 8007852:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	f003 0307 	and.w	r3, r3, #7
 800785a:	2b00      	cmp	r3, #0
 800785c:	d00c      	beq.n	8007878 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	3307      	adds	r3, #7
 8007862:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	f023 0307 	bic.w	r3, r3, #7
 800786a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800786c:	68ba      	ldr	r2, [r7, #8]
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	1ad3      	subs	r3, r2, r3
 8007872:	4a1f      	ldr	r2, [pc, #124]	; (80078f0 <prvHeapInit+0xac>)
 8007874:	4413      	add	r3, r2
 8007876:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800787c:	4a1d      	ldr	r2, [pc, #116]	; (80078f4 <prvHeapInit+0xb0>)
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007882:	4b1c      	ldr	r3, [pc, #112]	; (80078f4 <prvHeapInit+0xb0>)
 8007884:	2200      	movs	r2, #0
 8007886:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	68ba      	ldr	r2, [r7, #8]
 800788c:	4413      	add	r3, r2
 800788e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007890:	2208      	movs	r2, #8
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	1a9b      	subs	r3, r3, r2
 8007896:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	f023 0307 	bic.w	r3, r3, #7
 800789e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	4a15      	ldr	r2, [pc, #84]	; (80078f8 <prvHeapInit+0xb4>)
 80078a4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80078a6:	4b14      	ldr	r3, [pc, #80]	; (80078f8 <prvHeapInit+0xb4>)
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	2200      	movs	r2, #0
 80078ac:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80078ae:	4b12      	ldr	r3, [pc, #72]	; (80078f8 <prvHeapInit+0xb4>)
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	2200      	movs	r2, #0
 80078b4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80078ba:	683b      	ldr	r3, [r7, #0]
 80078bc:	68fa      	ldr	r2, [r7, #12]
 80078be:	1ad2      	subs	r2, r2, r3
 80078c0:	683b      	ldr	r3, [r7, #0]
 80078c2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80078c4:	4b0c      	ldr	r3, [pc, #48]	; (80078f8 <prvHeapInit+0xb4>)
 80078c6:	681a      	ldr	r2, [r3, #0]
 80078c8:	683b      	ldr	r3, [r7, #0]
 80078ca:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80078cc:	683b      	ldr	r3, [r7, #0]
 80078ce:	685b      	ldr	r3, [r3, #4]
 80078d0:	4a0a      	ldr	r2, [pc, #40]	; (80078fc <prvHeapInit+0xb8>)
 80078d2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80078d4:	683b      	ldr	r3, [r7, #0]
 80078d6:	685b      	ldr	r3, [r3, #4]
 80078d8:	4a09      	ldr	r2, [pc, #36]	; (8007900 <prvHeapInit+0xbc>)
 80078da:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80078dc:	4b09      	ldr	r3, [pc, #36]	; (8007904 <prvHeapInit+0xc0>)
 80078de:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80078e2:	601a      	str	r2, [r3, #0]
}
 80078e4:	bf00      	nop
 80078e6:	3714      	adds	r7, #20
 80078e8:	46bd      	mov	sp, r7
 80078ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ee:	4770      	bx	lr
 80078f0:	200054ec 	.word	0x200054ec
 80078f4:	200090ec 	.word	0x200090ec
 80078f8:	200090f4 	.word	0x200090f4
 80078fc:	200090fc 	.word	0x200090fc
 8007900:	200090f8 	.word	0x200090f8
 8007904:	20009108 	.word	0x20009108

08007908 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007908:	b480      	push	{r7}
 800790a:	b085      	sub	sp, #20
 800790c:	af00      	add	r7, sp, #0
 800790e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007910:	4b28      	ldr	r3, [pc, #160]	; (80079b4 <prvInsertBlockIntoFreeList+0xac>)
 8007912:	60fb      	str	r3, [r7, #12]
 8007914:	e002      	b.n	800791c <prvInsertBlockIntoFreeList+0x14>
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	60fb      	str	r3, [r7, #12]
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	687a      	ldr	r2, [r7, #4]
 8007922:	429a      	cmp	r2, r3
 8007924:	d8f7      	bhi.n	8007916 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	685b      	ldr	r3, [r3, #4]
 800792e:	68ba      	ldr	r2, [r7, #8]
 8007930:	4413      	add	r3, r2
 8007932:	687a      	ldr	r2, [r7, #4]
 8007934:	429a      	cmp	r2, r3
 8007936:	d108      	bne.n	800794a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	685a      	ldr	r2, [r3, #4]
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	685b      	ldr	r3, [r3, #4]
 8007940:	441a      	add	r2, r3
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	685b      	ldr	r3, [r3, #4]
 8007952:	68ba      	ldr	r2, [r7, #8]
 8007954:	441a      	add	r2, r3
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	429a      	cmp	r2, r3
 800795c:	d118      	bne.n	8007990 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	681a      	ldr	r2, [r3, #0]
 8007962:	4b15      	ldr	r3, [pc, #84]	; (80079b8 <prvInsertBlockIntoFreeList+0xb0>)
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	429a      	cmp	r2, r3
 8007968:	d00d      	beq.n	8007986 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	685a      	ldr	r2, [r3, #4]
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	685b      	ldr	r3, [r3, #4]
 8007974:	441a      	add	r2, r3
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	681a      	ldr	r2, [r3, #0]
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	601a      	str	r2, [r3, #0]
 8007984:	e008      	b.n	8007998 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007986:	4b0c      	ldr	r3, [pc, #48]	; (80079b8 <prvInsertBlockIntoFreeList+0xb0>)
 8007988:	681a      	ldr	r2, [r3, #0]
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	601a      	str	r2, [r3, #0]
 800798e:	e003      	b.n	8007998 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	681a      	ldr	r2, [r3, #0]
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007998:	68fa      	ldr	r2, [r7, #12]
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	429a      	cmp	r2, r3
 800799e:	d002      	beq.n	80079a6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	687a      	ldr	r2, [r7, #4]
 80079a4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80079a6:	bf00      	nop
 80079a8:	3714      	adds	r7, #20
 80079aa:	46bd      	mov	sp, r7
 80079ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079b0:	4770      	bx	lr
 80079b2:	bf00      	nop
 80079b4:	200090ec 	.word	0x200090ec
 80079b8:	200090f4 	.word	0x200090f4

080079bc <rcl_get_zero_initialized_publisher>:
 80079bc:	4b01      	ldr	r3, [pc, #4]	; (80079c4 <rcl_get_zero_initialized_publisher+0x8>)
 80079be:	6818      	ldr	r0, [r3, #0]
 80079c0:	4770      	bx	lr
 80079c2:	bf00      	nop
 80079c4:	08011ff0 	.word	0x08011ff0

080079c8 <rcl_publisher_init>:
 80079c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80079cc:	b088      	sub	sp, #32
 80079ce:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80079d0:	2d00      	cmp	r5, #0
 80079d2:	d069      	beq.n	8007aa8 <rcl_publisher_init+0xe0>
 80079d4:	f105 0950 	add.w	r9, r5, #80	; 0x50
 80079d8:	4604      	mov	r4, r0
 80079da:	4648      	mov	r0, r9
 80079dc:	460e      	mov	r6, r1
 80079de:	4690      	mov	r8, r2
 80079e0:	461f      	mov	r7, r3
 80079e2:	f000 f9d5 	bl	8007d90 <rcutils_allocator_is_valid>
 80079e6:	2800      	cmp	r0, #0
 80079e8:	d05e      	beq.n	8007aa8 <rcl_publisher_init+0xe0>
 80079ea:	2c00      	cmp	r4, #0
 80079ec:	d05c      	beq.n	8007aa8 <rcl_publisher_init+0xe0>
 80079ee:	f8d4 a000 	ldr.w	sl, [r4]
 80079f2:	f1ba 0f00 	cmp.w	sl, #0
 80079f6:	d004      	beq.n	8007a02 <rcl_publisher_init+0x3a>
 80079f8:	2764      	movs	r7, #100	; 0x64
 80079fa:	4638      	mov	r0, r7
 80079fc:	b008      	add	sp, #32
 80079fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007a02:	4630      	mov	r0, r6
 8007a04:	f004 ffb8 	bl	800c978 <rcl_node_is_valid>
 8007a08:	2800      	cmp	r0, #0
 8007a0a:	d052      	beq.n	8007ab2 <rcl_publisher_init+0xea>
 8007a0c:	f1b8 0f00 	cmp.w	r8, #0
 8007a10:	d04a      	beq.n	8007aa8 <rcl_publisher_init+0xe0>
 8007a12:	2f00      	cmp	r7, #0
 8007a14:	d048      	beq.n	8007aa8 <rcl_publisher_init+0xe0>
 8007a16:	e9cd aa03 	strd	sl, sl, [sp, #12]
 8007a1a:	aa07      	add	r2, sp, #28
 8007a1c:	9205      	str	r2, [sp, #20]
 8007a1e:	f105 0358 	add.w	r3, r5, #88	; 0x58
 8007a22:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8007a26:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8007a2a:	f8cd a01c 	str.w	sl, [sp, #28]
 8007a2e:	4639      	mov	r1, r7
 8007a30:	e899 000c 	ldmia.w	r9, {r2, r3}
 8007a34:	4630      	mov	r0, r6
 8007a36:	f004 fff3 	bl	800ca20 <rcl_node_resolve_name>
 8007a3a:	4607      	mov	r7, r0
 8007a3c:	2800      	cmp	r0, #0
 8007a3e:	d14f      	bne.n	8007ae0 <rcl_publisher_init+0x118>
 8007a40:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 8007a42:	6e29      	ldr	r1, [r5, #96]	; 0x60
 8007a44:	20c8      	movs	r0, #200	; 0xc8
 8007a46:	4798      	blx	r3
 8007a48:	6020      	str	r0, [r4, #0]
 8007a4a:	2800      	cmp	r0, #0
 8007a4c:	d04e      	beq.n	8007aec <rcl_publisher_init+0x124>
 8007a4e:	4630      	mov	r0, r6
 8007a50:	f004 ffb4 	bl	800c9bc <rcl_node_get_rmw_handle>
 8007a54:	f105 0364 	add.w	r3, r5, #100	; 0x64
 8007a58:	9300      	str	r3, [sp, #0]
 8007a5a:	9a07      	ldr	r2, [sp, #28]
 8007a5c:	6827      	ldr	r7, [r4, #0]
 8007a5e:	462b      	mov	r3, r5
 8007a60:	4641      	mov	r1, r8
 8007a62:	f000 fa53 	bl	8007f0c <rmw_create_publisher>
 8007a66:	6823      	ldr	r3, [r4, #0]
 8007a68:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4
 8007a6c:	f8d3 00c4 	ldr.w	r0, [r3, #196]	; 0xc4
 8007a70:	b370      	cbz	r0, 8007ad0 <rcl_publisher_init+0x108>
 8007a72:	f103 0170 	add.w	r1, r3, #112	; 0x70
 8007a76:	f000 fb27 	bl	80080c8 <rmw_publisher_get_actual_qos>
 8007a7a:	6823      	ldr	r3, [r4, #0]
 8007a7c:	4607      	mov	r7, r0
 8007a7e:	b9d0      	cbnz	r0, 8007ab6 <rcl_publisher_init+0xee>
 8007a80:	f895 2048 	ldrb.w	r2, [r5, #72]	; 0x48
 8007a84:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
 8007a88:	4629      	mov	r1, r5
 8007a8a:	2270      	movs	r2, #112	; 0x70
 8007a8c:	4618      	mov	r0, r3
 8007a8e:	f008 ff33 	bl	80108f8 <memcpy>
 8007a92:	6832      	ldr	r2, [r6, #0]
 8007a94:	f8c0 20c0 	str.w	r2, [r0, #192]	; 0xc0
 8007a98:	9807      	ldr	r0, [sp, #28]
 8007a9a:	6d6b      	ldr	r3, [r5, #84]	; 0x54
 8007a9c:	6e29      	ldr	r1, [r5, #96]	; 0x60
 8007a9e:	4798      	blx	r3
 8007aa0:	4638      	mov	r0, r7
 8007aa2:	b008      	add	sp, #32
 8007aa4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007aa8:	270b      	movs	r7, #11
 8007aaa:	4638      	mov	r0, r7
 8007aac:	b008      	add	sp, #32
 8007aae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007ab2:	27c8      	movs	r7, #200	; 0xc8
 8007ab4:	e7a1      	b.n	80079fa <rcl_publisher_init+0x32>
 8007ab6:	b18b      	cbz	r3, 8007adc <rcl_publisher_init+0x114>
 8007ab8:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 8007abc:	b142      	cbz	r2, 8007ad0 <rcl_publisher_init+0x108>
 8007abe:	4630      	mov	r0, r6
 8007ac0:	f004 ff7c 	bl	800c9bc <rcl_node_get_rmw_handle>
 8007ac4:	6823      	ldr	r3, [r4, #0]
 8007ac6:	f8d3 10c4 	ldr.w	r1, [r3, #196]	; 0xc4
 8007aca:	f000 fb0d 	bl	80080e8 <rmw_destroy_publisher>
 8007ace:	6823      	ldr	r3, [r4, #0]
 8007ad0:	6d6a      	ldr	r2, [r5, #84]	; 0x54
 8007ad2:	6e29      	ldr	r1, [r5, #96]	; 0x60
 8007ad4:	4618      	mov	r0, r3
 8007ad6:	4790      	blx	r2
 8007ad8:	2300      	movs	r3, #0
 8007ada:	6023      	str	r3, [r4, #0]
 8007adc:	2701      	movs	r7, #1
 8007ade:	e7db      	b.n	8007a98 <rcl_publisher_init+0xd0>
 8007ae0:	2867      	cmp	r0, #103	; 0x67
 8007ae2:	d0d9      	beq.n	8007a98 <rcl_publisher_init+0xd0>
 8007ae4:	2869      	cmp	r0, #105	; 0x69
 8007ae6:	d003      	beq.n	8007af0 <rcl_publisher_init+0x128>
 8007ae8:	280a      	cmp	r0, #10
 8007aea:	d1f7      	bne.n	8007adc <rcl_publisher_init+0x114>
 8007aec:	270a      	movs	r7, #10
 8007aee:	e7d3      	b.n	8007a98 <rcl_publisher_init+0xd0>
 8007af0:	2767      	movs	r7, #103	; 0x67
 8007af2:	e7d1      	b.n	8007a98 <rcl_publisher_init+0xd0>

08007af4 <rcl_publisher_get_default_options>:
 8007af4:	b570      	push	{r4, r5, r6, lr}
 8007af6:	4d14      	ldr	r5, [pc, #80]	; (8007b48 <rcl_publisher_get_default_options+0x54>)
 8007af8:	4914      	ldr	r1, [pc, #80]	; (8007b4c <rcl_publisher_get_default_options+0x58>)
 8007afa:	b088      	sub	sp, #32
 8007afc:	4604      	mov	r4, r0
 8007afe:	2250      	movs	r2, #80	; 0x50
 8007b00:	4628      	mov	r0, r5
 8007b02:	f008 fef9 	bl	80108f8 <memcpy>
 8007b06:	a802      	add	r0, sp, #8
 8007b08:	f000 f934 	bl	8007d74 <rcutils_get_default_allocator>
 8007b0c:	f10d 0c08 	add.w	ip, sp, #8
 8007b10:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8007b14:	f105 0e50 	add.w	lr, r5, #80	; 0x50
 8007b18:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8007b1c:	466e      	mov	r6, sp
 8007b1e:	f8dc 3000 	ldr.w	r3, [ip]
 8007b22:	f8ce 3000 	str.w	r3, [lr]
 8007b26:	4630      	mov	r0, r6
 8007b28:	f000 f972 	bl	8007e10 <rmw_get_default_publisher_options>
 8007b2c:	e896 0003 	ldmia.w	r6, {r0, r1}
 8007b30:	f105 0364 	add.w	r3, r5, #100	; 0x64
 8007b34:	e883 0003 	stmia.w	r3, {r0, r1}
 8007b38:	2270      	movs	r2, #112	; 0x70
 8007b3a:	4629      	mov	r1, r5
 8007b3c:	4620      	mov	r0, r4
 8007b3e:	f008 fedb 	bl	80108f8 <memcpy>
 8007b42:	4620      	mov	r0, r4
 8007b44:	b008      	add	sp, #32
 8007b46:	bd70      	pop	{r4, r5, r6, pc}
 8007b48:	20009110 	.word	0x20009110
 8007b4c:	08011ff8 	.word	0x08011ff8

08007b50 <rcl_publish>:
 8007b50:	b1f8      	cbz	r0, 8007b92 <rcl_publish+0x42>
 8007b52:	6803      	ldr	r3, [r0, #0]
 8007b54:	b570      	push	{r4, r5, r6, lr}
 8007b56:	4604      	mov	r4, r0
 8007b58:	b1b3      	cbz	r3, 8007b88 <rcl_publish+0x38>
 8007b5a:	4616      	mov	r6, r2
 8007b5c:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 8007b60:	b192      	cbz	r2, 8007b88 <rcl_publish+0x38>
 8007b62:	f8d3 00c0 	ldr.w	r0, [r3, #192]	; 0xc0
 8007b66:	460d      	mov	r5, r1
 8007b68:	f004 fb2c 	bl	800c1c4 <rcl_context_is_valid>
 8007b6c:	b160      	cbz	r0, 8007b88 <rcl_publish+0x38>
 8007b6e:	6823      	ldr	r3, [r4, #0]
 8007b70:	f8d3 00c4 	ldr.w	r0, [r3, #196]	; 0xc4
 8007b74:	b140      	cbz	r0, 8007b88 <rcl_publish+0x38>
 8007b76:	b155      	cbz	r5, 8007b8e <rcl_publish+0x3e>
 8007b78:	4632      	mov	r2, r6
 8007b7a:	4629      	mov	r1, r5
 8007b7c:	f000 f966 	bl	8007e4c <rmw_publish>
 8007b80:	3800      	subs	r0, #0
 8007b82:	bf18      	it	ne
 8007b84:	2001      	movne	r0, #1
 8007b86:	bd70      	pop	{r4, r5, r6, pc}
 8007b88:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8007b8c:	bd70      	pop	{r4, r5, r6, pc}
 8007b8e:	200b      	movs	r0, #11
 8007b90:	bd70      	pop	{r4, r5, r6, pc}
 8007b92:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8007b96:	4770      	bx	lr

08007b98 <rclc_support_init>:
 8007b98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007b9c:	b086      	sub	sp, #24
 8007b9e:	b3b8      	cbz	r0, 8007c10 <rclc_support_init+0x78>
 8007ba0:	461c      	mov	r4, r3
 8007ba2:	b3ab      	cbz	r3, 8007c10 <rclc_support_init+0x78>
 8007ba4:	460f      	mov	r7, r1
 8007ba6:	4690      	mov	r8, r2
 8007ba8:	4606      	mov	r6, r0
 8007baa:	f004 fc75 	bl	800c498 <rcl_get_zero_initialized_init_options>
 8007bae:	f104 030c 	add.w	r3, r4, #12
 8007bb2:	9005      	str	r0, [sp, #20]
 8007bb4:	e893 0003 	ldmia.w	r3, {r0, r1}
 8007bb8:	e88d 0003 	stmia.w	sp, {r0, r1}
 8007bbc:	a805      	add	r0, sp, #20
 8007bbe:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8007bc2:	f004 fc6b 	bl	800c49c <rcl_init_options_init>
 8007bc6:	4605      	mov	r5, r0
 8007bc8:	b9e0      	cbnz	r0, 8007c04 <rclc_support_init+0x6c>
 8007bca:	ad02      	add	r5, sp, #8
 8007bcc:	4628      	mov	r0, r5
 8007bce:	f004 faef 	bl	800c1b0 <rcl_get_zero_initialized_context>
 8007bd2:	e895 0003 	ldmia.w	r5, {r0, r1}
 8007bd6:	4633      	mov	r3, r6
 8007bd8:	e886 0003 	stmia.w	r6, {r0, r1}
 8007bdc:	aa05      	add	r2, sp, #20
 8007bde:	4641      	mov	r1, r8
 8007be0:	4638      	mov	r0, r7
 8007be2:	f004 fb55 	bl	800c290 <rcl_init>
 8007be6:	4605      	mov	r5, r0
 8007be8:	b9b8      	cbnz	r0, 8007c1a <rclc_support_init+0x82>
 8007bea:	60b4      	str	r4, [r6, #8]
 8007bec:	4622      	mov	r2, r4
 8007bee:	f106 010c 	add.w	r1, r6, #12
 8007bf2:	2003      	movs	r0, #3
 8007bf4:	f005 f8d0 	bl	800cd98 <rcl_clock_init>
 8007bf8:	4605      	mov	r5, r0
 8007bfa:	b970      	cbnz	r0, 8007c1a <rclc_support_init+0x82>
 8007bfc:	a805      	add	r0, sp, #20
 8007bfe:	f004 fcb3 	bl	800c568 <rcl_init_options_fini>
 8007c02:	b108      	cbz	r0, 8007c08 <rclc_support_init+0x70>
 8007c04:	f000 f8e8 	bl	8007dd8 <rcutils_reset_error>
 8007c08:	4628      	mov	r0, r5
 8007c0a:	b006      	add	sp, #24
 8007c0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007c10:	250b      	movs	r5, #11
 8007c12:	4628      	mov	r0, r5
 8007c14:	b006      	add	sp, #24
 8007c16:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007c1a:	f000 f8dd 	bl	8007dd8 <rcutils_reset_error>
 8007c1e:	a805      	add	r0, sp, #20
 8007c20:	f004 fca2 	bl	800c568 <rcl_init_options_fini>
 8007c24:	2800      	cmp	r0, #0
 8007c26:	d0ef      	beq.n	8007c08 <rclc_support_init+0x70>
 8007c28:	e7ec      	b.n	8007c04 <rclc_support_init+0x6c>
 8007c2a:	bf00      	nop

08007c2c <rclc_node_init_default>:
 8007c2c:	b3b8      	cbz	r0, 8007c9e <rclc_node_init_default+0x72>
 8007c2e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007c32:	460d      	mov	r5, r1
 8007c34:	b0a1      	sub	sp, #132	; 0x84
 8007c36:	b329      	cbz	r1, 8007c84 <rclc_node_init_default+0x58>
 8007c38:	4616      	mov	r6, r2
 8007c3a:	b31a      	cbz	r2, 8007c84 <rclc_node_init_default+0x58>
 8007c3c:	461f      	mov	r7, r3
 8007c3e:	b30b      	cbz	r3, 8007c84 <rclc_node_init_default+0x58>
 8007c40:	f10d 0810 	add.w	r8, sp, #16
 8007c44:	4604      	mov	r4, r0
 8007c46:	4640      	mov	r0, r8
 8007c48:	f004 fd46 	bl	800c6d8 <rcl_get_zero_initialized_node>
 8007c4c:	e898 0003 	ldmia.w	r8, {r0, r1}
 8007c50:	f10d 0918 	add.w	r9, sp, #24
 8007c54:	e884 0003 	stmia.w	r4, {r0, r1}
 8007c58:	4648      	mov	r0, r9
 8007c5a:	f004 feb5 	bl	800c9c8 <rcl_node_get_default_options>
 8007c5e:	4640      	mov	r0, r8
 8007c60:	f004 fd3a 	bl	800c6d8 <rcl_get_zero_initialized_node>
 8007c64:	f8cd 9000 	str.w	r9, [sp]
 8007c68:	e898 0003 	ldmia.w	r8, {r0, r1}
 8007c6c:	463b      	mov	r3, r7
 8007c6e:	e884 0003 	stmia.w	r4, {r0, r1}
 8007c72:	4632      	mov	r2, r6
 8007c74:	4629      	mov	r1, r5
 8007c76:	4620      	mov	r0, r4
 8007c78:	f004 fd38 	bl	800c6ec <rcl_node_init>
 8007c7c:	b930      	cbnz	r0, 8007c8c <rclc_node_init_default+0x60>
 8007c7e:	b021      	add	sp, #132	; 0x84
 8007c80:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007c84:	200b      	movs	r0, #11
 8007c86:	b021      	add	sp, #132	; 0x84
 8007c88:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007c8c:	9003      	str	r0, [sp, #12]
 8007c8e:	f000 f8a3 	bl	8007dd8 <rcutils_reset_error>
 8007c92:	f000 f8a1 	bl	8007dd8 <rcutils_reset_error>
 8007c96:	9803      	ldr	r0, [sp, #12]
 8007c98:	b021      	add	sp, #132	; 0x84
 8007c9a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007c9e:	200b      	movs	r0, #11
 8007ca0:	4770      	bx	lr
 8007ca2:	bf00      	nop

08007ca4 <rclc_publisher_init_default>:
 8007ca4:	b368      	cbz	r0, 8007d02 <rclc_publisher_init_default+0x5e>
 8007ca6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007caa:	460d      	mov	r5, r1
 8007cac:	b0a0      	sub	sp, #128	; 0x80
 8007cae:	b321      	cbz	r1, 8007cfa <rclc_publisher_init_default+0x56>
 8007cb0:	4616      	mov	r6, r2
 8007cb2:	b312      	cbz	r2, 8007cfa <rclc_publisher_init_default+0x56>
 8007cb4:	461f      	mov	r7, r3
 8007cb6:	b303      	cbz	r3, 8007cfa <rclc_publisher_init_default+0x56>
 8007cb8:	4604      	mov	r4, r0
 8007cba:	f7ff fe7f 	bl	80079bc <rcl_get_zero_initialized_publisher>
 8007cbe:	f10d 0810 	add.w	r8, sp, #16
 8007cc2:	6020      	str	r0, [r4, #0]
 8007cc4:	4640      	mov	r0, r8
 8007cc6:	f7ff ff15 	bl	8007af4 <rcl_publisher_get_default_options>
 8007cca:	490f      	ldr	r1, [pc, #60]	; (8007d08 <rclc_publisher_init_default+0x64>)
 8007ccc:	2250      	movs	r2, #80	; 0x50
 8007cce:	4640      	mov	r0, r8
 8007cd0:	f008 fe12 	bl	80108f8 <memcpy>
 8007cd4:	f8cd 8000 	str.w	r8, [sp]
 8007cd8:	463b      	mov	r3, r7
 8007cda:	4632      	mov	r2, r6
 8007cdc:	4629      	mov	r1, r5
 8007cde:	4620      	mov	r0, r4
 8007ce0:	f7ff fe72 	bl	80079c8 <rcl_publisher_init>
 8007ce4:	b910      	cbnz	r0, 8007cec <rclc_publisher_init_default+0x48>
 8007ce6:	b020      	add	sp, #128	; 0x80
 8007ce8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007cec:	9003      	str	r0, [sp, #12]
 8007cee:	f000 f873 	bl	8007dd8 <rcutils_reset_error>
 8007cf2:	9803      	ldr	r0, [sp, #12]
 8007cf4:	b020      	add	sp, #128	; 0x80
 8007cf6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007cfa:	200b      	movs	r0, #11
 8007cfc:	b020      	add	sp, #128	; 0x80
 8007cfe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007d02:	200b      	movs	r0, #11
 8007d04:	4770      	bx	lr
 8007d06:	bf00      	nop
 8007d08:	08012048 	.word	0x08012048

08007d0c <__default_zero_allocate>:
 8007d0c:	f008 bc70 	b.w	80105f0 <calloc>

08007d10 <__default_reallocate>:
 8007d10:	f008 bf82 	b.w	8010c18 <realloc>

08007d14 <__default_deallocate>:
 8007d14:	f008 bde8 	b.w	80108e8 <free>

08007d18 <__default_allocate>:
 8007d18:	f008 bdde 	b.w	80108d8 <malloc>

08007d1c <rcutils_get_zero_initialized_allocator>:
 8007d1c:	b510      	push	{r4, lr}
 8007d1e:	4c05      	ldr	r4, [pc, #20]	; (8007d34 <rcutils_get_zero_initialized_allocator+0x18>)
 8007d20:	4686      	mov	lr, r0
 8007d22:	4684      	mov	ip, r0
 8007d24:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007d26:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8007d2a:	6823      	ldr	r3, [r4, #0]
 8007d2c:	f8cc 3000 	str.w	r3, [ip]
 8007d30:	4670      	mov	r0, lr
 8007d32:	bd10      	pop	{r4, pc}
 8007d34:	08012098 	.word	0x08012098

08007d38 <rcutils_set_default_allocator>:
 8007d38:	b1a8      	cbz	r0, 8007d66 <rcutils_set_default_allocator+0x2e>
 8007d3a:	6802      	ldr	r2, [r0, #0]
 8007d3c:	b1a2      	cbz	r2, 8007d68 <rcutils_set_default_allocator+0x30>
 8007d3e:	6841      	ldr	r1, [r0, #4]
 8007d40:	b1a1      	cbz	r1, 8007d6c <rcutils_set_default_allocator+0x34>
 8007d42:	b410      	push	{r4}
 8007d44:	68c4      	ldr	r4, [r0, #12]
 8007d46:	b164      	cbz	r4, 8007d62 <rcutils_set_default_allocator+0x2a>
 8007d48:	6880      	ldr	r0, [r0, #8]
 8007d4a:	b138      	cbz	r0, 8007d5c <rcutils_set_default_allocator+0x24>
 8007d4c:	4b08      	ldr	r3, [pc, #32]	; (8007d70 <rcutils_set_default_allocator+0x38>)
 8007d4e:	601a      	str	r2, [r3, #0]
 8007d50:	2200      	movs	r2, #0
 8007d52:	e9c3 4203 	strd	r4, r2, [r3, #12]
 8007d56:	e9c3 1001 	strd	r1, r0, [r3, #4]
 8007d5a:	2001      	movs	r0, #1
 8007d5c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007d60:	4770      	bx	lr
 8007d62:	4620      	mov	r0, r4
 8007d64:	e7fa      	b.n	8007d5c <rcutils_set_default_allocator+0x24>
 8007d66:	4770      	bx	lr
 8007d68:	4610      	mov	r0, r2
 8007d6a:	4770      	bx	lr
 8007d6c:	4608      	mov	r0, r1
 8007d6e:	4770      	bx	lr
 8007d70:	20000014 	.word	0x20000014

08007d74 <rcutils_get_default_allocator>:
 8007d74:	b510      	push	{r4, lr}
 8007d76:	4c05      	ldr	r4, [pc, #20]	; (8007d8c <rcutils_get_default_allocator+0x18>)
 8007d78:	4686      	mov	lr, r0
 8007d7a:	4684      	mov	ip, r0
 8007d7c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007d7e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8007d82:	6823      	ldr	r3, [r4, #0]
 8007d84:	f8cc 3000 	str.w	r3, [ip]
 8007d88:	4670      	mov	r0, lr
 8007d8a:	bd10      	pop	{r4, pc}
 8007d8c:	20000014 	.word	0x20000014

08007d90 <rcutils_allocator_is_valid>:
 8007d90:	b158      	cbz	r0, 8007daa <rcutils_allocator_is_valid+0x1a>
 8007d92:	6803      	ldr	r3, [r0, #0]
 8007d94:	b143      	cbz	r3, 8007da8 <rcutils_allocator_is_valid+0x18>
 8007d96:	6843      	ldr	r3, [r0, #4]
 8007d98:	b133      	cbz	r3, 8007da8 <rcutils_allocator_is_valid+0x18>
 8007d9a:	68c3      	ldr	r3, [r0, #12]
 8007d9c:	b123      	cbz	r3, 8007da8 <rcutils_allocator_is_valid+0x18>
 8007d9e:	6880      	ldr	r0, [r0, #8]
 8007da0:	3800      	subs	r0, #0
 8007da2:	bf18      	it	ne
 8007da4:	2001      	movne	r0, #1
 8007da6:	4770      	bx	lr
 8007da8:	4618      	mov	r0, r3
 8007daa:	4770      	bx	lr

08007dac <rcutils_get_error_string>:
 8007dac:	4b06      	ldr	r3, [pc, #24]	; (8007dc8 <rcutils_get_error_string+0x1c>)
 8007dae:	781b      	ldrb	r3, [r3, #0]
 8007db0:	b13b      	cbz	r3, 8007dc2 <rcutils_get_error_string+0x16>
 8007db2:	4b06      	ldr	r3, [pc, #24]	; (8007dcc <rcutils_get_error_string+0x20>)
 8007db4:	781a      	ldrb	r2, [r3, #0]
 8007db6:	b90a      	cbnz	r2, 8007dbc <rcutils_get_error_string+0x10>
 8007db8:	2201      	movs	r2, #1
 8007dba:	701a      	strb	r2, [r3, #0]
 8007dbc:	4b04      	ldr	r3, [pc, #16]	; (8007dd0 <rcutils_get_error_string+0x24>)
 8007dbe:	7818      	ldrb	r0, [r3, #0]
 8007dc0:	4770      	bx	lr
 8007dc2:	4b04      	ldr	r3, [pc, #16]	; (8007dd4 <rcutils_get_error_string+0x28>)
 8007dc4:	7818      	ldrb	r0, [r3, #0]
 8007dc6:	4770      	bx	lr
 8007dc8:	20009180 	.word	0x20009180
 8007dcc:	20009199 	.word	0x20009199
 8007dd0:	20009198 	.word	0x20009198
 8007dd4:	080120ac 	.word	0x080120ac

08007dd8 <rcutils_reset_error>:
 8007dd8:	ed9f 7b07 	vldr	d7, [pc, #28]	; 8007df8 <rcutils_reset_error+0x20>
 8007ddc:	4a08      	ldr	r2, [pc, #32]	; (8007e00 <rcutils_reset_error+0x28>)
 8007dde:	4809      	ldr	r0, [pc, #36]	; (8007e04 <rcutils_reset_error+0x2c>)
 8007de0:	4909      	ldr	r1, [pc, #36]	; (8007e08 <rcutils_reset_error+0x30>)
 8007de2:	2300      	movs	r3, #0
 8007de4:	8013      	strh	r3, [r2, #0]
 8007de6:	ed82 7b02 	vstr	d7, [r2, #8]
 8007dea:	4a08      	ldr	r2, [pc, #32]	; (8007e0c <rcutils_reset_error+0x34>)
 8007dec:	7003      	strb	r3, [r0, #0]
 8007dee:	700b      	strb	r3, [r1, #0]
 8007df0:	7013      	strb	r3, [r2, #0]
 8007df2:	4770      	bx	lr
 8007df4:	f3af 8000 	nop.w
	...
 8007e00:	20009188 	.word	0x20009188
 8007e04:	20009199 	.word	0x20009199
 8007e08:	20009198 	.word	0x20009198
 8007e0c:	20009180 	.word	0x20009180

08007e10 <rmw_get_default_publisher_options>:
 8007e10:	2200      	movs	r2, #0
 8007e12:	6002      	str	r2, [r0, #0]
 8007e14:	7102      	strb	r2, [r0, #4]
 8007e16:	4770      	bx	lr

08007e18 <rmw_uros_set_custom_transport>:
 8007e18:	b470      	push	{r4, r5, r6}
 8007e1a:	e9dd 5603 	ldrd	r5, r6, [sp, #12]
 8007e1e:	b162      	cbz	r2, 8007e3a <rmw_uros_set_custom_transport+0x22>
 8007e20:	b15b      	cbz	r3, 8007e3a <rmw_uros_set_custom_transport+0x22>
 8007e22:	b155      	cbz	r5, 8007e3a <rmw_uros_set_custom_transport+0x22>
 8007e24:	b14e      	cbz	r6, 8007e3a <rmw_uros_set_custom_transport+0x22>
 8007e26:	4c06      	ldr	r4, [pc, #24]	; (8007e40 <rmw_uros_set_custom_transport+0x28>)
 8007e28:	7020      	strb	r0, [r4, #0]
 8007e2a:	e9c4 1201 	strd	r1, r2, [r4, #4]
 8007e2e:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8007e32:	6166      	str	r6, [r4, #20]
 8007e34:	2000      	movs	r0, #0
 8007e36:	bc70      	pop	{r4, r5, r6}
 8007e38:	4770      	bx	lr
 8007e3a:	200b      	movs	r0, #11
 8007e3c:	bc70      	pop	{r4, r5, r6}
 8007e3e:	4770      	bx	lr
 8007e40:	2000919c 	.word	0x2000919c

08007e44 <flush_session>:
 8007e44:	6fc9      	ldr	r1, [r1, #124]	; 0x7c
 8007e46:	f002 bb3d 	b.w	800a4c4 <uxr_run_session_until_confirm_delivery>
 8007e4a:	bf00      	nop

08007e4c <rmw_publish>:
 8007e4c:	2800      	cmp	r0, #0
 8007e4e:	d053      	beq.n	8007ef8 <rmw_publish+0xac>
 8007e50:	b570      	push	{r4, r5, r6, lr}
 8007e52:	460d      	mov	r5, r1
 8007e54:	b08e      	sub	sp, #56	; 0x38
 8007e56:	2900      	cmp	r1, #0
 8007e58:	d04b      	beq.n	8007ef2 <rmw_publish+0xa6>
 8007e5a:	4604      	mov	r4, r0
 8007e5c:	6800      	ldr	r0, [r0, #0]
 8007e5e:	f000 fc47 	bl	80086f0 <is_uxrce_rmw_identifier_valid>
 8007e62:	2800      	cmp	r0, #0
 8007e64:	d045      	beq.n	8007ef2 <rmw_publish+0xa6>
 8007e66:	6866      	ldr	r6, [r4, #4]
 8007e68:	2e00      	cmp	r6, #0
 8007e6a:	d042      	beq.n	8007ef2 <rmw_publish+0xa6>
 8007e6c:	69b4      	ldr	r4, [r6, #24]
 8007e6e:	4628      	mov	r0, r5
 8007e70:	6923      	ldr	r3, [r4, #16]
 8007e72:	4798      	blx	r3
 8007e74:	69f3      	ldr	r3, [r6, #28]
 8007e76:	9005      	str	r0, [sp, #20]
 8007e78:	b113      	cbz	r3, 8007e80 <rmw_publish+0x34>
 8007e7a:	a805      	add	r0, sp, #20
 8007e7c:	4798      	blx	r3
 8007e7e:	9805      	ldr	r0, [sp, #20]
 8007e80:	f8d6 3080 	ldr.w	r3, [r6, #128]	; 0x80
 8007e84:	691b      	ldr	r3, [r3, #16]
 8007e86:	9000      	str	r0, [sp, #0]
 8007e88:	6972      	ldr	r2, [r6, #20]
 8007e8a:	6fb1      	ldr	r1, [r6, #120]	; 0x78
 8007e8c:	f503 7028 	add.w	r0, r3, #672	; 0x2a0
 8007e90:	ab06      	add	r3, sp, #24
 8007e92:	f003 f903 	bl	800b09c <uxr_prepare_output_stream>
 8007e96:	b1d8      	cbz	r0, 8007ed0 <rmw_publish+0x84>
 8007e98:	68a3      	ldr	r3, [r4, #8]
 8007e9a:	a906      	add	r1, sp, #24
 8007e9c:	4628      	mov	r0, r5
 8007e9e:	4798      	blx	r3
 8007ea0:	6a33      	ldr	r3, [r6, #32]
 8007ea2:	4604      	mov	r4, r0
 8007ea4:	b10b      	cbz	r3, 8007eaa <rmw_publish+0x5e>
 8007ea6:	a806      	add	r0, sp, #24
 8007ea8:	4798      	blx	r3
 8007eaa:	f896 307a 	ldrb.w	r3, [r6, #122]	; 0x7a
 8007eae:	2b01      	cmp	r3, #1
 8007eb0:	f8d6 3080 	ldr.w	r3, [r6, #128]	; 0x80
 8007eb4:	d022      	beq.n	8007efc <rmw_publish+0xb0>
 8007eb6:	6918      	ldr	r0, [r3, #16]
 8007eb8:	6ff1      	ldr	r1, [r6, #124]	; 0x7c
 8007eba:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8007ebe:	f002 fb01 	bl	800a4c4 <uxr_run_session_until_confirm_delivery>
 8007ec2:	4020      	ands	r0, r4
 8007ec4:	b2c4      	uxtb	r4, r0
 8007ec6:	f084 0001 	eor.w	r0, r4, #1
 8007eca:	b2c0      	uxtb	r0, r0
 8007ecc:	b00e      	add	sp, #56	; 0x38
 8007ece:	bd70      	pop	{r4, r5, r6, pc}
 8007ed0:	f8d6 3080 	ldr.w	r3, [r6, #128]	; 0x80
 8007ed4:	6918      	ldr	r0, [r3, #16]
 8007ed6:	9b05      	ldr	r3, [sp, #20]
 8007ed8:	9300      	str	r3, [sp, #0]
 8007eda:	4b0b      	ldr	r3, [pc, #44]	; (8007f08 <rmw_publish+0xbc>)
 8007edc:	9301      	str	r3, [sp, #4]
 8007ede:	9602      	str	r6, [sp, #8]
 8007ee0:	6972      	ldr	r2, [r6, #20]
 8007ee2:	6fb1      	ldr	r1, [r6, #120]	; 0x78
 8007ee4:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8007ee8:	ab06      	add	r3, sp, #24
 8007eea:	f003 f907 	bl	800b0fc <uxr_prepare_output_stream_fragmented>
 8007eee:	2800      	cmp	r0, #0
 8007ef0:	d1d2      	bne.n	8007e98 <rmw_publish+0x4c>
 8007ef2:	2001      	movs	r0, #1
 8007ef4:	b00e      	add	sp, #56	; 0x38
 8007ef6:	bd70      	pop	{r4, r5, r6, pc}
 8007ef8:	2001      	movs	r0, #1
 8007efa:	4770      	bx	lr
 8007efc:	6918      	ldr	r0, [r3, #16]
 8007efe:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8007f02:	f001 ff59 	bl	8009db8 <uxr_flash_output_streams>
 8007f06:	e7de      	b.n	8007ec6 <rmw_publish+0x7a>
 8007f08:	08007e45 	.word	0x08007e45

08007f0c <rmw_create_publisher>:
 8007f0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f10:	b087      	sub	sp, #28
 8007f12:	2800      	cmp	r0, #0
 8007f14:	f000 80cc 	beq.w	80080b0 <rmw_create_publisher+0x1a4>
 8007f18:	460e      	mov	r6, r1
 8007f1a:	2900      	cmp	r1, #0
 8007f1c:	f000 80c8 	beq.w	80080b0 <rmw_create_publisher+0x1a4>
 8007f20:	4604      	mov	r4, r0
 8007f22:	6800      	ldr	r0, [r0, #0]
 8007f24:	4615      	mov	r5, r2
 8007f26:	4698      	mov	r8, r3
 8007f28:	f000 fbe2 	bl	80086f0 <is_uxrce_rmw_identifier_valid>
 8007f2c:	2800      	cmp	r0, #0
 8007f2e:	f000 80bf 	beq.w	80080b0 <rmw_create_publisher+0x1a4>
 8007f32:	2d00      	cmp	r5, #0
 8007f34:	f000 80bc 	beq.w	80080b0 <rmw_create_publisher+0x1a4>
 8007f38:	782b      	ldrb	r3, [r5, #0]
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	f000 80b8 	beq.w	80080b0 <rmw_create_publisher+0x1a4>
 8007f40:	f1b8 0f00 	cmp.w	r8, #0
 8007f44:	f000 80b4 	beq.w	80080b0 <rmw_create_publisher+0x1a4>
 8007f48:	485c      	ldr	r0, [pc, #368]	; (80080bc <rmw_create_publisher+0x1b0>)
 8007f4a:	f8d4 9004 	ldr.w	r9, [r4, #4]
 8007f4e:	f005 fc9b 	bl	800d888 <get_memory>
 8007f52:	2800      	cmp	r0, #0
 8007f54:	f000 80ac 	beq.w	80080b0 <rmw_create_publisher+0x1a4>
 8007f58:	6884      	ldr	r4, [r0, #8]
 8007f5a:	f8c4 4088 	str.w	r4, [r4, #136]	; 0x88
 8007f5e:	f005 fcb7 	bl	800d8d0 <rmw_get_implementation_identifier>
 8007f62:	f104 0a9c 	add.w	sl, r4, #156	; 0x9c
 8007f66:	f8c4 0084 	str.w	r0, [r4, #132]	; 0x84
 8007f6a:	f8c4 a08c 	str.w	sl, [r4, #140]	; 0x8c
 8007f6e:	4628      	mov	r0, r5
 8007f70:	f7f8 f958 	bl	8000224 <strlen>
 8007f74:	3001      	adds	r0, #1
 8007f76:	283c      	cmp	r0, #60	; 0x3c
 8007f78:	f104 0784 	add.w	r7, r4, #132	; 0x84
 8007f7c:	f200 8091 	bhi.w	80080a2 <rmw_create_publisher+0x196>
 8007f80:	4a4f      	ldr	r2, [pc, #316]	; (80080c0 <rmw_create_publisher+0x1b4>)
 8007f82:	462b      	mov	r3, r5
 8007f84:	213c      	movs	r1, #60	; 0x3c
 8007f86:	4650      	mov	r0, sl
 8007f88:	f008 fec8 	bl	8010d1c <sniprintf>
 8007f8c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007f90:	67e3      	str	r3, [r4, #124]	; 0x7c
 8007f92:	4641      	mov	r1, r8
 8007f94:	f8c4 9080 	str.w	r9, [r4, #128]	; 0x80
 8007f98:	2250      	movs	r2, #80	; 0x50
 8007f9a:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8007f9e:	f008 fcab 	bl	80108f8 <memcpy>
 8007fa2:	f898 3008 	ldrb.w	r3, [r8, #8]
 8007fa6:	4947      	ldr	r1, [pc, #284]	; (80080c4 <rmw_create_publisher+0x1b8>)
 8007fa8:	2b02      	cmp	r3, #2
 8007faa:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007fae:	bf0c      	ite	eq
 8007fb0:	f8d3 337c 	ldreq.w	r3, [r3, #892]	; 0x37c
 8007fb4:	f8d3 3378 	ldrne.w	r3, [r3, #888]	; 0x378
 8007fb8:	67a3      	str	r3, [r4, #120]	; 0x78
 8007fba:	2300      	movs	r3, #0
 8007fbc:	e9c4 3307 	strd	r3, r3, [r4, #28]
 8007fc0:	4630      	mov	r0, r6
 8007fc2:	f000 fba3 	bl	800870c <get_message_typesupport_handle>
 8007fc6:	2800      	cmp	r0, #0
 8007fc8:	d06b      	beq.n	80080a2 <rmw_create_publisher+0x196>
 8007fca:	6842      	ldr	r2, [r0, #4]
 8007fcc:	61a2      	str	r2, [r4, #24]
 8007fce:	2a00      	cmp	r2, #0
 8007fd0:	d067      	beq.n	80080a2 <rmw_create_publisher+0x196>
 8007fd2:	4629      	mov	r1, r5
 8007fd4:	4643      	mov	r3, r8
 8007fd6:	4648      	mov	r0, r9
 8007fd8:	f005 fee0 	bl	800dd9c <create_topic>
 8007fdc:	6260      	str	r0, [r4, #36]	; 0x24
 8007fde:	2800      	cmp	r0, #0
 8007fe0:	d063      	beq.n	80080aa <rmw_create_publisher+0x19e>
 8007fe2:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007fe6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007fea:	2103      	movs	r1, #3
 8007fec:	f8b3 0598 	ldrh.w	r0, [r3, #1432]	; 0x598
 8007ff0:	1c42      	adds	r2, r0, #1
 8007ff2:	f8a3 2598 	strh.w	r2, [r3, #1432]	; 0x598
 8007ff6:	f001 fd91 	bl	8009b1c <uxr_object_id>
 8007ffa:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
 8007ffe:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008002:	6120      	str	r0, [r4, #16]
 8008004:	f8d3 3384 	ldr.w	r3, [r3, #900]	; 0x384
 8008008:	6910      	ldr	r0, [r2, #16]
 800800a:	2506      	movs	r5, #6
 800800c:	9500      	str	r5, [sp, #0]
 800800e:	6819      	ldr	r1, [r3, #0]
 8008010:	6922      	ldr	r2, [r4, #16]
 8008012:	f8d9 3014 	ldr.w	r3, [r9, #20]
 8008016:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800801a:	f001 fcd9 	bl	80099d0 <uxr_buffer_create_publisher_bin>
 800801e:	4602      	mov	r2, r0
 8008020:	f8d9 0010 	ldr.w	r0, [r9, #16]
 8008024:	f8d0 338c 	ldr.w	r3, [r0, #908]	; 0x38c
 8008028:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 800802c:	f000 fae0 	bl	80085f0 <run_xrce_session>
 8008030:	b3b8      	cbz	r0, 80080a2 <rmw_create_publisher+0x196>
 8008032:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008036:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800803a:	2105      	movs	r1, #5
 800803c:	f8b3 059a 	ldrh.w	r0, [r3, #1434]	; 0x59a
 8008040:	1c42      	adds	r2, r0, #1
 8008042:	f8a3 259a 	strh.w	r2, [r3, #1434]	; 0x59a
 8008046:	f001 fd69 	bl	8009b1c <uxr_object_id>
 800804a:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 800804e:	6160      	str	r0, [r4, #20]
 8008050:	691e      	ldr	r6, [r3, #16]
 8008052:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008056:	f8d4 b024 	ldr.w	fp, [r4, #36]	; 0x24
 800805a:	f10d 0a10 	add.w	sl, sp, #16
 800805e:	4641      	mov	r1, r8
 8008060:	4650      	mov	r0, sl
 8008062:	f8d3 8384 	ldr.w	r8, [r3, #900]	; 0x384
 8008066:	f000 fadf 	bl	8008628 <convert_qos_profile>
 800806a:	9503      	str	r5, [sp, #12]
 800806c:	e89a 0003 	ldmia.w	sl, {r0, r1}
 8008070:	9001      	str	r0, [sp, #4]
 8008072:	f8ad 1008 	strh.w	r1, [sp, #8]
 8008076:	f8db 3010 	ldr.w	r3, [fp, #16]
 800807a:	9300      	str	r3, [sp, #0]
 800807c:	f506 7628 	add.w	r6, r6, #672	; 0x2a0
 8008080:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 8008084:	f8d8 1000 	ldr.w	r1, [r8]
 8008088:	4630      	mov	r0, r6
 800808a:	f001 fcd1 	bl	8009a30 <uxr_buffer_create_datawriter_bin>
 800808e:	4602      	mov	r2, r0
 8008090:	f8d9 0010 	ldr.w	r0, [r9, #16]
 8008094:	f8d0 338c 	ldr.w	r3, [r0, #908]	; 0x38c
 8008098:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 800809c:	f000 faa8 	bl	80085f0 <run_xrce_session>
 80080a0:	b938      	cbnz	r0, 80080b2 <rmw_create_publisher+0x1a6>
 80080a2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80080a4:	b108      	cbz	r0, 80080aa <rmw_create_publisher+0x19e>
 80080a6:	f000 fa47 	bl	8008538 <rmw_uxrce_fini_topic_memory>
 80080aa:	4638      	mov	r0, r7
 80080ac:	f000 f9ec 	bl	8008488 <rmw_uxrce_fini_publisher_memory>
 80080b0:	2700      	movs	r7, #0
 80080b2:	4638      	mov	r0, r7
 80080b4:	b007      	add	sp, #28
 80080b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80080ba:	bf00      	nop
 80080bc:	2000da94 	.word	0x2000da94
 80080c0:	080120e4 	.word	0x080120e4
 80080c4:	080120b0 	.word	0x080120b0

080080c8 <rmw_publisher_get_actual_qos>:
 80080c8:	b150      	cbz	r0, 80080e0 <rmw_publisher_get_actual_qos+0x18>
 80080ca:	b508      	push	{r3, lr}
 80080cc:	460b      	mov	r3, r1
 80080ce:	b149      	cbz	r1, 80080e4 <rmw_publisher_get_actual_qos+0x1c>
 80080d0:	6841      	ldr	r1, [r0, #4]
 80080d2:	2250      	movs	r2, #80	; 0x50
 80080d4:	3128      	adds	r1, #40	; 0x28
 80080d6:	4618      	mov	r0, r3
 80080d8:	f008 fc0e 	bl	80108f8 <memcpy>
 80080dc:	2000      	movs	r0, #0
 80080de:	bd08      	pop	{r3, pc}
 80080e0:	200b      	movs	r0, #11
 80080e2:	4770      	bx	lr
 80080e4:	200b      	movs	r0, #11
 80080e6:	bd08      	pop	{r3, pc}

080080e8 <rmw_destroy_publisher>:
 80080e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80080ea:	b128      	cbz	r0, 80080f8 <rmw_destroy_publisher+0x10>
 80080ec:	4604      	mov	r4, r0
 80080ee:	6800      	ldr	r0, [r0, #0]
 80080f0:	460d      	mov	r5, r1
 80080f2:	f000 fafd 	bl	80086f0 <is_uxrce_rmw_identifier_valid>
 80080f6:	b910      	cbnz	r0, 80080fe <rmw_destroy_publisher+0x16>
 80080f8:	2401      	movs	r4, #1
 80080fa:	4620      	mov	r0, r4
 80080fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80080fe:	6863      	ldr	r3, [r4, #4]
 8008100:	2b00      	cmp	r3, #0
 8008102:	d0f9      	beq.n	80080f8 <rmw_destroy_publisher+0x10>
 8008104:	2d00      	cmp	r5, #0
 8008106:	d0f7      	beq.n	80080f8 <rmw_destroy_publisher+0x10>
 8008108:	6828      	ldr	r0, [r5, #0]
 800810a:	f000 faf1 	bl	80086f0 <is_uxrce_rmw_identifier_valid>
 800810e:	2800      	cmp	r0, #0
 8008110:	d0f2      	beq.n	80080f8 <rmw_destroy_publisher+0x10>
 8008112:	686c      	ldr	r4, [r5, #4]
 8008114:	2c00      	cmp	r4, #0
 8008116:	d0ef      	beq.n	80080f8 <rmw_destroy_publisher+0x10>
 8008118:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800811a:	f8d4 7080 	ldr.w	r7, [r4, #128]	; 0x80
 800811e:	f005 fe8d 	bl	800de3c <destroy_topic>
 8008122:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 8008126:	6962      	ldr	r2, [r4, #20]
 8008128:	6918      	ldr	r0, [r3, #16]
 800812a:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 800812e:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8008132:	6819      	ldr	r1, [r3, #0]
 8008134:	f001 fb98 	bl	8009868 <uxr_buffer_delete_entity>
 8008138:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 800813c:	6922      	ldr	r2, [r4, #16]
 800813e:	691b      	ldr	r3, [r3, #16]
 8008140:	f8d3 1388 	ldr.w	r1, [r3, #904]	; 0x388
 8008144:	4604      	mov	r4, r0
 8008146:	6809      	ldr	r1, [r1, #0]
 8008148:	f503 7028 	add.w	r0, r3, #672	; 0x2a0
 800814c:	f001 fb8c 	bl	8009868 <uxr_buffer_delete_entity>
 8008150:	693e      	ldr	r6, [r7, #16]
 8008152:	4622      	mov	r2, r4
 8008154:	f8d6 3390 	ldr.w	r3, [r6, #912]	; 0x390
 8008158:	f8d6 1388 	ldr.w	r1, [r6, #904]	; 0x388
 800815c:	4604      	mov	r4, r0
 800815e:	4630      	mov	r0, r6
 8008160:	f000 fa46 	bl	80085f0 <run_xrce_session>
 8008164:	693e      	ldr	r6, [r7, #16]
 8008166:	4622      	mov	r2, r4
 8008168:	f8d6 3390 	ldr.w	r3, [r6, #912]	; 0x390
 800816c:	f8d6 1388 	ldr.w	r1, [r6, #904]	; 0x388
 8008170:	4604      	mov	r4, r0
 8008172:	4630      	mov	r0, r6
 8008174:	f000 fa3c 	bl	80085f0 <run_xrce_session>
 8008178:	b12c      	cbz	r4, 8008186 <rmw_destroy_publisher+0x9e>
 800817a:	b120      	cbz	r0, 8008186 <rmw_destroy_publisher+0x9e>
 800817c:	2400      	movs	r4, #0
 800817e:	4628      	mov	r0, r5
 8008180:	f000 f982 	bl	8008488 <rmw_uxrce_fini_publisher_memory>
 8008184:	e7b9      	b.n	80080fa <rmw_destroy_publisher+0x12>
 8008186:	2402      	movs	r4, #2
 8008188:	e7f9      	b.n	800817e <rmw_destroy_publisher+0x96>
 800818a:	bf00      	nop

0800818c <rmw_uxrce_init_service_memory>:
 800818c:	b1e2      	cbz	r2, 80081c8 <rmw_uxrce_init_service_memory+0x3c>
 800818e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008192:	7b05      	ldrb	r5, [r0, #12]
 8008194:	4606      	mov	r6, r0
 8008196:	b9ad      	cbnz	r5, 80081c4 <rmw_uxrce_init_service_memory+0x38>
 8008198:	23c8      	movs	r3, #200	; 0xc8
 800819a:	e9c0 5500 	strd	r5, r5, [r0]
 800819e:	6083      	str	r3, [r0, #8]
 80081a0:	f240 1301 	movw	r3, #257	; 0x101
 80081a4:	4617      	mov	r7, r2
 80081a6:	8183      	strh	r3, [r0, #12]
 80081a8:	460c      	mov	r4, r1
 80081aa:	46a8      	mov	r8, r5
 80081ac:	4621      	mov	r1, r4
 80081ae:	4630      	mov	r0, r6
 80081b0:	3501      	adds	r5, #1
 80081b2:	f005 fb79 	bl	800d8a8 <put_memory>
 80081b6:	42af      	cmp	r7, r5
 80081b8:	60a4      	str	r4, [r4, #8]
 80081ba:	f884 800c 	strb.w	r8, [r4, #12]
 80081be:	f104 04c8 	add.w	r4, r4, #200	; 0xc8
 80081c2:	d1f3      	bne.n	80081ac <rmw_uxrce_init_service_memory+0x20>
 80081c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80081c8:	4770      	bx	lr
 80081ca:	bf00      	nop

080081cc <rmw_uxrce_init_client_memory>:
 80081cc:	b1e2      	cbz	r2, 8008208 <rmw_uxrce_init_client_memory+0x3c>
 80081ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80081d2:	7b05      	ldrb	r5, [r0, #12]
 80081d4:	4606      	mov	r6, r0
 80081d6:	b9ad      	cbnz	r5, 8008204 <rmw_uxrce_init_client_memory+0x38>
 80081d8:	23c8      	movs	r3, #200	; 0xc8
 80081da:	e9c0 5500 	strd	r5, r5, [r0]
 80081de:	6083      	str	r3, [r0, #8]
 80081e0:	f240 1301 	movw	r3, #257	; 0x101
 80081e4:	4617      	mov	r7, r2
 80081e6:	8183      	strh	r3, [r0, #12]
 80081e8:	460c      	mov	r4, r1
 80081ea:	46a8      	mov	r8, r5
 80081ec:	4621      	mov	r1, r4
 80081ee:	4630      	mov	r0, r6
 80081f0:	3501      	adds	r5, #1
 80081f2:	f005 fb59 	bl	800d8a8 <put_memory>
 80081f6:	42af      	cmp	r7, r5
 80081f8:	60a4      	str	r4, [r4, #8]
 80081fa:	f884 800c 	strb.w	r8, [r4, #12]
 80081fe:	f104 04c8 	add.w	r4, r4, #200	; 0xc8
 8008202:	d1f3      	bne.n	80081ec <rmw_uxrce_init_client_memory+0x20>
 8008204:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008208:	4770      	bx	lr
 800820a:	bf00      	nop

0800820c <rmw_uxrce_init_publisher_memory>:
 800820c:	b1e2      	cbz	r2, 8008248 <rmw_uxrce_init_publisher_memory+0x3c>
 800820e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008212:	7b05      	ldrb	r5, [r0, #12]
 8008214:	4606      	mov	r6, r0
 8008216:	b9ad      	cbnz	r5, 8008244 <rmw_uxrce_init_publisher_memory+0x38>
 8008218:	23d8      	movs	r3, #216	; 0xd8
 800821a:	e9c0 5500 	strd	r5, r5, [r0]
 800821e:	6083      	str	r3, [r0, #8]
 8008220:	f240 1301 	movw	r3, #257	; 0x101
 8008224:	4617      	mov	r7, r2
 8008226:	8183      	strh	r3, [r0, #12]
 8008228:	460c      	mov	r4, r1
 800822a:	46a8      	mov	r8, r5
 800822c:	4621      	mov	r1, r4
 800822e:	4630      	mov	r0, r6
 8008230:	3501      	adds	r5, #1
 8008232:	f005 fb39 	bl	800d8a8 <put_memory>
 8008236:	42af      	cmp	r7, r5
 8008238:	60a4      	str	r4, [r4, #8]
 800823a:	f884 800c 	strb.w	r8, [r4, #12]
 800823e:	f104 04d8 	add.w	r4, r4, #216	; 0xd8
 8008242:	d1f3      	bne.n	800822c <rmw_uxrce_init_publisher_memory+0x20>
 8008244:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008248:	4770      	bx	lr
 800824a:	bf00      	nop

0800824c <rmw_uxrce_init_subscription_memory>:
 800824c:	b1e2      	cbz	r2, 8008288 <rmw_uxrce_init_subscription_memory+0x3c>
 800824e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008252:	7b05      	ldrb	r5, [r0, #12]
 8008254:	4606      	mov	r6, r0
 8008256:	b9ad      	cbnz	r5, 8008284 <rmw_uxrce_init_subscription_memory+0x38>
 8008258:	23d8      	movs	r3, #216	; 0xd8
 800825a:	e9c0 5500 	strd	r5, r5, [r0]
 800825e:	6083      	str	r3, [r0, #8]
 8008260:	f240 1301 	movw	r3, #257	; 0x101
 8008264:	4617      	mov	r7, r2
 8008266:	8183      	strh	r3, [r0, #12]
 8008268:	460c      	mov	r4, r1
 800826a:	46a8      	mov	r8, r5
 800826c:	4621      	mov	r1, r4
 800826e:	4630      	mov	r0, r6
 8008270:	3501      	adds	r5, #1
 8008272:	f005 fb19 	bl	800d8a8 <put_memory>
 8008276:	42af      	cmp	r7, r5
 8008278:	60a4      	str	r4, [r4, #8]
 800827a:	f884 800c 	strb.w	r8, [r4, #12]
 800827e:	f104 04d8 	add.w	r4, r4, #216	; 0xd8
 8008282:	d1f3      	bne.n	800826c <rmw_uxrce_init_subscription_memory+0x20>
 8008284:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008288:	4770      	bx	lr
 800828a:	bf00      	nop

0800828c <rmw_uxrce_init_node_memory>:
 800828c:	b1e2      	cbz	r2, 80082c8 <rmw_uxrce_init_node_memory+0x3c>
 800828e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008292:	7b05      	ldrb	r5, [r0, #12]
 8008294:	4606      	mov	r6, r0
 8008296:	b9ad      	cbnz	r5, 80082c4 <rmw_uxrce_init_node_memory+0x38>
 8008298:	23a4      	movs	r3, #164	; 0xa4
 800829a:	e9c0 5500 	strd	r5, r5, [r0]
 800829e:	6083      	str	r3, [r0, #8]
 80082a0:	f240 1301 	movw	r3, #257	; 0x101
 80082a4:	4617      	mov	r7, r2
 80082a6:	8183      	strh	r3, [r0, #12]
 80082a8:	460c      	mov	r4, r1
 80082aa:	46a8      	mov	r8, r5
 80082ac:	4621      	mov	r1, r4
 80082ae:	4630      	mov	r0, r6
 80082b0:	3501      	adds	r5, #1
 80082b2:	f005 faf9 	bl	800d8a8 <put_memory>
 80082b6:	42af      	cmp	r7, r5
 80082b8:	60a4      	str	r4, [r4, #8]
 80082ba:	f884 800c 	strb.w	r8, [r4, #12]
 80082be:	f104 04a4 	add.w	r4, r4, #164	; 0xa4
 80082c2:	d1f3      	bne.n	80082ac <rmw_uxrce_init_node_memory+0x20>
 80082c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80082c8:	4770      	bx	lr
 80082ca:	bf00      	nop

080082cc <rmw_uxrce_init_session_memory>:
 80082cc:	b1ea      	cbz	r2, 800830a <rmw_uxrce_init_session_memory+0x3e>
 80082ce:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80082d2:	7b05      	ldrb	r5, [r0, #12]
 80082d4:	4606      	mov	r6, r0
 80082d6:	b9b5      	cbnz	r5, 8008306 <rmw_uxrce_init_session_memory+0x3a>
 80082d8:	e9c0 5500 	strd	r5, r5, [r0]
 80082dc:	f241 58a8 	movw	r8, #5544	; 0x15a8
 80082e0:	f240 1301 	movw	r3, #257	; 0x101
 80082e4:	4617      	mov	r7, r2
 80082e6:	f8c0 8008 	str.w	r8, [r0, #8]
 80082ea:	460c      	mov	r4, r1
 80082ec:	8183      	strh	r3, [r0, #12]
 80082ee:	46a9      	mov	r9, r5
 80082f0:	4621      	mov	r1, r4
 80082f2:	4630      	mov	r0, r6
 80082f4:	3501      	adds	r5, #1
 80082f6:	f005 fad7 	bl	800d8a8 <put_memory>
 80082fa:	42af      	cmp	r7, r5
 80082fc:	60a4      	str	r4, [r4, #8]
 80082fe:	f884 900c 	strb.w	r9, [r4, #12]
 8008302:	4444      	add	r4, r8
 8008304:	d1f4      	bne.n	80082f0 <rmw_uxrce_init_session_memory+0x24>
 8008306:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800830a:	4770      	bx	lr

0800830c <rmw_uxrce_init_topic_memory>:
 800830c:	b1e2      	cbz	r2, 8008348 <rmw_uxrce_init_topic_memory+0x3c>
 800830e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008312:	7b05      	ldrb	r5, [r0, #12]
 8008314:	4606      	mov	r6, r0
 8008316:	b9ad      	cbnz	r5, 8008344 <rmw_uxrce_init_topic_memory+0x38>
 8008318:	231c      	movs	r3, #28
 800831a:	e9c0 5500 	strd	r5, r5, [r0]
 800831e:	6083      	str	r3, [r0, #8]
 8008320:	f240 1301 	movw	r3, #257	; 0x101
 8008324:	4617      	mov	r7, r2
 8008326:	8183      	strh	r3, [r0, #12]
 8008328:	460c      	mov	r4, r1
 800832a:	46a8      	mov	r8, r5
 800832c:	4621      	mov	r1, r4
 800832e:	4630      	mov	r0, r6
 8008330:	3501      	adds	r5, #1
 8008332:	f005 fab9 	bl	800d8a8 <put_memory>
 8008336:	42af      	cmp	r7, r5
 8008338:	60a4      	str	r4, [r4, #8]
 800833a:	f884 800c 	strb.w	r8, [r4, #12]
 800833e:	f104 041c 	add.w	r4, r4, #28
 8008342:	d1f3      	bne.n	800832c <rmw_uxrce_init_topic_memory+0x20>
 8008344:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008348:	4770      	bx	lr
 800834a:	bf00      	nop

0800834c <rmw_uxrce_init_static_input_buffer_memory>:
 800834c:	b1ea      	cbz	r2, 800838a <rmw_uxrce_init_static_input_buffer_memory+0x3e>
 800834e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008352:	7b05      	ldrb	r5, [r0, #12]
 8008354:	4606      	mov	r6, r0
 8008356:	b9b5      	cbnz	r5, 8008386 <rmw_uxrce_init_static_input_buffer_memory+0x3a>
 8008358:	f44f 6304 	mov.w	r3, #2112	; 0x840
 800835c:	e9c0 5500 	strd	r5, r5, [r0]
 8008360:	6083      	str	r3, [r0, #8]
 8008362:	f240 1301 	movw	r3, #257	; 0x101
 8008366:	4617      	mov	r7, r2
 8008368:	8183      	strh	r3, [r0, #12]
 800836a:	460c      	mov	r4, r1
 800836c:	46a8      	mov	r8, r5
 800836e:	4621      	mov	r1, r4
 8008370:	4630      	mov	r0, r6
 8008372:	3501      	adds	r5, #1
 8008374:	f005 fa98 	bl	800d8a8 <put_memory>
 8008378:	42af      	cmp	r7, r5
 800837a:	60a4      	str	r4, [r4, #8]
 800837c:	f884 800c 	strb.w	r8, [r4, #12]
 8008380:	f504 6404 	add.w	r4, r4, #2112	; 0x840
 8008384:	d1f3      	bne.n	800836e <rmw_uxrce_init_static_input_buffer_memory+0x22>
 8008386:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800838a:	4770      	bx	lr

0800838c <rmw_uxrce_init_init_options_impl_memory>:
 800838c:	b1e2      	cbz	r2, 80083c8 <rmw_uxrce_init_init_options_impl_memory+0x3c>
 800838e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008392:	7b05      	ldrb	r5, [r0, #12]
 8008394:	4606      	mov	r6, r0
 8008396:	b9ad      	cbnz	r5, 80083c4 <rmw_uxrce_init_init_options_impl_memory+0x38>
 8008398:	232c      	movs	r3, #44	; 0x2c
 800839a:	e9c0 5500 	strd	r5, r5, [r0]
 800839e:	6083      	str	r3, [r0, #8]
 80083a0:	f240 1301 	movw	r3, #257	; 0x101
 80083a4:	4617      	mov	r7, r2
 80083a6:	8183      	strh	r3, [r0, #12]
 80083a8:	460c      	mov	r4, r1
 80083aa:	46a8      	mov	r8, r5
 80083ac:	4621      	mov	r1, r4
 80083ae:	4630      	mov	r0, r6
 80083b0:	3501      	adds	r5, #1
 80083b2:	f005 fa79 	bl	800d8a8 <put_memory>
 80083b6:	42af      	cmp	r7, r5
 80083b8:	60a4      	str	r4, [r4, #8]
 80083ba:	f884 800c 	strb.w	r8, [r4, #12]
 80083be:	f104 042c 	add.w	r4, r4, #44	; 0x2c
 80083c2:	d1f3      	bne.n	80083ac <rmw_uxrce_init_init_options_impl_memory+0x20>
 80083c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80083c8:	4770      	bx	lr
 80083ca:	bf00      	nop

080083cc <rmw_uxrce_init_wait_set_memory>:
 80083cc:	b1e2      	cbz	r2, 8008408 <rmw_uxrce_init_wait_set_memory+0x3c>
 80083ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80083d2:	7b05      	ldrb	r5, [r0, #12]
 80083d4:	4606      	mov	r6, r0
 80083d6:	b9ad      	cbnz	r5, 8008404 <rmw_uxrce_init_wait_set_memory+0x38>
 80083d8:	231c      	movs	r3, #28
 80083da:	e9c0 5500 	strd	r5, r5, [r0]
 80083de:	6083      	str	r3, [r0, #8]
 80083e0:	f240 1301 	movw	r3, #257	; 0x101
 80083e4:	4617      	mov	r7, r2
 80083e6:	8183      	strh	r3, [r0, #12]
 80083e8:	460c      	mov	r4, r1
 80083ea:	46a8      	mov	r8, r5
 80083ec:	4621      	mov	r1, r4
 80083ee:	4630      	mov	r0, r6
 80083f0:	3501      	adds	r5, #1
 80083f2:	f005 fa59 	bl	800d8a8 <put_memory>
 80083f6:	42af      	cmp	r7, r5
 80083f8:	60a4      	str	r4, [r4, #8]
 80083fa:	f884 800c 	strb.w	r8, [r4, #12]
 80083fe:	f104 041c 	add.w	r4, r4, #28
 8008402:	d1f3      	bne.n	80083ec <rmw_uxrce_init_wait_set_memory+0x20>
 8008404:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008408:	4770      	bx	lr
 800840a:	bf00      	nop

0800840c <rmw_uxrce_init_guard_condition_memory>:
 800840c:	b1e2      	cbz	r2, 8008448 <rmw_uxrce_init_guard_condition_memory+0x3c>
 800840e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008412:	7b05      	ldrb	r5, [r0, #12]
 8008414:	4606      	mov	r6, r0
 8008416:	b9ad      	cbnz	r5, 8008444 <rmw_uxrce_init_guard_condition_memory+0x38>
 8008418:	2320      	movs	r3, #32
 800841a:	e9c0 5500 	strd	r5, r5, [r0]
 800841e:	6083      	str	r3, [r0, #8]
 8008420:	f240 1301 	movw	r3, #257	; 0x101
 8008424:	4617      	mov	r7, r2
 8008426:	8183      	strh	r3, [r0, #12]
 8008428:	460c      	mov	r4, r1
 800842a:	46a8      	mov	r8, r5
 800842c:	4621      	mov	r1, r4
 800842e:	4630      	mov	r0, r6
 8008430:	3501      	adds	r5, #1
 8008432:	f005 fa39 	bl	800d8a8 <put_memory>
 8008436:	42af      	cmp	r7, r5
 8008438:	60a4      	str	r4, [r4, #8]
 800843a:	f884 800c 	strb.w	r8, [r4, #12]
 800843e:	f104 0420 	add.w	r4, r4, #32
 8008442:	d1f3      	bne.n	800842c <rmw_uxrce_init_guard_condition_memory+0x20>
 8008444:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008448:	4770      	bx	lr
 800844a:	bf00      	nop

0800844c <rmw_uxrce_fini_session_memory>:
 800844c:	4601      	mov	r1, r0
 800844e:	4801      	ldr	r0, [pc, #4]	; (8008454 <rmw_uxrce_fini_session_memory+0x8>)
 8008450:	f005 ba2a 	b.w	800d8a8 <put_memory>
 8008454:	2000dab4 	.word	0x2000dab4

08008458 <rmw_uxrce_fini_node_memory>:
 8008458:	b538      	push	{r3, r4, r5, lr}
 800845a:	4604      	mov	r4, r0
 800845c:	6800      	ldr	r0, [r0, #0]
 800845e:	b128      	cbz	r0, 800846c <rmw_uxrce_fini_node_memory+0x14>
 8008460:	4b07      	ldr	r3, [pc, #28]	; (8008480 <rmw_uxrce_fini_node_memory+0x28>)
 8008462:	6819      	ldr	r1, [r3, #0]
 8008464:	f7f7 fed4 	bl	8000210 <strcmp>
 8008468:	b940      	cbnz	r0, 800847c <rmw_uxrce_fini_node_memory+0x24>
 800846a:	6020      	str	r0, [r4, #0]
 800846c:	6861      	ldr	r1, [r4, #4]
 800846e:	b129      	cbz	r1, 800847c <rmw_uxrce_fini_node_memory+0x24>
 8008470:	2500      	movs	r5, #0
 8008472:	4804      	ldr	r0, [pc, #16]	; (8008484 <rmw_uxrce_fini_node_memory+0x2c>)
 8008474:	610d      	str	r5, [r1, #16]
 8008476:	f005 fa17 	bl	800d8a8 <put_memory>
 800847a:	6065      	str	r5, [r4, #4]
 800847c:	bd38      	pop	{r3, r4, r5, pc}
 800847e:	bf00      	nop
 8008480:	080126cc 	.word	0x080126cc
 8008484:	2000da84 	.word	0x2000da84

08008488 <rmw_uxrce_fini_publisher_memory>:
 8008488:	b510      	push	{r4, lr}
 800848a:	4604      	mov	r4, r0
 800848c:	6800      	ldr	r0, [r0, #0]
 800848e:	b128      	cbz	r0, 800849c <rmw_uxrce_fini_publisher_memory+0x14>
 8008490:	4b06      	ldr	r3, [pc, #24]	; (80084ac <rmw_uxrce_fini_publisher_memory+0x24>)
 8008492:	6819      	ldr	r1, [r3, #0]
 8008494:	f7f7 febc 	bl	8000210 <strcmp>
 8008498:	b938      	cbnz	r0, 80084aa <rmw_uxrce_fini_publisher_memory+0x22>
 800849a:	6020      	str	r0, [r4, #0]
 800849c:	6861      	ldr	r1, [r4, #4]
 800849e:	b121      	cbz	r1, 80084aa <rmw_uxrce_fini_publisher_memory+0x22>
 80084a0:	4803      	ldr	r0, [pc, #12]	; (80084b0 <rmw_uxrce_fini_publisher_memory+0x28>)
 80084a2:	f005 fa01 	bl	800d8a8 <put_memory>
 80084a6:	2300      	movs	r3, #0
 80084a8:	6063      	str	r3, [r4, #4]
 80084aa:	bd10      	pop	{r4, pc}
 80084ac:	080126cc 	.word	0x080126cc
 80084b0:	2000da94 	.word	0x2000da94

080084b4 <rmw_uxrce_fini_subscription_memory>:
 80084b4:	b510      	push	{r4, lr}
 80084b6:	4604      	mov	r4, r0
 80084b8:	6800      	ldr	r0, [r0, #0]
 80084ba:	b128      	cbz	r0, 80084c8 <rmw_uxrce_fini_subscription_memory+0x14>
 80084bc:	4b06      	ldr	r3, [pc, #24]	; (80084d8 <rmw_uxrce_fini_subscription_memory+0x24>)
 80084be:	6819      	ldr	r1, [r3, #0]
 80084c0:	f7f7 fea6 	bl	8000210 <strcmp>
 80084c4:	b938      	cbnz	r0, 80084d6 <rmw_uxrce_fini_subscription_memory+0x22>
 80084c6:	6020      	str	r0, [r4, #0]
 80084c8:	6861      	ldr	r1, [r4, #4]
 80084ca:	b121      	cbz	r1, 80084d6 <rmw_uxrce_fini_subscription_memory+0x22>
 80084cc:	4803      	ldr	r0, [pc, #12]	; (80084dc <rmw_uxrce_fini_subscription_memory+0x28>)
 80084ce:	f005 f9eb 	bl	800d8a8 <put_memory>
 80084d2:	2300      	movs	r3, #0
 80084d4:	6063      	str	r3, [r4, #4]
 80084d6:	bd10      	pop	{r4, pc}
 80084d8:	080126cc 	.word	0x080126cc
 80084dc:	2000dad4 	.word	0x2000dad4

080084e0 <rmw_uxrce_fini_service_memory>:
 80084e0:	b510      	push	{r4, lr}
 80084e2:	4604      	mov	r4, r0
 80084e4:	6800      	ldr	r0, [r0, #0]
 80084e6:	b128      	cbz	r0, 80084f4 <rmw_uxrce_fini_service_memory+0x14>
 80084e8:	4b06      	ldr	r3, [pc, #24]	; (8008504 <rmw_uxrce_fini_service_memory+0x24>)
 80084ea:	6819      	ldr	r1, [r3, #0]
 80084ec:	f7f7 fe90 	bl	8000210 <strcmp>
 80084f0:	b938      	cbnz	r0, 8008502 <rmw_uxrce_fini_service_memory+0x22>
 80084f2:	6020      	str	r0, [r4, #0]
 80084f4:	6861      	ldr	r1, [r4, #4]
 80084f6:	b121      	cbz	r1, 8008502 <rmw_uxrce_fini_service_memory+0x22>
 80084f8:	4803      	ldr	r0, [pc, #12]	; (8008508 <rmw_uxrce_fini_service_memory+0x28>)
 80084fa:	f005 f9d5 	bl	800d8a8 <put_memory>
 80084fe:	2300      	movs	r3, #0
 8008500:	6063      	str	r3, [r4, #4]
 8008502:	bd10      	pop	{r4, pc}
 8008504:	080126cc 	.word	0x080126cc
 8008508:	2000daa4 	.word	0x2000daa4

0800850c <rmw_uxrce_fini_client_memory>:
 800850c:	b510      	push	{r4, lr}
 800850e:	4604      	mov	r4, r0
 8008510:	6800      	ldr	r0, [r0, #0]
 8008512:	b128      	cbz	r0, 8008520 <rmw_uxrce_fini_client_memory+0x14>
 8008514:	4b06      	ldr	r3, [pc, #24]	; (8008530 <rmw_uxrce_fini_client_memory+0x24>)
 8008516:	6819      	ldr	r1, [r3, #0]
 8008518:	f7f7 fe7a 	bl	8000210 <strcmp>
 800851c:	b938      	cbnz	r0, 800852e <rmw_uxrce_fini_client_memory+0x22>
 800851e:	6020      	str	r0, [r4, #0]
 8008520:	6861      	ldr	r1, [r4, #4]
 8008522:	b121      	cbz	r1, 800852e <rmw_uxrce_fini_client_memory+0x22>
 8008524:	4803      	ldr	r0, [pc, #12]	; (8008534 <rmw_uxrce_fini_client_memory+0x28>)
 8008526:	f005 f9bf 	bl	800d8a8 <put_memory>
 800852a:	2300      	movs	r3, #0
 800852c:	6063      	str	r3, [r4, #4]
 800852e:	bd10      	pop	{r4, pc}
 8008530:	080126cc 	.word	0x080126cc
 8008534:	200091b8 	.word	0x200091b8

08008538 <rmw_uxrce_fini_topic_memory>:
 8008538:	b510      	push	{r4, lr}
 800853a:	4604      	mov	r4, r0
 800853c:	4621      	mov	r1, r4
 800853e:	4803      	ldr	r0, [pc, #12]	; (800854c <rmw_uxrce_fini_topic_memory+0x14>)
 8008540:	f005 f9b2 	bl	800d8a8 <put_memory>
 8008544:	2300      	movs	r3, #0
 8008546:	61a3      	str	r3, [r4, #24]
 8008548:	bd10      	pop	{r4, pc}
 800854a:	bf00      	nop
 800854c:	2000dae4 	.word	0x2000dae4

08008550 <rmw_uxrce_get_static_input_buffer_for_entity>:
 8008550:	b082      	sub	sp, #8
 8008552:	b530      	push	{r4, r5, lr}
 8008554:	4925      	ldr	r1, [pc, #148]	; (80085ec <rmw_uxrce_get_static_input_buffer_for_entity+0x9c>)
 8008556:	680d      	ldr	r5, [r1, #0]
 8008558:	ac03      	add	r4, sp, #12
 800855a:	e884 000c 	stmia.w	r4, {r2, r3}
 800855e:	461c      	mov	r4, r3
 8008560:	2d00      	cmp	r5, #0
 8008562:	d041      	beq.n	80085e8 <rmw_uxrce_get_static_input_buffer_for_entity+0x98>
 8008564:	462b      	mov	r3, r5
 8008566:	2100      	movs	r1, #0
 8008568:	689a      	ldr	r2, [r3, #8]
 800856a:	685b      	ldr	r3, [r3, #4]
 800856c:	f8d2 2814 	ldr.w	r2, [r2, #2068]	; 0x814
 8008570:	4290      	cmp	r0, r2
 8008572:	bf08      	it	eq
 8008574:	3101      	addeq	r1, #1
 8008576:	2b00      	cmp	r3, #0
 8008578:	d1f6      	bne.n	8008568 <rmw_uxrce_get_static_input_buffer_for_entity+0x18>
 800857a:	f89d 300c 	ldrb.w	r3, [sp, #12]
 800857e:	2b02      	cmp	r3, #2
 8008580:	d029      	beq.n	80085d6 <rmw_uxrce_get_static_input_buffer_for_entity+0x86>
 8008582:	d907      	bls.n	8008594 <rmw_uxrce_get_static_input_buffer_for_entity+0x44>
 8008584:	2b03      	cmp	r3, #3
 8008586:	d005      	beq.n	8008594 <rmw_uxrce_get_static_input_buffer_for_entity+0x44>
 8008588:	2100      	movs	r1, #0
 800858a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800858e:	4608      	mov	r0, r1
 8008590:	b002      	add	sp, #8
 8008592:	4770      	bx	lr
 8008594:	b314      	cbz	r4, 80085dc <rmw_uxrce_get_static_input_buffer_for_entity+0x8c>
 8008596:	428c      	cmp	r4, r1
 8008598:	d820      	bhi.n	80085dc <rmw_uxrce_get_static_input_buffer_for_entity+0x8c>
 800859a:	2d00      	cmp	r5, #0
 800859c:	d0f4      	beq.n	8008588 <rmw_uxrce_get_static_input_buffer_for_entity+0x38>
 800859e:	2100      	movs	r1, #0
 80085a0:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80085a4:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
 80085a8:	e002      	b.n	80085b0 <rmw_uxrce_get_static_input_buffer_for_entity+0x60>
 80085aa:	686d      	ldr	r5, [r5, #4]
 80085ac:	2d00      	cmp	r5, #0
 80085ae:	d0ec      	beq.n	800858a <rmw_uxrce_get_static_input_buffer_for_entity+0x3a>
 80085b0:	68ab      	ldr	r3, [r5, #8]
 80085b2:	f8d3 2814 	ldr.w	r2, [r3, #2068]	; 0x814
 80085b6:	4290      	cmp	r0, r2
 80085b8:	d1f7      	bne.n	80085aa <rmw_uxrce_get_static_input_buffer_for_entity+0x5a>
 80085ba:	f8d3 2818 	ldr.w	r2, [r3, #2072]	; 0x818
 80085be:	f503 6302 	add.w	r3, r3, #2080	; 0x820
 80085c2:	4562      	cmp	r2, ip
 80085c4:	f853 3c04 	ldr.w	r3, [r3, #-4]
 80085c8:	eb73 0e04 	sbcs.w	lr, r3, r4
 80085cc:	daed      	bge.n	80085aa <rmw_uxrce_get_static_input_buffer_for_entity+0x5a>
 80085ce:	4694      	mov	ip, r2
 80085d0:	461c      	mov	r4, r3
 80085d2:	4629      	mov	r1, r5
 80085d4:	e7e9      	b.n	80085aa <rmw_uxrce_get_static_input_buffer_for_entity+0x5a>
 80085d6:	b10c      	cbz	r4, 80085dc <rmw_uxrce_get_static_input_buffer_for_entity+0x8c>
 80085d8:	428c      	cmp	r4, r1
 80085da:	d9d5      	bls.n	8008588 <rmw_uxrce_get_static_input_buffer_for_entity+0x38>
 80085dc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80085e0:	4802      	ldr	r0, [pc, #8]	; (80085ec <rmw_uxrce_get_static_input_buffer_for_entity+0x9c>)
 80085e2:	b002      	add	sp, #8
 80085e4:	f005 b950 	b.w	800d888 <get_memory>
 80085e8:	4629      	mov	r1, r5
 80085ea:	e7c6      	b.n	800857a <rmw_uxrce_get_static_input_buffer_for_entity+0x2a>
 80085ec:	2000dac4 	.word	0x2000dac4

080085f0 <run_xrce_session>:
 80085f0:	b510      	push	{r4, lr}
 80085f2:	788c      	ldrb	r4, [r1, #2]
 80085f4:	b086      	sub	sp, #24
 80085f6:	2c01      	cmp	r4, #1
 80085f8:	f8ad 200e 	strh.w	r2, [sp, #14]
 80085fc:	d00c      	beq.n	8008618 <run_xrce_session+0x28>
 80085fe:	4619      	mov	r1, r3
 8008600:	2301      	movs	r3, #1
 8008602:	9300      	str	r3, [sp, #0]
 8008604:	f10d 020e 	add.w	r2, sp, #14
 8008608:	f10d 0317 	add.w	r3, sp, #23
 800860c:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8008610:	f001 ff7e 	bl	800a510 <uxr_run_session_until_all_status>
 8008614:	b006      	add	sp, #24
 8008616:	bd10      	pop	{r4, pc}
 8008618:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800861c:	f001 fbcc 	bl	8009db8 <uxr_flash_output_streams>
 8008620:	4620      	mov	r0, r4
 8008622:	b006      	add	sp, #24
 8008624:	bd10      	pop	{r4, pc}
 8008626:	bf00      	nop

08008628 <convert_qos_profile>:
 8008628:	7a4a      	ldrb	r2, [r1, #9]
 800862a:	f891 c008 	ldrb.w	ip, [r1, #8]
 800862e:	2a02      	cmp	r2, #2
 8008630:	bf18      	it	ne
 8008632:	2200      	movne	r2, #0
 8008634:	7002      	strb	r2, [r0, #0]
 8008636:	780a      	ldrb	r2, [r1, #0]
 8008638:	8889      	ldrh	r1, [r1, #4]
 800863a:	8081      	strh	r1, [r0, #4]
 800863c:	f1ac 0c02 	sub.w	ip, ip, #2
 8008640:	f1a2 0202 	sub.w	r2, r2, #2
 8008644:	fabc fc8c 	clz	ip, ip
 8008648:	fab2 f282 	clz	r2, r2
 800864c:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 8008650:	0952      	lsrs	r2, r2, #5
 8008652:	f880 c001 	strb.w	ip, [r0, #1]
 8008656:	7082      	strb	r2, [r0, #2]
 8008658:	4770      	bx	lr
 800865a:	bf00      	nop

0800865c <generate_type_name>:
 800865c:	b530      	push	{r4, r5, lr}
 800865e:	2300      	movs	r3, #0
 8008660:	700b      	strb	r3, [r1, #0]
 8008662:	6803      	ldr	r3, [r0, #0]
 8008664:	b087      	sub	sp, #28
 8008666:	4614      	mov	r4, r2
 8008668:	b1d3      	cbz	r3, 80086a0 <generate_type_name+0x44>
 800866a:	4a0f      	ldr	r2, [pc, #60]	; (80086a8 <generate_type_name+0x4c>)
 800866c:	4615      	mov	r5, r2
 800866e:	9203      	str	r2, [sp, #12]
 8008670:	9500      	str	r5, [sp, #0]
 8008672:	6842      	ldr	r2, [r0, #4]
 8008674:	480d      	ldr	r0, [pc, #52]	; (80086ac <generate_type_name+0x50>)
 8008676:	9001      	str	r0, [sp, #4]
 8008678:	4608      	mov	r0, r1
 800867a:	490d      	ldr	r1, [pc, #52]	; (80086b0 <generate_type_name+0x54>)
 800867c:	9204      	str	r2, [sp, #16]
 800867e:	9105      	str	r1, [sp, #20]
 8008680:	9102      	str	r1, [sp, #8]
 8008682:	4a0c      	ldr	r2, [pc, #48]	; (80086b4 <generate_type_name+0x58>)
 8008684:	4621      	mov	r1, r4
 8008686:	f008 fb49 	bl	8010d1c <sniprintf>
 800868a:	2800      	cmp	r0, #0
 800868c:	db05      	blt.n	800869a <generate_type_name+0x3e>
 800868e:	4284      	cmp	r4, r0
 8008690:	bfd4      	ite	le
 8008692:	2000      	movle	r0, #0
 8008694:	2001      	movgt	r0, #1
 8008696:	b007      	add	sp, #28
 8008698:	bd30      	pop	{r4, r5, pc}
 800869a:	2000      	movs	r0, #0
 800869c:	b007      	add	sp, #28
 800869e:	bd30      	pop	{r4, r5, pc}
 80086a0:	4b05      	ldr	r3, [pc, #20]	; (80086b8 <generate_type_name+0x5c>)
 80086a2:	4a01      	ldr	r2, [pc, #4]	; (80086a8 <generate_type_name+0x4c>)
 80086a4:	461d      	mov	r5, r3
 80086a6:	e7e2      	b.n	800866e <generate_type_name+0x12>
 80086a8:	080120d4 	.word	0x080120d4
 80086ac:	080120ec 	.word	0x080120ec
 80086b0:	080120e8 	.word	0x080120e8
 80086b4:	080120d8 	.word	0x080120d8
 80086b8:	080124a4 	.word	0x080124a4

080086bc <generate_topic_name>:
 80086bc:	b510      	push	{r4, lr}
 80086be:	b082      	sub	sp, #8
 80086c0:	4614      	mov	r4, r2
 80086c2:	9000      	str	r0, [sp, #0]
 80086c4:	4b08      	ldr	r3, [pc, #32]	; (80086e8 <generate_topic_name+0x2c>)
 80086c6:	4a09      	ldr	r2, [pc, #36]	; (80086ec <generate_topic_name+0x30>)
 80086c8:	4608      	mov	r0, r1
 80086ca:	4621      	mov	r1, r4
 80086cc:	f008 fb26 	bl	8010d1c <sniprintf>
 80086d0:	2800      	cmp	r0, #0
 80086d2:	db05      	blt.n	80086e0 <generate_topic_name+0x24>
 80086d4:	4284      	cmp	r4, r0
 80086d6:	bfd4      	ite	le
 80086d8:	2000      	movle	r0, #0
 80086da:	2001      	movgt	r0, #1
 80086dc:	b002      	add	sp, #8
 80086de:	bd10      	pop	{r4, pc}
 80086e0:	2000      	movs	r0, #0
 80086e2:	b002      	add	sp, #8
 80086e4:	bd10      	pop	{r4, pc}
 80086e6:	bf00      	nop
 80086e8:	080120f8 	.word	0x080120f8
 80086ec:	080120f0 	.word	0x080120f0

080086f0 <is_uxrce_rmw_identifier_valid>:
 80086f0:	b510      	push	{r4, lr}
 80086f2:	4604      	mov	r4, r0
 80086f4:	b140      	cbz	r0, 8008708 <is_uxrce_rmw_identifier_valid+0x18>
 80086f6:	f005 f8eb 	bl	800d8d0 <rmw_get_implementation_identifier>
 80086fa:	4601      	mov	r1, r0
 80086fc:	4620      	mov	r0, r4
 80086fe:	f7f7 fd87 	bl	8000210 <strcmp>
 8008702:	fab0 f080 	clz	r0, r0
 8008706:	0940      	lsrs	r0, r0, #5
 8008708:	bd10      	pop	{r4, pc}
 800870a:	bf00      	nop

0800870c <get_message_typesupport_handle>:
 800870c:	6883      	ldr	r3, [r0, #8]
 800870e:	4718      	bx	r3

08008710 <get_message_typesupport_handle_function>:
 8008710:	b510      	push	{r4, lr}
 8008712:	4604      	mov	r4, r0
 8008714:	6800      	ldr	r0, [r0, #0]
 8008716:	f7f7 fd7b 	bl	8000210 <strcmp>
 800871a:	2800      	cmp	r0, #0
 800871c:	bf0c      	ite	eq
 800871e:	4620      	moveq	r0, r4
 8008720:	2000      	movne	r0, #0
 8008722:	bd10      	pop	{r4, pc}

08008724 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32>:
 8008724:	4b04      	ldr	r3, [pc, #16]	; (8008738 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0x14>)
 8008726:	681a      	ldr	r2, [r3, #0]
 8008728:	b10a      	cbz	r2, 800872e <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0xa>
 800872a:	4803      	ldr	r0, [pc, #12]	; (8008738 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0x14>)
 800872c:	4770      	bx	lr
 800872e:	4a03      	ldr	r2, [pc, #12]	; (800873c <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0x18>)
 8008730:	4801      	ldr	r0, [pc, #4]	; (8008738 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0x14>)
 8008732:	6812      	ldr	r2, [r2, #0]
 8008734:	601a      	str	r2, [r3, #0]
 8008736:	4770      	bx	lr
 8008738:	20000030 	.word	0x20000030
 800873c:	200000ac 	.word	0x200000ac

08008740 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32>:
 8008740:	4a02      	ldr	r2, [pc, #8]	; (800874c <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0xc>)
 8008742:	4b03      	ldr	r3, [pc, #12]	; (8008750 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0x10>)
 8008744:	6812      	ldr	r2, [r2, #0]
 8008746:	601a      	str	r2, [r3, #0]
 8008748:	4770      	bx	lr
 800874a:	bf00      	nop
 800874c:	200000ac 	.word	0x200000ac
 8008750:	20000030 	.word	0x20000030

08008754 <std_msgs__msg__Int32__rosidl_typesupport_introspection_c__Int32_init_function>:
 8008754:	f005 bda0 	b.w	800e298 <std_msgs__msg__Int32__init>

08008758 <std_msgs__msg__Int32__rosidl_typesupport_introspection_c__Int32_fini_function>:
 8008758:	f005 bda2 	b.w	800e2a0 <std_msgs__msg__Int32__fini>

0800875c <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int32>:
 800875c:	4b04      	ldr	r3, [pc, #16]	; (8008770 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int32+0x14>)
 800875e:	681a      	ldr	r2, [r3, #0]
 8008760:	b10a      	cbz	r2, 8008766 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int32+0xa>
 8008762:	4803      	ldr	r0, [pc, #12]	; (8008770 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int32+0x14>)
 8008764:	4770      	bx	lr
 8008766:	4a03      	ldr	r2, [pc, #12]	; (8008774 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int32+0x18>)
 8008768:	4801      	ldr	r0, [pc, #4]	; (8008770 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int32+0x14>)
 800876a:	6812      	ldr	r2, [r2, #0]
 800876c:	601a      	str	r2, [r3, #0]
 800876e:	4770      	bx	lr
 8008770:	20000078 	.word	0x20000078
 8008774:	200000b0 	.word	0x200000b0

08008778 <_Int32__max_serialized_size>:
 8008778:	b508      	push	{r3, lr}
 800877a:	2104      	movs	r1, #4
 800877c:	2000      	movs	r0, #0
 800877e:	f001 f807 	bl	8009790 <ucdr_alignment>
 8008782:	3004      	adds	r0, #4
 8008784:	bd08      	pop	{r3, pc}
 8008786:	bf00      	nop

08008788 <_Int32__cdr_deserialize>:
 8008788:	b109      	cbz	r1, 800878e <_Int32__cdr_deserialize+0x6>
 800878a:	f000 bf19 	b.w	80095c0 <ucdr_deserialize_int32_t>
 800878e:	4608      	mov	r0, r1
 8008790:	4770      	bx	lr
 8008792:	bf00      	nop

08008794 <get_serialized_size_std_msgs__msg__Int32>:
 8008794:	b138      	cbz	r0, 80087a6 <get_serialized_size_std_msgs__msg__Int32+0x12>
 8008796:	b508      	push	{r3, lr}
 8008798:	460b      	mov	r3, r1
 800879a:	4618      	mov	r0, r3
 800879c:	2104      	movs	r1, #4
 800879e:	f000 fff7 	bl	8009790 <ucdr_alignment>
 80087a2:	3004      	adds	r0, #4
 80087a4:	bd08      	pop	{r3, pc}
 80087a6:	4770      	bx	lr

080087a8 <_Int32__cdr_serialize>:
 80087a8:	460a      	mov	r2, r1
 80087aa:	b118      	cbz	r0, 80087b4 <_Int32__cdr_serialize+0xc>
 80087ac:	6801      	ldr	r1, [r0, #0]
 80087ae:	4610      	mov	r0, r2
 80087b0:	f000 be6e 	b.w	8009490 <ucdr_serialize_int32_t>
 80087b4:	4770      	bx	lr
 80087b6:	bf00      	nop

080087b8 <_Int32__get_serialized_size>:
 80087b8:	b130      	cbz	r0, 80087c8 <_Int32__get_serialized_size+0x10>
 80087ba:	b508      	push	{r3, lr}
 80087bc:	2104      	movs	r1, #4
 80087be:	2000      	movs	r0, #0
 80087c0:	f000 ffe6 	bl	8009790 <ucdr_alignment>
 80087c4:	3004      	adds	r0, #4
 80087c6:	bd08      	pop	{r3, pc}
 80087c8:	4770      	bx	lr
 80087ca:	bf00      	nop

080087cc <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Int32>:
 80087cc:	4800      	ldr	r0, [pc, #0]	; (80087d0 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Int32+0x4>)
 80087ce:	4770      	bx	lr
 80087d0:	20000084 	.word	0x20000084

080087d4 <ucdr_serialize_bool>:
 80087d4:	b538      	push	{r3, r4, r5, lr}
 80087d6:	460d      	mov	r5, r1
 80087d8:	2101      	movs	r1, #1
 80087da:	4604      	mov	r4, r0
 80087dc:	f000 ff8c 	bl	80096f8 <ucdr_check_final_buffer_behavior>
 80087e0:	b148      	cbz	r0, 80087f6 <ucdr_serialize_bool+0x22>
 80087e2:	68a3      	ldr	r3, [r4, #8]
 80087e4:	701d      	strb	r5, [r3, #0]
 80087e6:	68a2      	ldr	r2, [r4, #8]
 80087e8:	6923      	ldr	r3, [r4, #16]
 80087ea:	2101      	movs	r1, #1
 80087ec:	440a      	add	r2, r1
 80087ee:	440b      	add	r3, r1
 80087f0:	60a2      	str	r2, [r4, #8]
 80087f2:	6123      	str	r3, [r4, #16]
 80087f4:	7561      	strb	r1, [r4, #21]
 80087f6:	7da0      	ldrb	r0, [r4, #22]
 80087f8:	f080 0001 	eor.w	r0, r0, #1
 80087fc:	bd38      	pop	{r3, r4, r5, pc}
 80087fe:	bf00      	nop

08008800 <ucdr_deserialize_bool>:
 8008800:	b538      	push	{r3, r4, r5, lr}
 8008802:	460d      	mov	r5, r1
 8008804:	2101      	movs	r1, #1
 8008806:	4604      	mov	r4, r0
 8008808:	f000 ff76 	bl	80096f8 <ucdr_check_final_buffer_behavior>
 800880c:	b160      	cbz	r0, 8008828 <ucdr_deserialize_bool+0x28>
 800880e:	68a2      	ldr	r2, [r4, #8]
 8008810:	6923      	ldr	r3, [r4, #16]
 8008812:	f812 1b01 	ldrb.w	r1, [r2], #1
 8008816:	3900      	subs	r1, #0
 8008818:	bf18      	it	ne
 800881a:	2101      	movne	r1, #1
 800881c:	7029      	strb	r1, [r5, #0]
 800881e:	3301      	adds	r3, #1
 8008820:	2101      	movs	r1, #1
 8008822:	60a2      	str	r2, [r4, #8]
 8008824:	6123      	str	r3, [r4, #16]
 8008826:	7561      	strb	r1, [r4, #21]
 8008828:	7da0      	ldrb	r0, [r4, #22]
 800882a:	f080 0001 	eor.w	r0, r0, #1
 800882e:	bd38      	pop	{r3, r4, r5, pc}

08008830 <ucdr_serialize_uint8_t>:
 8008830:	b538      	push	{r3, r4, r5, lr}
 8008832:	460d      	mov	r5, r1
 8008834:	2101      	movs	r1, #1
 8008836:	4604      	mov	r4, r0
 8008838:	f000 ff5e 	bl	80096f8 <ucdr_check_final_buffer_behavior>
 800883c:	b148      	cbz	r0, 8008852 <ucdr_serialize_uint8_t+0x22>
 800883e:	68a3      	ldr	r3, [r4, #8]
 8008840:	701d      	strb	r5, [r3, #0]
 8008842:	68a2      	ldr	r2, [r4, #8]
 8008844:	6923      	ldr	r3, [r4, #16]
 8008846:	2101      	movs	r1, #1
 8008848:	440a      	add	r2, r1
 800884a:	440b      	add	r3, r1
 800884c:	60a2      	str	r2, [r4, #8]
 800884e:	6123      	str	r3, [r4, #16]
 8008850:	7561      	strb	r1, [r4, #21]
 8008852:	7da0      	ldrb	r0, [r4, #22]
 8008854:	f080 0001 	eor.w	r0, r0, #1
 8008858:	bd38      	pop	{r3, r4, r5, pc}
 800885a:	bf00      	nop

0800885c <ucdr_deserialize_uint8_t>:
 800885c:	b538      	push	{r3, r4, r5, lr}
 800885e:	460d      	mov	r5, r1
 8008860:	2101      	movs	r1, #1
 8008862:	4604      	mov	r4, r0
 8008864:	f000 ff48 	bl	80096f8 <ucdr_check_final_buffer_behavior>
 8008868:	b150      	cbz	r0, 8008880 <ucdr_deserialize_uint8_t+0x24>
 800886a:	68a3      	ldr	r3, [r4, #8]
 800886c:	781b      	ldrb	r3, [r3, #0]
 800886e:	702b      	strb	r3, [r5, #0]
 8008870:	68a2      	ldr	r2, [r4, #8]
 8008872:	6923      	ldr	r3, [r4, #16]
 8008874:	2101      	movs	r1, #1
 8008876:	440a      	add	r2, r1
 8008878:	440b      	add	r3, r1
 800887a:	60a2      	str	r2, [r4, #8]
 800887c:	6123      	str	r3, [r4, #16]
 800887e:	7561      	strb	r1, [r4, #21]
 8008880:	7da0      	ldrb	r0, [r4, #22]
 8008882:	f080 0001 	eor.w	r0, r0, #1
 8008886:	bd38      	pop	{r3, r4, r5, pc}

08008888 <ucdr_serialize_uint16_t>:
 8008888:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800888c:	b082      	sub	sp, #8
 800888e:	460b      	mov	r3, r1
 8008890:	2102      	movs	r1, #2
 8008892:	4604      	mov	r4, r0
 8008894:	f8ad 3006 	strh.w	r3, [sp, #6]
 8008898:	f000 ff82 	bl	80097a0 <ucdr_buffer_alignment>
 800889c:	4601      	mov	r1, r0
 800889e:	4620      	mov	r0, r4
 80088a0:	7d67      	ldrb	r7, [r4, #21]
 80088a2:	f000 ffc1 	bl	8009828 <ucdr_advance_buffer>
 80088a6:	2102      	movs	r1, #2
 80088a8:	4620      	mov	r0, r4
 80088aa:	f000 ff19 	bl	80096e0 <ucdr_check_buffer_available_for>
 80088ae:	bb78      	cbnz	r0, 8008910 <ucdr_serialize_uint16_t+0x88>
 80088b0:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 80088b4:	42ab      	cmp	r3, r5
 80088b6:	d926      	bls.n	8008906 <ucdr_serialize_uint16_t+0x7e>
 80088b8:	1b5e      	subs	r6, r3, r5
 80088ba:	60a3      	str	r3, [r4, #8]
 80088bc:	6923      	ldr	r3, [r4, #16]
 80088be:	f1c6 0802 	rsb	r8, r6, #2
 80088c2:	4433      	add	r3, r6
 80088c4:	6123      	str	r3, [r4, #16]
 80088c6:	4641      	mov	r1, r8
 80088c8:	4620      	mov	r0, r4
 80088ca:	f000 ff15 	bl	80096f8 <ucdr_check_final_buffer_behavior>
 80088ce:	2800      	cmp	r0, #0
 80088d0:	d03b      	beq.n	800894a <ucdr_serialize_uint16_t+0xc2>
 80088d2:	7d23      	ldrb	r3, [r4, #20]
 80088d4:	2b01      	cmp	r3, #1
 80088d6:	d04a      	beq.n	800896e <ucdr_serialize_uint16_t+0xe6>
 80088d8:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80088dc:	702b      	strb	r3, [r5, #0]
 80088de:	2e00      	cmp	r6, #0
 80088e0:	d040      	beq.n	8008964 <ucdr_serialize_uint16_t+0xdc>
 80088e2:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80088e6:	706b      	strb	r3, [r5, #1]
 80088e8:	6923      	ldr	r3, [r4, #16]
 80088ea:	68a2      	ldr	r2, [r4, #8]
 80088ec:	7da0      	ldrb	r0, [r4, #22]
 80088ee:	3302      	adds	r3, #2
 80088f0:	1b9e      	subs	r6, r3, r6
 80088f2:	4442      	add	r2, r8
 80088f4:	2302      	movs	r3, #2
 80088f6:	f080 0001 	eor.w	r0, r0, #1
 80088fa:	60a2      	str	r2, [r4, #8]
 80088fc:	6126      	str	r6, [r4, #16]
 80088fe:	7563      	strb	r3, [r4, #21]
 8008900:	b002      	add	sp, #8
 8008902:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008906:	2102      	movs	r1, #2
 8008908:	4620      	mov	r0, r4
 800890a:	f000 fef5 	bl	80096f8 <ucdr_check_final_buffer_behavior>
 800890e:	b190      	cbz	r0, 8008936 <ucdr_serialize_uint16_t+0xae>
 8008910:	7d23      	ldrb	r3, [r4, #20]
 8008912:	2b01      	cmp	r3, #1
 8008914:	68a3      	ldr	r3, [r4, #8]
 8008916:	d014      	beq.n	8008942 <ucdr_serialize_uint16_t+0xba>
 8008918:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800891c:	701a      	strb	r2, [r3, #0]
 800891e:	68a3      	ldr	r3, [r4, #8]
 8008920:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8008924:	705a      	strb	r2, [r3, #1]
 8008926:	68a2      	ldr	r2, [r4, #8]
 8008928:	6923      	ldr	r3, [r4, #16]
 800892a:	3202      	adds	r2, #2
 800892c:	3302      	adds	r3, #2
 800892e:	2102      	movs	r1, #2
 8008930:	60a2      	str	r2, [r4, #8]
 8008932:	6123      	str	r3, [r4, #16]
 8008934:	7561      	strb	r1, [r4, #21]
 8008936:	7da0      	ldrb	r0, [r4, #22]
 8008938:	f080 0001 	eor.w	r0, r0, #1
 800893c:	b002      	add	sp, #8
 800893e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008942:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8008946:	801a      	strh	r2, [r3, #0]
 8008948:	e7ed      	b.n	8008926 <ucdr_serialize_uint16_t+0x9e>
 800894a:	68a2      	ldr	r2, [r4, #8]
 800894c:	6923      	ldr	r3, [r4, #16]
 800894e:	7da0      	ldrb	r0, [r4, #22]
 8008950:	7567      	strb	r7, [r4, #21]
 8008952:	1b92      	subs	r2, r2, r6
 8008954:	1b9b      	subs	r3, r3, r6
 8008956:	f080 0001 	eor.w	r0, r0, #1
 800895a:	60a2      	str	r2, [r4, #8]
 800895c:	6123      	str	r3, [r4, #16]
 800895e:	b002      	add	sp, #8
 8008960:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008964:	68a3      	ldr	r3, [r4, #8]
 8008966:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800896a:	701a      	strb	r2, [r3, #0]
 800896c:	e7bc      	b.n	80088e8 <ucdr_serialize_uint16_t+0x60>
 800896e:	4628      	mov	r0, r5
 8008970:	f10d 0506 	add.w	r5, sp, #6
 8008974:	4629      	mov	r1, r5
 8008976:	4632      	mov	r2, r6
 8008978:	f007 ffbe 	bl	80108f8 <memcpy>
 800897c:	68a0      	ldr	r0, [r4, #8]
 800897e:	4642      	mov	r2, r8
 8008980:	19a9      	adds	r1, r5, r6
 8008982:	f007 ffb9 	bl	80108f8 <memcpy>
 8008986:	e7af      	b.n	80088e8 <ucdr_serialize_uint16_t+0x60>

08008988 <ucdr_serialize_endian_uint16_t>:
 8008988:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800898c:	b083      	sub	sp, #12
 800898e:	460d      	mov	r5, r1
 8008990:	2102      	movs	r1, #2
 8008992:	4604      	mov	r4, r0
 8008994:	f8ad 2006 	strh.w	r2, [sp, #6]
 8008998:	f000 ff02 	bl	80097a0 <ucdr_buffer_alignment>
 800899c:	4601      	mov	r1, r0
 800899e:	4620      	mov	r0, r4
 80089a0:	f894 8015 	ldrb.w	r8, [r4, #21]
 80089a4:	f000 ff40 	bl	8009828 <ucdr_advance_buffer>
 80089a8:	2102      	movs	r1, #2
 80089aa:	4620      	mov	r0, r4
 80089ac:	f000 fe98 	bl	80096e0 <ucdr_check_buffer_available_for>
 80089b0:	bb70      	cbnz	r0, 8008a10 <ucdr_serialize_endian_uint16_t+0x88>
 80089b2:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 80089b6:	42be      	cmp	r6, r7
 80089b8:	d925      	bls.n	8008a06 <ucdr_serialize_endian_uint16_t+0x7e>
 80089ba:	6923      	ldr	r3, [r4, #16]
 80089bc:	60a6      	str	r6, [r4, #8]
 80089be:	1bf6      	subs	r6, r6, r7
 80089c0:	4433      	add	r3, r6
 80089c2:	f1c6 0902 	rsb	r9, r6, #2
 80089c6:	6123      	str	r3, [r4, #16]
 80089c8:	4649      	mov	r1, r9
 80089ca:	4620      	mov	r0, r4
 80089cc:	f000 fe94 	bl	80096f8 <ucdr_check_final_buffer_behavior>
 80089d0:	2800      	cmp	r0, #0
 80089d2:	d039      	beq.n	8008a48 <ucdr_serialize_endian_uint16_t+0xc0>
 80089d4:	2d01      	cmp	r5, #1
 80089d6:	d04a      	beq.n	8008a6e <ucdr_serialize_endian_uint16_t+0xe6>
 80089d8:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80089dc:	703b      	strb	r3, [r7, #0]
 80089de:	2e00      	cmp	r6, #0
 80089e0:	d040      	beq.n	8008a64 <ucdr_serialize_endian_uint16_t+0xdc>
 80089e2:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80089e6:	707b      	strb	r3, [r7, #1]
 80089e8:	6923      	ldr	r3, [r4, #16]
 80089ea:	68a2      	ldr	r2, [r4, #8]
 80089ec:	7da0      	ldrb	r0, [r4, #22]
 80089ee:	3302      	adds	r3, #2
 80089f0:	444a      	add	r2, r9
 80089f2:	1b9b      	subs	r3, r3, r6
 80089f4:	2102      	movs	r1, #2
 80089f6:	f080 0001 	eor.w	r0, r0, #1
 80089fa:	60a2      	str	r2, [r4, #8]
 80089fc:	6123      	str	r3, [r4, #16]
 80089fe:	7561      	strb	r1, [r4, #21]
 8008a00:	b003      	add	sp, #12
 8008a02:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008a06:	2102      	movs	r1, #2
 8008a08:	4620      	mov	r0, r4
 8008a0a:	f000 fe75 	bl	80096f8 <ucdr_check_final_buffer_behavior>
 8008a0e:	b188      	cbz	r0, 8008a34 <ucdr_serialize_endian_uint16_t+0xac>
 8008a10:	2d01      	cmp	r5, #1
 8008a12:	68a3      	ldr	r3, [r4, #8]
 8008a14:	d014      	beq.n	8008a40 <ucdr_serialize_endian_uint16_t+0xb8>
 8008a16:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8008a1a:	701a      	strb	r2, [r3, #0]
 8008a1c:	68a3      	ldr	r3, [r4, #8]
 8008a1e:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8008a22:	705a      	strb	r2, [r3, #1]
 8008a24:	68a2      	ldr	r2, [r4, #8]
 8008a26:	6923      	ldr	r3, [r4, #16]
 8008a28:	3202      	adds	r2, #2
 8008a2a:	3302      	adds	r3, #2
 8008a2c:	2102      	movs	r1, #2
 8008a2e:	60a2      	str	r2, [r4, #8]
 8008a30:	6123      	str	r3, [r4, #16]
 8008a32:	7561      	strb	r1, [r4, #21]
 8008a34:	7da0      	ldrb	r0, [r4, #22]
 8008a36:	f080 0001 	eor.w	r0, r0, #1
 8008a3a:	b003      	add	sp, #12
 8008a3c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008a40:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8008a44:	801a      	strh	r2, [r3, #0]
 8008a46:	e7ed      	b.n	8008a24 <ucdr_serialize_endian_uint16_t+0x9c>
 8008a48:	68a2      	ldr	r2, [r4, #8]
 8008a4a:	6923      	ldr	r3, [r4, #16]
 8008a4c:	7da0      	ldrb	r0, [r4, #22]
 8008a4e:	f884 8015 	strb.w	r8, [r4, #21]
 8008a52:	1b92      	subs	r2, r2, r6
 8008a54:	1b9b      	subs	r3, r3, r6
 8008a56:	f080 0001 	eor.w	r0, r0, #1
 8008a5a:	60a2      	str	r2, [r4, #8]
 8008a5c:	6123      	str	r3, [r4, #16]
 8008a5e:	b003      	add	sp, #12
 8008a60:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008a64:	68a3      	ldr	r3, [r4, #8]
 8008a66:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8008a6a:	701a      	strb	r2, [r3, #0]
 8008a6c:	e7bc      	b.n	80089e8 <ucdr_serialize_endian_uint16_t+0x60>
 8008a6e:	f10d 0506 	add.w	r5, sp, #6
 8008a72:	4629      	mov	r1, r5
 8008a74:	4632      	mov	r2, r6
 8008a76:	4638      	mov	r0, r7
 8008a78:	f007 ff3e 	bl	80108f8 <memcpy>
 8008a7c:	68a0      	ldr	r0, [r4, #8]
 8008a7e:	464a      	mov	r2, r9
 8008a80:	19a9      	adds	r1, r5, r6
 8008a82:	f007 ff39 	bl	80108f8 <memcpy>
 8008a86:	e7af      	b.n	80089e8 <ucdr_serialize_endian_uint16_t+0x60>

08008a88 <ucdr_deserialize_uint16_t>:
 8008a88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008a8c:	460d      	mov	r5, r1
 8008a8e:	2102      	movs	r1, #2
 8008a90:	4604      	mov	r4, r0
 8008a92:	f000 fe85 	bl	80097a0 <ucdr_buffer_alignment>
 8008a96:	4601      	mov	r1, r0
 8008a98:	4620      	mov	r0, r4
 8008a9a:	f894 8015 	ldrb.w	r8, [r4, #21]
 8008a9e:	f000 fec3 	bl	8009828 <ucdr_advance_buffer>
 8008aa2:	2102      	movs	r1, #2
 8008aa4:	4620      	mov	r0, r4
 8008aa6:	f000 fe1b 	bl	80096e0 <ucdr_check_buffer_available_for>
 8008aaa:	bb60      	cbnz	r0, 8008b06 <ucdr_deserialize_uint16_t+0x7e>
 8008aac:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 8008ab0:	42be      	cmp	r6, r7
 8008ab2:	d923      	bls.n	8008afc <ucdr_deserialize_uint16_t+0x74>
 8008ab4:	6923      	ldr	r3, [r4, #16]
 8008ab6:	60a6      	str	r6, [r4, #8]
 8008ab8:	1bf6      	subs	r6, r6, r7
 8008aba:	4433      	add	r3, r6
 8008abc:	f1c6 0902 	rsb	r9, r6, #2
 8008ac0:	6123      	str	r3, [r4, #16]
 8008ac2:	4649      	mov	r1, r9
 8008ac4:	4620      	mov	r0, r4
 8008ac6:	f000 fe17 	bl	80096f8 <ucdr_check_final_buffer_behavior>
 8008aca:	2800      	cmp	r0, #0
 8008acc:	d034      	beq.n	8008b38 <ucdr_deserialize_uint16_t+0xb0>
 8008ace:	7d23      	ldrb	r3, [r4, #20]
 8008ad0:	2b01      	cmp	r3, #1
 8008ad2:	d042      	beq.n	8008b5a <ucdr_deserialize_uint16_t+0xd2>
 8008ad4:	787b      	ldrb	r3, [r7, #1]
 8008ad6:	702b      	strb	r3, [r5, #0]
 8008ad8:	2e00      	cmp	r6, #0
 8008ada:	d03a      	beq.n	8008b52 <ucdr_deserialize_uint16_t+0xca>
 8008adc:	783b      	ldrb	r3, [r7, #0]
 8008ade:	706b      	strb	r3, [r5, #1]
 8008ae0:	6923      	ldr	r3, [r4, #16]
 8008ae2:	68a2      	ldr	r2, [r4, #8]
 8008ae4:	7da0      	ldrb	r0, [r4, #22]
 8008ae6:	2102      	movs	r1, #2
 8008ae8:	3302      	adds	r3, #2
 8008aea:	444a      	add	r2, r9
 8008aec:	1b9b      	subs	r3, r3, r6
 8008aee:	7561      	strb	r1, [r4, #21]
 8008af0:	60a2      	str	r2, [r4, #8]
 8008af2:	6123      	str	r3, [r4, #16]
 8008af4:	f080 0001 	eor.w	r0, r0, #1
 8008af8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008afc:	2102      	movs	r1, #2
 8008afe:	4620      	mov	r0, r4
 8008b00:	f000 fdfa 	bl	80096f8 <ucdr_check_final_buffer_behavior>
 8008b04:	b180      	cbz	r0, 8008b28 <ucdr_deserialize_uint16_t+0xa0>
 8008b06:	7d23      	ldrb	r3, [r4, #20]
 8008b08:	2b01      	cmp	r3, #1
 8008b0a:	68a3      	ldr	r3, [r4, #8]
 8008b0c:	d011      	beq.n	8008b32 <ucdr_deserialize_uint16_t+0xaa>
 8008b0e:	785b      	ldrb	r3, [r3, #1]
 8008b10:	702b      	strb	r3, [r5, #0]
 8008b12:	68a3      	ldr	r3, [r4, #8]
 8008b14:	781b      	ldrb	r3, [r3, #0]
 8008b16:	706b      	strb	r3, [r5, #1]
 8008b18:	68a2      	ldr	r2, [r4, #8]
 8008b1a:	6923      	ldr	r3, [r4, #16]
 8008b1c:	3202      	adds	r2, #2
 8008b1e:	3302      	adds	r3, #2
 8008b20:	2102      	movs	r1, #2
 8008b22:	60a2      	str	r2, [r4, #8]
 8008b24:	6123      	str	r3, [r4, #16]
 8008b26:	7561      	strb	r1, [r4, #21]
 8008b28:	7da0      	ldrb	r0, [r4, #22]
 8008b2a:	f080 0001 	eor.w	r0, r0, #1
 8008b2e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008b32:	881b      	ldrh	r3, [r3, #0]
 8008b34:	802b      	strh	r3, [r5, #0]
 8008b36:	e7ef      	b.n	8008b18 <ucdr_deserialize_uint16_t+0x90>
 8008b38:	68a2      	ldr	r2, [r4, #8]
 8008b3a:	6923      	ldr	r3, [r4, #16]
 8008b3c:	7da0      	ldrb	r0, [r4, #22]
 8008b3e:	f884 8015 	strb.w	r8, [r4, #21]
 8008b42:	1b92      	subs	r2, r2, r6
 8008b44:	1b9b      	subs	r3, r3, r6
 8008b46:	60a2      	str	r2, [r4, #8]
 8008b48:	6123      	str	r3, [r4, #16]
 8008b4a:	f080 0001 	eor.w	r0, r0, #1
 8008b4e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008b52:	68a3      	ldr	r3, [r4, #8]
 8008b54:	781b      	ldrb	r3, [r3, #0]
 8008b56:	706b      	strb	r3, [r5, #1]
 8008b58:	e7c2      	b.n	8008ae0 <ucdr_deserialize_uint16_t+0x58>
 8008b5a:	4639      	mov	r1, r7
 8008b5c:	4632      	mov	r2, r6
 8008b5e:	4628      	mov	r0, r5
 8008b60:	f007 feca 	bl	80108f8 <memcpy>
 8008b64:	68a1      	ldr	r1, [r4, #8]
 8008b66:	464a      	mov	r2, r9
 8008b68:	19a8      	adds	r0, r5, r6
 8008b6a:	f007 fec5 	bl	80108f8 <memcpy>
 8008b6e:	e7b7      	b.n	8008ae0 <ucdr_deserialize_uint16_t+0x58>

08008b70 <ucdr_deserialize_endian_uint16_t>:
 8008b70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008b74:	460e      	mov	r6, r1
 8008b76:	2102      	movs	r1, #2
 8008b78:	4604      	mov	r4, r0
 8008b7a:	4615      	mov	r5, r2
 8008b7c:	f000 fe10 	bl	80097a0 <ucdr_buffer_alignment>
 8008b80:	4601      	mov	r1, r0
 8008b82:	4620      	mov	r0, r4
 8008b84:	f894 9015 	ldrb.w	r9, [r4, #21]
 8008b88:	f000 fe4e 	bl	8009828 <ucdr_advance_buffer>
 8008b8c:	2102      	movs	r1, #2
 8008b8e:	4620      	mov	r0, r4
 8008b90:	f000 fda6 	bl	80096e0 <ucdr_check_buffer_available_for>
 8008b94:	bb70      	cbnz	r0, 8008bf4 <ucdr_deserialize_endian_uint16_t+0x84>
 8008b96:	e9d4 7801 	ldrd	r7, r8, [r4, #4]
 8008b9a:	4547      	cmp	r7, r8
 8008b9c:	d925      	bls.n	8008bea <ucdr_deserialize_endian_uint16_t+0x7a>
 8008b9e:	6923      	ldr	r3, [r4, #16]
 8008ba0:	60a7      	str	r7, [r4, #8]
 8008ba2:	eba7 0708 	sub.w	r7, r7, r8
 8008ba6:	443b      	add	r3, r7
 8008ba8:	f1c7 0a02 	rsb	sl, r7, #2
 8008bac:	6123      	str	r3, [r4, #16]
 8008bae:	4651      	mov	r1, sl
 8008bb0:	4620      	mov	r0, r4
 8008bb2:	f000 fda1 	bl	80096f8 <ucdr_check_final_buffer_behavior>
 8008bb6:	2800      	cmp	r0, #0
 8008bb8:	d034      	beq.n	8008c24 <ucdr_deserialize_endian_uint16_t+0xb4>
 8008bba:	2e01      	cmp	r6, #1
 8008bbc:	d043      	beq.n	8008c46 <ucdr_deserialize_endian_uint16_t+0xd6>
 8008bbe:	f898 3001 	ldrb.w	r3, [r8, #1]
 8008bc2:	702b      	strb	r3, [r5, #0]
 8008bc4:	2f00      	cmp	r7, #0
 8008bc6:	d03a      	beq.n	8008c3e <ucdr_deserialize_endian_uint16_t+0xce>
 8008bc8:	f898 3000 	ldrb.w	r3, [r8]
 8008bcc:	706b      	strb	r3, [r5, #1]
 8008bce:	6923      	ldr	r3, [r4, #16]
 8008bd0:	68a2      	ldr	r2, [r4, #8]
 8008bd2:	7da0      	ldrb	r0, [r4, #22]
 8008bd4:	2102      	movs	r1, #2
 8008bd6:	3302      	adds	r3, #2
 8008bd8:	4452      	add	r2, sl
 8008bda:	1bdb      	subs	r3, r3, r7
 8008bdc:	7561      	strb	r1, [r4, #21]
 8008bde:	60a2      	str	r2, [r4, #8]
 8008be0:	6123      	str	r3, [r4, #16]
 8008be2:	f080 0001 	eor.w	r0, r0, #1
 8008be6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008bea:	2102      	movs	r1, #2
 8008bec:	4620      	mov	r0, r4
 8008bee:	f000 fd83 	bl	80096f8 <ucdr_check_final_buffer_behavior>
 8008bf2:	b178      	cbz	r0, 8008c14 <ucdr_deserialize_endian_uint16_t+0xa4>
 8008bf4:	2e01      	cmp	r6, #1
 8008bf6:	68a3      	ldr	r3, [r4, #8]
 8008bf8:	d011      	beq.n	8008c1e <ucdr_deserialize_endian_uint16_t+0xae>
 8008bfa:	785b      	ldrb	r3, [r3, #1]
 8008bfc:	702b      	strb	r3, [r5, #0]
 8008bfe:	68a3      	ldr	r3, [r4, #8]
 8008c00:	781b      	ldrb	r3, [r3, #0]
 8008c02:	706b      	strb	r3, [r5, #1]
 8008c04:	68a2      	ldr	r2, [r4, #8]
 8008c06:	6923      	ldr	r3, [r4, #16]
 8008c08:	3202      	adds	r2, #2
 8008c0a:	3302      	adds	r3, #2
 8008c0c:	2102      	movs	r1, #2
 8008c0e:	60a2      	str	r2, [r4, #8]
 8008c10:	6123      	str	r3, [r4, #16]
 8008c12:	7561      	strb	r1, [r4, #21]
 8008c14:	7da0      	ldrb	r0, [r4, #22]
 8008c16:	f080 0001 	eor.w	r0, r0, #1
 8008c1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008c1e:	881b      	ldrh	r3, [r3, #0]
 8008c20:	802b      	strh	r3, [r5, #0]
 8008c22:	e7ef      	b.n	8008c04 <ucdr_deserialize_endian_uint16_t+0x94>
 8008c24:	68a2      	ldr	r2, [r4, #8]
 8008c26:	6923      	ldr	r3, [r4, #16]
 8008c28:	7da0      	ldrb	r0, [r4, #22]
 8008c2a:	f884 9015 	strb.w	r9, [r4, #21]
 8008c2e:	1bd2      	subs	r2, r2, r7
 8008c30:	1bdb      	subs	r3, r3, r7
 8008c32:	60a2      	str	r2, [r4, #8]
 8008c34:	6123      	str	r3, [r4, #16]
 8008c36:	f080 0001 	eor.w	r0, r0, #1
 8008c3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008c3e:	68a3      	ldr	r3, [r4, #8]
 8008c40:	781b      	ldrb	r3, [r3, #0]
 8008c42:	706b      	strb	r3, [r5, #1]
 8008c44:	e7c3      	b.n	8008bce <ucdr_deserialize_endian_uint16_t+0x5e>
 8008c46:	4641      	mov	r1, r8
 8008c48:	463a      	mov	r2, r7
 8008c4a:	4628      	mov	r0, r5
 8008c4c:	f007 fe54 	bl	80108f8 <memcpy>
 8008c50:	68a1      	ldr	r1, [r4, #8]
 8008c52:	4652      	mov	r2, sl
 8008c54:	19e8      	adds	r0, r5, r7
 8008c56:	f007 fe4f 	bl	80108f8 <memcpy>
 8008c5a:	e7b8      	b.n	8008bce <ucdr_deserialize_endian_uint16_t+0x5e>

08008c5c <ucdr_serialize_uint32_t>:
 8008c5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008c60:	b082      	sub	sp, #8
 8008c62:	4604      	mov	r4, r0
 8008c64:	9101      	str	r1, [sp, #4]
 8008c66:	2104      	movs	r1, #4
 8008c68:	f000 fd9a 	bl	80097a0 <ucdr_buffer_alignment>
 8008c6c:	4601      	mov	r1, r0
 8008c6e:	4620      	mov	r0, r4
 8008c70:	7d67      	ldrb	r7, [r4, #21]
 8008c72:	f000 fdd9 	bl	8009828 <ucdr_advance_buffer>
 8008c76:	2104      	movs	r1, #4
 8008c78:	4620      	mov	r0, r4
 8008c7a:	f000 fd31 	bl	80096e0 <ucdr_check_buffer_available_for>
 8008c7e:	2800      	cmp	r0, #0
 8008c80:	d139      	bne.n	8008cf6 <ucdr_serialize_uint32_t+0x9a>
 8008c82:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 8008c86:	42ab      	cmp	r3, r5
 8008c88:	d930      	bls.n	8008cec <ucdr_serialize_uint32_t+0x90>
 8008c8a:	1b5e      	subs	r6, r3, r5
 8008c8c:	60a3      	str	r3, [r4, #8]
 8008c8e:	6923      	ldr	r3, [r4, #16]
 8008c90:	f1c6 0804 	rsb	r8, r6, #4
 8008c94:	4433      	add	r3, r6
 8008c96:	6123      	str	r3, [r4, #16]
 8008c98:	4641      	mov	r1, r8
 8008c9a:	4620      	mov	r0, r4
 8008c9c:	f000 fd2c 	bl	80096f8 <ucdr_check_final_buffer_behavior>
 8008ca0:	2800      	cmp	r0, #0
 8008ca2:	d04c      	beq.n	8008d3e <ucdr_serialize_uint32_t+0xe2>
 8008ca4:	7d23      	ldrb	r3, [r4, #20]
 8008ca6:	2b01      	cmp	r3, #1
 8008ca8:	d063      	beq.n	8008d72 <ucdr_serialize_uint32_t+0x116>
 8008caa:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8008cae:	702b      	strb	r3, [r5, #0]
 8008cb0:	2e00      	cmp	r6, #0
 8008cb2:	d051      	beq.n	8008d58 <ucdr_serialize_uint32_t+0xfc>
 8008cb4:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8008cb8:	706b      	strb	r3, [r5, #1]
 8008cba:	2e01      	cmp	r6, #1
 8008cbc:	d050      	beq.n	8008d60 <ucdr_serialize_uint32_t+0x104>
 8008cbe:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8008cc2:	70ab      	strb	r3, [r5, #2]
 8008cc4:	2e02      	cmp	r6, #2
 8008cc6:	d04f      	beq.n	8008d68 <ucdr_serialize_uint32_t+0x10c>
 8008cc8:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8008ccc:	70eb      	strb	r3, [r5, #3]
 8008cce:	6923      	ldr	r3, [r4, #16]
 8008cd0:	68a2      	ldr	r2, [r4, #8]
 8008cd2:	7da0      	ldrb	r0, [r4, #22]
 8008cd4:	3304      	adds	r3, #4
 8008cd6:	1b9e      	subs	r6, r3, r6
 8008cd8:	4442      	add	r2, r8
 8008cda:	2304      	movs	r3, #4
 8008cdc:	f080 0001 	eor.w	r0, r0, #1
 8008ce0:	60a2      	str	r2, [r4, #8]
 8008ce2:	6126      	str	r6, [r4, #16]
 8008ce4:	7563      	strb	r3, [r4, #21]
 8008ce6:	b002      	add	sp, #8
 8008ce8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008cec:	2104      	movs	r1, #4
 8008cee:	4620      	mov	r0, r4
 8008cf0:	f000 fd02 	bl	80096f8 <ucdr_check_final_buffer_behavior>
 8008cf4:	b1d0      	cbz	r0, 8008d2c <ucdr_serialize_uint32_t+0xd0>
 8008cf6:	7d23      	ldrb	r3, [r4, #20]
 8008cf8:	2b01      	cmp	r3, #1
 8008cfa:	68a3      	ldr	r3, [r4, #8]
 8008cfc:	d01c      	beq.n	8008d38 <ucdr_serialize_uint32_t+0xdc>
 8008cfe:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8008d02:	701a      	strb	r2, [r3, #0]
 8008d04:	68a3      	ldr	r3, [r4, #8]
 8008d06:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8008d0a:	705a      	strb	r2, [r3, #1]
 8008d0c:	68a3      	ldr	r3, [r4, #8]
 8008d0e:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8008d12:	709a      	strb	r2, [r3, #2]
 8008d14:	68a3      	ldr	r3, [r4, #8]
 8008d16:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8008d1a:	70da      	strb	r2, [r3, #3]
 8008d1c:	68a2      	ldr	r2, [r4, #8]
 8008d1e:	6923      	ldr	r3, [r4, #16]
 8008d20:	3204      	adds	r2, #4
 8008d22:	3304      	adds	r3, #4
 8008d24:	2104      	movs	r1, #4
 8008d26:	60a2      	str	r2, [r4, #8]
 8008d28:	6123      	str	r3, [r4, #16]
 8008d2a:	7561      	strb	r1, [r4, #21]
 8008d2c:	7da0      	ldrb	r0, [r4, #22]
 8008d2e:	f080 0001 	eor.w	r0, r0, #1
 8008d32:	b002      	add	sp, #8
 8008d34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008d38:	9a01      	ldr	r2, [sp, #4]
 8008d3a:	601a      	str	r2, [r3, #0]
 8008d3c:	e7ee      	b.n	8008d1c <ucdr_serialize_uint32_t+0xc0>
 8008d3e:	68a2      	ldr	r2, [r4, #8]
 8008d40:	6923      	ldr	r3, [r4, #16]
 8008d42:	7da0      	ldrb	r0, [r4, #22]
 8008d44:	7567      	strb	r7, [r4, #21]
 8008d46:	1b92      	subs	r2, r2, r6
 8008d48:	1b9b      	subs	r3, r3, r6
 8008d4a:	f080 0001 	eor.w	r0, r0, #1
 8008d4e:	60a2      	str	r2, [r4, #8]
 8008d50:	6123      	str	r3, [r4, #16]
 8008d52:	b002      	add	sp, #8
 8008d54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008d58:	68a3      	ldr	r3, [r4, #8]
 8008d5a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8008d5e:	701a      	strb	r2, [r3, #0]
 8008d60:	68a3      	ldr	r3, [r4, #8]
 8008d62:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8008d66:	701a      	strb	r2, [r3, #0]
 8008d68:	68a3      	ldr	r3, [r4, #8]
 8008d6a:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8008d6e:	701a      	strb	r2, [r3, #0]
 8008d70:	e7ad      	b.n	8008cce <ucdr_serialize_uint32_t+0x72>
 8008d72:	4628      	mov	r0, r5
 8008d74:	ad01      	add	r5, sp, #4
 8008d76:	4629      	mov	r1, r5
 8008d78:	4632      	mov	r2, r6
 8008d7a:	f007 fdbd 	bl	80108f8 <memcpy>
 8008d7e:	68a0      	ldr	r0, [r4, #8]
 8008d80:	4642      	mov	r2, r8
 8008d82:	19a9      	adds	r1, r5, r6
 8008d84:	f007 fdb8 	bl	80108f8 <memcpy>
 8008d88:	e7a1      	b.n	8008cce <ucdr_serialize_uint32_t+0x72>
 8008d8a:	bf00      	nop

08008d8c <ucdr_serialize_endian_uint32_t>:
 8008d8c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008d90:	b083      	sub	sp, #12
 8008d92:	460d      	mov	r5, r1
 8008d94:	2104      	movs	r1, #4
 8008d96:	4604      	mov	r4, r0
 8008d98:	9201      	str	r2, [sp, #4]
 8008d9a:	f000 fd01 	bl	80097a0 <ucdr_buffer_alignment>
 8008d9e:	4601      	mov	r1, r0
 8008da0:	4620      	mov	r0, r4
 8008da2:	f894 8015 	ldrb.w	r8, [r4, #21]
 8008da6:	f000 fd3f 	bl	8009828 <ucdr_advance_buffer>
 8008daa:	2104      	movs	r1, #4
 8008dac:	4620      	mov	r0, r4
 8008dae:	f000 fc97 	bl	80096e0 <ucdr_check_buffer_available_for>
 8008db2:	2800      	cmp	r0, #0
 8008db4:	d138      	bne.n	8008e28 <ucdr_serialize_endian_uint32_t+0x9c>
 8008db6:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 8008dba:	42b7      	cmp	r7, r6
 8008dbc:	d92f      	bls.n	8008e1e <ucdr_serialize_endian_uint32_t+0x92>
 8008dbe:	6923      	ldr	r3, [r4, #16]
 8008dc0:	60a7      	str	r7, [r4, #8]
 8008dc2:	1bbf      	subs	r7, r7, r6
 8008dc4:	443b      	add	r3, r7
 8008dc6:	f1c7 0904 	rsb	r9, r7, #4
 8008dca:	6123      	str	r3, [r4, #16]
 8008dcc:	4649      	mov	r1, r9
 8008dce:	4620      	mov	r0, r4
 8008dd0:	f000 fc92 	bl	80096f8 <ucdr_check_final_buffer_behavior>
 8008dd4:	2800      	cmp	r0, #0
 8008dd6:	d04a      	beq.n	8008e6e <ucdr_serialize_endian_uint32_t+0xe2>
 8008dd8:	2d01      	cmp	r5, #1
 8008dda:	d063      	beq.n	8008ea4 <ucdr_serialize_endian_uint32_t+0x118>
 8008ddc:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8008de0:	7033      	strb	r3, [r6, #0]
 8008de2:	2f00      	cmp	r7, #0
 8008de4:	d051      	beq.n	8008e8a <ucdr_serialize_endian_uint32_t+0xfe>
 8008de6:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8008dea:	7073      	strb	r3, [r6, #1]
 8008dec:	2f01      	cmp	r7, #1
 8008dee:	d050      	beq.n	8008e92 <ucdr_serialize_endian_uint32_t+0x106>
 8008df0:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8008df4:	70b3      	strb	r3, [r6, #2]
 8008df6:	2f02      	cmp	r7, #2
 8008df8:	d04f      	beq.n	8008e9a <ucdr_serialize_endian_uint32_t+0x10e>
 8008dfa:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8008dfe:	70f3      	strb	r3, [r6, #3]
 8008e00:	6923      	ldr	r3, [r4, #16]
 8008e02:	68a2      	ldr	r2, [r4, #8]
 8008e04:	7da0      	ldrb	r0, [r4, #22]
 8008e06:	3304      	adds	r3, #4
 8008e08:	444a      	add	r2, r9
 8008e0a:	1bdb      	subs	r3, r3, r7
 8008e0c:	2104      	movs	r1, #4
 8008e0e:	f080 0001 	eor.w	r0, r0, #1
 8008e12:	60a2      	str	r2, [r4, #8]
 8008e14:	6123      	str	r3, [r4, #16]
 8008e16:	7561      	strb	r1, [r4, #21]
 8008e18:	b003      	add	sp, #12
 8008e1a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008e1e:	2104      	movs	r1, #4
 8008e20:	4620      	mov	r0, r4
 8008e22:	f000 fc69 	bl	80096f8 <ucdr_check_final_buffer_behavior>
 8008e26:	b1c8      	cbz	r0, 8008e5c <ucdr_serialize_endian_uint32_t+0xd0>
 8008e28:	2d01      	cmp	r5, #1
 8008e2a:	68a3      	ldr	r3, [r4, #8]
 8008e2c:	d01c      	beq.n	8008e68 <ucdr_serialize_endian_uint32_t+0xdc>
 8008e2e:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8008e32:	701a      	strb	r2, [r3, #0]
 8008e34:	68a3      	ldr	r3, [r4, #8]
 8008e36:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8008e3a:	705a      	strb	r2, [r3, #1]
 8008e3c:	68a3      	ldr	r3, [r4, #8]
 8008e3e:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8008e42:	709a      	strb	r2, [r3, #2]
 8008e44:	68a3      	ldr	r3, [r4, #8]
 8008e46:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8008e4a:	70da      	strb	r2, [r3, #3]
 8008e4c:	68a2      	ldr	r2, [r4, #8]
 8008e4e:	6923      	ldr	r3, [r4, #16]
 8008e50:	3204      	adds	r2, #4
 8008e52:	3304      	adds	r3, #4
 8008e54:	2104      	movs	r1, #4
 8008e56:	60a2      	str	r2, [r4, #8]
 8008e58:	6123      	str	r3, [r4, #16]
 8008e5a:	7561      	strb	r1, [r4, #21]
 8008e5c:	7da0      	ldrb	r0, [r4, #22]
 8008e5e:	f080 0001 	eor.w	r0, r0, #1
 8008e62:	b003      	add	sp, #12
 8008e64:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008e68:	9a01      	ldr	r2, [sp, #4]
 8008e6a:	601a      	str	r2, [r3, #0]
 8008e6c:	e7ee      	b.n	8008e4c <ucdr_serialize_endian_uint32_t+0xc0>
 8008e6e:	68a2      	ldr	r2, [r4, #8]
 8008e70:	6923      	ldr	r3, [r4, #16]
 8008e72:	7da0      	ldrb	r0, [r4, #22]
 8008e74:	f884 8015 	strb.w	r8, [r4, #21]
 8008e78:	1bd2      	subs	r2, r2, r7
 8008e7a:	1bdb      	subs	r3, r3, r7
 8008e7c:	f080 0001 	eor.w	r0, r0, #1
 8008e80:	60a2      	str	r2, [r4, #8]
 8008e82:	6123      	str	r3, [r4, #16]
 8008e84:	b003      	add	sp, #12
 8008e86:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008e8a:	68a3      	ldr	r3, [r4, #8]
 8008e8c:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8008e90:	701a      	strb	r2, [r3, #0]
 8008e92:	68a3      	ldr	r3, [r4, #8]
 8008e94:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8008e98:	701a      	strb	r2, [r3, #0]
 8008e9a:	68a3      	ldr	r3, [r4, #8]
 8008e9c:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8008ea0:	701a      	strb	r2, [r3, #0]
 8008ea2:	e7ad      	b.n	8008e00 <ucdr_serialize_endian_uint32_t+0x74>
 8008ea4:	ad01      	add	r5, sp, #4
 8008ea6:	4629      	mov	r1, r5
 8008ea8:	463a      	mov	r2, r7
 8008eaa:	4630      	mov	r0, r6
 8008eac:	f007 fd24 	bl	80108f8 <memcpy>
 8008eb0:	68a0      	ldr	r0, [r4, #8]
 8008eb2:	464a      	mov	r2, r9
 8008eb4:	19e9      	adds	r1, r5, r7
 8008eb6:	f007 fd1f 	bl	80108f8 <memcpy>
 8008eba:	e7a1      	b.n	8008e00 <ucdr_serialize_endian_uint32_t+0x74>

08008ebc <ucdr_deserialize_uint32_t>:
 8008ebc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008ec0:	460d      	mov	r5, r1
 8008ec2:	2104      	movs	r1, #4
 8008ec4:	4604      	mov	r4, r0
 8008ec6:	f000 fc6b 	bl	80097a0 <ucdr_buffer_alignment>
 8008eca:	4601      	mov	r1, r0
 8008ecc:	4620      	mov	r0, r4
 8008ece:	f894 8015 	ldrb.w	r8, [r4, #21]
 8008ed2:	f000 fca9 	bl	8009828 <ucdr_advance_buffer>
 8008ed6:	2104      	movs	r1, #4
 8008ed8:	4620      	mov	r0, r4
 8008eda:	f000 fc01 	bl	80096e0 <ucdr_check_buffer_available_for>
 8008ede:	2800      	cmp	r0, #0
 8008ee0:	d138      	bne.n	8008f54 <ucdr_deserialize_uint32_t+0x98>
 8008ee2:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 8008ee6:	42b7      	cmp	r7, r6
 8008ee8:	d92f      	bls.n	8008f4a <ucdr_deserialize_uint32_t+0x8e>
 8008eea:	6923      	ldr	r3, [r4, #16]
 8008eec:	60a7      	str	r7, [r4, #8]
 8008eee:	1bbf      	subs	r7, r7, r6
 8008ef0:	443b      	add	r3, r7
 8008ef2:	f1c7 0904 	rsb	r9, r7, #4
 8008ef6:	6123      	str	r3, [r4, #16]
 8008ef8:	4649      	mov	r1, r9
 8008efa:	4620      	mov	r0, r4
 8008efc:	f000 fbfc 	bl	80096f8 <ucdr_check_final_buffer_behavior>
 8008f00:	2800      	cmp	r0, #0
 8008f02:	d046      	beq.n	8008f92 <ucdr_deserialize_uint32_t+0xd6>
 8008f04:	7d23      	ldrb	r3, [r4, #20]
 8008f06:	2b01      	cmp	r3, #1
 8008f08:	d05c      	beq.n	8008fc4 <ucdr_deserialize_uint32_t+0x108>
 8008f0a:	78f3      	ldrb	r3, [r6, #3]
 8008f0c:	702b      	strb	r3, [r5, #0]
 8008f0e:	2f00      	cmp	r7, #0
 8008f10:	d04c      	beq.n	8008fac <ucdr_deserialize_uint32_t+0xf0>
 8008f12:	78b3      	ldrb	r3, [r6, #2]
 8008f14:	706b      	strb	r3, [r5, #1]
 8008f16:	2f01      	cmp	r7, #1
 8008f18:	f105 0302 	add.w	r3, r5, #2
 8008f1c:	d04a      	beq.n	8008fb4 <ucdr_deserialize_uint32_t+0xf8>
 8008f1e:	7873      	ldrb	r3, [r6, #1]
 8008f20:	70ab      	strb	r3, [r5, #2]
 8008f22:	2f02      	cmp	r7, #2
 8008f24:	f105 0303 	add.w	r3, r5, #3
 8008f28:	d048      	beq.n	8008fbc <ucdr_deserialize_uint32_t+0x100>
 8008f2a:	7833      	ldrb	r3, [r6, #0]
 8008f2c:	70eb      	strb	r3, [r5, #3]
 8008f2e:	6923      	ldr	r3, [r4, #16]
 8008f30:	68a2      	ldr	r2, [r4, #8]
 8008f32:	7da0      	ldrb	r0, [r4, #22]
 8008f34:	2104      	movs	r1, #4
 8008f36:	3304      	adds	r3, #4
 8008f38:	444a      	add	r2, r9
 8008f3a:	1bdb      	subs	r3, r3, r7
 8008f3c:	7561      	strb	r1, [r4, #21]
 8008f3e:	60a2      	str	r2, [r4, #8]
 8008f40:	6123      	str	r3, [r4, #16]
 8008f42:	f080 0001 	eor.w	r0, r0, #1
 8008f46:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008f4a:	2104      	movs	r1, #4
 8008f4c:	4620      	mov	r0, r4
 8008f4e:	f000 fbd3 	bl	80096f8 <ucdr_check_final_buffer_behavior>
 8008f52:	b1b0      	cbz	r0, 8008f82 <ucdr_deserialize_uint32_t+0xc6>
 8008f54:	7d23      	ldrb	r3, [r4, #20]
 8008f56:	2b01      	cmp	r3, #1
 8008f58:	68a3      	ldr	r3, [r4, #8]
 8008f5a:	d017      	beq.n	8008f8c <ucdr_deserialize_uint32_t+0xd0>
 8008f5c:	78db      	ldrb	r3, [r3, #3]
 8008f5e:	702b      	strb	r3, [r5, #0]
 8008f60:	68a3      	ldr	r3, [r4, #8]
 8008f62:	789b      	ldrb	r3, [r3, #2]
 8008f64:	706b      	strb	r3, [r5, #1]
 8008f66:	68a3      	ldr	r3, [r4, #8]
 8008f68:	785b      	ldrb	r3, [r3, #1]
 8008f6a:	70ab      	strb	r3, [r5, #2]
 8008f6c:	68a3      	ldr	r3, [r4, #8]
 8008f6e:	781b      	ldrb	r3, [r3, #0]
 8008f70:	70eb      	strb	r3, [r5, #3]
 8008f72:	68a2      	ldr	r2, [r4, #8]
 8008f74:	6923      	ldr	r3, [r4, #16]
 8008f76:	3204      	adds	r2, #4
 8008f78:	3304      	adds	r3, #4
 8008f7a:	2104      	movs	r1, #4
 8008f7c:	60a2      	str	r2, [r4, #8]
 8008f7e:	6123      	str	r3, [r4, #16]
 8008f80:	7561      	strb	r1, [r4, #21]
 8008f82:	7da0      	ldrb	r0, [r4, #22]
 8008f84:	f080 0001 	eor.w	r0, r0, #1
 8008f88:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008f8c:	681b      	ldr	r3, [r3, #0]
 8008f8e:	602b      	str	r3, [r5, #0]
 8008f90:	e7ef      	b.n	8008f72 <ucdr_deserialize_uint32_t+0xb6>
 8008f92:	68a2      	ldr	r2, [r4, #8]
 8008f94:	6923      	ldr	r3, [r4, #16]
 8008f96:	7da0      	ldrb	r0, [r4, #22]
 8008f98:	f884 8015 	strb.w	r8, [r4, #21]
 8008f9c:	1bd2      	subs	r2, r2, r7
 8008f9e:	1bdb      	subs	r3, r3, r7
 8008fa0:	60a2      	str	r2, [r4, #8]
 8008fa2:	6123      	str	r3, [r4, #16]
 8008fa4:	f080 0001 	eor.w	r0, r0, #1
 8008fa8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008fac:	68a3      	ldr	r3, [r4, #8]
 8008fae:	789b      	ldrb	r3, [r3, #2]
 8008fb0:	706b      	strb	r3, [r5, #1]
 8008fb2:	1cab      	adds	r3, r5, #2
 8008fb4:	68a2      	ldr	r2, [r4, #8]
 8008fb6:	7852      	ldrb	r2, [r2, #1]
 8008fb8:	f803 2b01 	strb.w	r2, [r3], #1
 8008fbc:	68a2      	ldr	r2, [r4, #8]
 8008fbe:	7812      	ldrb	r2, [r2, #0]
 8008fc0:	701a      	strb	r2, [r3, #0]
 8008fc2:	e7b4      	b.n	8008f2e <ucdr_deserialize_uint32_t+0x72>
 8008fc4:	4631      	mov	r1, r6
 8008fc6:	463a      	mov	r2, r7
 8008fc8:	4628      	mov	r0, r5
 8008fca:	f007 fc95 	bl	80108f8 <memcpy>
 8008fce:	68a1      	ldr	r1, [r4, #8]
 8008fd0:	464a      	mov	r2, r9
 8008fd2:	19e8      	adds	r0, r5, r7
 8008fd4:	f007 fc90 	bl	80108f8 <memcpy>
 8008fd8:	e7a9      	b.n	8008f2e <ucdr_deserialize_uint32_t+0x72>
 8008fda:	bf00      	nop

08008fdc <ucdr_deserialize_endian_uint32_t>:
 8008fdc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008fe0:	460e      	mov	r6, r1
 8008fe2:	2104      	movs	r1, #4
 8008fe4:	4604      	mov	r4, r0
 8008fe6:	4615      	mov	r5, r2
 8008fe8:	f000 fbda 	bl	80097a0 <ucdr_buffer_alignment>
 8008fec:	4601      	mov	r1, r0
 8008fee:	4620      	mov	r0, r4
 8008ff0:	f894 9015 	ldrb.w	r9, [r4, #21]
 8008ff4:	f000 fc18 	bl	8009828 <ucdr_advance_buffer>
 8008ff8:	2104      	movs	r1, #4
 8008ffa:	4620      	mov	r0, r4
 8008ffc:	f000 fb70 	bl	80096e0 <ucdr_check_buffer_available_for>
 8009000:	2800      	cmp	r0, #0
 8009002:	d13c      	bne.n	800907e <ucdr_deserialize_endian_uint32_t+0xa2>
 8009004:	e9d4 3701 	ldrd	r3, r7, [r4, #4]
 8009008:	42bb      	cmp	r3, r7
 800900a:	d933      	bls.n	8009074 <ucdr_deserialize_endian_uint32_t+0x98>
 800900c:	eba3 0807 	sub.w	r8, r3, r7
 8009010:	60a3      	str	r3, [r4, #8]
 8009012:	6923      	ldr	r3, [r4, #16]
 8009014:	f1c8 0a04 	rsb	sl, r8, #4
 8009018:	4443      	add	r3, r8
 800901a:	6123      	str	r3, [r4, #16]
 800901c:	4651      	mov	r1, sl
 800901e:	4620      	mov	r0, r4
 8009020:	f000 fb6a 	bl	80096f8 <ucdr_check_final_buffer_behavior>
 8009024:	2800      	cmp	r0, #0
 8009026:	d048      	beq.n	80090ba <ucdr_deserialize_endian_uint32_t+0xde>
 8009028:	2e01      	cmp	r6, #1
 800902a:	d061      	beq.n	80090f0 <ucdr_deserialize_endian_uint32_t+0x114>
 800902c:	78fb      	ldrb	r3, [r7, #3]
 800902e:	702b      	strb	r3, [r5, #0]
 8009030:	f1b8 0f00 	cmp.w	r8, #0
 8009034:	d050      	beq.n	80090d8 <ucdr_deserialize_endian_uint32_t+0xfc>
 8009036:	78bb      	ldrb	r3, [r7, #2]
 8009038:	706b      	strb	r3, [r5, #1]
 800903a:	f1b8 0f01 	cmp.w	r8, #1
 800903e:	f105 0302 	add.w	r3, r5, #2
 8009042:	d04d      	beq.n	80090e0 <ucdr_deserialize_endian_uint32_t+0x104>
 8009044:	787b      	ldrb	r3, [r7, #1]
 8009046:	70ab      	strb	r3, [r5, #2]
 8009048:	f1b8 0f02 	cmp.w	r8, #2
 800904c:	f105 0303 	add.w	r3, r5, #3
 8009050:	d04a      	beq.n	80090e8 <ucdr_deserialize_endian_uint32_t+0x10c>
 8009052:	783b      	ldrb	r3, [r7, #0]
 8009054:	70eb      	strb	r3, [r5, #3]
 8009056:	6923      	ldr	r3, [r4, #16]
 8009058:	68a2      	ldr	r2, [r4, #8]
 800905a:	7da0      	ldrb	r0, [r4, #22]
 800905c:	2104      	movs	r1, #4
 800905e:	3304      	adds	r3, #4
 8009060:	4452      	add	r2, sl
 8009062:	eba3 0308 	sub.w	r3, r3, r8
 8009066:	7561      	strb	r1, [r4, #21]
 8009068:	60a2      	str	r2, [r4, #8]
 800906a:	6123      	str	r3, [r4, #16]
 800906c:	f080 0001 	eor.w	r0, r0, #1
 8009070:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009074:	2104      	movs	r1, #4
 8009076:	4620      	mov	r0, r4
 8009078:	f000 fb3e 	bl	80096f8 <ucdr_check_final_buffer_behavior>
 800907c:	b1a8      	cbz	r0, 80090aa <ucdr_deserialize_endian_uint32_t+0xce>
 800907e:	2e01      	cmp	r6, #1
 8009080:	68a3      	ldr	r3, [r4, #8]
 8009082:	d017      	beq.n	80090b4 <ucdr_deserialize_endian_uint32_t+0xd8>
 8009084:	78db      	ldrb	r3, [r3, #3]
 8009086:	702b      	strb	r3, [r5, #0]
 8009088:	68a3      	ldr	r3, [r4, #8]
 800908a:	789b      	ldrb	r3, [r3, #2]
 800908c:	706b      	strb	r3, [r5, #1]
 800908e:	68a3      	ldr	r3, [r4, #8]
 8009090:	785b      	ldrb	r3, [r3, #1]
 8009092:	70ab      	strb	r3, [r5, #2]
 8009094:	68a3      	ldr	r3, [r4, #8]
 8009096:	781b      	ldrb	r3, [r3, #0]
 8009098:	70eb      	strb	r3, [r5, #3]
 800909a:	68a2      	ldr	r2, [r4, #8]
 800909c:	6923      	ldr	r3, [r4, #16]
 800909e:	3204      	adds	r2, #4
 80090a0:	3304      	adds	r3, #4
 80090a2:	2104      	movs	r1, #4
 80090a4:	60a2      	str	r2, [r4, #8]
 80090a6:	6123      	str	r3, [r4, #16]
 80090a8:	7561      	strb	r1, [r4, #21]
 80090aa:	7da0      	ldrb	r0, [r4, #22]
 80090ac:	f080 0001 	eor.w	r0, r0, #1
 80090b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	602b      	str	r3, [r5, #0]
 80090b8:	e7ef      	b.n	800909a <ucdr_deserialize_endian_uint32_t+0xbe>
 80090ba:	68a2      	ldr	r2, [r4, #8]
 80090bc:	6923      	ldr	r3, [r4, #16]
 80090be:	7da0      	ldrb	r0, [r4, #22]
 80090c0:	f884 9015 	strb.w	r9, [r4, #21]
 80090c4:	eba2 0208 	sub.w	r2, r2, r8
 80090c8:	eba3 0308 	sub.w	r3, r3, r8
 80090cc:	60a2      	str	r2, [r4, #8]
 80090ce:	6123      	str	r3, [r4, #16]
 80090d0:	f080 0001 	eor.w	r0, r0, #1
 80090d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80090d8:	68a3      	ldr	r3, [r4, #8]
 80090da:	789b      	ldrb	r3, [r3, #2]
 80090dc:	706b      	strb	r3, [r5, #1]
 80090de:	1cab      	adds	r3, r5, #2
 80090e0:	68a2      	ldr	r2, [r4, #8]
 80090e2:	7852      	ldrb	r2, [r2, #1]
 80090e4:	f803 2b01 	strb.w	r2, [r3], #1
 80090e8:	68a2      	ldr	r2, [r4, #8]
 80090ea:	7812      	ldrb	r2, [r2, #0]
 80090ec:	701a      	strb	r2, [r3, #0]
 80090ee:	e7b2      	b.n	8009056 <ucdr_deserialize_endian_uint32_t+0x7a>
 80090f0:	4639      	mov	r1, r7
 80090f2:	4642      	mov	r2, r8
 80090f4:	4628      	mov	r0, r5
 80090f6:	f007 fbff 	bl	80108f8 <memcpy>
 80090fa:	68a1      	ldr	r1, [r4, #8]
 80090fc:	4652      	mov	r2, sl
 80090fe:	eb05 0008 	add.w	r0, r5, r8
 8009102:	f007 fbf9 	bl	80108f8 <memcpy>
 8009106:	e7a6      	b.n	8009056 <ucdr_deserialize_endian_uint32_t+0x7a>

08009108 <ucdr_serialize_uint64_t>:
 8009108:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800910c:	2108      	movs	r1, #8
 800910e:	b082      	sub	sp, #8
 8009110:	4604      	mov	r4, r0
 8009112:	e9cd 2300 	strd	r2, r3, [sp]
 8009116:	f000 fb43 	bl	80097a0 <ucdr_buffer_alignment>
 800911a:	4601      	mov	r1, r0
 800911c:	4620      	mov	r0, r4
 800911e:	7d67      	ldrb	r7, [r4, #21]
 8009120:	f000 fb82 	bl	8009828 <ucdr_advance_buffer>
 8009124:	2108      	movs	r1, #8
 8009126:	4620      	mov	r0, r4
 8009128:	f000 fada 	bl	80096e0 <ucdr_check_buffer_available_for>
 800912c:	2800      	cmp	r0, #0
 800912e:	d14e      	bne.n	80091ce <ucdr_serialize_uint64_t+0xc6>
 8009130:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 8009134:	42ab      	cmp	r3, r5
 8009136:	d945      	bls.n	80091c4 <ucdr_serialize_uint64_t+0xbc>
 8009138:	1b5e      	subs	r6, r3, r5
 800913a:	60a3      	str	r3, [r4, #8]
 800913c:	6923      	ldr	r3, [r4, #16]
 800913e:	f1c6 0808 	rsb	r8, r6, #8
 8009142:	4433      	add	r3, r6
 8009144:	6123      	str	r3, [r4, #16]
 8009146:	4641      	mov	r1, r8
 8009148:	4620      	mov	r0, r4
 800914a:	f000 fad5 	bl	80096f8 <ucdr_check_final_buffer_behavior>
 800914e:	2800      	cmp	r0, #0
 8009150:	d074      	beq.n	800923c <ucdr_serialize_uint64_t+0x134>
 8009152:	7d23      	ldrb	r3, [r4, #20]
 8009154:	2b01      	cmp	r3, #1
 8009156:	f000 809b 	beq.w	8009290 <ucdr_serialize_uint64_t+0x188>
 800915a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800915e:	702b      	strb	r3, [r5, #0]
 8009160:	2e00      	cmp	r6, #0
 8009162:	d078      	beq.n	8009256 <ucdr_serialize_uint64_t+0x14e>
 8009164:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8009168:	706b      	strb	r3, [r5, #1]
 800916a:	2e01      	cmp	r6, #1
 800916c:	d077      	beq.n	800925e <ucdr_serialize_uint64_t+0x156>
 800916e:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8009172:	70ab      	strb	r3, [r5, #2]
 8009174:	2e02      	cmp	r6, #2
 8009176:	d076      	beq.n	8009266 <ucdr_serialize_uint64_t+0x15e>
 8009178:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800917c:	70eb      	strb	r3, [r5, #3]
 800917e:	2e03      	cmp	r6, #3
 8009180:	d075      	beq.n	800926e <ucdr_serialize_uint64_t+0x166>
 8009182:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8009186:	712b      	strb	r3, [r5, #4]
 8009188:	2e04      	cmp	r6, #4
 800918a:	d074      	beq.n	8009276 <ucdr_serialize_uint64_t+0x16e>
 800918c:	f89d 3002 	ldrb.w	r3, [sp, #2]
 8009190:	716b      	strb	r3, [r5, #5]
 8009192:	2e05      	cmp	r6, #5
 8009194:	d073      	beq.n	800927e <ucdr_serialize_uint64_t+0x176>
 8009196:	f89d 3001 	ldrb.w	r3, [sp, #1]
 800919a:	71ab      	strb	r3, [r5, #6]
 800919c:	2e06      	cmp	r6, #6
 800919e:	d072      	beq.n	8009286 <ucdr_serialize_uint64_t+0x17e>
 80091a0:	f89d 3000 	ldrb.w	r3, [sp]
 80091a4:	71eb      	strb	r3, [r5, #7]
 80091a6:	6923      	ldr	r3, [r4, #16]
 80091a8:	68a2      	ldr	r2, [r4, #8]
 80091aa:	7da0      	ldrb	r0, [r4, #22]
 80091ac:	3308      	adds	r3, #8
 80091ae:	1b9e      	subs	r6, r3, r6
 80091b0:	4442      	add	r2, r8
 80091b2:	2308      	movs	r3, #8
 80091b4:	f080 0001 	eor.w	r0, r0, #1
 80091b8:	60a2      	str	r2, [r4, #8]
 80091ba:	6126      	str	r6, [r4, #16]
 80091bc:	7563      	strb	r3, [r4, #21]
 80091be:	b002      	add	sp, #8
 80091c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80091c4:	2108      	movs	r1, #8
 80091c6:	4620      	mov	r0, r4
 80091c8:	f000 fa96 	bl	80096f8 <ucdr_check_final_buffer_behavior>
 80091cc:	b350      	cbz	r0, 8009224 <ucdr_serialize_uint64_t+0x11c>
 80091ce:	7d23      	ldrb	r3, [r4, #20]
 80091d0:	2b01      	cmp	r3, #1
 80091d2:	d02d      	beq.n	8009230 <ucdr_serialize_uint64_t+0x128>
 80091d4:	68a3      	ldr	r3, [r4, #8]
 80091d6:	f89d 2007 	ldrb.w	r2, [sp, #7]
 80091da:	701a      	strb	r2, [r3, #0]
 80091dc:	68a3      	ldr	r3, [r4, #8]
 80091de:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80091e2:	705a      	strb	r2, [r3, #1]
 80091e4:	68a3      	ldr	r3, [r4, #8]
 80091e6:	f89d 2005 	ldrb.w	r2, [sp, #5]
 80091ea:	709a      	strb	r2, [r3, #2]
 80091ec:	68a3      	ldr	r3, [r4, #8]
 80091ee:	f89d 2004 	ldrb.w	r2, [sp, #4]
 80091f2:	70da      	strb	r2, [r3, #3]
 80091f4:	68a3      	ldr	r3, [r4, #8]
 80091f6:	f89d 2003 	ldrb.w	r2, [sp, #3]
 80091fa:	711a      	strb	r2, [r3, #4]
 80091fc:	68a3      	ldr	r3, [r4, #8]
 80091fe:	f89d 2002 	ldrb.w	r2, [sp, #2]
 8009202:	715a      	strb	r2, [r3, #5]
 8009204:	68a3      	ldr	r3, [r4, #8]
 8009206:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800920a:	719a      	strb	r2, [r3, #6]
 800920c:	68a3      	ldr	r3, [r4, #8]
 800920e:	f89d 2000 	ldrb.w	r2, [sp]
 8009212:	71da      	strb	r2, [r3, #7]
 8009214:	68a2      	ldr	r2, [r4, #8]
 8009216:	6923      	ldr	r3, [r4, #16]
 8009218:	3208      	adds	r2, #8
 800921a:	3308      	adds	r3, #8
 800921c:	2108      	movs	r1, #8
 800921e:	60a2      	str	r2, [r4, #8]
 8009220:	6123      	str	r3, [r4, #16]
 8009222:	7561      	strb	r1, [r4, #21]
 8009224:	7da0      	ldrb	r0, [r4, #22]
 8009226:	f080 0001 	eor.w	r0, r0, #1
 800922a:	b002      	add	sp, #8
 800922c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009230:	466b      	mov	r3, sp
 8009232:	cb03      	ldmia	r3!, {r0, r1}
 8009234:	68a3      	ldr	r3, [r4, #8]
 8009236:	6018      	str	r0, [r3, #0]
 8009238:	6059      	str	r1, [r3, #4]
 800923a:	e7eb      	b.n	8009214 <ucdr_serialize_uint64_t+0x10c>
 800923c:	68a2      	ldr	r2, [r4, #8]
 800923e:	6923      	ldr	r3, [r4, #16]
 8009240:	7da0      	ldrb	r0, [r4, #22]
 8009242:	7567      	strb	r7, [r4, #21]
 8009244:	1b92      	subs	r2, r2, r6
 8009246:	1b9b      	subs	r3, r3, r6
 8009248:	f080 0001 	eor.w	r0, r0, #1
 800924c:	60a2      	str	r2, [r4, #8]
 800924e:	6123      	str	r3, [r4, #16]
 8009250:	b002      	add	sp, #8
 8009252:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009256:	68a3      	ldr	r3, [r4, #8]
 8009258:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800925c:	701a      	strb	r2, [r3, #0]
 800925e:	68a3      	ldr	r3, [r4, #8]
 8009260:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8009264:	701a      	strb	r2, [r3, #0]
 8009266:	68a3      	ldr	r3, [r4, #8]
 8009268:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800926c:	701a      	strb	r2, [r3, #0]
 800926e:	68a3      	ldr	r3, [r4, #8]
 8009270:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8009274:	701a      	strb	r2, [r3, #0]
 8009276:	68a3      	ldr	r3, [r4, #8]
 8009278:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800927c:	701a      	strb	r2, [r3, #0]
 800927e:	68a3      	ldr	r3, [r4, #8]
 8009280:	f89d 2001 	ldrb.w	r2, [sp, #1]
 8009284:	701a      	strb	r2, [r3, #0]
 8009286:	68a3      	ldr	r3, [r4, #8]
 8009288:	f89d 2000 	ldrb.w	r2, [sp]
 800928c:	701a      	strb	r2, [r3, #0]
 800928e:	e78a      	b.n	80091a6 <ucdr_serialize_uint64_t+0x9e>
 8009290:	4628      	mov	r0, r5
 8009292:	466d      	mov	r5, sp
 8009294:	4629      	mov	r1, r5
 8009296:	4632      	mov	r2, r6
 8009298:	f007 fb2e 	bl	80108f8 <memcpy>
 800929c:	68a0      	ldr	r0, [r4, #8]
 800929e:	4642      	mov	r2, r8
 80092a0:	19a9      	adds	r1, r5, r6
 80092a2:	f007 fb29 	bl	80108f8 <memcpy>
 80092a6:	e77e      	b.n	80091a6 <ucdr_serialize_uint64_t+0x9e>

080092a8 <ucdr_serialize_int16_t>:
 80092a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80092ac:	b082      	sub	sp, #8
 80092ae:	460b      	mov	r3, r1
 80092b0:	2102      	movs	r1, #2
 80092b2:	4604      	mov	r4, r0
 80092b4:	f8ad 3006 	strh.w	r3, [sp, #6]
 80092b8:	f000 fa72 	bl	80097a0 <ucdr_buffer_alignment>
 80092bc:	4601      	mov	r1, r0
 80092be:	4620      	mov	r0, r4
 80092c0:	7d67      	ldrb	r7, [r4, #21]
 80092c2:	f000 fab1 	bl	8009828 <ucdr_advance_buffer>
 80092c6:	2102      	movs	r1, #2
 80092c8:	4620      	mov	r0, r4
 80092ca:	f000 fa09 	bl	80096e0 <ucdr_check_buffer_available_for>
 80092ce:	bb78      	cbnz	r0, 8009330 <ucdr_serialize_int16_t+0x88>
 80092d0:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 80092d4:	42ab      	cmp	r3, r5
 80092d6:	d926      	bls.n	8009326 <ucdr_serialize_int16_t+0x7e>
 80092d8:	1b5e      	subs	r6, r3, r5
 80092da:	60a3      	str	r3, [r4, #8]
 80092dc:	6923      	ldr	r3, [r4, #16]
 80092de:	f1c6 0802 	rsb	r8, r6, #2
 80092e2:	4433      	add	r3, r6
 80092e4:	6123      	str	r3, [r4, #16]
 80092e6:	4641      	mov	r1, r8
 80092e8:	4620      	mov	r0, r4
 80092ea:	f000 fa05 	bl	80096f8 <ucdr_check_final_buffer_behavior>
 80092ee:	2800      	cmp	r0, #0
 80092f0:	d03b      	beq.n	800936a <ucdr_serialize_int16_t+0xc2>
 80092f2:	7d23      	ldrb	r3, [r4, #20]
 80092f4:	2b01      	cmp	r3, #1
 80092f6:	d04a      	beq.n	800938e <ucdr_serialize_int16_t+0xe6>
 80092f8:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80092fc:	702b      	strb	r3, [r5, #0]
 80092fe:	2e00      	cmp	r6, #0
 8009300:	d040      	beq.n	8009384 <ucdr_serialize_int16_t+0xdc>
 8009302:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8009306:	706b      	strb	r3, [r5, #1]
 8009308:	6923      	ldr	r3, [r4, #16]
 800930a:	68a2      	ldr	r2, [r4, #8]
 800930c:	7da0      	ldrb	r0, [r4, #22]
 800930e:	3302      	adds	r3, #2
 8009310:	1b9e      	subs	r6, r3, r6
 8009312:	4442      	add	r2, r8
 8009314:	2302      	movs	r3, #2
 8009316:	f080 0001 	eor.w	r0, r0, #1
 800931a:	60a2      	str	r2, [r4, #8]
 800931c:	6126      	str	r6, [r4, #16]
 800931e:	7563      	strb	r3, [r4, #21]
 8009320:	b002      	add	sp, #8
 8009322:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009326:	2102      	movs	r1, #2
 8009328:	4620      	mov	r0, r4
 800932a:	f000 f9e5 	bl	80096f8 <ucdr_check_final_buffer_behavior>
 800932e:	b190      	cbz	r0, 8009356 <ucdr_serialize_int16_t+0xae>
 8009330:	7d23      	ldrb	r3, [r4, #20]
 8009332:	2b01      	cmp	r3, #1
 8009334:	68a3      	ldr	r3, [r4, #8]
 8009336:	d014      	beq.n	8009362 <ucdr_serialize_int16_t+0xba>
 8009338:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800933c:	701a      	strb	r2, [r3, #0]
 800933e:	68a3      	ldr	r3, [r4, #8]
 8009340:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8009344:	705a      	strb	r2, [r3, #1]
 8009346:	68a2      	ldr	r2, [r4, #8]
 8009348:	6923      	ldr	r3, [r4, #16]
 800934a:	3202      	adds	r2, #2
 800934c:	3302      	adds	r3, #2
 800934e:	2102      	movs	r1, #2
 8009350:	60a2      	str	r2, [r4, #8]
 8009352:	6123      	str	r3, [r4, #16]
 8009354:	7561      	strb	r1, [r4, #21]
 8009356:	7da0      	ldrb	r0, [r4, #22]
 8009358:	f080 0001 	eor.w	r0, r0, #1
 800935c:	b002      	add	sp, #8
 800935e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009362:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8009366:	801a      	strh	r2, [r3, #0]
 8009368:	e7ed      	b.n	8009346 <ucdr_serialize_int16_t+0x9e>
 800936a:	68a2      	ldr	r2, [r4, #8]
 800936c:	6923      	ldr	r3, [r4, #16]
 800936e:	7da0      	ldrb	r0, [r4, #22]
 8009370:	7567      	strb	r7, [r4, #21]
 8009372:	1b92      	subs	r2, r2, r6
 8009374:	1b9b      	subs	r3, r3, r6
 8009376:	f080 0001 	eor.w	r0, r0, #1
 800937a:	60a2      	str	r2, [r4, #8]
 800937c:	6123      	str	r3, [r4, #16]
 800937e:	b002      	add	sp, #8
 8009380:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009384:	68a3      	ldr	r3, [r4, #8]
 8009386:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800938a:	701a      	strb	r2, [r3, #0]
 800938c:	e7bc      	b.n	8009308 <ucdr_serialize_int16_t+0x60>
 800938e:	4628      	mov	r0, r5
 8009390:	f10d 0506 	add.w	r5, sp, #6
 8009394:	4629      	mov	r1, r5
 8009396:	4632      	mov	r2, r6
 8009398:	f007 faae 	bl	80108f8 <memcpy>
 800939c:	68a0      	ldr	r0, [r4, #8]
 800939e:	4642      	mov	r2, r8
 80093a0:	19a9      	adds	r1, r5, r6
 80093a2:	f007 faa9 	bl	80108f8 <memcpy>
 80093a6:	e7af      	b.n	8009308 <ucdr_serialize_int16_t+0x60>

080093a8 <ucdr_deserialize_int16_t>:
 80093a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80093ac:	460d      	mov	r5, r1
 80093ae:	2102      	movs	r1, #2
 80093b0:	4604      	mov	r4, r0
 80093b2:	f000 f9f5 	bl	80097a0 <ucdr_buffer_alignment>
 80093b6:	4601      	mov	r1, r0
 80093b8:	4620      	mov	r0, r4
 80093ba:	f894 8015 	ldrb.w	r8, [r4, #21]
 80093be:	f000 fa33 	bl	8009828 <ucdr_advance_buffer>
 80093c2:	2102      	movs	r1, #2
 80093c4:	4620      	mov	r0, r4
 80093c6:	f000 f98b 	bl	80096e0 <ucdr_check_buffer_available_for>
 80093ca:	bb60      	cbnz	r0, 8009426 <ucdr_deserialize_int16_t+0x7e>
 80093cc:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 80093d0:	42be      	cmp	r6, r7
 80093d2:	d923      	bls.n	800941c <ucdr_deserialize_int16_t+0x74>
 80093d4:	6923      	ldr	r3, [r4, #16]
 80093d6:	60a6      	str	r6, [r4, #8]
 80093d8:	1bf6      	subs	r6, r6, r7
 80093da:	4433      	add	r3, r6
 80093dc:	f1c6 0902 	rsb	r9, r6, #2
 80093e0:	6123      	str	r3, [r4, #16]
 80093e2:	4649      	mov	r1, r9
 80093e4:	4620      	mov	r0, r4
 80093e6:	f000 f987 	bl	80096f8 <ucdr_check_final_buffer_behavior>
 80093ea:	2800      	cmp	r0, #0
 80093ec:	d034      	beq.n	8009458 <ucdr_deserialize_int16_t+0xb0>
 80093ee:	7d23      	ldrb	r3, [r4, #20]
 80093f0:	2b01      	cmp	r3, #1
 80093f2:	d042      	beq.n	800947a <ucdr_deserialize_int16_t+0xd2>
 80093f4:	787b      	ldrb	r3, [r7, #1]
 80093f6:	702b      	strb	r3, [r5, #0]
 80093f8:	2e00      	cmp	r6, #0
 80093fa:	d03a      	beq.n	8009472 <ucdr_deserialize_int16_t+0xca>
 80093fc:	783b      	ldrb	r3, [r7, #0]
 80093fe:	706b      	strb	r3, [r5, #1]
 8009400:	6923      	ldr	r3, [r4, #16]
 8009402:	68a2      	ldr	r2, [r4, #8]
 8009404:	7da0      	ldrb	r0, [r4, #22]
 8009406:	2102      	movs	r1, #2
 8009408:	3302      	adds	r3, #2
 800940a:	444a      	add	r2, r9
 800940c:	1b9b      	subs	r3, r3, r6
 800940e:	7561      	strb	r1, [r4, #21]
 8009410:	60a2      	str	r2, [r4, #8]
 8009412:	6123      	str	r3, [r4, #16]
 8009414:	f080 0001 	eor.w	r0, r0, #1
 8009418:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800941c:	2102      	movs	r1, #2
 800941e:	4620      	mov	r0, r4
 8009420:	f000 f96a 	bl	80096f8 <ucdr_check_final_buffer_behavior>
 8009424:	b180      	cbz	r0, 8009448 <ucdr_deserialize_int16_t+0xa0>
 8009426:	7d23      	ldrb	r3, [r4, #20]
 8009428:	2b01      	cmp	r3, #1
 800942a:	68a3      	ldr	r3, [r4, #8]
 800942c:	d011      	beq.n	8009452 <ucdr_deserialize_int16_t+0xaa>
 800942e:	785b      	ldrb	r3, [r3, #1]
 8009430:	702b      	strb	r3, [r5, #0]
 8009432:	68a3      	ldr	r3, [r4, #8]
 8009434:	781b      	ldrb	r3, [r3, #0]
 8009436:	706b      	strb	r3, [r5, #1]
 8009438:	68a2      	ldr	r2, [r4, #8]
 800943a:	6923      	ldr	r3, [r4, #16]
 800943c:	3202      	adds	r2, #2
 800943e:	3302      	adds	r3, #2
 8009440:	2102      	movs	r1, #2
 8009442:	60a2      	str	r2, [r4, #8]
 8009444:	6123      	str	r3, [r4, #16]
 8009446:	7561      	strb	r1, [r4, #21]
 8009448:	7da0      	ldrb	r0, [r4, #22]
 800944a:	f080 0001 	eor.w	r0, r0, #1
 800944e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009452:	881b      	ldrh	r3, [r3, #0]
 8009454:	802b      	strh	r3, [r5, #0]
 8009456:	e7ef      	b.n	8009438 <ucdr_deserialize_int16_t+0x90>
 8009458:	68a2      	ldr	r2, [r4, #8]
 800945a:	6923      	ldr	r3, [r4, #16]
 800945c:	7da0      	ldrb	r0, [r4, #22]
 800945e:	f884 8015 	strb.w	r8, [r4, #21]
 8009462:	1b92      	subs	r2, r2, r6
 8009464:	1b9b      	subs	r3, r3, r6
 8009466:	60a2      	str	r2, [r4, #8]
 8009468:	6123      	str	r3, [r4, #16]
 800946a:	f080 0001 	eor.w	r0, r0, #1
 800946e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009472:	68a3      	ldr	r3, [r4, #8]
 8009474:	781b      	ldrb	r3, [r3, #0]
 8009476:	706b      	strb	r3, [r5, #1]
 8009478:	e7c2      	b.n	8009400 <ucdr_deserialize_int16_t+0x58>
 800947a:	4639      	mov	r1, r7
 800947c:	4632      	mov	r2, r6
 800947e:	4628      	mov	r0, r5
 8009480:	f007 fa3a 	bl	80108f8 <memcpy>
 8009484:	68a1      	ldr	r1, [r4, #8]
 8009486:	464a      	mov	r2, r9
 8009488:	19a8      	adds	r0, r5, r6
 800948a:	f007 fa35 	bl	80108f8 <memcpy>
 800948e:	e7b7      	b.n	8009400 <ucdr_deserialize_int16_t+0x58>

08009490 <ucdr_serialize_int32_t>:
 8009490:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009494:	b082      	sub	sp, #8
 8009496:	4604      	mov	r4, r0
 8009498:	9101      	str	r1, [sp, #4]
 800949a:	2104      	movs	r1, #4
 800949c:	f000 f980 	bl	80097a0 <ucdr_buffer_alignment>
 80094a0:	4601      	mov	r1, r0
 80094a2:	4620      	mov	r0, r4
 80094a4:	7d67      	ldrb	r7, [r4, #21]
 80094a6:	f000 f9bf 	bl	8009828 <ucdr_advance_buffer>
 80094aa:	2104      	movs	r1, #4
 80094ac:	4620      	mov	r0, r4
 80094ae:	f000 f917 	bl	80096e0 <ucdr_check_buffer_available_for>
 80094b2:	2800      	cmp	r0, #0
 80094b4:	d139      	bne.n	800952a <ucdr_serialize_int32_t+0x9a>
 80094b6:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 80094ba:	42ab      	cmp	r3, r5
 80094bc:	d930      	bls.n	8009520 <ucdr_serialize_int32_t+0x90>
 80094be:	1b5e      	subs	r6, r3, r5
 80094c0:	60a3      	str	r3, [r4, #8]
 80094c2:	6923      	ldr	r3, [r4, #16]
 80094c4:	f1c6 0804 	rsb	r8, r6, #4
 80094c8:	4433      	add	r3, r6
 80094ca:	6123      	str	r3, [r4, #16]
 80094cc:	4641      	mov	r1, r8
 80094ce:	4620      	mov	r0, r4
 80094d0:	f000 f912 	bl	80096f8 <ucdr_check_final_buffer_behavior>
 80094d4:	2800      	cmp	r0, #0
 80094d6:	d04c      	beq.n	8009572 <ucdr_serialize_int32_t+0xe2>
 80094d8:	7d23      	ldrb	r3, [r4, #20]
 80094da:	2b01      	cmp	r3, #1
 80094dc:	d063      	beq.n	80095a6 <ucdr_serialize_int32_t+0x116>
 80094de:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80094e2:	702b      	strb	r3, [r5, #0]
 80094e4:	2e00      	cmp	r6, #0
 80094e6:	d051      	beq.n	800958c <ucdr_serialize_int32_t+0xfc>
 80094e8:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80094ec:	706b      	strb	r3, [r5, #1]
 80094ee:	2e01      	cmp	r6, #1
 80094f0:	d050      	beq.n	8009594 <ucdr_serialize_int32_t+0x104>
 80094f2:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80094f6:	70ab      	strb	r3, [r5, #2]
 80094f8:	2e02      	cmp	r6, #2
 80094fa:	d04f      	beq.n	800959c <ucdr_serialize_int32_t+0x10c>
 80094fc:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8009500:	70eb      	strb	r3, [r5, #3]
 8009502:	6923      	ldr	r3, [r4, #16]
 8009504:	68a2      	ldr	r2, [r4, #8]
 8009506:	7da0      	ldrb	r0, [r4, #22]
 8009508:	3304      	adds	r3, #4
 800950a:	1b9e      	subs	r6, r3, r6
 800950c:	4442      	add	r2, r8
 800950e:	2304      	movs	r3, #4
 8009510:	f080 0001 	eor.w	r0, r0, #1
 8009514:	60a2      	str	r2, [r4, #8]
 8009516:	6126      	str	r6, [r4, #16]
 8009518:	7563      	strb	r3, [r4, #21]
 800951a:	b002      	add	sp, #8
 800951c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009520:	2104      	movs	r1, #4
 8009522:	4620      	mov	r0, r4
 8009524:	f000 f8e8 	bl	80096f8 <ucdr_check_final_buffer_behavior>
 8009528:	b1d0      	cbz	r0, 8009560 <ucdr_serialize_int32_t+0xd0>
 800952a:	7d23      	ldrb	r3, [r4, #20]
 800952c:	2b01      	cmp	r3, #1
 800952e:	68a3      	ldr	r3, [r4, #8]
 8009530:	d01c      	beq.n	800956c <ucdr_serialize_int32_t+0xdc>
 8009532:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8009536:	701a      	strb	r2, [r3, #0]
 8009538:	68a3      	ldr	r3, [r4, #8]
 800953a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800953e:	705a      	strb	r2, [r3, #1]
 8009540:	68a3      	ldr	r3, [r4, #8]
 8009542:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8009546:	709a      	strb	r2, [r3, #2]
 8009548:	68a3      	ldr	r3, [r4, #8]
 800954a:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800954e:	70da      	strb	r2, [r3, #3]
 8009550:	68a2      	ldr	r2, [r4, #8]
 8009552:	6923      	ldr	r3, [r4, #16]
 8009554:	3204      	adds	r2, #4
 8009556:	3304      	adds	r3, #4
 8009558:	2104      	movs	r1, #4
 800955a:	60a2      	str	r2, [r4, #8]
 800955c:	6123      	str	r3, [r4, #16]
 800955e:	7561      	strb	r1, [r4, #21]
 8009560:	7da0      	ldrb	r0, [r4, #22]
 8009562:	f080 0001 	eor.w	r0, r0, #1
 8009566:	b002      	add	sp, #8
 8009568:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800956c:	9a01      	ldr	r2, [sp, #4]
 800956e:	601a      	str	r2, [r3, #0]
 8009570:	e7ee      	b.n	8009550 <ucdr_serialize_int32_t+0xc0>
 8009572:	68a2      	ldr	r2, [r4, #8]
 8009574:	6923      	ldr	r3, [r4, #16]
 8009576:	7da0      	ldrb	r0, [r4, #22]
 8009578:	7567      	strb	r7, [r4, #21]
 800957a:	1b92      	subs	r2, r2, r6
 800957c:	1b9b      	subs	r3, r3, r6
 800957e:	f080 0001 	eor.w	r0, r0, #1
 8009582:	60a2      	str	r2, [r4, #8]
 8009584:	6123      	str	r3, [r4, #16]
 8009586:	b002      	add	sp, #8
 8009588:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800958c:	68a3      	ldr	r3, [r4, #8]
 800958e:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8009592:	701a      	strb	r2, [r3, #0]
 8009594:	68a3      	ldr	r3, [r4, #8]
 8009596:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800959a:	701a      	strb	r2, [r3, #0]
 800959c:	68a3      	ldr	r3, [r4, #8]
 800959e:	f89d 2004 	ldrb.w	r2, [sp, #4]
 80095a2:	701a      	strb	r2, [r3, #0]
 80095a4:	e7ad      	b.n	8009502 <ucdr_serialize_int32_t+0x72>
 80095a6:	4628      	mov	r0, r5
 80095a8:	ad01      	add	r5, sp, #4
 80095aa:	4629      	mov	r1, r5
 80095ac:	4632      	mov	r2, r6
 80095ae:	f007 f9a3 	bl	80108f8 <memcpy>
 80095b2:	68a0      	ldr	r0, [r4, #8]
 80095b4:	4642      	mov	r2, r8
 80095b6:	19a9      	adds	r1, r5, r6
 80095b8:	f007 f99e 	bl	80108f8 <memcpy>
 80095bc:	e7a1      	b.n	8009502 <ucdr_serialize_int32_t+0x72>
 80095be:	bf00      	nop

080095c0 <ucdr_deserialize_int32_t>:
 80095c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80095c4:	460d      	mov	r5, r1
 80095c6:	2104      	movs	r1, #4
 80095c8:	4604      	mov	r4, r0
 80095ca:	f000 f8e9 	bl	80097a0 <ucdr_buffer_alignment>
 80095ce:	4601      	mov	r1, r0
 80095d0:	4620      	mov	r0, r4
 80095d2:	f894 8015 	ldrb.w	r8, [r4, #21]
 80095d6:	f000 f927 	bl	8009828 <ucdr_advance_buffer>
 80095da:	2104      	movs	r1, #4
 80095dc:	4620      	mov	r0, r4
 80095de:	f000 f87f 	bl	80096e0 <ucdr_check_buffer_available_for>
 80095e2:	2800      	cmp	r0, #0
 80095e4:	d138      	bne.n	8009658 <ucdr_deserialize_int32_t+0x98>
 80095e6:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 80095ea:	42b7      	cmp	r7, r6
 80095ec:	d92f      	bls.n	800964e <ucdr_deserialize_int32_t+0x8e>
 80095ee:	6923      	ldr	r3, [r4, #16]
 80095f0:	60a7      	str	r7, [r4, #8]
 80095f2:	1bbf      	subs	r7, r7, r6
 80095f4:	443b      	add	r3, r7
 80095f6:	f1c7 0904 	rsb	r9, r7, #4
 80095fa:	6123      	str	r3, [r4, #16]
 80095fc:	4649      	mov	r1, r9
 80095fe:	4620      	mov	r0, r4
 8009600:	f000 f87a 	bl	80096f8 <ucdr_check_final_buffer_behavior>
 8009604:	2800      	cmp	r0, #0
 8009606:	d046      	beq.n	8009696 <ucdr_deserialize_int32_t+0xd6>
 8009608:	7d23      	ldrb	r3, [r4, #20]
 800960a:	2b01      	cmp	r3, #1
 800960c:	d05c      	beq.n	80096c8 <ucdr_deserialize_int32_t+0x108>
 800960e:	78f3      	ldrb	r3, [r6, #3]
 8009610:	702b      	strb	r3, [r5, #0]
 8009612:	2f00      	cmp	r7, #0
 8009614:	d04c      	beq.n	80096b0 <ucdr_deserialize_int32_t+0xf0>
 8009616:	78b3      	ldrb	r3, [r6, #2]
 8009618:	706b      	strb	r3, [r5, #1]
 800961a:	2f01      	cmp	r7, #1
 800961c:	f105 0302 	add.w	r3, r5, #2
 8009620:	d04a      	beq.n	80096b8 <ucdr_deserialize_int32_t+0xf8>
 8009622:	7873      	ldrb	r3, [r6, #1]
 8009624:	70ab      	strb	r3, [r5, #2]
 8009626:	2f02      	cmp	r7, #2
 8009628:	f105 0303 	add.w	r3, r5, #3
 800962c:	d048      	beq.n	80096c0 <ucdr_deserialize_int32_t+0x100>
 800962e:	7833      	ldrb	r3, [r6, #0]
 8009630:	70eb      	strb	r3, [r5, #3]
 8009632:	6923      	ldr	r3, [r4, #16]
 8009634:	68a2      	ldr	r2, [r4, #8]
 8009636:	7da0      	ldrb	r0, [r4, #22]
 8009638:	2104      	movs	r1, #4
 800963a:	3304      	adds	r3, #4
 800963c:	444a      	add	r2, r9
 800963e:	1bdb      	subs	r3, r3, r7
 8009640:	7561      	strb	r1, [r4, #21]
 8009642:	60a2      	str	r2, [r4, #8]
 8009644:	6123      	str	r3, [r4, #16]
 8009646:	f080 0001 	eor.w	r0, r0, #1
 800964a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800964e:	2104      	movs	r1, #4
 8009650:	4620      	mov	r0, r4
 8009652:	f000 f851 	bl	80096f8 <ucdr_check_final_buffer_behavior>
 8009656:	b1b0      	cbz	r0, 8009686 <ucdr_deserialize_int32_t+0xc6>
 8009658:	7d23      	ldrb	r3, [r4, #20]
 800965a:	2b01      	cmp	r3, #1
 800965c:	68a3      	ldr	r3, [r4, #8]
 800965e:	d017      	beq.n	8009690 <ucdr_deserialize_int32_t+0xd0>
 8009660:	78db      	ldrb	r3, [r3, #3]
 8009662:	702b      	strb	r3, [r5, #0]
 8009664:	68a3      	ldr	r3, [r4, #8]
 8009666:	789b      	ldrb	r3, [r3, #2]
 8009668:	706b      	strb	r3, [r5, #1]
 800966a:	68a3      	ldr	r3, [r4, #8]
 800966c:	785b      	ldrb	r3, [r3, #1]
 800966e:	70ab      	strb	r3, [r5, #2]
 8009670:	68a3      	ldr	r3, [r4, #8]
 8009672:	781b      	ldrb	r3, [r3, #0]
 8009674:	70eb      	strb	r3, [r5, #3]
 8009676:	68a2      	ldr	r2, [r4, #8]
 8009678:	6923      	ldr	r3, [r4, #16]
 800967a:	3204      	adds	r2, #4
 800967c:	3304      	adds	r3, #4
 800967e:	2104      	movs	r1, #4
 8009680:	60a2      	str	r2, [r4, #8]
 8009682:	6123      	str	r3, [r4, #16]
 8009684:	7561      	strb	r1, [r4, #21]
 8009686:	7da0      	ldrb	r0, [r4, #22]
 8009688:	f080 0001 	eor.w	r0, r0, #1
 800968c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009690:	681b      	ldr	r3, [r3, #0]
 8009692:	602b      	str	r3, [r5, #0]
 8009694:	e7ef      	b.n	8009676 <ucdr_deserialize_int32_t+0xb6>
 8009696:	68a2      	ldr	r2, [r4, #8]
 8009698:	6923      	ldr	r3, [r4, #16]
 800969a:	7da0      	ldrb	r0, [r4, #22]
 800969c:	f884 8015 	strb.w	r8, [r4, #21]
 80096a0:	1bd2      	subs	r2, r2, r7
 80096a2:	1bdb      	subs	r3, r3, r7
 80096a4:	60a2      	str	r2, [r4, #8]
 80096a6:	6123      	str	r3, [r4, #16]
 80096a8:	f080 0001 	eor.w	r0, r0, #1
 80096ac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80096b0:	68a3      	ldr	r3, [r4, #8]
 80096b2:	789b      	ldrb	r3, [r3, #2]
 80096b4:	706b      	strb	r3, [r5, #1]
 80096b6:	1cab      	adds	r3, r5, #2
 80096b8:	68a2      	ldr	r2, [r4, #8]
 80096ba:	7852      	ldrb	r2, [r2, #1]
 80096bc:	f803 2b01 	strb.w	r2, [r3], #1
 80096c0:	68a2      	ldr	r2, [r4, #8]
 80096c2:	7812      	ldrb	r2, [r2, #0]
 80096c4:	701a      	strb	r2, [r3, #0]
 80096c6:	e7b4      	b.n	8009632 <ucdr_deserialize_int32_t+0x72>
 80096c8:	4631      	mov	r1, r6
 80096ca:	463a      	mov	r2, r7
 80096cc:	4628      	mov	r0, r5
 80096ce:	f007 f913 	bl	80108f8 <memcpy>
 80096d2:	68a1      	ldr	r1, [r4, #8]
 80096d4:	464a      	mov	r2, r9
 80096d6:	19e8      	adds	r0, r5, r7
 80096d8:	f007 f90e 	bl	80108f8 <memcpy>
 80096dc:	e7a9      	b.n	8009632 <ucdr_deserialize_int32_t+0x72>
 80096de:	bf00      	nop

080096e0 <ucdr_check_buffer_available_for>:
 80096e0:	7d83      	ldrb	r3, [r0, #22]
 80096e2:	b93b      	cbnz	r3, 80096f4 <ucdr_check_buffer_available_for+0x14>
 80096e4:	e9d0 0301 	ldrd	r0, r3, [r0, #4]
 80096e8:	4419      	add	r1, r3
 80096ea:	4288      	cmp	r0, r1
 80096ec:	bf34      	ite	cc
 80096ee:	2000      	movcc	r0, #0
 80096f0:	2001      	movcs	r0, #1
 80096f2:	4770      	bx	lr
 80096f4:	2000      	movs	r0, #0
 80096f6:	4770      	bx	lr

080096f8 <ucdr_check_final_buffer_behavior>:
 80096f8:	7d83      	ldrb	r3, [r0, #22]
 80096fa:	b943      	cbnz	r3, 800970e <ucdr_check_final_buffer_behavior+0x16>
 80096fc:	e9d0 2101 	ldrd	r2, r1, [r0, #4]
 8009700:	4291      	cmp	r1, r2
 8009702:	b510      	push	{r4, lr}
 8009704:	4604      	mov	r4, r0
 8009706:	d205      	bcs.n	8009714 <ucdr_check_final_buffer_behavior+0x1c>
 8009708:	2301      	movs	r3, #1
 800970a:	4618      	mov	r0, r3
 800970c:	bd10      	pop	{r4, pc}
 800970e:	2300      	movs	r3, #0
 8009710:	4618      	mov	r0, r3
 8009712:	4770      	bx	lr
 8009714:	6982      	ldr	r2, [r0, #24]
 8009716:	b13a      	cbz	r2, 8009728 <ucdr_check_final_buffer_behavior+0x30>
 8009718:	69c1      	ldr	r1, [r0, #28]
 800971a:	4790      	blx	r2
 800971c:	f080 0301 	eor.w	r3, r0, #1
 8009720:	b2db      	uxtb	r3, r3
 8009722:	75a0      	strb	r0, [r4, #22]
 8009724:	4618      	mov	r0, r3
 8009726:	bd10      	pop	{r4, pc}
 8009728:	2001      	movs	r0, #1
 800972a:	75a0      	strb	r0, [r4, #22]
 800972c:	e7fa      	b.n	8009724 <ucdr_check_final_buffer_behavior+0x2c>
 800972e:	bf00      	nop

08009730 <ucdr_set_on_full_buffer_callback>:
 8009730:	e9c0 1206 	strd	r1, r2, [r0, #24]
 8009734:	4770      	bx	lr
 8009736:	bf00      	nop

08009738 <ucdr_init_buffer_origin_offset_endian>:
 8009738:	b410      	push	{r4}
 800973a:	9c01      	ldr	r4, [sp, #4]
 800973c:	6001      	str	r1, [r0, #0]
 800973e:	440a      	add	r2, r1
 8009740:	6042      	str	r2, [r0, #4]
 8009742:	190a      	adds	r2, r1, r4
 8009744:	441c      	add	r4, r3
 8009746:	e9c0 3403 	strd	r3, r4, [r0, #12]
 800974a:	6082      	str	r2, [r0, #8]
 800974c:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8009750:	7503      	strb	r3, [r0, #20]
 8009752:	2200      	movs	r2, #0
 8009754:	e9c0 2206 	strd	r2, r2, [r0, #24]
 8009758:	f85d 4b04 	ldr.w	r4, [sp], #4
 800975c:	7542      	strb	r2, [r0, #21]
 800975e:	7582      	strb	r2, [r0, #22]
 8009760:	4770      	bx	lr
 8009762:	bf00      	nop

08009764 <ucdr_init_buffer_origin_offset>:
 8009764:	b510      	push	{r4, lr}
 8009766:	b082      	sub	sp, #8
 8009768:	9c04      	ldr	r4, [sp, #16]
 800976a:	9400      	str	r4, [sp, #0]
 800976c:	2401      	movs	r4, #1
 800976e:	9401      	str	r4, [sp, #4]
 8009770:	f7ff ffe2 	bl	8009738 <ucdr_init_buffer_origin_offset_endian>
 8009774:	b002      	add	sp, #8
 8009776:	bd10      	pop	{r4, pc}

08009778 <ucdr_init_buffer_origin>:
 8009778:	b510      	push	{r4, lr}
 800977a:	b082      	sub	sp, #8
 800977c:	2400      	movs	r4, #0
 800977e:	9400      	str	r4, [sp, #0]
 8009780:	f7ff fff0 	bl	8009764 <ucdr_init_buffer_origin_offset>
 8009784:	b002      	add	sp, #8
 8009786:	bd10      	pop	{r4, pc}

08009788 <ucdr_init_buffer>:
 8009788:	2300      	movs	r3, #0
 800978a:	f7ff bff5 	b.w	8009778 <ucdr_init_buffer_origin>
 800978e:	bf00      	nop

08009790 <ucdr_alignment>:
 8009790:	fbb0 f3f1 	udiv	r3, r0, r1
 8009794:	fb03 0011 	mls	r0, r3, r1, r0
 8009798:	1a08      	subs	r0, r1, r0
 800979a:	3901      	subs	r1, #1
 800979c:	4008      	ands	r0, r1
 800979e:	4770      	bx	lr

080097a0 <ucdr_buffer_alignment>:
 80097a0:	7d43      	ldrb	r3, [r0, #21]
 80097a2:	428b      	cmp	r3, r1
 80097a4:	d208      	bcs.n	80097b8 <ucdr_buffer_alignment+0x18>
 80097a6:	6900      	ldr	r0, [r0, #16]
 80097a8:	fbb0 f3f1 	udiv	r3, r0, r1
 80097ac:	fb01 0013 	mls	r0, r1, r3, r0
 80097b0:	1a08      	subs	r0, r1, r0
 80097b2:	3901      	subs	r1, #1
 80097b4:	4008      	ands	r0, r1
 80097b6:	4770      	bx	lr
 80097b8:	2000      	movs	r0, #0
 80097ba:	4770      	bx	lr

080097bc <ucdr_align_to>:
 80097bc:	b538      	push	{r3, r4, r5, lr}
 80097be:	4604      	mov	r4, r0
 80097c0:	460d      	mov	r5, r1
 80097c2:	f7ff ffed 	bl	80097a0 <ucdr_buffer_alignment>
 80097c6:	68a3      	ldr	r3, [r4, #8]
 80097c8:	6921      	ldr	r1, [r4, #16]
 80097ca:	7565      	strb	r5, [r4, #21]
 80097cc:	181a      	adds	r2, r3, r0
 80097ce:	6863      	ldr	r3, [r4, #4]
 80097d0:	4293      	cmp	r3, r2
 80097d2:	4408      	add	r0, r1
 80097d4:	bf28      	it	cs
 80097d6:	4613      	movcs	r3, r2
 80097d8:	6120      	str	r0, [r4, #16]
 80097da:	60a3      	str	r3, [r4, #8]
 80097dc:	bd38      	pop	{r3, r4, r5, pc}
 80097de:	bf00      	nop

080097e0 <ucdr_buffer_length>:
 80097e0:	6882      	ldr	r2, [r0, #8]
 80097e2:	6800      	ldr	r0, [r0, #0]
 80097e4:	1a10      	subs	r0, r2, r0
 80097e6:	4770      	bx	lr

080097e8 <ucdr_buffer_remaining>:
 80097e8:	e9d0 2001 	ldrd	r2, r0, [r0, #4]
 80097ec:	1a10      	subs	r0, r2, r0
 80097ee:	4770      	bx	lr

080097f0 <ucdr_check_final_buffer_behavior_array>:
 80097f0:	b538      	push	{r3, r4, r5, lr}
 80097f2:	7d83      	ldrb	r3, [r0, #22]
 80097f4:	b963      	cbnz	r3, 8009810 <ucdr_check_final_buffer_behavior_array+0x20>
 80097f6:	e9d0 3201 	ldrd	r3, r2, [r0, #4]
 80097fa:	429a      	cmp	r2, r3
 80097fc:	4604      	mov	r4, r0
 80097fe:	460d      	mov	r5, r1
 8009800:	d308      	bcc.n	8009814 <ucdr_check_final_buffer_behavior_array+0x24>
 8009802:	b139      	cbz	r1, 8009814 <ucdr_check_final_buffer_behavior_array+0x24>
 8009804:	6983      	ldr	r3, [r0, #24]
 8009806:	b163      	cbz	r3, 8009822 <ucdr_check_final_buffer_behavior_array+0x32>
 8009808:	69c1      	ldr	r1, [r0, #28]
 800980a:	4798      	blx	r3
 800980c:	75a0      	strb	r0, [r4, #22]
 800980e:	b108      	cbz	r0, 8009814 <ucdr_check_final_buffer_behavior_array+0x24>
 8009810:	2000      	movs	r0, #0
 8009812:	bd38      	pop	{r3, r4, r5, pc}
 8009814:	4620      	mov	r0, r4
 8009816:	f7ff ffe7 	bl	80097e8 <ucdr_buffer_remaining>
 800981a:	42a8      	cmp	r0, r5
 800981c:	bf28      	it	cs
 800981e:	4628      	movcs	r0, r5
 8009820:	bd38      	pop	{r3, r4, r5, pc}
 8009822:	2301      	movs	r3, #1
 8009824:	7583      	strb	r3, [r0, #22]
 8009826:	e7f3      	b.n	8009810 <ucdr_check_final_buffer_behavior_array+0x20>

08009828 <ucdr_advance_buffer>:
 8009828:	b538      	push	{r3, r4, r5, lr}
 800982a:	4604      	mov	r4, r0
 800982c:	460d      	mov	r5, r1
 800982e:	f7ff ff57 	bl	80096e0 <ucdr_check_buffer_available_for>
 8009832:	b178      	cbz	r0, 8009854 <ucdr_advance_buffer+0x2c>
 8009834:	6923      	ldr	r3, [r4, #16]
 8009836:	68a2      	ldr	r2, [r4, #8]
 8009838:	442b      	add	r3, r5
 800983a:	6123      	str	r3, [r4, #16]
 800983c:	2301      	movs	r3, #1
 800983e:	442a      	add	r2, r5
 8009840:	7563      	strb	r3, [r4, #21]
 8009842:	60a2      	str	r2, [r4, #8]
 8009844:	bd38      	pop	{r3, r4, r5, pc}
 8009846:	68a2      	ldr	r2, [r4, #8]
 8009848:	6923      	ldr	r3, [r4, #16]
 800984a:	4402      	add	r2, r0
 800984c:	4403      	add	r3, r0
 800984e:	1a2d      	subs	r5, r5, r0
 8009850:	60a2      	str	r2, [r4, #8]
 8009852:	6123      	str	r3, [r4, #16]
 8009854:	4629      	mov	r1, r5
 8009856:	2201      	movs	r2, #1
 8009858:	4620      	mov	r0, r4
 800985a:	f7ff ffc9 	bl	80097f0 <ucdr_check_final_buffer_behavior_array>
 800985e:	2800      	cmp	r0, #0
 8009860:	d1f1      	bne.n	8009846 <ucdr_advance_buffer+0x1e>
 8009862:	2301      	movs	r3, #1
 8009864:	7563      	strb	r3, [r4, #21]
 8009866:	bd38      	pop	{r3, r4, r5, pc}

08009868 <uxr_buffer_delete_entity>:
 8009868:	b510      	push	{r4, lr}
 800986a:	2300      	movs	r3, #0
 800986c:	b08e      	sub	sp, #56	; 0x38
 800986e:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8009872:	2303      	movs	r3, #3
 8009874:	9300      	str	r3, [sp, #0]
 8009876:	2204      	movs	r2, #4
 8009878:	ab06      	add	r3, sp, #24
 800987a:	4604      	mov	r4, r0
 800987c:	9103      	str	r1, [sp, #12]
 800987e:	f001 f86f 	bl	800a960 <uxr_prepare_stream_to_write_submessage>
 8009882:	b918      	cbnz	r0, 800988c <uxr_buffer_delete_entity+0x24>
 8009884:	4604      	mov	r4, r0
 8009886:	4620      	mov	r0, r4
 8009888:	b00e      	add	sp, #56	; 0x38
 800988a:	bd10      	pop	{r4, pc}
 800988c:	9902      	ldr	r1, [sp, #8]
 800988e:	aa05      	add	r2, sp, #20
 8009890:	4620      	mov	r0, r4
 8009892:	f001 f99b 	bl	800abcc <uxr_init_base_object_request>
 8009896:	a905      	add	r1, sp, #20
 8009898:	4604      	mov	r4, r0
 800989a:	a806      	add	r0, sp, #24
 800989c:	f002 fb00 	bl	800bea0 <uxr_serialize_DELETE_Payload>
 80098a0:	4620      	mov	r0, r4
 80098a2:	b00e      	add	sp, #56	; 0x38
 80098a4:	bd10      	pop	{r4, pc}
 80098a6:	bf00      	nop

080098a8 <uxr_common_create_entity>:
 80098a8:	b510      	push	{r4, lr}
 80098aa:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 80098ae:	b08c      	sub	sp, #48	; 0x30
 80098b0:	e9cd 2102 	strd	r2, r1, [sp, #8]
 80098b4:	f1bc 0f01 	cmp.w	ip, #1
 80098b8:	bf0c      	ite	eq
 80098ba:	f003 0201 	andeq.w	r2, r3, #1
 80098be:	2200      	movne	r2, #0
 80098c0:	330e      	adds	r3, #14
 80098c2:	f89d 1038 	ldrb.w	r1, [sp, #56]	; 0x38
 80098c6:	9101      	str	r1, [sp, #4]
 80098c8:	441a      	add	r2, r3
 80098ca:	2301      	movs	r3, #1
 80098cc:	9300      	str	r3, [sp, #0]
 80098ce:	9903      	ldr	r1, [sp, #12]
 80098d0:	ab04      	add	r3, sp, #16
 80098d2:	b292      	uxth	r2, r2
 80098d4:	4604      	mov	r4, r0
 80098d6:	f001 f843 	bl	800a960 <uxr_prepare_stream_to_write_submessage>
 80098da:	b918      	cbnz	r0, 80098e4 <uxr_common_create_entity+0x3c>
 80098dc:	4604      	mov	r4, r0
 80098de:	4620      	mov	r0, r4
 80098e0:	b00c      	add	sp, #48	; 0x30
 80098e2:	bd10      	pop	{r4, pc}
 80098e4:	9902      	ldr	r1, [sp, #8]
 80098e6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80098e8:	4620      	mov	r0, r4
 80098ea:	f001 f96f 	bl	800abcc <uxr_init_base_object_request>
 80098ee:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80098f0:	4604      	mov	r4, r0
 80098f2:	a804      	add	r0, sp, #16
 80098f4:	f002 fa30 	bl	800bd58 <uxr_serialize_CREATE_Payload>
 80098f8:	4620      	mov	r0, r4
 80098fa:	b00c      	add	sp, #48	; 0x30
 80098fc:	bd10      	pop	{r4, pc}
 80098fe:	bf00      	nop

08009900 <uxr_buffer_create_participant_bin>:
 8009900:	b570      	push	{r4, r5, r6, lr}
 8009902:	f5ad 7d16 	sub.w	sp, sp, #600	; 0x258
 8009906:	ac11      	add	r4, sp, #68	; 0x44
 8009908:	f8ad 3254 	strh.w	r3, [sp, #596]	; 0x254
 800990c:	2303      	movs	r3, #3
 800990e:	e9cd 2102 	strd	r2, r1, [sp, #8]
 8009912:	7223      	strb	r3, [r4, #8]
 8009914:	9b9a      	ldr	r3, [sp, #616]	; 0x268
 8009916:	f89d 626c 	ldrb.w	r6, [sp, #620]	; 0x26c
 800991a:	2201      	movs	r2, #1
 800991c:	2100      	movs	r1, #0
 800991e:	4605      	mov	r5, r0
 8009920:	7122      	strb	r2, [r4, #4]
 8009922:	f88d 1014 	strb.w	r1, [sp, #20]
 8009926:	b1cb      	cbz	r3, 800995c <uxr_buffer_create_participant_bin+0x5c>
 8009928:	f88d 201c 	strb.w	r2, [sp, #28]
 800992c:	9308      	str	r3, [sp, #32]
 800992e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009932:	a915      	add	r1, sp, #84	; 0x54
 8009934:	a809      	add	r0, sp, #36	; 0x24
 8009936:	f7ff ff27 	bl	8009788 <ucdr_init_buffer>
 800993a:	a905      	add	r1, sp, #20
 800993c:	a809      	add	r0, sp, #36	; 0x24
 800993e:	f001 fed9 	bl	800b6f4 <uxr_serialize_OBJK_DomainParticipant_Binary>
 8009942:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009944:	9600      	str	r6, [sp, #0]
 8009946:	9401      	str	r4, [sp, #4]
 8009948:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800994c:	60e3      	str	r3, [r4, #12]
 800994e:	4628      	mov	r0, r5
 8009950:	b29b      	uxth	r3, r3
 8009952:	f7ff ffa9 	bl	80098a8 <uxr_common_create_entity>
 8009956:	f50d 7d16 	add.w	sp, sp, #600	; 0x258
 800995a:	bd70      	pop	{r4, r5, r6, pc}
 800995c:	f88d 301c 	strb.w	r3, [sp, #28]
 8009960:	e7e5      	b.n	800992e <uxr_buffer_create_participant_bin+0x2e>
 8009962:	bf00      	nop

08009964 <uxr_buffer_create_topic_bin>:
 8009964:	b570      	push	{r4, r5, r6, lr}
 8009966:	f5ad 7d18 	sub.w	sp, sp, #608	; 0x260
 800996a:	e9cd 3203 	strd	r3, r2, [sp, #12]
 800996e:	9105      	str	r1, [sp, #20]
 8009970:	4605      	mov	r5, r0
 8009972:	a997      	add	r1, sp, #604	; 0x25c
 8009974:	4618      	mov	r0, r3
 8009976:	2302      	movs	r3, #2
 8009978:	f89d 6278 	ldrb.w	r6, [sp, #632]	; 0x278
 800997c:	f88d 3050 	strb.w	r3, [sp, #80]	; 0x50
 8009980:	f000 f8ee 	bl	8009b60 <uxr_object_id_to_raw>
 8009984:	9b9c      	ldr	r3, [sp, #624]	; 0x270
 8009986:	9306      	str	r3, [sp, #24]
 8009988:	9b9d      	ldr	r3, [sp, #628]	; 0x274
 800998a:	930a      	str	r3, [sp, #40]	; 0x28
 800998c:	2303      	movs	r3, #3
 800998e:	f88d 3054 	strb.w	r3, [sp, #84]	; 0x54
 8009992:	2301      	movs	r3, #1
 8009994:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009998:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 800999c:	a917      	add	r1, sp, #92	; 0x5c
 800999e:	2300      	movs	r3, #0
 80099a0:	a80b      	add	r0, sp, #44	; 0x2c
 80099a2:	f88d 301c 	strb.w	r3, [sp, #28]
 80099a6:	f7ff feef 	bl	8009788 <ucdr_init_buffer>
 80099aa:	a906      	add	r1, sp, #24
 80099ac:	a80b      	add	r0, sp, #44	; 0x2c
 80099ae:	f001 fec3 	bl	800b738 <uxr_serialize_OBJK_Topic_Binary>
 80099b2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80099b4:	9316      	str	r3, [sp, #88]	; 0x58
 80099b6:	ac13      	add	r4, sp, #76	; 0x4c
 80099b8:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 80099bc:	9600      	str	r6, [sp, #0]
 80099be:	9401      	str	r4, [sp, #4]
 80099c0:	b29b      	uxth	r3, r3
 80099c2:	4628      	mov	r0, r5
 80099c4:	f7ff ff70 	bl	80098a8 <uxr_common_create_entity>
 80099c8:	f50d 7d18 	add.w	sp, sp, #608	; 0x260
 80099cc:	bd70      	pop	{r4, r5, r6, pc}
 80099ce:	bf00      	nop

080099d0 <uxr_buffer_create_publisher_bin>:
 80099d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80099d2:	f2ad 4d8c 	subw	sp, sp, #1164	; 0x48c
 80099d6:	4605      	mov	r5, r0
 80099d8:	9105      	str	r1, [sp, #20]
 80099da:	4618      	mov	r0, r3
 80099dc:	2603      	movs	r6, #3
 80099de:	a992      	add	r1, sp, #584	; 0x248
 80099e0:	e9cd 3203 	strd	r3, r2, [sp, #12]
 80099e4:	f89d 74a0 	ldrb.w	r7, [sp, #1184]	; 0x4a0
 80099e8:	f88d 603c 	strb.w	r6, [sp, #60]	; 0x3c
 80099ec:	f000 f8b8 	bl	8009b60 <uxr_object_id_to_raw>
 80099f0:	2300      	movs	r3, #0
 80099f2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80099f6:	a912      	add	r1, sp, #72	; 0x48
 80099f8:	a806      	add	r0, sp, #24
 80099fa:	f88d 324c 	strb.w	r3, [sp, #588]	; 0x24c
 80099fe:	f88d 3254 	strb.w	r3, [sp, #596]	; 0x254
 8009a02:	f88d 6040 	strb.w	r6, [sp, #64]	; 0x40
 8009a06:	f7ff febf 	bl	8009788 <ucdr_init_buffer>
 8009a0a:	a993      	add	r1, sp, #588	; 0x24c
 8009a0c:	a806      	add	r0, sp, #24
 8009a0e:	f001 ff47 	bl	800b8a0 <uxr_serialize_OBJK_Publisher_Binary>
 8009a12:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009a14:	9311      	str	r3, [sp, #68]	; 0x44
 8009a16:	ac0e      	add	r4, sp, #56	; 0x38
 8009a18:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 8009a1c:	9700      	str	r7, [sp, #0]
 8009a1e:	9401      	str	r4, [sp, #4]
 8009a20:	b29b      	uxth	r3, r3
 8009a22:	4628      	mov	r0, r5
 8009a24:	f7ff ff40 	bl	80098a8 <uxr_common_create_entity>
 8009a28:	f20d 4d8c 	addw	sp, sp, #1164	; 0x48c
 8009a2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009a2e:	bf00      	nop

08009a30 <uxr_buffer_create_datawriter_bin>:
 8009a30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009a34:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 8009a38:	ac1d      	add	r4, sp, #116	; 0x74
 8009a3a:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8009a3e:	f8bd 52a8 	ldrh.w	r5, [sp, #680]	; 0x2a8
 8009a42:	9105      	str	r1, [sp, #20]
 8009a44:	4606      	mov	r6, r0
 8009a46:	a9a1      	add	r1, sp, #644	; 0x284
 8009a48:	4618      	mov	r0, r3
 8009a4a:	2305      	movs	r3, #5
 8009a4c:	7123      	strb	r3, [r4, #4]
 8009a4e:	f89d 82ac 	ldrb.w	r8, [sp, #684]	; 0x2ac
 8009a52:	2703      	movs	r7, #3
 8009a54:	f000 f884 	bl	8009b60 <uxr_object_id_to_raw>
 8009a58:	98a8      	ldr	r0, [sp, #672]	; 0x2a0
 8009a5a:	7227      	strb	r7, [r4, #8]
 8009a5c:	a90e      	add	r1, sp, #56	; 0x38
 8009a5e:	f000 f87f 	bl	8009b60 <uxr_object_id_to_raw>
 8009a62:	2300      	movs	r3, #0
 8009a64:	f8ad 5044 	strh.w	r5, [sp, #68]	; 0x44
 8009a68:	f89d 22a5 	ldrb.w	r2, [sp, #677]	; 0x2a5
 8009a6c:	f88d 3064 	strb.w	r3, [sp, #100]	; 0x64
 8009a70:	3d00      	subs	r5, #0
 8009a72:	bf18      	it	ne
 8009a74:	2501      	movne	r5, #1
 8009a76:	f88d 3046 	strb.w	r3, [sp, #70]	; 0x46
 8009a7a:	f88d 304c 	strb.w	r3, [sp, #76]	; 0x4c
 8009a7e:	f88d 3054 	strb.w	r3, [sp, #84]	; 0x54
 8009a82:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 8009a86:	2301      	movs	r3, #1
 8009a88:	f88d 5042 	strb.w	r5, [sp, #66]	; 0x42
 8009a8c:	f88d 303a 	strb.w	r3, [sp, #58]	; 0x3a
 8009a90:	bb8a      	cbnz	r2, 8009af6 <uxr_buffer_create_datawriter_bin+0xc6>
 8009a92:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 8009a96:	f04f 0e23 	mov.w	lr, #35	; 0x23
 8009a9a:	f04f 0c13 	mov.w	ip, #19
 8009a9e:	250b      	movs	r5, #11
 8009aa0:	2221      	movs	r2, #33	; 0x21
 8009aa2:	2111      	movs	r1, #17
 8009aa4:	2009      	movs	r0, #9
 8009aa6:	f89d 32a6 	ldrb.w	r3, [sp, #678]	; 0x2a6
 8009aaa:	b923      	cbnz	r3, 8009ab6 <uxr_buffer_create_datawriter_bin+0x86>
 8009aac:	f8ad 7040 	strh.w	r7, [sp, #64]	; 0x40
 8009ab0:	4672      	mov	r2, lr
 8009ab2:	4661      	mov	r1, ip
 8009ab4:	4628      	mov	r0, r5
 8009ab6:	f89d 32a4 	ldrb.w	r3, [sp, #676]	; 0x2a4
 8009aba:	2b01      	cmp	r3, #1
 8009abc:	d025      	beq.n	8009b0a <uxr_buffer_create_datawriter_bin+0xda>
 8009abe:	2b03      	cmp	r3, #3
 8009ac0:	d029      	beq.n	8009b16 <uxr_buffer_create_datawriter_bin+0xe6>
 8009ac2:	b32b      	cbz	r3, 8009b10 <uxr_buffer_create_datawriter_bin+0xe0>
 8009ac4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009ac8:	a921      	add	r1, sp, #132	; 0x84
 8009aca:	a806      	add	r0, sp, #24
 8009acc:	f7ff fe5c 	bl	8009788 <ucdr_init_buffer>
 8009ad0:	a90e      	add	r1, sp, #56	; 0x38
 8009ad2:	a806      	add	r0, sp, #24
 8009ad4:	f001 ff5a 	bl	800b98c <uxr_serialize_OBJK_DataWriter_Binary>
 8009ad8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009ada:	f8cd 8000 	str.w	r8, [sp]
 8009ade:	9401      	str	r4, [sp, #4]
 8009ae0:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 8009ae4:	60e3      	str	r3, [r4, #12]
 8009ae6:	4630      	mov	r0, r6
 8009ae8:	b29b      	uxth	r3, r3
 8009aea:	f7ff fedd 	bl	80098a8 <uxr_common_create_entity>
 8009aee:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 8009af2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009af6:	f04f 0e22 	mov.w	lr, #34	; 0x22
 8009afa:	f04f 0c12 	mov.w	ip, #18
 8009afe:	250a      	movs	r5, #10
 8009b00:	2220      	movs	r2, #32
 8009b02:	2110      	movs	r1, #16
 8009b04:	2008      	movs	r0, #8
 8009b06:	2702      	movs	r7, #2
 8009b08:	e7cd      	b.n	8009aa6 <uxr_buffer_create_datawriter_bin+0x76>
 8009b0a:	f8ad 1040 	strh.w	r1, [sp, #64]	; 0x40
 8009b0e:	e7d9      	b.n	8009ac4 <uxr_buffer_create_datawriter_bin+0x94>
 8009b10:	f8ad 0040 	strh.w	r0, [sp, #64]	; 0x40
 8009b14:	e7d6      	b.n	8009ac4 <uxr_buffer_create_datawriter_bin+0x94>
 8009b16:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 8009b1a:	e7d3      	b.n	8009ac4 <uxr_buffer_create_datawriter_bin+0x94>

08009b1c <uxr_object_id>:
 8009b1c:	b082      	sub	sp, #8
 8009b1e:	2300      	movs	r3, #0
 8009b20:	f88d 1006 	strb.w	r1, [sp, #6]
 8009b24:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8009b28:	f360 030f 	bfi	r3, r0, #0, #16
 8009b2c:	f362 431f 	bfi	r3, r2, #16, #16
 8009b30:	4618      	mov	r0, r3
 8009b32:	b002      	add	sp, #8
 8009b34:	4770      	bx	lr
 8009b36:	bf00      	nop

08009b38 <uxr_object_id_from_raw>:
 8009b38:	7843      	ldrb	r3, [r0, #1]
 8009b3a:	7801      	ldrb	r1, [r0, #0]
 8009b3c:	b082      	sub	sp, #8
 8009b3e:	f003 020f 	and.w	r2, r3, #15
 8009b42:	f88d 2006 	strb.w	r2, [sp, #6]
 8009b46:	091b      	lsrs	r3, r3, #4
 8009b48:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8009b4c:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 8009b50:	2000      	movs	r0, #0
 8009b52:	f363 000f 	bfi	r0, r3, #0, #16
 8009b56:	f362 401f 	bfi	r0, r2, #16, #16
 8009b5a:	b002      	add	sp, #8
 8009b5c:	4770      	bx	lr
 8009b5e:	bf00      	nop

08009b60 <uxr_object_id_to_raw>:
 8009b60:	4602      	mov	r2, r0
 8009b62:	f3c0 4303 	ubfx	r3, r0, #16, #4
 8009b66:	b082      	sub	sp, #8
 8009b68:	f3c2 1c0b 	ubfx	ip, r2, #4, #12
 8009b6c:	eb03 1002 	add.w	r0, r3, r2, lsl #4
 8009b70:	f881 c000 	strb.w	ip, [r1]
 8009b74:	7048      	strb	r0, [r1, #1]
 8009b76:	b002      	add	sp, #8
 8009b78:	4770      	bx	lr
 8009b7a:	bf00      	nop

08009b7c <on_get_fragmentation_info>:
 8009b7c:	b500      	push	{lr}
 8009b7e:	b08b      	sub	sp, #44	; 0x2c
 8009b80:	4601      	mov	r1, r0
 8009b82:	2204      	movs	r2, #4
 8009b84:	a802      	add	r0, sp, #8
 8009b86:	f7ff fdff 	bl	8009788 <ucdr_init_buffer>
 8009b8a:	f10d 0305 	add.w	r3, sp, #5
 8009b8e:	f10d 0206 	add.w	r2, sp, #6
 8009b92:	a901      	add	r1, sp, #4
 8009b94:	a802      	add	r0, sp, #8
 8009b96:	f001 f99b 	bl	800aed0 <uxr_read_submessage_header>
 8009b9a:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8009b9e:	2b0d      	cmp	r3, #13
 8009ba0:	d003      	beq.n	8009baa <on_get_fragmentation_info+0x2e>
 8009ba2:	2000      	movs	r0, #0
 8009ba4:	b00b      	add	sp, #44	; 0x2c
 8009ba6:	f85d fb04 	ldr.w	pc, [sp], #4
 8009baa:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8009bae:	f013 0f02 	tst.w	r3, #2
 8009bb2:	bf14      	ite	ne
 8009bb4:	2002      	movne	r0, #2
 8009bb6:	2001      	moveq	r0, #1
 8009bb8:	b00b      	add	sp, #44	; 0x2c
 8009bba:	f85d fb04 	ldr.w	pc, [sp], #4
 8009bbe:	bf00      	nop

08009bc0 <read_submessage_get_info>:
 8009bc0:	b570      	push	{r4, r5, r6, lr}
 8009bc2:	2500      	movs	r5, #0
 8009bc4:	f5ad 7d34 	sub.w	sp, sp, #720	; 0x2d0
 8009bc8:	4604      	mov	r4, r0
 8009bca:	f44f 7224 	mov.w	r2, #656	; 0x290
 8009bce:	460e      	mov	r6, r1
 8009bd0:	a810      	add	r0, sp, #64	; 0x40
 8009bd2:	4629      	mov	r1, r5
 8009bd4:	e9cd 5503 	strd	r5, r5, [sp, #12]
 8009bd8:	f006 fe9c 	bl	8010914 <memset>
 8009bdc:	a903      	add	r1, sp, #12
 8009bde:	4630      	mov	r0, r6
 8009be0:	f002 f94a 	bl	800be78 <uxr_deserialize_GET_INFO_Payload>
 8009be4:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 8009be8:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 8009bec:	4620      	mov	r0, r4
 8009bee:	f000 ffe5 	bl	800abbc <uxr_session_header_offset>
 8009bf2:	462b      	mov	r3, r5
 8009bf4:	9000      	str	r0, [sp, #0]
 8009bf6:	220c      	movs	r2, #12
 8009bf8:	a905      	add	r1, sp, #20
 8009bfa:	a808      	add	r0, sp, #32
 8009bfc:	f7ff fdb2 	bl	8009764 <ucdr_init_buffer_origin_offset>
 8009c00:	a910      	add	r1, sp, #64	; 0x40
 8009c02:	a808      	add	r0, sp, #32
 8009c04:	f002 f9aa 	bl	800bf5c <uxr_serialize_INFO_Payload>
 8009c08:	9b08      	ldr	r3, [sp, #32]
 8009c0a:	462a      	mov	r2, r5
 8009c0c:	4629      	mov	r1, r5
 8009c0e:	4620      	mov	r0, r4
 8009c10:	f000 ff7e 	bl	800ab10 <uxr_stamp_session_header>
 8009c14:	a808      	add	r0, sp, #32
 8009c16:	f7ff fde3 	bl	80097e0 <ucdr_buffer_length>
 8009c1a:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8009c1c:	4602      	mov	r2, r0
 8009c1e:	a905      	add	r1, sp, #20
 8009c20:	e9d3 0400 	ldrd	r0, r4, [r3]
 8009c24:	47a0      	blx	r4
 8009c26:	f50d 7d34 	add.w	sp, sp, #720	; 0x2d0
 8009c2a:	bd70      	pop	{r4, r5, r6, pc}

08009c2c <write_submessage_acknack.isra.0>:
 8009c2c:	b570      	push	{r4, r5, r6, lr}
 8009c2e:	b092      	sub	sp, #72	; 0x48
 8009c30:	4605      	mov	r5, r0
 8009c32:	460e      	mov	r6, r1
 8009c34:	4614      	mov	r4, r2
 8009c36:	f000 ffc1 	bl	800abbc <uxr_session_header_offset>
 8009c3a:	a905      	add	r1, sp, #20
 8009c3c:	9000      	str	r0, [sp, #0]
 8009c3e:	2300      	movs	r3, #0
 8009c40:	a80a      	add	r0, sp, #40	; 0x28
 8009c42:	2211      	movs	r2, #17
 8009c44:	f7ff fd8e 	bl	8009764 <ucdr_init_buffer_origin_offset>
 8009c48:	2218      	movs	r2, #24
 8009c4a:	fb02 5404 	mla	r4, r2, r4, r5
 8009c4e:	2300      	movs	r3, #0
 8009c50:	2205      	movs	r2, #5
 8009c52:	3450      	adds	r4, #80	; 0x50
 8009c54:	210a      	movs	r1, #10
 8009c56:	a80a      	add	r0, sp, #40	; 0x28
 8009c58:	f001 f920 	bl	800ae9c <uxr_buffer_submessage_header>
 8009c5c:	a903      	add	r1, sp, #12
 8009c5e:	4620      	mov	r0, r4
 8009c60:	f004 ff20 	bl	800eaa4 <uxr_compute_acknack>
 8009c64:	ba40      	rev16	r0, r0
 8009c66:	f8ad 000e 	strh.w	r0, [sp, #14]
 8009c6a:	a903      	add	r1, sp, #12
 8009c6c:	a80a      	add	r0, sp, #40	; 0x28
 8009c6e:	f88d 6010 	strb.w	r6, [sp, #16]
 8009c72:	f002 f9e3 	bl	800c03c <uxr_serialize_ACKNACK_Payload>
 8009c76:	2200      	movs	r2, #0
 8009c78:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009c7a:	4611      	mov	r1, r2
 8009c7c:	4628      	mov	r0, r5
 8009c7e:	f000 ff47 	bl	800ab10 <uxr_stamp_session_header>
 8009c82:	a80a      	add	r0, sp, #40	; 0x28
 8009c84:	f7ff fdac 	bl	80097e0 <ucdr_buffer_length>
 8009c88:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8009c8a:	4602      	mov	r2, r0
 8009c8c:	a905      	add	r1, sp, #20
 8009c8e:	e9d3 0400 	ldrd	r0, r4, [r3]
 8009c92:	47a0      	blx	r4
 8009c94:	b012      	add	sp, #72	; 0x48
 8009c96:	bd70      	pop	{r4, r5, r6, pc}

08009c98 <uxr_init_session>:
 8009c98:	b510      	push	{r4, lr}
 8009c9a:	ed9f 7b0d 	vldr	d7, [pc, #52]	; 8009cd0 <uxr_init_session+0x38>
 8009c9e:	2300      	movs	r3, #0
 8009ca0:	e9c0 131c 	strd	r1, r3, [r0, #112]	; 0x70
 8009ca4:	4604      	mov	r4, r0
 8009ca6:	e9c0 331e 	strd	r3, r3, [r0, #120]	; 0x78
 8009caa:	e9c0 3320 	strd	r3, r3, [r0, #128]	; 0x80
 8009cae:	e9c0 3322 	strd	r3, r3, [r0, #136]	; 0x88
 8009cb2:	e9c0 3324 	strd	r3, r3, [r0, #144]	; 0x90
 8009cb6:	ed80 7b26 	vstr	d7, [r0, #152]	; 0x98
 8009cba:	f880 30a0 	strb.w	r3, [r0, #160]	; 0xa0
 8009cbe:	2181      	movs	r1, #129	; 0x81
 8009cc0:	f000 fe92 	bl	800a9e8 <uxr_init_session_info>
 8009cc4:	f104 0008 	add.w	r0, r4, #8
 8009cc8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009ccc:	f001 b802 	b.w	800acd4 <uxr_init_stream_storage>
	...

08009cd8 <uxr_set_status_callback>:
 8009cd8:	e9c0 1220 	strd	r1, r2, [r0, #128]	; 0x80
 8009cdc:	4770      	bx	lr
 8009cde:	bf00      	nop

08009ce0 <uxr_set_topic_callback>:
 8009ce0:	e9c0 1222 	strd	r1, r2, [r0, #136]	; 0x88
 8009ce4:	4770      	bx	lr
 8009ce6:	bf00      	nop

08009ce8 <uxr_set_request_callback>:
 8009ce8:	e9c0 1229 	strd	r1, r2, [r0, #164]	; 0xa4
 8009cec:	4770      	bx	lr
 8009cee:	bf00      	nop

08009cf0 <uxr_set_reply_callback>:
 8009cf0:	e9c0 122b 	strd	r1, r2, [r0, #172]	; 0xac
 8009cf4:	4770      	bx	lr
 8009cf6:	bf00      	nop

08009cf8 <uxr_create_output_best_effort_stream>:
 8009cf8:	b510      	push	{r4, lr}
 8009cfa:	b084      	sub	sp, #16
 8009cfc:	e9cd 2100 	strd	r2, r1, [sp]
 8009d00:	4604      	mov	r4, r0
 8009d02:	f000 ff5b 	bl	800abbc <uxr_session_header_offset>
 8009d06:	e9dd 2100 	ldrd	r2, r1, [sp]
 8009d0a:	4603      	mov	r3, r0
 8009d0c:	f104 0008 	add.w	r0, r4, #8
 8009d10:	b004      	add	sp, #16
 8009d12:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009d16:	f001 b827 	b.w	800ad68 <uxr_add_output_best_effort_buffer>
 8009d1a:	bf00      	nop

08009d1c <uxr_create_output_reliable_stream>:
 8009d1c:	b510      	push	{r4, lr}
 8009d1e:	b088      	sub	sp, #32
 8009d20:	e9cd 2104 	strd	r2, r1, [sp, #16]
 8009d24:	4604      	mov	r4, r0
 8009d26:	9303      	str	r3, [sp, #12]
 8009d28:	f000 ff48 	bl	800abbc <uxr_session_header_offset>
 8009d2c:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
 8009d30:	9000      	str	r0, [sp, #0]
 8009d32:	9905      	ldr	r1, [sp, #20]
 8009d34:	f104 0008 	add.w	r0, r4, #8
 8009d38:	f001 f82a 	bl	800ad90 <uxr_add_output_reliable_buffer>
 8009d3c:	2200      	movs	r2, #0
 8009d3e:	b2c3      	uxtb	r3, r0
 8009d40:	f363 0207 	bfi	r2, r3, #0, #8
 8009d44:	f3c0 2307 	ubfx	r3, r0, #8, #8
 8009d48:	f363 220f 	bfi	r2, r3, #8, #8
 8009d4c:	f3c0 4307 	ubfx	r3, r0, #16, #8
 8009d50:	f363 4217 	bfi	r2, r3, #16, #8
 8009d54:	0e03      	lsrs	r3, r0, #24
 8009d56:	f363 621f 	bfi	r2, r3, #24, #8
 8009d5a:	4610      	mov	r0, r2
 8009d5c:	b008      	add	sp, #32
 8009d5e:	bd10      	pop	{r4, pc}

08009d60 <uxr_create_input_best_effort_stream>:
 8009d60:	b082      	sub	sp, #8
 8009d62:	3008      	adds	r0, #8
 8009d64:	b002      	add	sp, #8
 8009d66:	f001 b82d 	b.w	800adc4 <uxr_add_input_best_effort_buffer>
 8009d6a:	bf00      	nop

08009d6c <uxr_create_input_reliable_stream>:
 8009d6c:	b510      	push	{r4, lr}
 8009d6e:	b084      	sub	sp, #16
 8009d70:	4c0b      	ldr	r4, [pc, #44]	; (8009da0 <uxr_create_input_reliable_stream+0x34>)
 8009d72:	9400      	str	r4, [sp, #0]
 8009d74:	3008      	adds	r0, #8
 8009d76:	f001 f83b 	bl	800adf0 <uxr_add_input_reliable_buffer>
 8009d7a:	2200      	movs	r2, #0
 8009d7c:	b2c3      	uxtb	r3, r0
 8009d7e:	f363 0207 	bfi	r2, r3, #0, #8
 8009d82:	f3c0 2307 	ubfx	r3, r0, #8, #8
 8009d86:	f363 220f 	bfi	r2, r3, #8, #8
 8009d8a:	f3c0 4307 	ubfx	r3, r0, #16, #8
 8009d8e:	f363 4217 	bfi	r2, r3, #16, #8
 8009d92:	0e03      	lsrs	r3, r0, #24
 8009d94:	f363 621f 	bfi	r2, r3, #24, #8
 8009d98:	4610      	mov	r0, r2
 8009d9a:	b004      	add	sp, #16
 8009d9c:	bd10      	pop	{r4, pc}
 8009d9e:	bf00      	nop
 8009da0:	08009b7d 	.word	0x08009b7d

08009da4 <uxr_epoch_nanos>:
 8009da4:	b510      	push	{r4, lr}
 8009da6:	4604      	mov	r4, r0
 8009da8:	f001 f8d8 	bl	800af5c <uxr_nanos>
 8009dac:	e9d4 3226 	ldrd	r3, r2, [r4, #152]	; 0x98
 8009db0:	1ac0      	subs	r0, r0, r3
 8009db2:	eb61 0102 	sbc.w	r1, r1, r2
 8009db6:	bd10      	pop	{r4, pc}

08009db8 <uxr_flash_output_streams>:
 8009db8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009dbc:	7e03      	ldrb	r3, [r0, #24]
 8009dbe:	b084      	sub	sp, #16
 8009dc0:	4604      	mov	r4, r0
 8009dc2:	2b00      	cmp	r3, #0
 8009dc4:	d035      	beq.n	8009e32 <uxr_flash_output_streams+0x7a>
 8009dc6:	f04f 0900 	mov.w	r9, #0
 8009dca:	4648      	mov	r0, r9
 8009dcc:	f10d 0802 	add.w	r8, sp, #2
 8009dd0:	af03      	add	r7, sp, #12
 8009dd2:	ae02      	add	r6, sp, #8
 8009dd4:	e006      	b.n	8009de4 <uxr_flash_output_streams+0x2c>
 8009dd6:	7e23      	ldrb	r3, [r4, #24]
 8009dd8:	f109 0901 	add.w	r9, r9, #1
 8009ddc:	fa5f f089 	uxtb.w	r0, r9
 8009de0:	4283      	cmp	r3, r0
 8009de2:	d926      	bls.n	8009e32 <uxr_flash_output_streams+0x7a>
 8009de4:	2201      	movs	r2, #1
 8009de6:	4611      	mov	r1, r2
 8009de8:	eb04 1500 	add.w	r5, r4, r0, lsl #4
 8009dec:	f000 ff1e 	bl	800ac2c <uxr_stream_id>
 8009df0:	3508      	adds	r5, #8
 8009df2:	4684      	mov	ip, r0
 8009df4:	4643      	mov	r3, r8
 8009df6:	463a      	mov	r2, r7
 8009df8:	4631      	mov	r1, r6
 8009dfa:	4628      	mov	r0, r5
 8009dfc:	f8cd c004 	str.w	ip, [sp, #4]
 8009e00:	f004 fed6 	bl	800ebb0 <uxr_prepare_best_effort_buffer_to_send>
 8009e04:	2800      	cmp	r0, #0
 8009e06:	d0e6      	beq.n	8009dd6 <uxr_flash_output_streams+0x1e>
 8009e08:	9b02      	ldr	r3, [sp, #8]
 8009e0a:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 8009e0e:	f89d 1004 	ldrb.w	r1, [sp, #4]
 8009e12:	4620      	mov	r0, r4
 8009e14:	f000 fe7c 	bl	800ab10 <uxr_stamp_session_header>
 8009e18:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8009e1a:	9a03      	ldr	r2, [sp, #12]
 8009e1c:	685d      	ldr	r5, [r3, #4]
 8009e1e:	6818      	ldr	r0, [r3, #0]
 8009e20:	9902      	ldr	r1, [sp, #8]
 8009e22:	47a8      	blx	r5
 8009e24:	f109 0901 	add.w	r9, r9, #1
 8009e28:	7e23      	ldrb	r3, [r4, #24]
 8009e2a:	fa5f f089 	uxtb.w	r0, r9
 8009e2e:	4283      	cmp	r3, r0
 8009e30:	d8d8      	bhi.n	8009de4 <uxr_flash_output_streams+0x2c>
 8009e32:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 8009e36:	b38b      	cbz	r3, 8009e9c <uxr_flash_output_streams+0xe4>
 8009e38:	f04f 0900 	mov.w	r9, #0
 8009e3c:	f10d 0802 	add.w	r8, sp, #2
 8009e40:	af03      	add	r7, sp, #12
 8009e42:	ae02      	add	r6, sp, #8
 8009e44:	4648      	mov	r0, r9
 8009e46:	2201      	movs	r2, #1
 8009e48:	2102      	movs	r1, #2
 8009e4a:	eb00 0580 	add.w	r5, r0, r0, lsl #2
 8009e4e:	f000 feed 	bl	800ac2c <uxr_stream_id>
 8009e52:	eb04 05c5 	add.w	r5, r4, r5, lsl #3
 8009e56:	3520      	adds	r5, #32
 8009e58:	9001      	str	r0, [sp, #4]
 8009e5a:	e00d      	b.n	8009e78 <uxr_flash_output_streams+0xc0>
 8009e5c:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 8009e60:	f89d 1004 	ldrb.w	r1, [sp, #4]
 8009e64:	9b02      	ldr	r3, [sp, #8]
 8009e66:	f000 fe53 	bl	800ab10 <uxr_stamp_session_header>
 8009e6a:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8009e6c:	9a03      	ldr	r2, [sp, #12]
 8009e6e:	f8d3 a004 	ldr.w	sl, [r3, #4]
 8009e72:	9902      	ldr	r1, [sp, #8]
 8009e74:	6818      	ldr	r0, [r3, #0]
 8009e76:	47d0      	blx	sl
 8009e78:	4643      	mov	r3, r8
 8009e7a:	463a      	mov	r2, r7
 8009e7c:	4631      	mov	r1, r6
 8009e7e:	4628      	mov	r0, r5
 8009e80:	f005 f8a2 	bl	800efc8 <uxr_prepare_next_reliable_buffer_to_send>
 8009e84:	4603      	mov	r3, r0
 8009e86:	4620      	mov	r0, r4
 8009e88:	2b00      	cmp	r3, #0
 8009e8a:	d1e7      	bne.n	8009e5c <uxr_flash_output_streams+0xa4>
 8009e8c:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 8009e90:	f109 0901 	add.w	r9, r9, #1
 8009e94:	fa5f f089 	uxtb.w	r0, r9
 8009e98:	4283      	cmp	r3, r0
 8009e9a:	d8d4      	bhi.n	8009e46 <uxr_flash_output_streams+0x8e>
 8009e9c:	b004      	add	sp, #16
 8009e9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009ea2:	bf00      	nop

08009ea4 <read_submessage_info>:
 8009ea4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009ea8:	460d      	mov	r5, r1
 8009eaa:	f5ad 7d24 	sub.w	sp, sp, #656	; 0x290
 8009eae:	4669      	mov	r1, sp
 8009eb0:	4607      	mov	r7, r0
 8009eb2:	4628      	mov	r0, r5
 8009eb4:	f001 feee 	bl	800bc94 <uxr_deserialize_BaseObjectReply>
 8009eb8:	a902      	add	r1, sp, #8
 8009eba:	4604      	mov	r4, r0
 8009ebc:	4628      	mov	r0, r5
 8009ebe:	f89d 8005 	ldrb.w	r8, [sp, #5]
 8009ec2:	f7fe fc9d 	bl	8008800 <ucdr_deserialize_bool>
 8009ec6:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8009eca:	4004      	ands	r4, r0
 8009ecc:	b2e4      	uxtb	r4, r4
 8009ece:	b95b      	cbnz	r3, 8009ee8 <read_submessage_info+0x44>
 8009ed0:	a987      	add	r1, sp, #540	; 0x21c
 8009ed2:	4628      	mov	r0, r5
 8009ed4:	f7fe fc94 	bl	8008800 <ucdr_deserialize_bool>
 8009ed8:	f89d 321c 	ldrb.w	r3, [sp, #540]	; 0x21c
 8009edc:	4606      	mov	r6, r0
 8009ede:	b94b      	cbnz	r3, 8009ef4 <read_submessage_info+0x50>
 8009ee0:	f50d 7d24 	add.w	sp, sp, #656	; 0x290
 8009ee4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009ee8:	a903      	add	r1, sp, #12
 8009eea:	4628      	mov	r0, r5
 8009eec:	f001 fd7a 	bl	800b9e4 <uxr_deserialize_ObjectVariant>
 8009ef0:	4004      	ands	r4, r0
 8009ef2:	e7ed      	b.n	8009ed0 <read_submessage_info+0x2c>
 8009ef4:	a988      	add	r1, sp, #544	; 0x220
 8009ef6:	4628      	mov	r0, r5
 8009ef8:	f7fe fcb0 	bl	800885c <ucdr_deserialize_uint8_t>
 8009efc:	4234      	tst	r4, r6
 8009efe:	d0ef      	beq.n	8009ee0 <read_submessage_info+0x3c>
 8009f00:	2800      	cmp	r0, #0
 8009f02:	d0ed      	beq.n	8009ee0 <read_submessage_info+0x3c>
 8009f04:	f89d 3220 	ldrb.w	r3, [sp, #544]	; 0x220
 8009f08:	2b0d      	cmp	r3, #13
 8009f0a:	d1e9      	bne.n	8009ee0 <read_submessage_info+0x3c>
 8009f0c:	a98a      	add	r1, sp, #552	; 0x228
 8009f0e:	4628      	mov	r0, r5
 8009f10:	f7ff fa4a 	bl	80093a8 <ucdr_deserialize_int16_t>
 8009f14:	b140      	cbz	r0, 8009f28 <read_submessage_info+0x84>
 8009f16:	f9bd 3228 	ldrsh.w	r3, [sp, #552]	; 0x228
 8009f1a:	2b00      	cmp	r3, #0
 8009f1c:	dd07      	ble.n	8009f2e <read_submessage_info+0x8a>
 8009f1e:	f1b8 0f00 	cmp.w	r8, #0
 8009f22:	bf14      	ite	ne
 8009f24:	2001      	movne	r0, #1
 8009f26:	2002      	moveq	r0, #2
 8009f28:	f887 00b5 	strb.w	r0, [r7, #181]	; 0xb5
 8009f2c:	e7d8      	b.n	8009ee0 <read_submessage_info+0x3c>
 8009f2e:	2000      	movs	r0, #0
 8009f30:	e7fa      	b.n	8009f28 <read_submessage_info+0x84>
 8009f32:	bf00      	nop

08009f34 <read_submessage_list>:
 8009f34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f38:	b097      	sub	sp, #92	; 0x5c
 8009f3a:	4ec1      	ldr	r6, [pc, #772]	; (800a240 <read_submessage_list+0x30c>)
 8009f3c:	9209      	str	r2, [sp, #36]	; 0x24
 8009f3e:	4604      	mov	r4, r0
 8009f40:	460d      	mov	r5, r1
 8009f42:	f04f 0801 	mov.w	r8, #1
 8009f46:	f10d 032f 	add.w	r3, sp, #47	; 0x2f
 8009f4a:	aa0c      	add	r2, sp, #48	; 0x30
 8009f4c:	f10d 012e 	add.w	r1, sp, #46	; 0x2e
 8009f50:	4628      	mov	r0, r5
 8009f52:	f000 ffbd 	bl	800aed0 <uxr_read_submessage_header>
 8009f56:	2800      	cmp	r0, #0
 8009f58:	f000 813e 	beq.w	800a1d8 <read_submessage_list+0x2a4>
 8009f5c:	f89d 302e 	ldrb.w	r3, [sp, #46]	; 0x2e
 8009f60:	f89d 2026 	ldrb.w	r2, [sp, #38]	; 0x26
 8009f64:	3b02      	subs	r3, #2
 8009f66:	2b0d      	cmp	r3, #13
 8009f68:	d8ed      	bhi.n	8009f46 <read_submessage_list+0x12>
 8009f6a:	a101      	add	r1, pc, #4	; (adr r1, 8009f70 <read_submessage_list+0x3c>)
 8009f6c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009f70:	0800a1cf 	.word	0x0800a1cf
 8009f74:	08009f47 	.word	0x08009f47
 8009f78:	0800a1bf 	.word	0x0800a1bf
 8009f7c:	0800a15d 	.word	0x0800a15d
 8009f80:	0800a153 	.word	0x0800a153
 8009f84:	08009f47 	.word	0x08009f47
 8009f88:	08009f47 	.word	0x08009f47
 8009f8c:	0800a0b3 	.word	0x0800a0b3
 8009f90:	0800a043 	.word	0x0800a043
 8009f94:	0800a003 	.word	0x0800a003
 8009f98:	08009f47 	.word	0x08009f47
 8009f9c:	08009f47 	.word	0x08009f47
 8009fa0:	08009f47 	.word	0x08009f47
 8009fa4:	08009fa9 	.word	0x08009fa9
 8009fa8:	a910      	add	r1, sp, #64	; 0x40
 8009faa:	4628      	mov	r0, r5
 8009fac:	f002 f896 	bl	800c0dc <uxr_deserialize_TIMESTAMP_REPLY_Payload>
 8009fb0:	f8d4 9090 	ldr.w	r9, [r4, #144]	; 0x90
 8009fb4:	f1b9 0f00 	cmp.w	r9, #0
 8009fb8:	f000 8116 	beq.w	800a1e8 <read_submessage_list+0x2b4>
 8009fbc:	f000 ffce 	bl	800af5c <uxr_nanos>
 8009fc0:	9f15      	ldr	r7, [sp, #84]	; 0x54
 8009fc2:	4602      	mov	r2, r0
 8009fc4:	460b      	mov	r3, r1
 8009fc6:	9814      	ldr	r0, [sp, #80]	; 0x50
 8009fc8:	2100      	movs	r1, #0
 8009fca:	468c      	mov	ip, r1
 8009fcc:	fbc0 7c06 	smlal	r7, ip, r0, r6
 8009fd0:	e9cd 7c04 	strd	r7, ip, [sp, #16]
 8009fd4:	9810      	ldr	r0, [sp, #64]	; 0x40
 8009fd6:	9f11      	ldr	r7, [sp, #68]	; 0x44
 8009fd8:	468c      	mov	ip, r1
 8009fda:	fbc0 7c06 	smlal	r7, ip, r0, r6
 8009fde:	46e2      	mov	sl, ip
 8009fe0:	46bc      	mov	ip, r7
 8009fe2:	e9dd 0712 	ldrd	r0, r7, [sp, #72]	; 0x48
 8009fe6:	fbc0 7106 	smlal	r7, r1, r0, r6
 8009fea:	e9cd ca02 	strd	ip, sl, [sp, #8]
 8009fee:	e9cd 7100 	strd	r7, r1, [sp]
 8009ff2:	f8d4 1094 	ldr.w	r1, [r4, #148]	; 0x94
 8009ff6:	9106      	str	r1, [sp, #24]
 8009ff8:	4620      	mov	r0, r4
 8009ffa:	47c8      	blx	r9
 8009ffc:	f884 80a0 	strb.w	r8, [r4, #160]	; 0xa0
 800a000:	e7a1      	b.n	8009f46 <read_submessage_list+0x12>
 800a002:	a910      	add	r1, sp, #64	; 0x40
 800a004:	4628      	mov	r0, r5
 800a006:	f002 f857 	bl	800c0b8 <uxr_deserialize_HEARTBEAT_Payload>
 800a00a:	2100      	movs	r1, #0
 800a00c:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
 800a010:	f000 fe36 	bl	800ac80 <uxr_stream_id_from_raw>
 800a014:	f3c0 2707 	ubfx	r7, r0, #8, #8
 800a018:	900f      	str	r0, [sp, #60]	; 0x3c
 800a01a:	4639      	mov	r1, r7
 800a01c:	f104 0008 	add.w	r0, r4, #8
 800a020:	f000 ff1c 	bl	800ae5c <uxr_get_input_reliable_stream>
 800a024:	2800      	cmp	r0, #0
 800a026:	d08e      	beq.n	8009f46 <read_submessage_list+0x12>
 800a028:	f8bd 1040 	ldrh.w	r1, [sp, #64]	; 0x40
 800a02c:	f8bd 2042 	ldrh.w	r2, [sp, #66]	; 0x42
 800a030:	f004 fd2c 	bl	800ea8c <uxr_process_heartbeat>
 800a034:	f89d 103c 	ldrb.w	r1, [sp, #60]	; 0x3c
 800a038:	463a      	mov	r2, r7
 800a03a:	4620      	mov	r0, r4
 800a03c:	f7ff fdf6 	bl	8009c2c <write_submessage_acknack.isra.0>
 800a040:	e781      	b.n	8009f46 <read_submessage_list+0x12>
 800a042:	a910      	add	r1, sp, #64	; 0x40
 800a044:	4628      	mov	r0, r5
 800a046:	f002 f80f 	bl	800c068 <uxr_deserialize_ACKNACK_Payload>
 800a04a:	2100      	movs	r1, #0
 800a04c:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
 800a050:	f000 fe16 	bl	800ac80 <uxr_stream_id_from_raw>
 800a054:	900d      	str	r0, [sp, #52]	; 0x34
 800a056:	f3c0 2107 	ubfx	r1, r0, #8, #8
 800a05a:	f104 0008 	add.w	r0, r4, #8
 800a05e:	f000 fee9 	bl	800ae34 <uxr_get_output_reliable_stream>
 800a062:	4607      	mov	r7, r0
 800a064:	2800      	cmp	r0, #0
 800a066:	f43f af6e 	beq.w	8009f46 <read_submessage_list+0x12>
 800a06a:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
 800a06e:	f89d 1043 	ldrb.w	r1, [sp, #67]	; 0x43
 800a072:	f8bd 2040 	ldrh.w	r2, [sp, #64]	; 0x40
 800a076:	eb01 2103 	add.w	r1, r1, r3, lsl #8
 800a07a:	b289      	uxth	r1, r1
 800a07c:	f005 f84e 	bl	800f11c <uxr_process_acknack>
 800a080:	4638      	mov	r0, r7
 800a082:	f005 f80b 	bl	800f09c <uxr_begin_output_nack_buffer_it>
 800a086:	f10d 0a38 	add.w	sl, sp, #56	; 0x38
 800a08a:	f8ad 0032 	strh.w	r0, [sp, #50]	; 0x32
 800a08e:	e006      	b.n	800a09e <read_submessage_list+0x16a>
 800a090:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800a092:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a094:	f8d3 9004 	ldr.w	r9, [r3, #4]
 800a098:	990e      	ldr	r1, [sp, #56]	; 0x38
 800a09a:	6818      	ldr	r0, [r3, #0]
 800a09c:	47c8      	blx	r9
 800a09e:	f10d 0332 	add.w	r3, sp, #50	; 0x32
 800a0a2:	aa0f      	add	r2, sp, #60	; 0x3c
 800a0a4:	4651      	mov	r1, sl
 800a0a6:	4638      	mov	r0, r7
 800a0a8:	f004 fffa 	bl	800f0a0 <uxr_next_reliable_nack_buffer_to_send>
 800a0ac:	2800      	cmp	r0, #0
 800a0ae:	d1ef      	bne.n	800a090 <read_submessage_list+0x15c>
 800a0b0:	e749      	b.n	8009f46 <read_submessage_list+0x12>
 800a0b2:	f89d 3025 	ldrb.w	r3, [sp, #37]	; 0x25
 800a0b6:	f88d 3035 	strb.w	r3, [sp, #53]	; 0x35
 800a0ba:	f10d 0a38 	add.w	sl, sp, #56	; 0x38
 800a0be:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
 800a0c2:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
 800a0c6:	4651      	mov	r1, sl
 800a0c8:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 800a0cc:	f8bd 7030 	ldrh.w	r7, [sp, #48]	; 0x30
 800a0d0:	f89d 902f 	ldrb.w	r9, [sp, #47]	; 0x2f
 800a0d4:	f88d 2036 	strb.w	r2, [sp, #54]	; 0x36
 800a0d8:	4628      	mov	r0, r5
 800a0da:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
 800a0de:	f001 fd23 	bl	800bb28 <uxr_deserialize_BaseObjectRequest>
 800a0e2:	4650      	mov	r0, sl
 800a0e4:	a90f      	add	r1, sp, #60	; 0x3c
 800a0e6:	f10d 0232 	add.w	r2, sp, #50	; 0x32
 800a0ea:	f000 fd8d 	bl	800ac08 <uxr_parse_base_object_request>
 800a0ee:	f8d4 b080 	ldr.w	fp, [r4, #128]	; 0x80
 800a0f2:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800a0f4:	f8bd a032 	ldrh.w	sl, [sp, #50]	; 0x32
 800a0f8:	9110      	str	r1, [sp, #64]	; 0x40
 800a0fa:	3f04      	subs	r7, #4
 800a0fc:	f009 090e 	and.w	r9, r9, #14
 800a100:	b2bf      	uxth	r7, r7
 800a102:	f1bb 0f00 	cmp.w	fp, #0
 800a106:	d006      	beq.n	800a116 <read_submessage_list+0x1e2>
 800a108:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800a10c:	9300      	str	r3, [sp, #0]
 800a10e:	4652      	mov	r2, sl
 800a110:	2300      	movs	r3, #0
 800a112:	4620      	mov	r0, r4
 800a114:	47d8      	blx	fp
 800a116:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 800a118:	b16a      	cbz	r2, 800a136 <read_submessage_list+0x202>
 800a11a:	6f60      	ldr	r0, [r4, #116]	; 0x74
 800a11c:	2100      	movs	r1, #0
 800a11e:	3802      	subs	r0, #2
 800a120:	e002      	b.n	800a128 <read_submessage_list+0x1f4>
 800a122:	3101      	adds	r1, #1
 800a124:	4291      	cmp	r1, r2
 800a126:	d006      	beq.n	800a136 <read_submessage_list+0x202>
 800a128:	f830 3f02 	ldrh.w	r3, [r0, #2]!
 800a12c:	4553      	cmp	r3, sl
 800a12e:	d1f8      	bne.n	800a122 <read_submessage_list+0x1ee>
 800a130:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 800a132:	2200      	movs	r2, #0
 800a134:	545a      	strb	r2, [r3, r1]
 800a136:	f8bd 1032 	ldrh.w	r1, [sp, #50]	; 0x32
 800a13a:	9102      	str	r1, [sp, #8]
 800a13c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800a13e:	9101      	str	r1, [sp, #4]
 800a140:	990d      	ldr	r1, [sp, #52]	; 0x34
 800a142:	9100      	str	r1, [sp, #0]
 800a144:	464b      	mov	r3, r9
 800a146:	463a      	mov	r2, r7
 800a148:	4629      	mov	r1, r5
 800a14a:	4620      	mov	r0, r4
 800a14c:	f005 f86a 	bl	800f224 <read_submessage_format>
 800a150:	e6f9      	b.n	8009f46 <read_submessage_list+0x12>
 800a152:	4629      	mov	r1, r5
 800a154:	4620      	mov	r0, r4
 800a156:	f7ff fea5 	bl	8009ea4 <read_submessage_info>
 800a15a:	e6f4      	b.n	8009f46 <read_submessage_list+0x12>
 800a15c:	2a00      	cmp	r2, #0
 800a15e:	d03e      	beq.n	800a1de <read_submessage_list+0x2aa>
 800a160:	a910      	add	r1, sp, #64	; 0x40
 800a162:	4628      	mov	r0, r5
 800a164:	f001 fedc 	bl	800bf20 <uxr_deserialize_STATUS_Payload>
 800a168:	a90e      	add	r1, sp, #56	; 0x38
 800a16a:	aa0d      	add	r2, sp, #52	; 0x34
 800a16c:	a810      	add	r0, sp, #64	; 0x40
 800a16e:	f000 fd4b 	bl	800ac08 <uxr_parse_base_object_request>
 800a172:	f8d4 a080 	ldr.w	sl, [r4, #128]	; 0x80
 800a176:	990e      	ldr	r1, [sp, #56]	; 0x38
 800a178:	f89d 9044 	ldrb.w	r9, [sp, #68]	; 0x44
 800a17c:	f8bd 7034 	ldrh.w	r7, [sp, #52]	; 0x34
 800a180:	910f      	str	r1, [sp, #60]	; 0x3c
 800a182:	f1ba 0f00 	cmp.w	sl, #0
 800a186:	d006      	beq.n	800a196 <read_submessage_list+0x262>
 800a188:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800a18c:	9300      	str	r3, [sp, #0]
 800a18e:	463a      	mov	r2, r7
 800a190:	464b      	mov	r3, r9
 800a192:	4620      	mov	r0, r4
 800a194:	47d0      	blx	sl
 800a196:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 800a198:	2a00      	cmp	r2, #0
 800a19a:	f43f aed4 	beq.w	8009f46 <read_submessage_list+0x12>
 800a19e:	6f60      	ldr	r0, [r4, #116]	; 0x74
 800a1a0:	2100      	movs	r1, #0
 800a1a2:	3802      	subs	r0, #2
 800a1a4:	e003      	b.n	800a1ae <read_submessage_list+0x27a>
 800a1a6:	3101      	adds	r1, #1
 800a1a8:	4291      	cmp	r1, r2
 800a1aa:	f43f aecc 	beq.w	8009f46 <read_submessage_list+0x12>
 800a1ae:	f830 3f02 	ldrh.w	r3, [r0, #2]!
 800a1b2:	42bb      	cmp	r3, r7
 800a1b4:	d1f7      	bne.n	800a1a6 <read_submessage_list+0x272>
 800a1b6:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 800a1b8:	f803 9001 	strb.w	r9, [r3, r1]
 800a1bc:	e6c3      	b.n	8009f46 <read_submessage_list+0x12>
 800a1be:	2a00      	cmp	r2, #0
 800a1c0:	f47f aec1 	bne.w	8009f46 <read_submessage_list+0x12>
 800a1c4:	4629      	mov	r1, r5
 800a1c6:	4620      	mov	r0, r4
 800a1c8:	f000 fc64 	bl	800aa94 <uxr_read_create_session_status>
 800a1cc:	e6bb      	b.n	8009f46 <read_submessage_list+0x12>
 800a1ce:	4629      	mov	r1, r5
 800a1d0:	4620      	mov	r0, r4
 800a1d2:	f7ff fcf5 	bl	8009bc0 <read_submessage_get_info>
 800a1d6:	e6b6      	b.n	8009f46 <read_submessage_list+0x12>
 800a1d8:	b017      	add	sp, #92	; 0x5c
 800a1da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a1de:	4629      	mov	r1, r5
 800a1e0:	4620      	mov	r0, r4
 800a1e2:	f000 fc63 	bl	800aaac <uxr_read_delete_session_status>
 800a1e6:	e6ae      	b.n	8009f46 <read_submessage_list+0x12>
 800a1e8:	f000 feb8 	bl	800af5c <uxr_nanos>
 800a1ec:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a1ee:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800a1f0:	464f      	mov	r7, r9
 800a1f2:	fbc3 2706 	smlal	r2, r7, r3, r6
 800a1f6:	1812      	adds	r2, r2, r0
 800a1f8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a1fa:	9813      	ldr	r0, [sp, #76]	; 0x4c
 800a1fc:	eb47 0101 	adc.w	r1, r7, r1
 800a200:	464f      	mov	r7, r9
 800a202:	fbc3 0706 	smlal	r0, r7, r3, r6
 800a206:	463b      	mov	r3, r7
 800a208:	4684      	mov	ip, r0
 800a20a:	e9dd 7010 	ldrd	r7, r0, [sp, #64]	; 0x40
 800a20e:	fbc7 0906 	smlal	r0, r9, r7, r6
 800a212:	eb1c 0c00 	adds.w	ip, ip, r0
 800a216:	464f      	mov	r7, r9
 800a218:	eb43 0307 	adc.w	r3, r3, r7
 800a21c:	ebb2 0c0c 	subs.w	ip, r2, ip
 800a220:	eb61 0303 	sbc.w	r3, r1, r3
 800a224:	0fda      	lsrs	r2, r3, #31
 800a226:	eb12 020c 	adds.w	r2, r2, ip
 800a22a:	f143 0300 	adc.w	r3, r3, #0
 800a22e:	0852      	lsrs	r2, r2, #1
 800a230:	ea42 72c3 	orr.w	r2, r2, r3, lsl #31
 800a234:	105b      	asrs	r3, r3, #1
 800a236:	f8c4 2098 	str.w	r2, [r4, #152]	; 0x98
 800a23a:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
 800a23e:	e6dd      	b.n	8009ffc <read_submessage_list+0xc8>
 800a240:	3b9aca00 	.word	0x3b9aca00

0800a244 <listen_message_reliably>:
 800a244:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a248:	1e0b      	subs	r3, r1, #0
 800a24a:	b09d      	sub	sp, #116	; 0x74
 800a24c:	bfb8      	it	lt
 800a24e:	f06f 4300 	mvnlt.w	r3, #2147483648	; 0x80000000
 800a252:	4680      	mov	r8, r0
 800a254:	9305      	str	r3, [sp, #20]
 800a256:	f000 fe67 	bl	800af28 <uxr_millis>
 800a25a:	f898 2048 	ldrb.w	r2, [r8, #72]	; 0x48
 800a25e:	4681      	mov	r9, r0
 800a260:	2a00      	cmp	r2, #0
 800a262:	f000 80a1 	beq.w	800a3a8 <listen_message_reliably+0x164>
 800a266:	2600      	movs	r6, #0
 800a268:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800a26c:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
 800a270:	9303      	str	r3, [sp, #12]
 800a272:	4630      	mov	r0, r6
 800a274:	460f      	mov	r7, r1
 800a276:	e00f      	b.n	800a298 <listen_message_reliably+0x54>
 800a278:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800a27c:	9903      	ldr	r1, [sp, #12]
 800a27e:	455a      	cmp	r2, fp
 800a280:	f106 0601 	add.w	r6, r6, #1
 800a284:	eb73 0101 	sbcs.w	r1, r3, r1
 800a288:	b2f0      	uxtb	r0, r6
 800a28a:	da01      	bge.n	800a290 <listen_message_reliably+0x4c>
 800a28c:	4693      	mov	fp, r2
 800a28e:	9303      	str	r3, [sp, #12]
 800a290:	f898 3048 	ldrb.w	r3, [r8, #72]	; 0x48
 800a294:	4283      	cmp	r3, r0
 800a296:	d960      	bls.n	800a35a <listen_message_reliably+0x116>
 800a298:	eb00 0480 	add.w	r4, r0, r0, lsl #2
 800a29c:	2102      	movs	r1, #2
 800a29e:	2201      	movs	r2, #1
 800a2a0:	f000 fcc4 	bl	800ac2c <uxr_stream_id>
 800a2a4:	00e4      	lsls	r4, r4, #3
 800a2a6:	f104 0520 	add.w	r5, r4, #32
 800a2aa:	4445      	add	r5, r8
 800a2ac:	4601      	mov	r1, r0
 800a2ae:	463b      	mov	r3, r7
 800a2b0:	464a      	mov	r2, r9
 800a2b2:	4628      	mov	r0, r5
 800a2b4:	9109      	str	r1, [sp, #36]	; 0x24
 800a2b6:	f004 fec7 	bl	800f048 <uxr_update_output_stream_heartbeat_timestamp>
 800a2ba:	eb08 0304 	add.w	r3, r8, r4
 800a2be:	2800      	cmp	r0, #0
 800a2c0:	d0da      	beq.n	800a278 <listen_message_reliably+0x34>
 800a2c2:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 800a2c6:	f89d 5025 	ldrb.w	r5, [sp, #37]	; 0x25
 800a2ca:	9304      	str	r3, [sp, #16]
 800a2cc:	4640      	mov	r0, r8
 800a2ce:	f000 fc75 	bl	800abbc <uxr_session_header_offset>
 800a2d2:	3501      	adds	r5, #1
 800a2d4:	f10d 0a50 	add.w	sl, sp, #80	; 0x50
 800a2d8:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 800a2dc:	eb08 05c5 	add.w	r5, r8, r5, lsl #3
 800a2e0:	2300      	movs	r3, #0
 800a2e2:	2211      	movs	r2, #17
 800a2e4:	9000      	str	r0, [sp, #0]
 800a2e6:	a90c      	add	r1, sp, #48	; 0x30
 800a2e8:	4650      	mov	r0, sl
 800a2ea:	f7ff fa3b 	bl	8009764 <ucdr_init_buffer_origin_offset>
 800a2ee:	2300      	movs	r3, #0
 800a2f0:	2205      	movs	r2, #5
 800a2f2:	210b      	movs	r1, #11
 800a2f4:	4650      	mov	r0, sl
 800a2f6:	f000 fdd1 	bl	800ae9c <uxr_buffer_submessage_header>
 800a2fa:	8968      	ldrh	r0, [r5, #10]
 800a2fc:	2101      	movs	r1, #1
 800a2fe:	f005 f85b 	bl	800f3b8 <uxr_seq_num_add>
 800a302:	892b      	ldrh	r3, [r5, #8]
 800a304:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 800a308:	4602      	mov	r2, r0
 800a30a:	9b04      	ldr	r3, [sp, #16]
 800a30c:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
 800a310:	a90a      	add	r1, sp, #40	; 0x28
 800a312:	4650      	mov	r0, sl
 800a314:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
 800a318:	f001 feba 	bl	800c090 <uxr_serialize_HEARTBEAT_Payload>
 800a31c:	2200      	movs	r2, #0
 800a31e:	4611      	mov	r1, r2
 800a320:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a322:	4640      	mov	r0, r8
 800a324:	f000 fbf4 	bl	800ab10 <uxr_stamp_session_header>
 800a328:	4650      	mov	r0, sl
 800a32a:	f7ff fa59 	bl	80097e0 <ucdr_buffer_length>
 800a32e:	f8d8 3070 	ldr.w	r3, [r8, #112]	; 0x70
 800a332:	4602      	mov	r2, r0
 800a334:	a90c      	add	r1, sp, #48	; 0x30
 800a336:	e9d3 0500 	ldrd	r0, r5, [r3]
 800a33a:	4444      	add	r4, r8
 800a33c:	47a8      	blx	r5
 800a33e:	e9d4 230e 	ldrd	r2, r3, [r4, #56]	; 0x38
 800a342:	9903      	ldr	r1, [sp, #12]
 800a344:	455a      	cmp	r2, fp
 800a346:	f106 0601 	add.w	r6, r6, #1
 800a34a:	eb73 0101 	sbcs.w	r1, r3, r1
 800a34e:	b2f0      	uxtb	r0, r6
 800a350:	db9c      	blt.n	800a28c <listen_message_reliably+0x48>
 800a352:	f898 3048 	ldrb.w	r3, [r8, #72]	; 0x48
 800a356:	4283      	cmp	r3, r0
 800a358:	d89e      	bhi.n	800a298 <listen_message_reliably+0x54>
 800a35a:	9a03      	ldr	r2, [sp, #12]
 800a35c:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800a360:	429a      	cmp	r2, r3
 800a362:	bf08      	it	eq
 800a364:	f1bb 3fff 	cmpeq.w	fp, #4294967295	; 0xffffffff
 800a368:	d01e      	beq.n	800a3a8 <listen_message_reliably+0x164>
 800a36a:	ebab 0309 	sub.w	r3, fp, r9
 800a36e:	9905      	ldr	r1, [sp, #20]
 800a370:	f8d8 2070 	ldr.w	r2, [r8, #112]	; 0x70
 800a374:	2b00      	cmp	r3, #0
 800a376:	bf08      	it	eq
 800a378:	2301      	moveq	r3, #1
 800a37a:	4299      	cmp	r1, r3
 800a37c:	bfa8      	it	ge
 800a37e:	4619      	movge	r1, r3
 800a380:	6894      	ldr	r4, [r2, #8]
 800a382:	6810      	ldr	r0, [r2, #0]
 800a384:	4689      	mov	r9, r1
 800a386:	460b      	mov	r3, r1
 800a388:	aa08      	add	r2, sp, #32
 800a38a:	a907      	add	r1, sp, #28
 800a38c:	47a0      	blx	r4
 800a38e:	b968      	cbnz	r0, 800a3ac <listen_message_reliably+0x168>
 800a390:	9b05      	ldr	r3, [sp, #20]
 800a392:	eba3 0309 	sub.w	r3, r3, r9
 800a396:	2b00      	cmp	r3, #0
 800a398:	9305      	str	r3, [sp, #20]
 800a39a:	f73f af5c 	bgt.w	800a256 <listen_message_reliably+0x12>
 800a39e:	4604      	mov	r4, r0
 800a3a0:	4620      	mov	r0, r4
 800a3a2:	b01d      	add	sp, #116	; 0x74
 800a3a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a3a8:	9b05      	ldr	r3, [sp, #20]
 800a3aa:	e7e0      	b.n	800a36e <listen_message_reliably+0x12a>
 800a3ac:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
 800a3b0:	4604      	mov	r4, r0
 800a3b2:	a80c      	add	r0, sp, #48	; 0x30
 800a3b4:	f7ff f9e8 	bl	8009788 <ucdr_init_buffer>
 800a3b8:	2500      	movs	r5, #0
 800a3ba:	f10d 031a 	add.w	r3, sp, #26
 800a3be:	aa06      	add	r2, sp, #24
 800a3c0:	a90c      	add	r1, sp, #48	; 0x30
 800a3c2:	4640      	mov	r0, r8
 800a3c4:	f88d 5018 	strb.w	r5, [sp, #24]
 800a3c8:	f000 fbb6 	bl	800ab38 <uxr_read_session_header>
 800a3cc:	b918      	cbnz	r0, 800a3d6 <listen_message_reliably+0x192>
 800a3ce:	4620      	mov	r0, r4
 800a3d0:	b01d      	add	sp, #116	; 0x74
 800a3d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a3d6:	4629      	mov	r1, r5
 800a3d8:	f89d 0018 	ldrb.w	r0, [sp, #24]
 800a3dc:	f000 fc50 	bl	800ac80 <uxr_stream_id_from_raw>
 800a3e0:	f3c0 4507 	ubfx	r5, r0, #16, #8
 800a3e4:	2d01      	cmp	r5, #1
 800a3e6:	e9cd 0009 	strd	r0, r0, [sp, #36]	; 0x24
 800a3ea:	f8bd a01a 	ldrh.w	sl, [sp, #26]
 800a3ee:	f3c0 2607 	ubfx	r6, r0, #8, #8
 800a3f2:	d04b      	beq.n	800a48c <listen_message_reliably+0x248>
 800a3f4:	2d02      	cmp	r5, #2
 800a3f6:	d00f      	beq.n	800a418 <listen_message_reliably+0x1d4>
 800a3f8:	2d00      	cmp	r5, #0
 800a3fa:	d1e8      	bne.n	800a3ce <listen_message_reliably+0x18a>
 800a3fc:	4629      	mov	r1, r5
 800a3fe:	4628      	mov	r0, r5
 800a400:	f000 fc3e 	bl	800ac80 <uxr_stream_id_from_raw>
 800a404:	a90c      	add	r1, sp, #48	; 0x30
 800a406:	4602      	mov	r2, r0
 800a408:	4640      	mov	r0, r8
 800a40a:	920a      	str	r2, [sp, #40]	; 0x28
 800a40c:	f7ff fd92 	bl	8009f34 <read_submessage_list>
 800a410:	4620      	mov	r0, r4
 800a412:	b01d      	add	sp, #116	; 0x74
 800a414:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a418:	4631      	mov	r1, r6
 800a41a:	f108 0008 	add.w	r0, r8, #8
 800a41e:	f89d 9024 	ldrb.w	r9, [sp, #36]	; 0x24
 800a422:	f000 fd1b 	bl	800ae5c <uxr_get_input_reliable_stream>
 800a426:	4607      	mov	r7, r0
 800a428:	b338      	cbz	r0, 800a47a <listen_message_reliably+0x236>
 800a42a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a42c:	9203      	str	r2, [sp, #12]
 800a42e:	a80c      	add	r0, sp, #48	; 0x30
 800a430:	f7ff f9da 	bl	80097e8 <ucdr_buffer_remaining>
 800a434:	4603      	mov	r3, r0
 800a436:	f10d 0019 	add.w	r0, sp, #25
 800a43a:	9000      	str	r0, [sp, #0]
 800a43c:	9a03      	ldr	r2, [sp, #12]
 800a43e:	4651      	mov	r1, sl
 800a440:	4638      	mov	r0, r7
 800a442:	f004 fa29 	bl	800e898 <uxr_receive_reliable_message>
 800a446:	b1c0      	cbz	r0, 800a47a <listen_message_reliably+0x236>
 800a448:	f89d 3019 	ldrb.w	r3, [sp, #25]
 800a44c:	b393      	cbz	r3, 800a4b4 <listen_message_reliably+0x270>
 800a44e:	ad14      	add	r5, sp, #80	; 0x50
 800a450:	f04f 0a02 	mov.w	sl, #2
 800a454:	e00a      	b.n	800a46c <listen_message_reliably+0x228>
 800a456:	f88d 9028 	strb.w	r9, [sp, #40]	; 0x28
 800a45a:	f88d 6029 	strb.w	r6, [sp, #41]	; 0x29
 800a45e:	f88d a02a 	strb.w	sl, [sp, #42]	; 0x2a
 800a462:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a464:	4629      	mov	r1, r5
 800a466:	4640      	mov	r0, r8
 800a468:	f7ff fd64 	bl	8009f34 <read_submessage_list>
 800a46c:	2204      	movs	r2, #4
 800a46e:	4629      	mov	r1, r5
 800a470:	4638      	mov	r0, r7
 800a472:	f004 fa91 	bl	800e998 <uxr_next_input_reliable_buffer_available>
 800a476:	2800      	cmp	r0, #0
 800a478:	d1ed      	bne.n	800a456 <listen_message_reliably+0x212>
 800a47a:	4640      	mov	r0, r8
 800a47c:	4632      	mov	r2, r6
 800a47e:	4649      	mov	r1, r9
 800a480:	f7ff fbd4 	bl	8009c2c <write_submessage_acknack.isra.0>
 800a484:	4620      	mov	r0, r4
 800a486:	b01d      	add	sp, #116	; 0x74
 800a488:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a48c:	4631      	mov	r1, r6
 800a48e:	f108 0008 	add.w	r0, r8, #8
 800a492:	f000 fcd9 	bl	800ae48 <uxr_get_input_best_effort_stream>
 800a496:	2800      	cmp	r0, #0
 800a498:	d099      	beq.n	800a3ce <listen_message_reliably+0x18a>
 800a49a:	4651      	mov	r1, sl
 800a49c:	f004 f968 	bl	800e770 <uxr_receive_best_effort_message>
 800a4a0:	2800      	cmp	r0, #0
 800a4a2:	d094      	beq.n	800a3ce <listen_message_reliably+0x18a>
 800a4a4:	f88d 502a 	strb.w	r5, [sp, #42]	; 0x2a
 800a4a8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a4aa:	a90c      	add	r1, sp, #48	; 0x30
 800a4ac:	4640      	mov	r0, r8
 800a4ae:	f7ff fd41 	bl	8009f34 <read_submessage_list>
 800a4b2:	e78c      	b.n	800a3ce <listen_message_reliably+0x18a>
 800a4b4:	f88d 502a 	strb.w	r5, [sp, #42]	; 0x2a
 800a4b8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a4ba:	a90c      	add	r1, sp, #48	; 0x30
 800a4bc:	4640      	mov	r0, r8
 800a4be:	f7ff fd39 	bl	8009f34 <read_submessage_list>
 800a4c2:	e7c4      	b.n	800a44e <listen_message_reliably+0x20a>

0800a4c4 <uxr_run_session_until_confirm_delivery>:
 800a4c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a4c8:	4606      	mov	r6, r0
 800a4ca:	460d      	mov	r5, r1
 800a4cc:	f000 fd2c 	bl	800af28 <uxr_millis>
 800a4d0:	4607      	mov	r7, r0
 800a4d2:	4630      	mov	r0, r6
 800a4d4:	f7ff fc70 	bl	8009db8 <uxr_flash_output_streams>
 800a4d8:	2d00      	cmp	r5, #0
 800a4da:	f106 0808 	add.w	r8, r6, #8
 800a4de:	bfa8      	it	ge
 800a4e0:	462c      	movge	r4, r5
 800a4e2:	da07      	bge.n	800a4f4 <uxr_run_session_until_confirm_delivery+0x30>
 800a4e4:	e00e      	b.n	800a504 <uxr_run_session_until_confirm_delivery+0x40>
 800a4e6:	f7ff fead 	bl	800a244 <listen_message_reliably>
 800a4ea:	f000 fd1d 	bl	800af28 <uxr_millis>
 800a4ee:	1bc3      	subs	r3, r0, r7
 800a4f0:	1aec      	subs	r4, r5, r3
 800a4f2:	d407      	bmi.n	800a504 <uxr_run_session_until_confirm_delivery+0x40>
 800a4f4:	4640      	mov	r0, r8
 800a4f6:	f000 fcbb 	bl	800ae70 <uxr_output_streams_confirmed>
 800a4fa:	4603      	mov	r3, r0
 800a4fc:	4621      	mov	r1, r4
 800a4fe:	4630      	mov	r0, r6
 800a500:	2b00      	cmp	r3, #0
 800a502:	d0f0      	beq.n	800a4e6 <uxr_run_session_until_confirm_delivery+0x22>
 800a504:	4640      	mov	r0, r8
 800a506:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a50a:	f000 bcb1 	b.w	800ae70 <uxr_output_streams_confirmed>
 800a50e:	bf00      	nop

0800a510 <uxr_run_session_until_all_status>:
 800a510:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a514:	9c08      	ldr	r4, [sp, #32]
 800a516:	4606      	mov	r6, r0
 800a518:	460f      	mov	r7, r1
 800a51a:	4691      	mov	r9, r2
 800a51c:	461d      	mov	r5, r3
 800a51e:	f7ff fc4b 	bl	8009db8 <uxr_flash_output_streams>
 800a522:	b124      	cbz	r4, 800a52e <uxr_run_session_until_all_status+0x1e>
 800a524:	4622      	mov	r2, r4
 800a526:	21ff      	movs	r1, #255	; 0xff
 800a528:	4628      	mov	r0, r5
 800a52a:	f006 f9f3 	bl	8010914 <memset>
 800a52e:	e9c6 951d 	strd	r9, r5, [r6, #116]	; 0x74
 800a532:	67f4      	str	r4, [r6, #124]	; 0x7c
 800a534:	f000 fcf8 	bl	800af28 <uxr_millis>
 800a538:	3d01      	subs	r5, #1
 800a53a:	f1a9 0902 	sub.w	r9, r9, #2
 800a53e:	4680      	mov	r8, r0
 800a540:	4639      	mov	r1, r7
 800a542:	4630      	mov	r0, r6
 800a544:	f7ff fe7e 	bl	800a244 <listen_message_reliably>
 800a548:	f000 fcee 	bl	800af28 <uxr_millis>
 800a54c:	eba0 0008 	sub.w	r0, r0, r8
 800a550:	1a39      	subs	r1, r7, r0
 800a552:	b344      	cbz	r4, 800a5a6 <uxr_run_session_until_all_status+0x96>
 800a554:	4628      	mov	r0, r5
 800a556:	46ac      	mov	ip, r5
 800a558:	2301      	movs	r3, #1
 800a55a:	e002      	b.n	800a562 <uxr_run_session_until_all_status+0x52>
 800a55c:	42a3      	cmp	r3, r4
 800a55e:	d20d      	bcs.n	800a57c <uxr_run_session_until_all_status+0x6c>
 800a560:	3301      	adds	r3, #1
 800a562:	f81c ef01 	ldrb.w	lr, [ip, #1]!
 800a566:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 800a56a:	d1f7      	bne.n	800a55c <uxr_run_session_until_all_status+0x4c>
 800a56c:	42a3      	cmp	r3, r4
 800a56e:	f839 2013 	ldrh.w	r2, [r9, r3, lsl #1]
 800a572:	d213      	bcs.n	800a59c <uxr_run_session_until_all_status+0x8c>
 800a574:	2a00      	cmp	r2, #0
 800a576:	d0f3      	beq.n	800a560 <uxr_run_session_until_all_status+0x50>
 800a578:	2900      	cmp	r1, #0
 800a57a:	dce2      	bgt.n	800a542 <uxr_run_session_until_all_status+0x32>
 800a57c:	2300      	movs	r3, #0
 800a57e:	67f3      	str	r3, [r6, #124]	; 0x7c
 800a580:	442c      	add	r4, r5
 800a582:	e001      	b.n	800a588 <uxr_run_session_until_all_status+0x78>
 800a584:	2b01      	cmp	r3, #1
 800a586:	d812      	bhi.n	800a5ae <uxr_run_session_until_all_status+0x9e>
 800a588:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 800a58c:	4284      	cmp	r4, r0
 800a58e:	d1f9      	bne.n	800a584 <uxr_run_session_until_all_status+0x74>
 800a590:	2b01      	cmp	r3, #1
 800a592:	bf8c      	ite	hi
 800a594:	2000      	movhi	r0, #0
 800a596:	2001      	movls	r0, #1
 800a598:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a59c:	2900      	cmp	r1, #0
 800a59e:	dded      	ble.n	800a57c <uxr_run_session_until_all_status+0x6c>
 800a5a0:	2a00      	cmp	r2, #0
 800a5a2:	d1ce      	bne.n	800a542 <uxr_run_session_until_all_status+0x32>
 800a5a4:	e7ea      	b.n	800a57c <uxr_run_session_until_all_status+0x6c>
 800a5a6:	67f4      	str	r4, [r6, #124]	; 0x7c
 800a5a8:	2001      	movs	r0, #1
 800a5aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a5ae:	2000      	movs	r0, #0
 800a5b0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0800a5b4 <wait_session_status>:
 800a5b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a5b8:	4604      	mov	r4, r0
 800a5ba:	b09d      	sub	sp, #116	; 0x74
 800a5bc:	20ff      	movs	r0, #255	; 0xff
 800a5be:	7160      	strb	r0, [r4, #5]
 800a5c0:	9303      	str	r3, [sp, #12]
 800a5c2:	2b00      	cmp	r3, #0
 800a5c4:	f000 80b6 	beq.w	800a734 <wait_session_status+0x180>
 800a5c8:	468a      	mov	sl, r1
 800a5ca:	4691      	mov	r9, r2
 800a5cc:	f04f 0b00 	mov.w	fp, #0
 800a5d0:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800a5d2:	464a      	mov	r2, r9
 800a5d4:	e9d3 0500 	ldrd	r0, r5, [r3]
 800a5d8:	4651      	mov	r1, sl
 800a5da:	47a8      	blx	r5
 800a5dc:	f000 fca4 	bl	800af28 <uxr_millis>
 800a5e0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800a5e4:	4605      	mov	r5, r0
 800a5e6:	e009      	b.n	800a5fc <wait_session_status+0x48>
 800a5e8:	f000 fc9e 	bl	800af28 <uxr_millis>
 800a5ec:	1b40      	subs	r0, r0, r5
 800a5ee:	f5c0 737a 	rsb	r3, r0, #1000	; 0x3e8
 800a5f2:	2b00      	cmp	r3, #0
 800a5f4:	dd40      	ble.n	800a678 <wait_session_status+0xc4>
 800a5f6:	7960      	ldrb	r0, [r4, #5]
 800a5f8:	28ff      	cmp	r0, #255	; 0xff
 800a5fa:	d145      	bne.n	800a688 <wait_session_status+0xd4>
 800a5fc:	6f22      	ldr	r2, [r4, #112]	; 0x70
 800a5fe:	a908      	add	r1, sp, #32
 800a600:	6896      	ldr	r6, [r2, #8]
 800a602:	6810      	ldr	r0, [r2, #0]
 800a604:	aa09      	add	r2, sp, #36	; 0x24
 800a606:	47b0      	blx	r6
 800a608:	2800      	cmp	r0, #0
 800a60a:	d0ed      	beq.n	800a5e8 <wait_session_status+0x34>
 800a60c:	e9dd 1208 	ldrd	r1, r2, [sp, #32]
 800a610:	a80c      	add	r0, sp, #48	; 0x30
 800a612:	f7ff f8b9 	bl	8009788 <ucdr_init_buffer>
 800a616:	2600      	movs	r6, #0
 800a618:	f10d 031e 	add.w	r3, sp, #30
 800a61c:	aa07      	add	r2, sp, #28
 800a61e:	a90c      	add	r1, sp, #48	; 0x30
 800a620:	4620      	mov	r0, r4
 800a622:	f88d 601c 	strb.w	r6, [sp, #28]
 800a626:	f000 fa87 	bl	800ab38 <uxr_read_session_header>
 800a62a:	2800      	cmp	r0, #0
 800a62c:	d0dc      	beq.n	800a5e8 <wait_session_status+0x34>
 800a62e:	4631      	mov	r1, r6
 800a630:	f89d 001c 	ldrb.w	r0, [sp, #28]
 800a634:	f000 fb24 	bl	800ac80 <uxr_stream_id_from_raw>
 800a638:	f3c0 4707 	ubfx	r7, r0, #16, #8
 800a63c:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 800a640:	9302      	str	r3, [sp, #8]
 800a642:	2f01      	cmp	r7, #1
 800a644:	e9cd 000a 	strd	r0, r0, [sp, #40]	; 0x28
 800a648:	f3c0 2607 	ubfx	r6, r0, #8, #8
 800a64c:	d05c      	beq.n	800a708 <wait_session_status+0x154>
 800a64e:	2f02      	cmp	r7, #2
 800a650:	d020      	beq.n	800a694 <wait_session_status+0xe0>
 800a652:	2f00      	cmp	r7, #0
 800a654:	d1c8      	bne.n	800a5e8 <wait_session_status+0x34>
 800a656:	4639      	mov	r1, r7
 800a658:	4638      	mov	r0, r7
 800a65a:	f000 fb11 	bl	800ac80 <uxr_stream_id_from_raw>
 800a65e:	a90c      	add	r1, sp, #48	; 0x30
 800a660:	4602      	mov	r2, r0
 800a662:	900b      	str	r0, [sp, #44]	; 0x2c
 800a664:	4620      	mov	r0, r4
 800a666:	f7ff fc65 	bl	8009f34 <read_submessage_list>
 800a66a:	f000 fc5d 	bl	800af28 <uxr_millis>
 800a66e:	1b40      	subs	r0, r0, r5
 800a670:	f5c0 737a 	rsb	r3, r0, #1000	; 0x3e8
 800a674:	2b00      	cmp	r3, #0
 800a676:	dcbe      	bgt.n	800a5f6 <wait_session_status+0x42>
 800a678:	9b03      	ldr	r3, [sp, #12]
 800a67a:	7960      	ldrb	r0, [r4, #5]
 800a67c:	f10b 0b01 	add.w	fp, fp, #1
 800a680:	455b      	cmp	r3, fp
 800a682:	d001      	beq.n	800a688 <wait_session_status+0xd4>
 800a684:	28ff      	cmp	r0, #255	; 0xff
 800a686:	d0a3      	beq.n	800a5d0 <wait_session_status+0x1c>
 800a688:	38ff      	subs	r0, #255	; 0xff
 800a68a:	bf18      	it	ne
 800a68c:	2001      	movne	r0, #1
 800a68e:	b01d      	add	sp, #116	; 0x74
 800a690:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a694:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
 800a698:	9304      	str	r3, [sp, #16]
 800a69a:	4631      	mov	r1, r6
 800a69c:	f104 0008 	add.w	r0, r4, #8
 800a6a0:	f000 fbdc 	bl	800ae5c <uxr_get_input_reliable_stream>
 800a6a4:	4680      	mov	r8, r0
 800a6a6:	b348      	cbz	r0, 800a6fc <wait_session_status+0x148>
 800a6a8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a6aa:	9205      	str	r2, [sp, #20]
 800a6ac:	a80c      	add	r0, sp, #48	; 0x30
 800a6ae:	f7ff f89b 	bl	80097e8 <ucdr_buffer_remaining>
 800a6b2:	4603      	mov	r3, r0
 800a6b4:	f10d 001d 	add.w	r0, sp, #29
 800a6b8:	9000      	str	r0, [sp, #0]
 800a6ba:	9a05      	ldr	r2, [sp, #20]
 800a6bc:	9902      	ldr	r1, [sp, #8]
 800a6be:	4640      	mov	r0, r8
 800a6c0:	f004 f8ea 	bl	800e898 <uxr_receive_reliable_message>
 800a6c4:	b1d0      	cbz	r0, 800a6fc <wait_session_status+0x148>
 800a6c6:	f89d 301d 	ldrb.w	r3, [sp, #29]
 800a6ca:	2b00      	cmp	r3, #0
 800a6cc:	d03a      	beq.n	800a744 <wait_session_status+0x190>
 800a6ce:	9f04      	ldr	r7, [sp, #16]
 800a6d0:	e00a      	b.n	800a6e8 <wait_session_status+0x134>
 800a6d2:	f04f 0302 	mov.w	r3, #2
 800a6d6:	f88d 702c 	strb.w	r7, [sp, #44]	; 0x2c
 800a6da:	f88d 602d 	strb.w	r6, [sp, #45]	; 0x2d
 800a6de:	f88d 302e 	strb.w	r3, [sp, #46]	; 0x2e
 800a6e2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a6e4:	f7ff fc26 	bl	8009f34 <read_submessage_list>
 800a6e8:	a914      	add	r1, sp, #80	; 0x50
 800a6ea:	2204      	movs	r2, #4
 800a6ec:	4640      	mov	r0, r8
 800a6ee:	f004 f953 	bl	800e998 <uxr_next_input_reliable_buffer_available>
 800a6f2:	4603      	mov	r3, r0
 800a6f4:	a914      	add	r1, sp, #80	; 0x50
 800a6f6:	4620      	mov	r0, r4
 800a6f8:	2b00      	cmp	r3, #0
 800a6fa:	d1ea      	bne.n	800a6d2 <wait_session_status+0x11e>
 800a6fc:	9904      	ldr	r1, [sp, #16]
 800a6fe:	4632      	mov	r2, r6
 800a700:	4620      	mov	r0, r4
 800a702:	f7ff fa93 	bl	8009c2c <write_submessage_acknack.isra.0>
 800a706:	e76f      	b.n	800a5e8 <wait_session_status+0x34>
 800a708:	4631      	mov	r1, r6
 800a70a:	f104 0008 	add.w	r0, r4, #8
 800a70e:	f000 fb9b 	bl	800ae48 <uxr_get_input_best_effort_stream>
 800a712:	2800      	cmp	r0, #0
 800a714:	f43f af68 	beq.w	800a5e8 <wait_session_status+0x34>
 800a718:	9902      	ldr	r1, [sp, #8]
 800a71a:	f004 f829 	bl	800e770 <uxr_receive_best_effort_message>
 800a71e:	2800      	cmp	r0, #0
 800a720:	f43f af62 	beq.w	800a5e8 <wait_session_status+0x34>
 800a724:	f88d 702e 	strb.w	r7, [sp, #46]	; 0x2e
 800a728:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a72a:	a90c      	add	r1, sp, #48	; 0x30
 800a72c:	4620      	mov	r0, r4
 800a72e:	f7ff fc01 	bl	8009f34 <read_submessage_list>
 800a732:	e759      	b.n	800a5e8 <wait_session_status+0x34>
 800a734:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800a736:	e9d3 0400 	ldrd	r0, r4, [r3]
 800a73a:	47a0      	blx	r4
 800a73c:	2001      	movs	r0, #1
 800a73e:	b01d      	add	sp, #116	; 0x74
 800a740:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a744:	f88d 702e 	strb.w	r7, [sp, #46]	; 0x2e
 800a748:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a74a:	a90c      	add	r1, sp, #48	; 0x30
 800a74c:	4620      	mov	r0, r4
 800a74e:	f7ff fbf1 	bl	8009f34 <read_submessage_list>
 800a752:	e7bc      	b.n	800a6ce <wait_session_status+0x11a>

0800a754 <uxr_delete_session_retries>:
 800a754:	b530      	push	{r4, r5, lr}
 800a756:	b08f      	sub	sp, #60	; 0x3c
 800a758:	4604      	mov	r4, r0
 800a75a:	460d      	mov	r5, r1
 800a75c:	f000 fa2e 	bl	800abbc <uxr_session_header_offset>
 800a760:	2300      	movs	r3, #0
 800a762:	2210      	movs	r2, #16
 800a764:	9000      	str	r0, [sp, #0]
 800a766:	a902      	add	r1, sp, #8
 800a768:	a806      	add	r0, sp, #24
 800a76a:	f7fe fffb 	bl	8009764 <ucdr_init_buffer_origin_offset>
 800a76e:	a906      	add	r1, sp, #24
 800a770:	4620      	mov	r0, r4
 800a772:	f000 f973 	bl	800aa5c <uxr_buffer_delete_session>
 800a776:	2200      	movs	r2, #0
 800a778:	4611      	mov	r1, r2
 800a77a:	9b06      	ldr	r3, [sp, #24]
 800a77c:	4620      	mov	r0, r4
 800a77e:	f000 f9c7 	bl	800ab10 <uxr_stamp_session_header>
 800a782:	a806      	add	r0, sp, #24
 800a784:	f7ff f82c 	bl	80097e0 <ucdr_buffer_length>
 800a788:	462b      	mov	r3, r5
 800a78a:	4602      	mov	r2, r0
 800a78c:	a902      	add	r1, sp, #8
 800a78e:	4620      	mov	r0, r4
 800a790:	f7ff ff10 	bl	800a5b4 <wait_session_status>
 800a794:	b118      	cbz	r0, 800a79e <uxr_delete_session_retries+0x4a>
 800a796:	7960      	ldrb	r0, [r4, #5]
 800a798:	fab0 f080 	clz	r0, r0
 800a79c:	0940      	lsrs	r0, r0, #5
 800a79e:	b00f      	add	sp, #60	; 0x3c
 800a7a0:	bd30      	pop	{r4, r5, pc}
 800a7a2:	bf00      	nop

0800a7a4 <uxr_create_session>:
 800a7a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a7a8:	f100 0b08 	add.w	fp, r0, #8
 800a7ac:	b0ab      	sub	sp, #172	; 0xac
 800a7ae:	4604      	mov	r4, r0
 800a7b0:	4658      	mov	r0, fp
 800a7b2:	f000 fa99 	bl	800ace8 <uxr_reset_stream_storage>
 800a7b6:	4620      	mov	r0, r4
 800a7b8:	f000 fa00 	bl	800abbc <uxr_session_header_offset>
 800a7bc:	2300      	movs	r3, #0
 800a7be:	9000      	str	r0, [sp, #0]
 800a7c0:	221c      	movs	r2, #28
 800a7c2:	a90b      	add	r1, sp, #44	; 0x2c
 800a7c4:	a812      	add	r0, sp, #72	; 0x48
 800a7c6:	f7fe ffcd 	bl	8009764 <ucdr_init_buffer_origin_offset>
 800a7ca:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800a7cc:	8a1a      	ldrh	r2, [r3, #16]
 800a7ce:	3a04      	subs	r2, #4
 800a7d0:	b292      	uxth	r2, r2
 800a7d2:	a912      	add	r1, sp, #72	; 0x48
 800a7d4:	4620      	mov	r0, r4
 800a7d6:	f000 f917 	bl	800aa08 <uxr_buffer_create_session>
 800a7da:	9912      	ldr	r1, [sp, #72]	; 0x48
 800a7dc:	4620      	mov	r0, r4
 800a7de:	f000 f983 	bl	800aae8 <uxr_stamp_create_session_header>
 800a7e2:	a812      	add	r0, sp, #72	; 0x48
 800a7e4:	f7fe fffc 	bl	80097e0 <ucdr_buffer_length>
 800a7e8:	23ff      	movs	r3, #255	; 0xff
 800a7ea:	7163      	strb	r3, [r4, #5]
 800a7ec:	230a      	movs	r3, #10
 800a7ee:	46da      	mov	sl, fp
 800a7f0:	9303      	str	r3, [sp, #12]
 800a7f2:	4683      	mov	fp, r0
 800a7f4:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800a7f6:	465a      	mov	r2, fp
 800a7f8:	e9d3 0500 	ldrd	r0, r5, [r3]
 800a7fc:	a90b      	add	r1, sp, #44	; 0x2c
 800a7fe:	47a8      	blx	r5
 800a800:	f000 fb92 	bl	800af28 <uxr_millis>
 800a804:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800a808:	4605      	mov	r5, r0
 800a80a:	e009      	b.n	800a820 <uxr_create_session+0x7c>
 800a80c:	f000 fb8c 	bl	800af28 <uxr_millis>
 800a810:	1b40      	subs	r0, r0, r5
 800a812:	f5c0 737a 	rsb	r3, r0, #1000	; 0x3e8
 800a816:	2b00      	cmp	r3, #0
 800a818:	7962      	ldrb	r2, [r4, #5]
 800a81a:	dd38      	ble.n	800a88e <uxr_create_session+0xea>
 800a81c:	2aff      	cmp	r2, #255	; 0xff
 800a81e:	d13c      	bne.n	800a89a <uxr_create_session+0xf6>
 800a820:	6f22      	ldr	r2, [r4, #112]	; 0x70
 800a822:	a907      	add	r1, sp, #28
 800a824:	6896      	ldr	r6, [r2, #8]
 800a826:	6810      	ldr	r0, [r2, #0]
 800a828:	aa08      	add	r2, sp, #32
 800a82a:	47b0      	blx	r6
 800a82c:	2800      	cmp	r0, #0
 800a82e:	d0ed      	beq.n	800a80c <uxr_create_session+0x68>
 800a830:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
 800a834:	a81a      	add	r0, sp, #104	; 0x68
 800a836:	f7fe ffa7 	bl	8009788 <ucdr_init_buffer>
 800a83a:	2600      	movs	r6, #0
 800a83c:	f10d 031a 	add.w	r3, sp, #26
 800a840:	aa06      	add	r2, sp, #24
 800a842:	a91a      	add	r1, sp, #104	; 0x68
 800a844:	4620      	mov	r0, r4
 800a846:	f88d 6018 	strb.w	r6, [sp, #24]
 800a84a:	f000 f975 	bl	800ab38 <uxr_read_session_header>
 800a84e:	2800      	cmp	r0, #0
 800a850:	d0dc      	beq.n	800a80c <uxr_create_session+0x68>
 800a852:	4631      	mov	r1, r6
 800a854:	f89d 0018 	ldrb.w	r0, [sp, #24]
 800a858:	f000 fa12 	bl	800ac80 <uxr_stream_id_from_raw>
 800a85c:	f3c0 4607 	ubfx	r6, r0, #16, #8
 800a860:	2e01      	cmp	r6, #1
 800a862:	e9cd 0009 	strd	r0, r0, [sp, #36]	; 0x24
 800a866:	f8bd 901a 	ldrh.w	r9, [sp, #26]
 800a86a:	f3c0 2707 	ubfx	r7, r0, #8, #8
 800a86e:	d053      	beq.n	800a918 <uxr_create_session+0x174>
 800a870:	2e02      	cmp	r6, #2
 800a872:	d018      	beq.n	800a8a6 <uxr_create_session+0x102>
 800a874:	2e00      	cmp	r6, #0
 800a876:	d1c9      	bne.n	800a80c <uxr_create_session+0x68>
 800a878:	4631      	mov	r1, r6
 800a87a:	4630      	mov	r0, r6
 800a87c:	f000 fa00 	bl	800ac80 <uxr_stream_id_from_raw>
 800a880:	a91a      	add	r1, sp, #104	; 0x68
 800a882:	4602      	mov	r2, r0
 800a884:	900a      	str	r0, [sp, #40]	; 0x28
 800a886:	4620      	mov	r0, r4
 800a888:	f7ff fb54 	bl	8009f34 <read_submessage_list>
 800a88c:	e7be      	b.n	800a80c <uxr_create_session+0x68>
 800a88e:	9b03      	ldr	r3, [sp, #12]
 800a890:	3b01      	subs	r3, #1
 800a892:	9303      	str	r3, [sp, #12]
 800a894:	d001      	beq.n	800a89a <uxr_create_session+0xf6>
 800a896:	2aff      	cmp	r2, #255	; 0xff
 800a898:	d0ac      	beq.n	800a7f4 <uxr_create_session+0x50>
 800a89a:	2a00      	cmp	r2, #0
 800a89c:	d051      	beq.n	800a942 <uxr_create_session+0x19e>
 800a89e:	2000      	movs	r0, #0
 800a8a0:	b02b      	add	sp, #172	; 0xac
 800a8a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a8a6:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 800a8aa:	9304      	str	r3, [sp, #16]
 800a8ac:	4639      	mov	r1, r7
 800a8ae:	4650      	mov	r0, sl
 800a8b0:	f000 fad4 	bl	800ae5c <uxr_get_input_reliable_stream>
 800a8b4:	4680      	mov	r8, r0
 800a8b6:	b348      	cbz	r0, 800a90c <uxr_create_session+0x168>
 800a8b8:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800a8ba:	9205      	str	r2, [sp, #20]
 800a8bc:	a81a      	add	r0, sp, #104	; 0x68
 800a8be:	f7fe ff93 	bl	80097e8 <ucdr_buffer_remaining>
 800a8c2:	4603      	mov	r3, r0
 800a8c4:	f10d 0019 	add.w	r0, sp, #25
 800a8c8:	9000      	str	r0, [sp, #0]
 800a8ca:	9a05      	ldr	r2, [sp, #20]
 800a8cc:	4649      	mov	r1, r9
 800a8ce:	4640      	mov	r0, r8
 800a8d0:	f003 ffe2 	bl	800e898 <uxr_receive_reliable_message>
 800a8d4:	b1d0      	cbz	r0, 800a90c <uxr_create_session+0x168>
 800a8d6:	f89d 3019 	ldrb.w	r3, [sp, #25]
 800a8da:	2b00      	cmp	r3, #0
 800a8dc:	d038      	beq.n	800a950 <uxr_create_session+0x1ac>
 800a8de:	9e04      	ldr	r6, [sp, #16]
 800a8e0:	e00a      	b.n	800a8f8 <uxr_create_session+0x154>
 800a8e2:	f04f 0302 	mov.w	r3, #2
 800a8e6:	f88d 6028 	strb.w	r6, [sp, #40]	; 0x28
 800a8ea:	f88d 7029 	strb.w	r7, [sp, #41]	; 0x29
 800a8ee:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a8f2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a8f4:	f7ff fb1e 	bl	8009f34 <read_submessage_list>
 800a8f8:	a922      	add	r1, sp, #136	; 0x88
 800a8fa:	2204      	movs	r2, #4
 800a8fc:	4640      	mov	r0, r8
 800a8fe:	f004 f84b 	bl	800e998 <uxr_next_input_reliable_buffer_available>
 800a902:	4603      	mov	r3, r0
 800a904:	a922      	add	r1, sp, #136	; 0x88
 800a906:	4620      	mov	r0, r4
 800a908:	2b00      	cmp	r3, #0
 800a90a:	d1ea      	bne.n	800a8e2 <uxr_create_session+0x13e>
 800a90c:	9904      	ldr	r1, [sp, #16]
 800a90e:	463a      	mov	r2, r7
 800a910:	4620      	mov	r0, r4
 800a912:	f7ff f98b 	bl	8009c2c <write_submessage_acknack.isra.0>
 800a916:	e779      	b.n	800a80c <uxr_create_session+0x68>
 800a918:	4639      	mov	r1, r7
 800a91a:	4650      	mov	r0, sl
 800a91c:	f000 fa94 	bl	800ae48 <uxr_get_input_best_effort_stream>
 800a920:	2800      	cmp	r0, #0
 800a922:	f43f af73 	beq.w	800a80c <uxr_create_session+0x68>
 800a926:	4649      	mov	r1, r9
 800a928:	f003 ff22 	bl	800e770 <uxr_receive_best_effort_message>
 800a92c:	2800      	cmp	r0, #0
 800a92e:	f43f af6d 	beq.w	800a80c <uxr_create_session+0x68>
 800a932:	f88d 602a 	strb.w	r6, [sp, #42]	; 0x2a
 800a936:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a938:	a91a      	add	r1, sp, #104	; 0x68
 800a93a:	4620      	mov	r0, r4
 800a93c:	f7ff fafa 	bl	8009f34 <read_submessage_list>
 800a940:	e764      	b.n	800a80c <uxr_create_session+0x68>
 800a942:	4650      	mov	r0, sl
 800a944:	f000 f9d0 	bl	800ace8 <uxr_reset_stream_storage>
 800a948:	2001      	movs	r0, #1
 800a94a:	b02b      	add	sp, #172	; 0xac
 800a94c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a950:	f88d 602a 	strb.w	r6, [sp, #42]	; 0x2a
 800a954:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a956:	a91a      	add	r1, sp, #104	; 0x68
 800a958:	4620      	mov	r0, r4
 800a95a:	f7ff faeb 	bl	8009f34 <read_submessage_list>
 800a95e:	e7be      	b.n	800a8de <uxr_create_session+0x13a>

0800a960 <uxr_prepare_stream_to_write_submessage>:
 800a960:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a964:	b082      	sub	sp, #8
 800a966:	4682      	mov	sl, r0
 800a968:	4610      	mov	r0, r2
 800a96a:	4615      	mov	r5, r2
 800a96c:	461e      	mov	r6, r3
 800a96e:	f89d 7028 	ldrb.w	r7, [sp, #40]	; 0x28
 800a972:	f89d 802c 	ldrb.w	r8, [sp, #44]	; 0x2c
 800a976:	9101      	str	r1, [sp, #4]
 800a978:	f3c1 2407 	ubfx	r4, r1, #8, #8
 800a97c:	f000 face 	bl	800af1c <uxr_submessage_padding>
 800a980:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800a984:	f105 0904 	add.w	r9, r5, #4
 800a988:	2b01      	cmp	r3, #1
 800a98a:	4481      	add	r9, r0
 800a98c:	d01d      	beq.n	800a9ca <uxr_prepare_stream_to_write_submessage+0x6a>
 800a98e:	2b02      	cmp	r3, #2
 800a990:	d116      	bne.n	800a9c0 <uxr_prepare_stream_to_write_submessage+0x60>
 800a992:	4621      	mov	r1, r4
 800a994:	f10a 0008 	add.w	r0, sl, #8
 800a998:	f000 fa4c 	bl	800ae34 <uxr_get_output_reliable_stream>
 800a99c:	4604      	mov	r4, r0
 800a99e:	b158      	cbz	r0, 800a9b8 <uxr_prepare_stream_to_write_submessage+0x58>
 800a9a0:	4649      	mov	r1, r9
 800a9a2:	4632      	mov	r2, r6
 800a9a4:	f004 f9b4 	bl	800ed10 <uxr_prepare_reliable_buffer_to_write>
 800a9a8:	4604      	mov	r4, r0
 800a9aa:	b12c      	cbz	r4, 800a9b8 <uxr_prepare_stream_to_write_submessage+0x58>
 800a9ac:	4643      	mov	r3, r8
 800a9ae:	b2aa      	uxth	r2, r5
 800a9b0:	4639      	mov	r1, r7
 800a9b2:	4630      	mov	r0, r6
 800a9b4:	f000 fa72 	bl	800ae9c <uxr_buffer_submessage_header>
 800a9b8:	4620      	mov	r0, r4
 800a9ba:	b002      	add	sp, #8
 800a9bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a9c0:	2400      	movs	r4, #0
 800a9c2:	4620      	mov	r0, r4
 800a9c4:	b002      	add	sp, #8
 800a9c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a9ca:	4621      	mov	r1, r4
 800a9cc:	f10a 0008 	add.w	r0, sl, #8
 800a9d0:	f000 fa28 	bl	800ae24 <uxr_get_output_best_effort_stream>
 800a9d4:	4604      	mov	r4, r0
 800a9d6:	2800      	cmp	r0, #0
 800a9d8:	d0ee      	beq.n	800a9b8 <uxr_prepare_stream_to_write_submessage+0x58>
 800a9da:	4649      	mov	r1, r9
 800a9dc:	4632      	mov	r2, r6
 800a9de:	f004 f8c7 	bl	800eb70 <uxr_prepare_best_effort_buffer_to_write>
 800a9e2:	4604      	mov	r4, r0
 800a9e4:	e7e1      	b.n	800a9aa <uxr_prepare_stream_to_write_submessage+0x4a>
 800a9e6:	bf00      	nop

0800a9e8 <uxr_init_session_info>:
 800a9e8:	0e13      	lsrs	r3, r2, #24
 800a9ea:	7043      	strb	r3, [r0, #1]
 800a9ec:	f3c2 2307 	ubfx	r3, r2, #8, #8
 800a9f0:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 800a9f4:	7001      	strb	r1, [r0, #0]
 800a9f6:	70c3      	strb	r3, [r0, #3]
 800a9f8:	2109      	movs	r1, #9
 800a9fa:	23ff      	movs	r3, #255	; 0xff
 800a9fc:	f880 c002 	strb.w	ip, [r0, #2]
 800aa00:	7102      	strb	r2, [r0, #4]
 800aa02:	80c1      	strh	r1, [r0, #6]
 800aa04:	7143      	strb	r3, [r0, #5]
 800aa06:	4770      	bx	lr

0800aa08 <uxr_buffer_create_session>:
 800aa08:	b530      	push	{r4, r5, lr}
 800aa0a:	b089      	sub	sp, #36	; 0x24
 800aa0c:	2300      	movs	r3, #0
 800aa0e:	4d12      	ldr	r5, [pc, #72]	; (800aa58 <uxr_buffer_create_session+0x50>)
 800aa10:	9307      	str	r3, [sp, #28]
 800aa12:	f8ad 201c 	strh.w	r2, [sp, #28]
 800aa16:	2201      	movs	r2, #1
 800aa18:	9301      	str	r3, [sp, #4]
 800aa1a:	80c2      	strh	r2, [r0, #6]
 800aa1c:	f88d 2004 	strb.w	r2, [sp, #4]
 800aa20:	682a      	ldr	r2, [r5, #0]
 800aa22:	9200      	str	r2, [sp, #0]
 800aa24:	88aa      	ldrh	r2, [r5, #4]
 800aa26:	f8ad 2006 	strh.w	r2, [sp, #6]
 800aa2a:	f8d0 2001 	ldr.w	r2, [r0, #1]
 800aa2e:	9202      	str	r2, [sp, #8]
 800aa30:	460c      	mov	r4, r1
 800aa32:	7802      	ldrb	r2, [r0, #0]
 800aa34:	9303      	str	r3, [sp, #12]
 800aa36:	4619      	mov	r1, r3
 800aa38:	f88d 200c 	strb.w	r2, [sp, #12]
 800aa3c:	4620      	mov	r0, r4
 800aa3e:	2210      	movs	r2, #16
 800aa40:	e9cd 3304 	strd	r3, r3, [sp, #16]
 800aa44:	9306      	str	r3, [sp, #24]
 800aa46:	f000 fa29 	bl	800ae9c <uxr_buffer_submessage_header>
 800aa4a:	4669      	mov	r1, sp
 800aa4c:	4620      	mov	r0, r4
 800aa4e:	f001 f981 	bl	800bd54 <uxr_serialize_CREATE_CLIENT_Payload>
 800aa52:	b009      	add	sp, #36	; 0x24
 800aa54:	bd30      	pop	{r4, r5, pc}
 800aa56:	bf00      	nop
 800aa58:	08011fa0 	.word	0x08011fa0

0800aa5c <uxr_buffer_delete_session>:
 800aa5c:	b510      	push	{r4, lr}
 800aa5e:	4b0c      	ldr	r3, [pc, #48]	; (800aa90 <uxr_buffer_delete_session+0x34>)
 800aa60:	b082      	sub	sp, #8
 800aa62:	f8b3 c008 	ldrh.w	ip, [r3, #8]
 800aa66:	f8ad c006 	strh.w	ip, [sp, #6]
 800aa6a:	460c      	mov	r4, r1
 800aa6c:	2202      	movs	r2, #2
 800aa6e:	f44f 7300 	mov.w	r3, #512	; 0x200
 800aa72:	80c2      	strh	r2, [r0, #6]
 800aa74:	f8ad 3004 	strh.w	r3, [sp, #4]
 800aa78:	2204      	movs	r2, #4
 800aa7a:	2300      	movs	r3, #0
 800aa7c:	2103      	movs	r1, #3
 800aa7e:	4620      	mov	r0, r4
 800aa80:	f000 fa0c 	bl	800ae9c <uxr_buffer_submessage_header>
 800aa84:	a901      	add	r1, sp, #4
 800aa86:	4620      	mov	r0, r4
 800aa88:	f001 fa0a 	bl	800bea0 <uxr_serialize_DELETE_Payload>
 800aa8c:	b002      	add	sp, #8
 800aa8e:	bd10      	pop	{r4, pc}
 800aa90:	08011fa0 	.word	0x08011fa0

0800aa94 <uxr_read_create_session_status>:
 800aa94:	b510      	push	{r4, lr}
 800aa96:	b088      	sub	sp, #32
 800aa98:	4604      	mov	r4, r0
 800aa9a:	4608      	mov	r0, r1
 800aa9c:	a901      	add	r1, sp, #4
 800aa9e:	f001 fa0f 	bl	800bec0 <uxr_deserialize_STATUS_AGENT_Payload>
 800aaa2:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800aaa6:	7163      	strb	r3, [r4, #5]
 800aaa8:	b008      	add	sp, #32
 800aaaa:	bd10      	pop	{r4, pc}

0800aaac <uxr_read_delete_session_status>:
 800aaac:	b510      	push	{r4, lr}
 800aaae:	4604      	mov	r4, r0
 800aab0:	b084      	sub	sp, #16
 800aab2:	4608      	mov	r0, r1
 800aab4:	a902      	add	r1, sp, #8
 800aab6:	f001 fa33 	bl	800bf20 <uxr_deserialize_STATUS_Payload>
 800aaba:	88e3      	ldrh	r3, [r4, #6]
 800aabc:	2b02      	cmp	r3, #2
 800aabe:	d001      	beq.n	800aac4 <uxr_read_delete_session_status+0x18>
 800aac0:	b004      	add	sp, #16
 800aac2:	bd10      	pop	{r4, pc}
 800aac4:	f10d 000a 	add.w	r0, sp, #10
 800aac8:	f7ff f836 	bl	8009b38 <uxr_object_id_from_raw>
 800aacc:	f89d 2008 	ldrb.w	r2, [sp, #8]
 800aad0:	f89d 3009 	ldrb.w	r3, [sp, #9]
 800aad4:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800aad8:	b29b      	uxth	r3, r3
 800aada:	2b02      	cmp	r3, #2
 800aadc:	bf04      	itt	eq
 800aade:	f89d 300c 	ldrbeq.w	r3, [sp, #12]
 800aae2:	7163      	strbeq	r3, [r4, #5]
 800aae4:	b004      	add	sp, #16
 800aae6:	bd10      	pop	{r4, pc}

0800aae8 <uxr_stamp_create_session_header>:
 800aae8:	b510      	push	{r4, lr}
 800aaea:	2208      	movs	r2, #8
 800aaec:	b08a      	sub	sp, #40	; 0x28
 800aaee:	4604      	mov	r4, r0
 800aaf0:	eb0d 0002 	add.w	r0, sp, r2
 800aaf4:	f7fe fe48 	bl	8009788 <ucdr_init_buffer>
 800aaf8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aafc:	9400      	str	r4, [sp, #0]
 800aafe:	2300      	movs	r3, #0
 800ab00:	461a      	mov	r2, r3
 800ab02:	f001 0180 	and.w	r1, r1, #128	; 0x80
 800ab06:	a802      	add	r0, sp, #8
 800ab08:	f000 fbc2 	bl	800b290 <uxr_serialize_message_header>
 800ab0c:	b00a      	add	sp, #40	; 0x28
 800ab0e:	bd10      	pop	{r4, pc}

0800ab10 <uxr_stamp_session_header>:
 800ab10:	b530      	push	{r4, r5, lr}
 800ab12:	b08d      	sub	sp, #52	; 0x34
 800ab14:	4604      	mov	r4, r0
 800ab16:	460d      	mov	r5, r1
 800ab18:	9203      	str	r2, [sp, #12]
 800ab1a:	4619      	mov	r1, r3
 800ab1c:	a804      	add	r0, sp, #16
 800ab1e:	2208      	movs	r2, #8
 800ab20:	f7fe fe32 	bl	8009788 <ucdr_init_buffer>
 800ab24:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ab28:	9b03      	ldr	r3, [sp, #12]
 800ab2a:	9400      	str	r4, [sp, #0]
 800ab2c:	462a      	mov	r2, r5
 800ab2e:	a804      	add	r0, sp, #16
 800ab30:	f000 fbae 	bl	800b290 <uxr_serialize_message_header>
 800ab34:	b00d      	add	sp, #52	; 0x34
 800ab36:	bd30      	pop	{r4, r5, pc}

0800ab38 <uxr_read_session_header>:
 800ab38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ab3c:	4607      	mov	r7, r0
 800ab3e:	b084      	sub	sp, #16
 800ab40:	4608      	mov	r0, r1
 800ab42:	460c      	mov	r4, r1
 800ab44:	4615      	mov	r5, r2
 800ab46:	461e      	mov	r6, r3
 800ab48:	f7fe fe4e 	bl	80097e8 <ucdr_buffer_remaining>
 800ab4c:	2808      	cmp	r0, #8
 800ab4e:	d803      	bhi.n	800ab58 <uxr_read_session_header+0x20>
 800ab50:	2000      	movs	r0, #0
 800ab52:	b004      	add	sp, #16
 800ab54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ab58:	f10d 080c 	add.w	r8, sp, #12
 800ab5c:	4633      	mov	r3, r6
 800ab5e:	462a      	mov	r2, r5
 800ab60:	f8cd 8000 	str.w	r8, [sp]
 800ab64:	4620      	mov	r0, r4
 800ab66:	f10d 010b 	add.w	r1, sp, #11
 800ab6a:	f000 fbaf 	bl	800b2cc <uxr_deserialize_message_header>
 800ab6e:	783a      	ldrb	r2, [r7, #0]
 800ab70:	f89d 300b 	ldrb.w	r3, [sp, #11]
 800ab74:	4293      	cmp	r3, r2
 800ab76:	d1eb      	bne.n	800ab50 <uxr_read_session_header+0x18>
 800ab78:	061b      	lsls	r3, r3, #24
 800ab7a:	d41c      	bmi.n	800abb6 <uxr_read_session_header+0x7e>
 800ab7c:	f89d 200c 	ldrb.w	r2, [sp, #12]
 800ab80:	787b      	ldrb	r3, [r7, #1]
 800ab82:	429a      	cmp	r2, r3
 800ab84:	d003      	beq.n	800ab8e <uxr_read_session_header+0x56>
 800ab86:	2001      	movs	r0, #1
 800ab88:	f080 0001 	eor.w	r0, r0, #1
 800ab8c:	e7e1      	b.n	800ab52 <uxr_read_session_header+0x1a>
 800ab8e:	f89d 200d 	ldrb.w	r2, [sp, #13]
 800ab92:	78bb      	ldrb	r3, [r7, #2]
 800ab94:	429a      	cmp	r2, r3
 800ab96:	f107 0102 	add.w	r1, r7, #2
 800ab9a:	d1f4      	bne.n	800ab86 <uxr_read_session_header+0x4e>
 800ab9c:	f89d 200e 	ldrb.w	r2, [sp, #14]
 800aba0:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800aba4:	429a      	cmp	r2, r3
 800aba6:	d1ee      	bne.n	800ab86 <uxr_read_session_header+0x4e>
 800aba8:	f89d 200f 	ldrb.w	r2, [sp, #15]
 800abac:	784b      	ldrb	r3, [r1, #1]
 800abae:	429a      	cmp	r2, r3
 800abb0:	d1e9      	bne.n	800ab86 <uxr_read_session_header+0x4e>
 800abb2:	2000      	movs	r0, #0
 800abb4:	e7e8      	b.n	800ab88 <uxr_read_session_header+0x50>
 800abb6:	2001      	movs	r0, #1
 800abb8:	e7cb      	b.n	800ab52 <uxr_read_session_header+0x1a>
 800abba:	bf00      	nop

0800abbc <uxr_session_header_offset>:
 800abbc:	f990 3000 	ldrsb.w	r3, [r0]
 800abc0:	2b00      	cmp	r3, #0
 800abc2:	bfac      	ite	ge
 800abc4:	2008      	movge	r0, #8
 800abc6:	2004      	movlt	r0, #4
 800abc8:	4770      	bx	lr
 800abca:	bf00      	nop

0800abcc <uxr_init_base_object_request>:
 800abcc:	b510      	push	{r4, lr}
 800abce:	88c3      	ldrh	r3, [r0, #6]
 800abd0:	b082      	sub	sp, #8
 800abd2:	f64f 74f4 	movw	r4, #65524	; 0xfff4
 800abd6:	9101      	str	r1, [sp, #4]
 800abd8:	f1a3 010a 	sub.w	r1, r3, #10
 800abdc:	b289      	uxth	r1, r1
 800abde:	42a1      	cmp	r1, r4
 800abe0:	d80e      	bhi.n	800ac00 <uxr_init_base_object_request+0x34>
 800abe2:	3301      	adds	r3, #1
 800abe4:	b29c      	uxth	r4, r3
 800abe6:	f3c3 2107 	ubfx	r1, r3, #8, #8
 800abea:	b2db      	uxtb	r3, r3
 800abec:	80c4      	strh	r4, [r0, #6]
 800abee:	9801      	ldr	r0, [sp, #4]
 800abf0:	7011      	strb	r1, [r2, #0]
 800abf2:	7053      	strb	r3, [r2, #1]
 800abf4:	1c91      	adds	r1, r2, #2
 800abf6:	f7fe ffb3 	bl	8009b60 <uxr_object_id_to_raw>
 800abfa:	4620      	mov	r0, r4
 800abfc:	b002      	add	sp, #8
 800abfe:	bd10      	pop	{r4, pc}
 800ac00:	230a      	movs	r3, #10
 800ac02:	2100      	movs	r1, #0
 800ac04:	461c      	mov	r4, r3
 800ac06:	e7f1      	b.n	800abec <uxr_init_base_object_request+0x20>

0800ac08 <uxr_parse_base_object_request>:
 800ac08:	b570      	push	{r4, r5, r6, lr}
 800ac0a:	4604      	mov	r4, r0
 800ac0c:	3002      	adds	r0, #2
 800ac0e:	460d      	mov	r5, r1
 800ac10:	4616      	mov	r6, r2
 800ac12:	f7fe ff91 	bl	8009b38 <uxr_object_id_from_raw>
 800ac16:	f3c0 430f 	ubfx	r3, r0, #16, #16
 800ac1a:	8028      	strh	r0, [r5, #0]
 800ac1c:	806b      	strh	r3, [r5, #2]
 800ac1e:	7822      	ldrb	r2, [r4, #0]
 800ac20:	7863      	ldrb	r3, [r4, #1]
 800ac22:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800ac26:	8033      	strh	r3, [r6, #0]
 800ac28:	bd70      	pop	{r4, r5, r6, pc}
 800ac2a:	bf00      	nop

0800ac2c <uxr_stream_id>:
 800ac2c:	2901      	cmp	r1, #1
 800ac2e:	b082      	sub	sp, #8
 800ac30:	d01d      	beq.n	800ac6e <uxr_stream_id+0x42>
 800ac32:	2902      	cmp	r1, #2
 800ac34:	f04f 0c00 	mov.w	ip, #0
 800ac38:	d01e      	beq.n	800ac78 <uxr_stream_id+0x4c>
 800ac3a:	2300      	movs	r3, #0
 800ac3c:	f36c 0307 	bfi	r3, ip, #0, #8
 800ac40:	f360 230f 	bfi	r3, r0, #8, #8
 800ac44:	f361 4317 	bfi	r3, r1, #16, #8
 800ac48:	f362 631f 	bfi	r3, r2, #24, #8
 800ac4c:	b2da      	uxtb	r2, r3
 800ac4e:	2000      	movs	r0, #0
 800ac50:	f362 0007 	bfi	r0, r2, #0, #8
 800ac54:	f3c3 2207 	ubfx	r2, r3, #8, #8
 800ac58:	f362 200f 	bfi	r0, r2, #8, #8
 800ac5c:	f3c3 4207 	ubfx	r2, r3, #16, #8
 800ac60:	f362 4017 	bfi	r0, r2, #16, #8
 800ac64:	0e1b      	lsrs	r3, r3, #24
 800ac66:	f363 601f 	bfi	r0, r3, #24, #8
 800ac6a:	b002      	add	sp, #8
 800ac6c:	4770      	bx	lr
 800ac6e:	f100 0c01 	add.w	ip, r0, #1
 800ac72:	fa5f fc8c 	uxtb.w	ip, ip
 800ac76:	e7e0      	b.n	800ac3a <uxr_stream_id+0xe>
 800ac78:	f080 0c80 	eor.w	ip, r0, #128	; 0x80
 800ac7c:	e7dd      	b.n	800ac3a <uxr_stream_id+0xe>
 800ac7e:	bf00      	nop

0800ac80 <uxr_stream_id_from_raw>:
 800ac80:	b082      	sub	sp, #8
 800ac82:	b130      	cbz	r0, 800ac92 <uxr_stream_id_from_raw+0x12>
 800ac84:	0603      	lsls	r3, r0, #24
 800ac86:	d420      	bmi.n	800acca <uxr_stream_id_from_raw+0x4a>
 800ac88:	1e42      	subs	r2, r0, #1
 800ac8a:	b2d2      	uxtb	r2, r2
 800ac8c:	f04f 0c01 	mov.w	ip, #1
 800ac90:	e001      	b.n	800ac96 <uxr_stream_id_from_raw+0x16>
 800ac92:	4684      	mov	ip, r0
 800ac94:	4602      	mov	r2, r0
 800ac96:	2300      	movs	r3, #0
 800ac98:	f360 0307 	bfi	r3, r0, #0, #8
 800ac9c:	f362 230f 	bfi	r3, r2, #8, #8
 800aca0:	f36c 4317 	bfi	r3, ip, #16, #8
 800aca4:	f361 631f 	bfi	r3, r1, #24, #8
 800aca8:	b2da      	uxtb	r2, r3
 800acaa:	2000      	movs	r0, #0
 800acac:	f362 0007 	bfi	r0, r2, #0, #8
 800acb0:	f3c3 2207 	ubfx	r2, r3, #8, #8
 800acb4:	f362 200f 	bfi	r0, r2, #8, #8
 800acb8:	f3c3 4207 	ubfx	r2, r3, #16, #8
 800acbc:	f362 4017 	bfi	r0, r2, #16, #8
 800acc0:	0e1b      	lsrs	r3, r3, #24
 800acc2:	f363 601f 	bfi	r0, r3, #24, #8
 800acc6:	b002      	add	sp, #8
 800acc8:	4770      	bx	lr
 800acca:	f080 0280 	eor.w	r2, r0, #128	; 0x80
 800acce:	f04f 0c02 	mov.w	ip, #2
 800acd2:	e7e0      	b.n	800ac96 <uxr_stream_id_from_raw+0x16>

0800acd4 <uxr_init_stream_storage>:
 800acd4:	2300      	movs	r3, #0
 800acd6:	7403      	strb	r3, [r0, #16]
 800acd8:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
 800acdc:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
 800ace0:	f880 3060 	strb.w	r3, [r0, #96]	; 0x60
 800ace4:	4770      	bx	lr
 800ace6:	bf00      	nop

0800ace8 <uxr_reset_stream_storage>:
 800ace8:	b570      	push	{r4, r5, r6, lr}
 800acea:	7c03      	ldrb	r3, [r0, #16]
 800acec:	4604      	mov	r4, r0
 800acee:	b153      	cbz	r3, 800ad06 <uxr_reset_stream_storage+0x1e>
 800acf0:	4606      	mov	r6, r0
 800acf2:	2500      	movs	r5, #0
 800acf4:	4630      	mov	r0, r6
 800acf6:	f003 ff35 	bl	800eb64 <uxr_reset_output_best_effort_stream>
 800acfa:	7c23      	ldrb	r3, [r4, #16]
 800acfc:	3501      	adds	r5, #1
 800acfe:	42ab      	cmp	r3, r5
 800ad00:	f106 0610 	add.w	r6, r6, #16
 800ad04:	d8f6      	bhi.n	800acf4 <uxr_reset_stream_storage+0xc>
 800ad06:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800ad0a:	b163      	cbz	r3, 800ad26 <uxr_reset_stream_storage+0x3e>
 800ad0c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800ad10:	2500      	movs	r5, #0
 800ad12:	4630      	mov	r0, r6
 800ad14:	f003 fd28 	bl	800e768 <uxr_reset_input_best_effort_stream>
 800ad18:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800ad1c:	3501      	adds	r5, #1
 800ad1e:	42ab      	cmp	r3, r5
 800ad20:	f106 0602 	add.w	r6, r6, #2
 800ad24:	d8f5      	bhi.n	800ad12 <uxr_reset_stream_storage+0x2a>
 800ad26:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 800ad2a:	b163      	cbz	r3, 800ad46 <uxr_reset_stream_storage+0x5e>
 800ad2c:	f104 0618 	add.w	r6, r4, #24
 800ad30:	2500      	movs	r5, #0
 800ad32:	4630      	mov	r0, r6
 800ad34:	f003 ffc2 	bl	800ecbc <uxr_reset_output_reliable_stream>
 800ad38:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 800ad3c:	3501      	adds	r5, #1
 800ad3e:	42ab      	cmp	r3, r5
 800ad40:	f106 0628 	add.w	r6, r6, #40	; 0x28
 800ad44:	d8f5      	bhi.n	800ad32 <uxr_reset_stream_storage+0x4a>
 800ad46:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
 800ad4a:	b163      	cbz	r3, 800ad66 <uxr_reset_stream_storage+0x7e>
 800ad4c:	f104 0648 	add.w	r6, r4, #72	; 0x48
 800ad50:	2500      	movs	r5, #0
 800ad52:	4630      	mov	r0, r6
 800ad54:	f003 fd7c 	bl	800e850 <uxr_reset_input_reliable_stream>
 800ad58:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
 800ad5c:	3501      	adds	r5, #1
 800ad5e:	42ab      	cmp	r3, r5
 800ad60:	f106 0618 	add.w	r6, r6, #24
 800ad64:	d8f5      	bhi.n	800ad52 <uxr_reset_stream_storage+0x6a>
 800ad66:	bd70      	pop	{r4, r5, r6, pc}

0800ad68 <uxr_add_output_best_effort_buffer>:
 800ad68:	b510      	push	{r4, lr}
 800ad6a:	7c04      	ldrb	r4, [r0, #16]
 800ad6c:	f104 0c01 	add.w	ip, r4, #1
 800ad70:	b082      	sub	sp, #8
 800ad72:	f880 c010 	strb.w	ip, [r0, #16]
 800ad76:	eb00 1004 	add.w	r0, r0, r4, lsl #4
 800ad7a:	f003 fee9 	bl	800eb50 <uxr_init_output_best_effort_stream>
 800ad7e:	2201      	movs	r2, #1
 800ad80:	4611      	mov	r1, r2
 800ad82:	4620      	mov	r0, r4
 800ad84:	b002      	add	sp, #8
 800ad86:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ad8a:	f7ff bf4f 	b.w	800ac2c <uxr_stream_id>
 800ad8e:	bf00      	nop

0800ad90 <uxr_add_output_reliable_buffer>:
 800ad90:	b510      	push	{r4, lr}
 800ad92:	b084      	sub	sp, #16
 800ad94:	4684      	mov	ip, r0
 800ad96:	f89d 0018 	ldrb.w	r0, [sp, #24]
 800ad9a:	9000      	str	r0, [sp, #0]
 800ad9c:	f89c 4040 	ldrb.w	r4, [ip, #64]	; 0x40
 800ada0:	2028      	movs	r0, #40	; 0x28
 800ada2:	fb00 c004 	mla	r0, r0, r4, ip
 800ada6:	f104 0e01 	add.w	lr, r4, #1
 800adaa:	3018      	adds	r0, #24
 800adac:	f88c e040 	strb.w	lr, [ip, #64]	; 0x40
 800adb0:	f003 ff4c 	bl	800ec4c <uxr_init_output_reliable_stream>
 800adb4:	2201      	movs	r2, #1
 800adb6:	2102      	movs	r1, #2
 800adb8:	4620      	mov	r0, r4
 800adba:	b004      	add	sp, #16
 800adbc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800adc0:	f7ff bf34 	b.w	800ac2c <uxr_stream_id>

0800adc4 <uxr_add_input_best_effort_buffer>:
 800adc4:	b510      	push	{r4, lr}
 800adc6:	f890 4044 	ldrb.w	r4, [r0, #68]	; 0x44
 800adca:	4603      	mov	r3, r0
 800adcc:	1c62      	adds	r2, r4, #1
 800adce:	f104 0021 	add.w	r0, r4, #33	; 0x21
 800add2:	b082      	sub	sp, #8
 800add4:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 800add8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800addc:	f003 fcc0 	bl	800e760 <uxr_init_input_best_effort_stream>
 800ade0:	2200      	movs	r2, #0
 800ade2:	2101      	movs	r1, #1
 800ade4:	4620      	mov	r0, r4
 800ade6:	b002      	add	sp, #8
 800ade8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800adec:	f7ff bf1e 	b.w	800ac2c <uxr_stream_id>

0800adf0 <uxr_add_input_reliable_buffer>:
 800adf0:	b510      	push	{r4, lr}
 800adf2:	b084      	sub	sp, #16
 800adf4:	4684      	mov	ip, r0
 800adf6:	9806      	ldr	r0, [sp, #24]
 800adf8:	9000      	str	r0, [sp, #0]
 800adfa:	f89c 4060 	ldrb.w	r4, [ip, #96]	; 0x60
 800adfe:	2018      	movs	r0, #24
 800ae00:	fb00 c004 	mla	r0, r0, r4, ip
 800ae04:	f104 0e01 	add.w	lr, r4, #1
 800ae08:	3048      	adds	r0, #72	; 0x48
 800ae0a:	f88c e060 	strb.w	lr, [ip, #96]	; 0x60
 800ae0e:	f003 fcf3 	bl	800e7f8 <uxr_init_input_reliable_stream>
 800ae12:	2200      	movs	r2, #0
 800ae14:	2102      	movs	r1, #2
 800ae16:	4620      	mov	r0, r4
 800ae18:	b004      	add	sp, #16
 800ae1a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ae1e:	f7ff bf05 	b.w	800ac2c <uxr_stream_id>
 800ae22:	bf00      	nop

0800ae24 <uxr_get_output_best_effort_stream>:
 800ae24:	7c03      	ldrb	r3, [r0, #16]
 800ae26:	428b      	cmp	r3, r1
 800ae28:	bf8c      	ite	hi
 800ae2a:	eb00 1001 	addhi.w	r0, r0, r1, lsl #4
 800ae2e:	2000      	movls	r0, #0
 800ae30:	4770      	bx	lr
 800ae32:	bf00      	nop

0800ae34 <uxr_get_output_reliable_stream>:
 800ae34:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 800ae38:	428b      	cmp	r3, r1
 800ae3a:	bf83      	ittte	hi
 800ae3c:	2328      	movhi	r3, #40	; 0x28
 800ae3e:	fb03 0001 	mlahi	r0, r3, r1, r0
 800ae42:	3018      	addhi	r0, #24
 800ae44:	2000      	movls	r0, #0
 800ae46:	4770      	bx	lr

0800ae48 <uxr_get_input_best_effort_stream>:
 800ae48:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 800ae4c:	428b      	cmp	r3, r1
 800ae4e:	bf86      	itte	hi
 800ae50:	3121      	addhi	r1, #33	; 0x21
 800ae52:	eb00 0041 	addhi.w	r0, r0, r1, lsl #1
 800ae56:	2000      	movls	r0, #0
 800ae58:	4770      	bx	lr
 800ae5a:	bf00      	nop

0800ae5c <uxr_get_input_reliable_stream>:
 800ae5c:	f890 3060 	ldrb.w	r3, [r0, #96]	; 0x60
 800ae60:	428b      	cmp	r3, r1
 800ae62:	bf83      	ittte	hi
 800ae64:	2318      	movhi	r3, #24
 800ae66:	fb03 0001 	mlahi	r0, r3, r1, r0
 800ae6a:	3048      	addhi	r0, #72	; 0x48
 800ae6c:	2000      	movls	r0, #0
 800ae6e:	4770      	bx	lr

0800ae70 <uxr_output_streams_confirmed>:
 800ae70:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 800ae74:	b183      	cbz	r3, 800ae98 <uxr_output_streams_confirmed+0x28>
 800ae76:	b570      	push	{r4, r5, r6, lr}
 800ae78:	4606      	mov	r6, r0
 800ae7a:	f100 0518 	add.w	r5, r0, #24
 800ae7e:	2400      	movs	r4, #0
 800ae80:	e001      	b.n	800ae86 <uxr_output_streams_confirmed+0x16>
 800ae82:	3528      	adds	r5, #40	; 0x28
 800ae84:	b138      	cbz	r0, 800ae96 <uxr_output_streams_confirmed+0x26>
 800ae86:	4628      	mov	r0, r5
 800ae88:	f004 f976 	bl	800f178 <uxr_is_output_up_to_date>
 800ae8c:	f896 3040 	ldrb.w	r3, [r6, #64]	; 0x40
 800ae90:	3401      	adds	r4, #1
 800ae92:	42a3      	cmp	r3, r4
 800ae94:	d8f5      	bhi.n	800ae82 <uxr_output_streams_confirmed+0x12>
 800ae96:	bd70      	pop	{r4, r5, r6, pc}
 800ae98:	2001      	movs	r0, #1
 800ae9a:	4770      	bx	lr

0800ae9c <uxr_buffer_submessage_header>:
 800ae9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ae9e:	4604      	mov	r4, r0
 800aea0:	460e      	mov	r6, r1
 800aea2:	2104      	movs	r1, #4
 800aea4:	4615      	mov	r5, r2
 800aea6:	461f      	mov	r7, r3
 800aea8:	f7fe fc88 	bl	80097bc <ucdr_align_to>
 800aeac:	2301      	movs	r3, #1
 800aeae:	ea47 0203 	orr.w	r2, r7, r3
 800aeb2:	4631      	mov	r1, r6
 800aeb4:	7523      	strb	r3, [r4, #20]
 800aeb6:	4620      	mov	r0, r4
 800aeb8:	462b      	mov	r3, r5
 800aeba:	f000 fa27 	bl	800b30c <uxr_serialize_submessage_header>
 800aebe:	4620      	mov	r0, r4
 800aec0:	f7fe fc92 	bl	80097e8 <ucdr_buffer_remaining>
 800aec4:	42a8      	cmp	r0, r5
 800aec6:	bf34      	ite	cc
 800aec8:	2000      	movcc	r0, #0
 800aeca:	2001      	movcs	r0, #1
 800aecc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800aece:	bf00      	nop

0800aed0 <uxr_read_submessage_header>:
 800aed0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aed4:	4604      	mov	r4, r0
 800aed6:	460d      	mov	r5, r1
 800aed8:	2104      	movs	r1, #4
 800aeda:	4616      	mov	r6, r2
 800aedc:	4698      	mov	r8, r3
 800aede:	f7fe fc6d 	bl	80097bc <ucdr_align_to>
 800aee2:	4620      	mov	r0, r4
 800aee4:	f7fe fc80 	bl	80097e8 <ucdr_buffer_remaining>
 800aee8:	2803      	cmp	r0, #3
 800aeea:	bf8c      	ite	hi
 800aeec:	2701      	movhi	r7, #1
 800aeee:	2700      	movls	r7, #0
 800aef0:	d802      	bhi.n	800aef8 <uxr_read_submessage_header+0x28>
 800aef2:	4638      	mov	r0, r7
 800aef4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aef8:	4633      	mov	r3, r6
 800aefa:	4642      	mov	r2, r8
 800aefc:	4620      	mov	r0, r4
 800aefe:	4629      	mov	r1, r5
 800af00:	f000 fa18 	bl	800b334 <uxr_deserialize_submessage_header>
 800af04:	f898 3000 	ldrb.w	r3, [r8]
 800af08:	f003 0201 	and.w	r2, r3, #1
 800af0c:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 800af10:	f888 3000 	strb.w	r3, [r8]
 800af14:	7522      	strb	r2, [r4, #20]
 800af16:	4638      	mov	r0, r7
 800af18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800af1c <uxr_submessage_padding>:
 800af1c:	f010 0003 	ands.w	r0, r0, #3
 800af20:	bf18      	it	ne
 800af22:	f1c0 0004 	rsbne	r0, r0, #4
 800af26:	4770      	bx	lr

0800af28 <uxr_millis>:
 800af28:	b510      	push	{r4, lr}
 800af2a:	b084      	sub	sp, #16
 800af2c:	4669      	mov	r1, sp
 800af2e:	2001      	movs	r0, #1
 800af30:	f7f6 f9f2 	bl	8001318 <clock_gettime>
 800af34:	e89d 0015 	ldmia.w	sp, {r0, r2, r4}
 800af38:	4906      	ldr	r1, [pc, #24]	; (800af54 <uxr_millis+0x2c>)
 800af3a:	fba0 0301 	umull	r0, r3, r0, r1
 800af3e:	1900      	adds	r0, r0, r4
 800af40:	fb01 3102 	mla	r1, r1, r2, r3
 800af44:	eb41 71e4 	adc.w	r1, r1, r4, asr #31
 800af48:	4a03      	ldr	r2, [pc, #12]	; (800af58 <uxr_millis+0x30>)
 800af4a:	2300      	movs	r3, #0
 800af4c:	f7f5 f9c8 	bl	80002e0 <__aeabi_ldivmod>
 800af50:	b004      	add	sp, #16
 800af52:	bd10      	pop	{r4, pc}
 800af54:	3b9aca00 	.word	0x3b9aca00
 800af58:	000f4240 	.word	0x000f4240

0800af5c <uxr_nanos>:
 800af5c:	b510      	push	{r4, lr}
 800af5e:	b084      	sub	sp, #16
 800af60:	4669      	mov	r1, sp
 800af62:	2001      	movs	r0, #1
 800af64:	f7f6 f9d8 	bl	8001318 <clock_gettime>
 800af68:	4a06      	ldr	r2, [pc, #24]	; (800af84 <uxr_nanos+0x28>)
 800af6a:	9800      	ldr	r0, [sp, #0]
 800af6c:	9902      	ldr	r1, [sp, #8]
 800af6e:	9c01      	ldr	r4, [sp, #4]
 800af70:	fba0 0302 	umull	r0, r3, r0, r2
 800af74:	1840      	adds	r0, r0, r1
 800af76:	fb02 3304 	mla	r3, r2, r4, r3
 800af7a:	eb43 71e1 	adc.w	r1, r3, r1, asr #31
 800af7e:	b004      	add	sp, #16
 800af80:	bd10      	pop	{r4, pc}
 800af82:	bf00      	nop
 800af84:	3b9aca00 	.word	0x3b9aca00

0800af88 <on_full_output_buffer_fragmented>:
 800af88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800af8c:	460c      	mov	r4, r1
 800af8e:	b08a      	sub	sp, #40	; 0x28
 800af90:	f891 10c1 	ldrb.w	r1, [r1, #193]	; 0xc1
 800af94:	4606      	mov	r6, r0
 800af96:	f104 0008 	add.w	r0, r4, #8
 800af9a:	f7ff ff4b 	bl	800ae34 <uxr_get_output_reliable_stream>
 800af9e:	4605      	mov	r5, r0
 800afa0:	f004 f8f4 	bl	800f18c <get_available_free_slots>
 800afa4:	b968      	cbnz	r0, 800afc2 <on_full_output_buffer_fragmented+0x3a>
 800afa6:	e9d4 312e 	ldrd	r3, r1, [r4, #184]	; 0xb8
 800afaa:	4620      	mov	r0, r4
 800afac:	4798      	blx	r3
 800afae:	b918      	cbnz	r0, 800afb8 <on_full_output_buffer_fragmented+0x30>
 800afb0:	2001      	movs	r0, #1
 800afb2:	b00a      	add	sp, #40	; 0x28
 800afb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800afb8:	4628      	mov	r0, r5
 800afba:	f004 f8e7 	bl	800f18c <get_available_free_slots>
 800afbe:	2800      	cmp	r0, #0
 800afc0:	d0f6      	beq.n	800afb0 <on_full_output_buffer_fragmented+0x28>
 800afc2:	8929      	ldrh	r1, [r5, #8]
 800afc4:	89eb      	ldrh	r3, [r5, #14]
 800afc6:	7b28      	ldrb	r0, [r5, #12]
 800afc8:	686a      	ldr	r2, [r5, #4]
 800afca:	fbb2 f8f1 	udiv	r8, r2, r1
 800afce:	fbb3 f2f1 	udiv	r2, r3, r1
 800afd2:	fb01 3112 	mls	r1, r1, r2, r3
 800afd6:	f5c0 407f 	rsb	r0, r0, #65280	; 0xff00
 800afda:	b289      	uxth	r1, r1
 800afdc:	fb08 f101 	mul.w	r1, r8, r1
 800afe0:	30fc      	adds	r0, #252	; 0xfc
 800afe2:	f1a8 0804 	sub.w	r8, r8, #4
 800afe6:	f8d4 30c4 	ldr.w	r3, [r4, #196]	; 0xc4
 800afea:	4440      	add	r0, r8
 800afec:	b287      	uxth	r7, r0
 800afee:	1bdb      	subs	r3, r3, r7
 800aff0:	f8c4 30c4 	str.w	r3, [r4, #196]	; 0xc4
 800aff4:	682b      	ldr	r3, [r5, #0]
 800aff6:	3104      	adds	r1, #4
 800aff8:	4419      	add	r1, r3
 800affa:	4642      	mov	r2, r8
 800affc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b000:	9300      	str	r3, [sp, #0]
 800b002:	a802      	add	r0, sp, #8
 800b004:	2300      	movs	r3, #0
 800b006:	f7fe fbad 	bl	8009764 <ucdr_init_buffer_origin_offset>
 800b00a:	f8d4 20c4 	ldr.w	r2, [r4, #196]	; 0xc4
 800b00e:	f102 0308 	add.w	r3, r2, #8
 800b012:	4543      	cmp	r3, r8
 800b014:	d928      	bls.n	800b068 <on_full_output_buffer_fragmented+0xe0>
 800b016:	463a      	mov	r2, r7
 800b018:	2300      	movs	r3, #0
 800b01a:	210d      	movs	r1, #13
 800b01c:	a802      	add	r0, sp, #8
 800b01e:	f7ff ff3d 	bl	800ae9c <uxr_buffer_submessage_header>
 800b022:	8929      	ldrh	r1, [r5, #8]
 800b024:	89eb      	ldrh	r3, [r5, #14]
 800b026:	fbb3 f2f1 	udiv	r2, r3, r1
 800b02a:	fb01 3312 	mls	r3, r1, r2, r3
 800b02e:	b29b      	uxth	r3, r3
 800b030:	686a      	ldr	r2, [r5, #4]
 800b032:	fbb2 f2f1 	udiv	r2, r2, r1
 800b036:	fb02 f303 	mul.w	r3, r2, r3
 800b03a:	682a      	ldr	r2, [r5, #0]
 800b03c:	f842 8003 	str.w	r8, [r2, r3]
 800b040:	89e8      	ldrh	r0, [r5, #14]
 800b042:	2101      	movs	r1, #1
 800b044:	f004 f9b8 	bl	800f3b8 <uxr_seq_num_add>
 800b048:	9904      	ldr	r1, [sp, #16]
 800b04a:	9a03      	ldr	r2, [sp, #12]
 800b04c:	81e8      	strh	r0, [r5, #14]
 800b04e:	1a52      	subs	r2, r2, r1
 800b050:	4630      	mov	r0, r6
 800b052:	f7fe fb99 	bl	8009788 <ucdr_init_buffer>
 800b056:	4630      	mov	r0, r6
 800b058:	490f      	ldr	r1, [pc, #60]	; (800b098 <on_full_output_buffer_fragmented+0x110>)
 800b05a:	4622      	mov	r2, r4
 800b05c:	f7fe fb68 	bl	8009730 <ucdr_set_on_full_buffer_callback>
 800b060:	2000      	movs	r0, #0
 800b062:	b00a      	add	sp, #40	; 0x28
 800b064:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b068:	b292      	uxth	r2, r2
 800b06a:	2302      	movs	r3, #2
 800b06c:	210d      	movs	r1, #13
 800b06e:	a802      	add	r0, sp, #8
 800b070:	f7ff ff14 	bl	800ae9c <uxr_buffer_submessage_header>
 800b074:	8928      	ldrh	r0, [r5, #8]
 800b076:	89eb      	ldrh	r3, [r5, #14]
 800b078:	fbb3 f1f0 	udiv	r1, r3, r0
 800b07c:	fb00 3311 	mls	r3, r0, r1, r3
 800b080:	f8d4 20c4 	ldr.w	r2, [r4, #196]	; 0xc4
 800b084:	6869      	ldr	r1, [r5, #4]
 800b086:	fbb1 f1f0 	udiv	r1, r1, r0
 800b08a:	b29b      	uxth	r3, r3
 800b08c:	fb01 f303 	mul.w	r3, r1, r3
 800b090:	6829      	ldr	r1, [r5, #0]
 800b092:	3208      	adds	r2, #8
 800b094:	50ca      	str	r2, [r1, r3]
 800b096:	e7d3      	b.n	800b040 <on_full_output_buffer_fragmented+0xb8>
 800b098:	0800af89 	.word	0x0800af89

0800b09c <uxr_prepare_output_stream>:
 800b09c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b09e:	b087      	sub	sp, #28
 800b0a0:	2707      	movs	r7, #7
 800b0a2:	9202      	str	r2, [sp, #8]
 800b0a4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b0a6:	9103      	str	r1, [sp, #12]
 800b0a8:	2500      	movs	r5, #0
 800b0aa:	3204      	adds	r2, #4
 800b0ac:	e9cd 7500 	strd	r7, r5, [sp]
 800b0b0:	461c      	mov	r4, r3
 800b0b2:	4606      	mov	r6, r0
 800b0b4:	f7ff fc54 	bl	800a960 <uxr_prepare_stream_to_write_submessage>
 800b0b8:	f080 0201 	eor.w	r2, r0, #1
 800b0bc:	b2d2      	uxtb	r2, r2
 800b0be:	75a2      	strb	r2, [r4, #22]
 800b0c0:	b112      	cbz	r2, 800b0c8 <uxr_prepare_output_stream+0x2c>
 800b0c2:	4628      	mov	r0, r5
 800b0c4:	b007      	add	sp, #28
 800b0c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b0c8:	aa05      	add	r2, sp, #20
 800b0ca:	9902      	ldr	r1, [sp, #8]
 800b0cc:	4630      	mov	r0, r6
 800b0ce:	f7ff fd7d 	bl	800abcc <uxr_init_base_object_request>
 800b0d2:	a905      	add	r1, sp, #20
 800b0d4:	4605      	mov	r5, r0
 800b0d6:	4620      	mov	r0, r4
 800b0d8:	f000 ffa0 	bl	800c01c <uxr_serialize_WRITE_DATA_Payload_Data>
 800b0dc:	e9d4 2101 	ldrd	r2, r1, [r4, #4]
 800b0e0:	69a6      	ldr	r6, [r4, #24]
 800b0e2:	69e7      	ldr	r7, [r4, #28]
 800b0e4:	1a52      	subs	r2, r2, r1
 800b0e6:	4620      	mov	r0, r4
 800b0e8:	f7fe fb4e 	bl	8009788 <ucdr_init_buffer>
 800b0ec:	4620      	mov	r0, r4
 800b0ee:	463a      	mov	r2, r7
 800b0f0:	4631      	mov	r1, r6
 800b0f2:	f7fe fb1d 	bl	8009730 <ucdr_set_on_full_buffer_callback>
 800b0f6:	4628      	mov	r0, r5
 800b0f8:	b007      	add	sp, #28
 800b0fa:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800b0fc <uxr_prepare_output_stream_fragmented>:
 800b0fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b100:	b091      	sub	sp, #68	; 0x44
 800b102:	4605      	mov	r5, r0
 800b104:	9105      	str	r1, [sp, #20]
 800b106:	3008      	adds	r0, #8
 800b108:	f3c1 2107 	ubfx	r1, r1, #8, #8
 800b10c:	461e      	mov	r6, r3
 800b10e:	9204      	str	r2, [sp, #16]
 800b110:	f7ff fe90 	bl	800ae34 <uxr_get_output_reliable_stream>
 800b114:	f89d 3016 	ldrb.w	r3, [sp, #22]
 800b118:	2b01      	cmp	r3, #1
 800b11a:	f000 8091 	beq.w	800b240 <uxr_prepare_output_stream_fragmented+0x144>
 800b11e:	4604      	mov	r4, r0
 800b120:	2800      	cmp	r0, #0
 800b122:	f000 808d 	beq.w	800b240 <uxr_prepare_output_stream_fragmented+0x144>
 800b126:	f004 f831 	bl	800f18c <get_available_free_slots>
 800b12a:	2800      	cmp	r0, #0
 800b12c:	f000 8083 	beq.w	800b236 <uxr_prepare_output_stream_fragmented+0x13a>
 800b130:	8922      	ldrh	r2, [r4, #8]
 800b132:	89e7      	ldrh	r7, [r4, #14]
 800b134:	fbb7 f9f2 	udiv	r9, r7, r2
 800b138:	fb02 7919 	mls	r9, r2, r9, r7
 800b13c:	fa1f f989 	uxth.w	r9, r9
 800b140:	6863      	ldr	r3, [r4, #4]
 800b142:	fbb3 f2f2 	udiv	r2, r3, r2
 800b146:	6823      	ldr	r3, [r4, #0]
 800b148:	9203      	str	r2, [sp, #12]
 800b14a:	fb02 f909 	mul.w	r9, r2, r9
 800b14e:	f109 0904 	add.w	r9, r9, #4
 800b152:	4499      	add	r9, r3
 800b154:	7b23      	ldrb	r3, [r4, #12]
 800b156:	f859 8c04 	ldr.w	r8, [r9, #-4]
 800b15a:	4543      	cmp	r3, r8
 800b15c:	f1a2 0b04 	sub.w	fp, r2, #4
 800b160:	d37a      	bcc.n	800b258 <uxr_prepare_output_stream_fragmented+0x15c>
 800b162:	f1ab 0a04 	sub.w	sl, fp, #4
 800b166:	ebaa 0a03 	sub.w	sl, sl, r3
 800b16a:	465a      	mov	r2, fp
 800b16c:	2300      	movs	r3, #0
 800b16e:	4649      	mov	r1, r9
 800b170:	a808      	add	r0, sp, #32
 800b172:	f8cd 8000 	str.w	r8, [sp]
 800b176:	f7fe faf5 	bl	8009764 <ucdr_init_buffer_origin_offset>
 800b17a:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800b17c:	fa1f fa8a 	uxth.w	sl, sl
 800b180:	4652      	mov	r2, sl
 800b182:	f103 0a08 	add.w	sl, r3, #8
 800b186:	45da      	cmp	sl, fp
 800b188:	bf34      	ite	cc
 800b18a:	2302      	movcc	r3, #2
 800b18c:	2300      	movcs	r3, #0
 800b18e:	210d      	movs	r1, #13
 800b190:	a808      	add	r0, sp, #32
 800b192:	f7ff fe83 	bl	800ae9c <uxr_buffer_submessage_header>
 800b196:	8921      	ldrh	r1, [r4, #8]
 800b198:	fbb7 f2f1 	udiv	r2, r7, r1
 800b19c:	fb01 7212 	mls	r2, r1, r2, r7
 800b1a0:	b292      	uxth	r2, r2
 800b1a2:	6863      	ldr	r3, [r4, #4]
 800b1a4:	fbb3 f3f1 	udiv	r3, r3, r1
 800b1a8:	fb02 f303 	mul.w	r3, r2, r3
 800b1ac:	6822      	ldr	r2, [r4, #0]
 800b1ae:	4638      	mov	r0, r7
 800b1b0:	f842 b003 	str.w	fp, [r2, r3]
 800b1b4:	2101      	movs	r1, #1
 800b1b6:	f004 f8ff 	bl	800f3b8 <uxr_seq_num_add>
 800b1ba:	9b03      	ldr	r3, [sp, #12]
 800b1bc:	f108 0104 	add.w	r1, r8, #4
 800b1c0:	f1a3 0208 	sub.w	r2, r3, #8
 800b1c4:	eba2 0208 	sub.w	r2, r2, r8
 800b1c8:	4449      	add	r1, r9
 800b1ca:	4607      	mov	r7, r0
 800b1cc:	4630      	mov	r0, r6
 800b1ce:	f7fe fadb 	bl	8009788 <ucdr_init_buffer>
 800b1d2:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800b1d4:	81e7      	strh	r7, [r4, #14]
 800b1d6:	1d1a      	adds	r2, r3, #4
 800b1d8:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 800b1dc:	bf28      	it	cs
 800b1de:	2200      	movcs	r2, #0
 800b1e0:	2300      	movs	r3, #0
 800b1e2:	b292      	uxth	r2, r2
 800b1e4:	2107      	movs	r1, #7
 800b1e6:	4630      	mov	r0, r6
 800b1e8:	f7ff fe58 	bl	800ae9c <uxr_buffer_submessage_header>
 800b1ec:	9904      	ldr	r1, [sp, #16]
 800b1ee:	aa07      	add	r2, sp, #28
 800b1f0:	4628      	mov	r0, r5
 800b1f2:	f7ff fceb 	bl	800abcc <uxr_init_base_object_request>
 800b1f6:	4604      	mov	r4, r0
 800b1f8:	b318      	cbz	r0, 800b242 <uxr_prepare_output_stream_fragmented+0x146>
 800b1fa:	a907      	add	r1, sp, #28
 800b1fc:	4630      	mov	r0, r6
 800b1fe:	f000 ff0d 	bl	800c01c <uxr_serialize_WRITE_DATA_Payload_Data>
 800b202:	e9d6 2101 	ldrd	r2, r1, [r6, #4]
 800b206:	4630      	mov	r0, r6
 800b208:	1a52      	subs	r2, r2, r1
 800b20a:	f7fe fabd 	bl	8009788 <ucdr_init_buffer>
 800b20e:	9b05      	ldr	r3, [sp, #20]
 800b210:	f8c5 30c0 	str.w	r3, [r5, #192]	; 0xc0
 800b214:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b216:	f8c5 30b8 	str.w	r3, [r5, #184]	; 0xb8
 800b21a:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800b21c:	491b      	ldr	r1, [pc, #108]	; (800b28c <uxr_prepare_output_stream_fragmented+0x190>)
 800b21e:	f8c5 a0c4 	str.w	sl, [r5, #196]	; 0xc4
 800b222:	4630      	mov	r0, r6
 800b224:	f8c5 30bc 	str.w	r3, [r5, #188]	; 0xbc
 800b228:	462a      	mov	r2, r5
 800b22a:	f7fe fa81 	bl	8009730 <ucdr_set_on_full_buffer_callback>
 800b22e:	4620      	mov	r0, r4
 800b230:	b011      	add	sp, #68	; 0x44
 800b232:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b236:	991c      	ldr	r1, [sp, #112]	; 0x70
 800b238:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b23a:	4628      	mov	r0, r5
 800b23c:	4798      	blx	r3
 800b23e:	b920      	cbnz	r0, 800b24a <uxr_prepare_output_stream_fragmented+0x14e>
 800b240:	2400      	movs	r4, #0
 800b242:	4620      	mov	r0, r4
 800b244:	b011      	add	sp, #68	; 0x44
 800b246:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b24a:	4620      	mov	r0, r4
 800b24c:	f003 ff9e 	bl	800f18c <get_available_free_slots>
 800b250:	2800      	cmp	r0, #0
 800b252:	f47f af6d 	bne.w	800b130 <uxr_prepare_output_stream_fragmented+0x34>
 800b256:	e7f3      	b.n	800b240 <uxr_prepare_output_stream_fragmented+0x144>
 800b258:	4638      	mov	r0, r7
 800b25a:	2101      	movs	r1, #1
 800b25c:	f004 f8ac 	bl	800f3b8 <uxr_seq_num_add>
 800b260:	8921      	ldrh	r1, [r4, #8]
 800b262:	fbb0 f2f1 	udiv	r2, r0, r1
 800b266:	fb01 0912 	mls	r9, r1, r2, r0
 800b26a:	fa1f f289 	uxth.w	r2, r9
 800b26e:	6863      	ldr	r3, [r4, #4]
 800b270:	fbb3 f9f1 	udiv	r9, r3, r1
 800b274:	6823      	ldr	r3, [r4, #0]
 800b276:	fb02 f909 	mul.w	r9, r2, r9
 800b27a:	f109 0904 	add.w	r9, r9, #4
 800b27e:	4499      	add	r9, r3
 800b280:	4607      	mov	r7, r0
 800b282:	7b23      	ldrb	r3, [r4, #12]
 800b284:	f859 8c04 	ldr.w	r8, [r9, #-4]
 800b288:	e76b      	b.n	800b162 <uxr_prepare_output_stream_fragmented+0x66>
 800b28a:	bf00      	nop
 800b28c:	0800af89 	.word	0x0800af89

0800b290 <uxr_serialize_message_header>:
 800b290:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b292:	b083      	sub	sp, #12
 800b294:	4616      	mov	r6, r2
 800b296:	4604      	mov	r4, r0
 800b298:	9301      	str	r3, [sp, #4]
 800b29a:	460d      	mov	r5, r1
 800b29c:	9f08      	ldr	r7, [sp, #32]
 800b29e:	f7fd fac7 	bl	8008830 <ucdr_serialize_uint8_t>
 800b2a2:	4631      	mov	r1, r6
 800b2a4:	4620      	mov	r0, r4
 800b2a6:	f7fd fac3 	bl	8008830 <ucdr_serialize_uint8_t>
 800b2aa:	9a01      	ldr	r2, [sp, #4]
 800b2ac:	2101      	movs	r1, #1
 800b2ae:	4620      	mov	r0, r4
 800b2b0:	f7fd fb6a 	bl	8008988 <ucdr_serialize_endian_uint16_t>
 800b2b4:	062b      	lsls	r3, r5, #24
 800b2b6:	d501      	bpl.n	800b2bc <uxr_serialize_message_header+0x2c>
 800b2b8:	b003      	add	sp, #12
 800b2ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b2bc:	2204      	movs	r2, #4
 800b2be:	4639      	mov	r1, r7
 800b2c0:	4620      	mov	r0, r4
 800b2c2:	b003      	add	sp, #12
 800b2c4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800b2c8:	f003 b850 	b.w	800e36c <ucdr_serialize_array_uint8_t>

0800b2cc <uxr_deserialize_message_header>:
 800b2cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b2ce:	b083      	sub	sp, #12
 800b2d0:	4616      	mov	r6, r2
 800b2d2:	4604      	mov	r4, r0
 800b2d4:	9301      	str	r3, [sp, #4]
 800b2d6:	460d      	mov	r5, r1
 800b2d8:	9f08      	ldr	r7, [sp, #32]
 800b2da:	f7fd fabf 	bl	800885c <ucdr_deserialize_uint8_t>
 800b2de:	4631      	mov	r1, r6
 800b2e0:	4620      	mov	r0, r4
 800b2e2:	f7fd fabb 	bl	800885c <ucdr_deserialize_uint8_t>
 800b2e6:	9a01      	ldr	r2, [sp, #4]
 800b2e8:	2101      	movs	r1, #1
 800b2ea:	4620      	mov	r0, r4
 800b2ec:	f7fd fc40 	bl	8008b70 <ucdr_deserialize_endian_uint16_t>
 800b2f0:	f995 3000 	ldrsb.w	r3, [r5]
 800b2f4:	2b00      	cmp	r3, #0
 800b2f6:	da01      	bge.n	800b2fc <uxr_deserialize_message_header+0x30>
 800b2f8:	b003      	add	sp, #12
 800b2fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b2fc:	2204      	movs	r2, #4
 800b2fe:	4639      	mov	r1, r7
 800b300:	4620      	mov	r0, r4
 800b302:	b003      	add	sp, #12
 800b304:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800b308:	f003 b894 	b.w	800e434 <ucdr_deserialize_array_uint8_t>

0800b30c <uxr_serialize_submessage_header>:
 800b30c:	b530      	push	{r4, r5, lr}
 800b30e:	b083      	sub	sp, #12
 800b310:	4615      	mov	r5, r2
 800b312:	4604      	mov	r4, r0
 800b314:	9301      	str	r3, [sp, #4]
 800b316:	f7fd fa8b 	bl	8008830 <ucdr_serialize_uint8_t>
 800b31a:	4629      	mov	r1, r5
 800b31c:	4620      	mov	r0, r4
 800b31e:	f7fd fa87 	bl	8008830 <ucdr_serialize_uint8_t>
 800b322:	9a01      	ldr	r2, [sp, #4]
 800b324:	2101      	movs	r1, #1
 800b326:	4620      	mov	r0, r4
 800b328:	b003      	add	sp, #12
 800b32a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b32e:	f7fd bb2b 	b.w	8008988 <ucdr_serialize_endian_uint16_t>
 800b332:	bf00      	nop

0800b334 <uxr_deserialize_submessage_header>:
 800b334:	b530      	push	{r4, r5, lr}
 800b336:	b083      	sub	sp, #12
 800b338:	4615      	mov	r5, r2
 800b33a:	4604      	mov	r4, r0
 800b33c:	9301      	str	r3, [sp, #4]
 800b33e:	f7fd fa8d 	bl	800885c <ucdr_deserialize_uint8_t>
 800b342:	4629      	mov	r1, r5
 800b344:	4620      	mov	r0, r4
 800b346:	f7fd fa89 	bl	800885c <ucdr_deserialize_uint8_t>
 800b34a:	9a01      	ldr	r2, [sp, #4]
 800b34c:	2101      	movs	r1, #1
 800b34e:	4620      	mov	r0, r4
 800b350:	b003      	add	sp, #12
 800b352:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b356:	f7fd bc0b 	b.w	8008b70 <ucdr_deserialize_endian_uint16_t>
 800b35a:	bf00      	nop

0800b35c <uxr_serialize_CLIENT_Representation>:
 800b35c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b360:	2204      	movs	r2, #4
 800b362:	460e      	mov	r6, r1
 800b364:	4605      	mov	r5, r0
 800b366:	f003 f801 	bl	800e36c <ucdr_serialize_array_uint8_t>
 800b36a:	2202      	movs	r2, #2
 800b36c:	4607      	mov	r7, r0
 800b36e:	1d31      	adds	r1, r6, #4
 800b370:	4628      	mov	r0, r5
 800b372:	f002 fffb 	bl	800e36c <ucdr_serialize_array_uint8_t>
 800b376:	4038      	ands	r0, r7
 800b378:	2202      	movs	r2, #2
 800b37a:	1db1      	adds	r1, r6, #6
 800b37c:	b2c7      	uxtb	r7, r0
 800b37e:	4628      	mov	r0, r5
 800b380:	f002 fff4 	bl	800e36c <ucdr_serialize_array_uint8_t>
 800b384:	2204      	movs	r2, #4
 800b386:	4007      	ands	r7, r0
 800b388:	f106 0108 	add.w	r1, r6, #8
 800b38c:	4628      	mov	r0, r5
 800b38e:	f002 ffed 	bl	800e36c <ucdr_serialize_array_uint8_t>
 800b392:	7b31      	ldrb	r1, [r6, #12]
 800b394:	4007      	ands	r7, r0
 800b396:	4628      	mov	r0, r5
 800b398:	f7fd fa4a 	bl	8008830 <ucdr_serialize_uint8_t>
 800b39c:	7b71      	ldrb	r1, [r6, #13]
 800b39e:	4007      	ands	r7, r0
 800b3a0:	4628      	mov	r0, r5
 800b3a2:	f7fd fa17 	bl	80087d4 <ucdr_serialize_bool>
 800b3a6:	7b73      	ldrb	r3, [r6, #13]
 800b3a8:	ea07 0800 	and.w	r8, r7, r0
 800b3ac:	b93b      	cbnz	r3, 800b3be <uxr_serialize_CLIENT_Representation+0x62>
 800b3ae:	8bb1      	ldrh	r1, [r6, #28]
 800b3b0:	4628      	mov	r0, r5
 800b3b2:	f7fd fa69 	bl	8008888 <ucdr_serialize_uint16_t>
 800b3b6:	ea08 0000 	and.w	r0, r8, r0
 800b3ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b3be:	6931      	ldr	r1, [r6, #16]
 800b3c0:	4628      	mov	r0, r5
 800b3c2:	f7fd fc4b 	bl	8008c5c <ucdr_serialize_uint32_t>
 800b3c6:	6933      	ldr	r3, [r6, #16]
 800b3c8:	b1e3      	cbz	r3, 800b404 <uxr_serialize_CLIENT_Representation+0xa8>
 800b3ca:	b1c0      	cbz	r0, 800b3fe <uxr_serialize_CLIENT_Representation+0xa2>
 800b3cc:	4637      	mov	r7, r6
 800b3ce:	f04f 0900 	mov.w	r9, #0
 800b3d2:	e001      	b.n	800b3d8 <uxr_serialize_CLIENT_Representation+0x7c>
 800b3d4:	3708      	adds	r7, #8
 800b3d6:	b194      	cbz	r4, 800b3fe <uxr_serialize_CLIENT_Representation+0xa2>
 800b3d8:	6979      	ldr	r1, [r7, #20]
 800b3da:	4628      	mov	r0, r5
 800b3dc:	f003 f8e6 	bl	800e5ac <ucdr_serialize_string>
 800b3e0:	69b9      	ldr	r1, [r7, #24]
 800b3e2:	4604      	mov	r4, r0
 800b3e4:	4628      	mov	r0, r5
 800b3e6:	f003 f8e1 	bl	800e5ac <ucdr_serialize_string>
 800b3ea:	6933      	ldr	r3, [r6, #16]
 800b3ec:	f109 0901 	add.w	r9, r9, #1
 800b3f0:	4004      	ands	r4, r0
 800b3f2:	4599      	cmp	r9, r3
 800b3f4:	b2e4      	uxtb	r4, r4
 800b3f6:	d3ed      	bcc.n	800b3d4 <uxr_serialize_CLIENT_Representation+0x78>
 800b3f8:	ea08 0804 	and.w	r8, r8, r4
 800b3fc:	e7d7      	b.n	800b3ae <uxr_serialize_CLIENT_Representation+0x52>
 800b3fe:	f04f 0800 	mov.w	r8, #0
 800b402:	e7d4      	b.n	800b3ae <uxr_serialize_CLIENT_Representation+0x52>
 800b404:	ea08 0800 	and.w	r8, r8, r0
 800b408:	e7d1      	b.n	800b3ae <uxr_serialize_CLIENT_Representation+0x52>
 800b40a:	bf00      	nop

0800b40c <uxr_deserialize_CLIENT_Representation>:
 800b40c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b410:	2204      	movs	r2, #4
 800b412:	460c      	mov	r4, r1
 800b414:	4605      	mov	r5, r0
 800b416:	f003 f80d 	bl	800e434 <ucdr_deserialize_array_uint8_t>
 800b41a:	2202      	movs	r2, #2
 800b41c:	4607      	mov	r7, r0
 800b41e:	1d21      	adds	r1, r4, #4
 800b420:	4628      	mov	r0, r5
 800b422:	f003 f807 	bl	800e434 <ucdr_deserialize_array_uint8_t>
 800b426:	4038      	ands	r0, r7
 800b428:	2202      	movs	r2, #2
 800b42a:	1da1      	adds	r1, r4, #6
 800b42c:	b2c6      	uxtb	r6, r0
 800b42e:	4628      	mov	r0, r5
 800b430:	f003 f800 	bl	800e434 <ucdr_deserialize_array_uint8_t>
 800b434:	2204      	movs	r2, #4
 800b436:	4006      	ands	r6, r0
 800b438:	f104 0108 	add.w	r1, r4, #8
 800b43c:	4628      	mov	r0, r5
 800b43e:	f002 fff9 	bl	800e434 <ucdr_deserialize_array_uint8_t>
 800b442:	f104 010c 	add.w	r1, r4, #12
 800b446:	4006      	ands	r6, r0
 800b448:	4628      	mov	r0, r5
 800b44a:	f7fd fa07 	bl	800885c <ucdr_deserialize_uint8_t>
 800b44e:	f104 010d 	add.w	r1, r4, #13
 800b452:	ea06 0700 	and.w	r7, r6, r0
 800b456:	4628      	mov	r0, r5
 800b458:	f7fd f9d2 	bl	8008800 <ucdr_deserialize_bool>
 800b45c:	7b63      	ldrb	r3, [r4, #13]
 800b45e:	4007      	ands	r7, r0
 800b460:	b93b      	cbnz	r3, 800b472 <uxr_deserialize_CLIENT_Representation+0x66>
 800b462:	f104 011c 	add.w	r1, r4, #28
 800b466:	4628      	mov	r0, r5
 800b468:	f7fd fb0e 	bl	8008a88 <ucdr_deserialize_uint16_t>
 800b46c:	4038      	ands	r0, r7
 800b46e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b472:	f104 0110 	add.w	r1, r4, #16
 800b476:	4628      	mov	r0, r5
 800b478:	f7fd fd20 	bl	8008ebc <ucdr_deserialize_uint32_t>
 800b47c:	6923      	ldr	r3, [r4, #16]
 800b47e:	2b01      	cmp	r3, #1
 800b480:	d903      	bls.n	800b48a <uxr_deserialize_CLIENT_Representation+0x7e>
 800b482:	2301      	movs	r3, #1
 800b484:	75ab      	strb	r3, [r5, #22]
 800b486:	2700      	movs	r7, #0
 800b488:	e7eb      	b.n	800b462 <uxr_deserialize_CLIENT_Representation+0x56>
 800b48a:	b30b      	cbz	r3, 800b4d0 <uxr_deserialize_CLIENT_Representation+0xc4>
 800b48c:	2800      	cmp	r0, #0
 800b48e:	d0fa      	beq.n	800b486 <uxr_deserialize_CLIENT_Representation+0x7a>
 800b490:	46a0      	mov	r8, r4
 800b492:	f04f 0900 	mov.w	r9, #0
 800b496:	e001      	b.n	800b49c <uxr_deserialize_CLIENT_Representation+0x90>
 800b498:	2e00      	cmp	r6, #0
 800b49a:	d0f4      	beq.n	800b486 <uxr_deserialize_CLIENT_Representation+0x7a>
 800b49c:	f8d8 1014 	ldr.w	r1, [r8, #20]
 800b4a0:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b4a4:	4628      	mov	r0, r5
 800b4a6:	f003 f891 	bl	800e5cc <ucdr_deserialize_string>
 800b4aa:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b4ae:	4606      	mov	r6, r0
 800b4b0:	f8d8 1018 	ldr.w	r1, [r8, #24]
 800b4b4:	4628      	mov	r0, r5
 800b4b6:	f003 f889 	bl	800e5cc <ucdr_deserialize_string>
 800b4ba:	6923      	ldr	r3, [r4, #16]
 800b4bc:	f109 0901 	add.w	r9, r9, #1
 800b4c0:	4006      	ands	r6, r0
 800b4c2:	4599      	cmp	r9, r3
 800b4c4:	f108 0808 	add.w	r8, r8, #8
 800b4c8:	b2f6      	uxtb	r6, r6
 800b4ca:	d3e5      	bcc.n	800b498 <uxr_deserialize_CLIENT_Representation+0x8c>
 800b4cc:	4037      	ands	r7, r6
 800b4ce:	e7c8      	b.n	800b462 <uxr_deserialize_CLIENT_Representation+0x56>
 800b4d0:	4007      	ands	r7, r0
 800b4d2:	e7c6      	b.n	800b462 <uxr_deserialize_CLIENT_Representation+0x56>

0800b4d4 <uxr_serialize_AGENT_Representation>:
 800b4d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b4d8:	2204      	movs	r2, #4
 800b4da:	460f      	mov	r7, r1
 800b4dc:	4605      	mov	r5, r0
 800b4de:	f002 ff45 	bl	800e36c <ucdr_serialize_array_uint8_t>
 800b4e2:	2202      	movs	r2, #2
 800b4e4:	4604      	mov	r4, r0
 800b4e6:	1d39      	adds	r1, r7, #4
 800b4e8:	4628      	mov	r0, r5
 800b4ea:	f002 ff3f 	bl	800e36c <ucdr_serialize_array_uint8_t>
 800b4ee:	4020      	ands	r0, r4
 800b4f0:	2202      	movs	r2, #2
 800b4f2:	1db9      	adds	r1, r7, #6
 800b4f4:	b2c4      	uxtb	r4, r0
 800b4f6:	4628      	mov	r0, r5
 800b4f8:	f002 ff38 	bl	800e36c <ucdr_serialize_array_uint8_t>
 800b4fc:	7a39      	ldrb	r1, [r7, #8]
 800b4fe:	4004      	ands	r4, r0
 800b500:	4628      	mov	r0, r5
 800b502:	f7fd f967 	bl	80087d4 <ucdr_serialize_bool>
 800b506:	7a3b      	ldrb	r3, [r7, #8]
 800b508:	ea00 0804 	and.w	r8, r0, r4
 800b50c:	b913      	cbnz	r3, 800b514 <uxr_serialize_AGENT_Representation+0x40>
 800b50e:	4640      	mov	r0, r8
 800b510:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b514:	68f9      	ldr	r1, [r7, #12]
 800b516:	4628      	mov	r0, r5
 800b518:	f7fd fba0 	bl	8008c5c <ucdr_serialize_uint32_t>
 800b51c:	68fb      	ldr	r3, [r7, #12]
 800b51e:	b303      	cbz	r3, 800b562 <uxr_serialize_AGENT_Representation+0x8e>
 800b520:	b1d0      	cbz	r0, 800b558 <uxr_serialize_AGENT_Representation+0x84>
 800b522:	463e      	mov	r6, r7
 800b524:	f04f 0900 	mov.w	r9, #0
 800b528:	e001      	b.n	800b52e <uxr_serialize_AGENT_Representation+0x5a>
 800b52a:	3608      	adds	r6, #8
 800b52c:	b1a4      	cbz	r4, 800b558 <uxr_serialize_AGENT_Representation+0x84>
 800b52e:	6931      	ldr	r1, [r6, #16]
 800b530:	4628      	mov	r0, r5
 800b532:	f003 f83b 	bl	800e5ac <ucdr_serialize_string>
 800b536:	6971      	ldr	r1, [r6, #20]
 800b538:	4604      	mov	r4, r0
 800b53a:	4628      	mov	r0, r5
 800b53c:	f003 f836 	bl	800e5ac <ucdr_serialize_string>
 800b540:	68fb      	ldr	r3, [r7, #12]
 800b542:	f109 0901 	add.w	r9, r9, #1
 800b546:	4004      	ands	r4, r0
 800b548:	4599      	cmp	r9, r3
 800b54a:	b2e4      	uxtb	r4, r4
 800b54c:	d3ed      	bcc.n	800b52a <uxr_serialize_AGENT_Representation+0x56>
 800b54e:	ea08 0804 	and.w	r8, r8, r4
 800b552:	4640      	mov	r0, r8
 800b554:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b558:	f04f 0800 	mov.w	r8, #0
 800b55c:	4640      	mov	r0, r8
 800b55e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b562:	ea08 0800 	and.w	r8, r8, r0
 800b566:	e7d2      	b.n	800b50e <uxr_serialize_AGENT_Representation+0x3a>

0800b568 <uxr_serialize_DATAWRITER_Representation>:
 800b568:	b570      	push	{r4, r5, r6, lr}
 800b56a:	460d      	mov	r5, r1
 800b56c:	7809      	ldrb	r1, [r1, #0]
 800b56e:	4606      	mov	r6, r0
 800b570:	f7fd f95e 	bl	8008830 <ucdr_serialize_uint8_t>
 800b574:	4604      	mov	r4, r0
 800b576:	b130      	cbz	r0, 800b586 <uxr_serialize_DATAWRITER_Representation+0x1e>
 800b578:	782b      	ldrb	r3, [r5, #0]
 800b57a:	2b02      	cmp	r3, #2
 800b57c:	d00c      	beq.n	800b598 <uxr_serialize_DATAWRITER_Representation+0x30>
 800b57e:	2b03      	cmp	r3, #3
 800b580:	d010      	beq.n	800b5a4 <uxr_serialize_DATAWRITER_Representation+0x3c>
 800b582:	2b01      	cmp	r3, #1
 800b584:	d008      	beq.n	800b598 <uxr_serialize_DATAWRITER_Representation+0x30>
 800b586:	2202      	movs	r2, #2
 800b588:	f505 7102 	add.w	r1, r5, #520	; 0x208
 800b58c:	4630      	mov	r0, r6
 800b58e:	f002 feed 	bl	800e36c <ucdr_serialize_array_uint8_t>
 800b592:	4020      	ands	r0, r4
 800b594:	b2c0      	uxtb	r0, r0
 800b596:	bd70      	pop	{r4, r5, r6, pc}
 800b598:	6869      	ldr	r1, [r5, #4]
 800b59a:	4630      	mov	r0, r6
 800b59c:	f003 f806 	bl	800e5ac <ucdr_serialize_string>
 800b5a0:	4604      	mov	r4, r0
 800b5a2:	e7f0      	b.n	800b586 <uxr_serialize_DATAWRITER_Representation+0x1e>
 800b5a4:	4629      	mov	r1, r5
 800b5a6:	4630      	mov	r0, r6
 800b5a8:	f851 2f04 	ldr.w	r2, [r1, #4]!
 800b5ac:	3104      	adds	r1, #4
 800b5ae:	f002 ffd1 	bl	800e554 <ucdr_serialize_sequence_uint8_t>
 800b5b2:	4604      	mov	r4, r0
 800b5b4:	e7e7      	b.n	800b586 <uxr_serialize_DATAWRITER_Representation+0x1e>
 800b5b6:	bf00      	nop

0800b5b8 <uxr_serialize_ObjectVariant.part.0>:
 800b5b8:	b570      	push	{r4, r5, r6, lr}
 800b5ba:	780b      	ldrb	r3, [r1, #0]
 800b5bc:	3b01      	subs	r3, #1
 800b5be:	460c      	mov	r4, r1
 800b5c0:	4605      	mov	r5, r0
 800b5c2:	2b0d      	cmp	r3, #13
 800b5c4:	d854      	bhi.n	800b670 <uxr_serialize_ObjectVariant.part.0+0xb8>
 800b5c6:	e8df f003 	tbb	[pc, r3]
 800b5ca:	0730      	.short	0x0730
 800b5cc:	07071b1b 	.word	0x07071b1b
 800b5d0:	0c530707 	.word	0x0c530707
 800b5d4:	494e0c0c 	.word	0x494e0c0c
 800b5d8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800b5dc:	3104      	adds	r1, #4
 800b5de:	f7ff bfc3 	b.w	800b568 <uxr_serialize_DATAWRITER_Representation>
 800b5e2:	7909      	ldrb	r1, [r1, #4]
 800b5e4:	f7fd f924 	bl	8008830 <ucdr_serialize_uint8_t>
 800b5e8:	b1e8      	cbz	r0, 800b626 <uxr_serialize_ObjectVariant.part.0+0x6e>
 800b5ea:	7923      	ldrb	r3, [r4, #4]
 800b5ec:	2b01      	cmp	r3, #1
 800b5ee:	d001      	beq.n	800b5f4 <uxr_serialize_ObjectVariant.part.0+0x3c>
 800b5f0:	2b02      	cmp	r3, #2
 800b5f2:	d13d      	bne.n	800b670 <uxr_serialize_ObjectVariant.part.0+0xb8>
 800b5f4:	68a1      	ldr	r1, [r4, #8]
 800b5f6:	4628      	mov	r0, r5
 800b5f8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800b5fc:	f002 bfd6 	b.w	800e5ac <ucdr_serialize_string>
 800b600:	7909      	ldrb	r1, [r1, #4]
 800b602:	f7fd f915 	bl	8008830 <ucdr_serialize_uint8_t>
 800b606:	4606      	mov	r6, r0
 800b608:	b120      	cbz	r0, 800b614 <uxr_serialize_ObjectVariant.part.0+0x5c>
 800b60a:	7923      	ldrb	r3, [r4, #4]
 800b60c:	2b02      	cmp	r3, #2
 800b60e:	d039      	beq.n	800b684 <uxr_serialize_ObjectVariant.part.0+0xcc>
 800b610:	2b03      	cmp	r3, #3
 800b612:	d02f      	beq.n	800b674 <uxr_serialize_ObjectVariant.part.0+0xbc>
 800b614:	2202      	movs	r2, #2
 800b616:	f504 7103 	add.w	r1, r4, #524	; 0x20c
 800b61a:	4628      	mov	r0, r5
 800b61c:	f002 fea6 	bl	800e36c <ucdr_serialize_array_uint8_t>
 800b620:	4030      	ands	r0, r6
 800b622:	b2c0      	uxtb	r0, r0
 800b624:	bd70      	pop	{r4, r5, r6, pc}
 800b626:	2000      	movs	r0, #0
 800b628:	bd70      	pop	{r4, r5, r6, pc}
 800b62a:	7909      	ldrb	r1, [r1, #4]
 800b62c:	f7fd f900 	bl	8008830 <ucdr_serialize_uint8_t>
 800b630:	4606      	mov	r6, r0
 800b632:	b158      	cbz	r0, 800b64c <uxr_serialize_ObjectVariant.part.0+0x94>
 800b634:	7923      	ldrb	r3, [r4, #4]
 800b636:	2b02      	cmp	r3, #2
 800b638:	d003      	beq.n	800b642 <uxr_serialize_ObjectVariant.part.0+0x8a>
 800b63a:	2b03      	cmp	r3, #3
 800b63c:	d028      	beq.n	800b690 <uxr_serialize_ObjectVariant.part.0+0xd8>
 800b63e:	2b01      	cmp	r3, #1
 800b640:	d104      	bne.n	800b64c <uxr_serialize_ObjectVariant.part.0+0x94>
 800b642:	68a1      	ldr	r1, [r4, #8]
 800b644:	4628      	mov	r0, r5
 800b646:	f002 ffb1 	bl	800e5ac <ucdr_serialize_string>
 800b64a:	4606      	mov	r6, r0
 800b64c:	f9b4 120c 	ldrsh.w	r1, [r4, #524]	; 0x20c
 800b650:	4628      	mov	r0, r5
 800b652:	f7fd fe29 	bl	80092a8 <ucdr_serialize_int16_t>
 800b656:	4030      	ands	r0, r6
 800b658:	b2c0      	uxtb	r0, r0
 800b65a:	bd70      	pop	{r4, r5, r6, pc}
 800b65c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800b660:	3104      	adds	r1, #4
 800b662:	f7ff be7b 	b.w	800b35c <uxr_serialize_CLIENT_Representation>
 800b666:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800b66a:	3104      	adds	r1, #4
 800b66c:	f7ff bf32 	b.w	800b4d4 <uxr_serialize_AGENT_Representation>
 800b670:	2001      	movs	r0, #1
 800b672:	bd70      	pop	{r4, r5, r6, pc}
 800b674:	68a2      	ldr	r2, [r4, #8]
 800b676:	f104 010c 	add.w	r1, r4, #12
 800b67a:	4628      	mov	r0, r5
 800b67c:	f002 ff6a 	bl	800e554 <ucdr_serialize_sequence_uint8_t>
 800b680:	4606      	mov	r6, r0
 800b682:	e7c7      	b.n	800b614 <uxr_serialize_ObjectVariant.part.0+0x5c>
 800b684:	68a1      	ldr	r1, [r4, #8]
 800b686:	4628      	mov	r0, r5
 800b688:	f002 ff90 	bl	800e5ac <ucdr_serialize_string>
 800b68c:	4606      	mov	r6, r0
 800b68e:	e7c1      	b.n	800b614 <uxr_serialize_ObjectVariant.part.0+0x5c>
 800b690:	68a2      	ldr	r2, [r4, #8]
 800b692:	f104 010c 	add.w	r1, r4, #12
 800b696:	4628      	mov	r0, r5
 800b698:	f002 ff5c 	bl	800e554 <ucdr_serialize_sequence_uint8_t>
 800b69c:	4606      	mov	r6, r0
 800b69e:	e7d5      	b.n	800b64c <uxr_serialize_ObjectVariant.part.0+0x94>

0800b6a0 <uxr_deserialize_DATAWRITER_Representation>:
 800b6a0:	b570      	push	{r4, r5, r6, lr}
 800b6a2:	4606      	mov	r6, r0
 800b6a4:	460d      	mov	r5, r1
 800b6a6:	f7fd f8d9 	bl	800885c <ucdr_deserialize_uint8_t>
 800b6aa:	4604      	mov	r4, r0
 800b6ac:	b130      	cbz	r0, 800b6bc <uxr_deserialize_DATAWRITER_Representation+0x1c>
 800b6ae:	782b      	ldrb	r3, [r5, #0]
 800b6b0:	2b02      	cmp	r3, #2
 800b6b2:	d00c      	beq.n	800b6ce <uxr_deserialize_DATAWRITER_Representation+0x2e>
 800b6b4:	2b03      	cmp	r3, #3
 800b6b6:	d012      	beq.n	800b6de <uxr_deserialize_DATAWRITER_Representation+0x3e>
 800b6b8:	2b01      	cmp	r3, #1
 800b6ba:	d008      	beq.n	800b6ce <uxr_deserialize_DATAWRITER_Representation+0x2e>
 800b6bc:	2202      	movs	r2, #2
 800b6be:	f505 7102 	add.w	r1, r5, #520	; 0x208
 800b6c2:	4630      	mov	r0, r6
 800b6c4:	f002 feb6 	bl	800e434 <ucdr_deserialize_array_uint8_t>
 800b6c8:	4020      	ands	r0, r4
 800b6ca:	b2c0      	uxtb	r0, r0
 800b6cc:	bd70      	pop	{r4, r5, r6, pc}
 800b6ce:	6869      	ldr	r1, [r5, #4]
 800b6d0:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b6d4:	4630      	mov	r0, r6
 800b6d6:	f002 ff79 	bl	800e5cc <ucdr_deserialize_string>
 800b6da:	4604      	mov	r4, r0
 800b6dc:	e7ee      	b.n	800b6bc <uxr_deserialize_DATAWRITER_Representation+0x1c>
 800b6de:	1d2b      	adds	r3, r5, #4
 800b6e0:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b6e4:	f105 0108 	add.w	r1, r5, #8
 800b6e8:	4630      	mov	r0, r6
 800b6ea:	f002 ff45 	bl	800e578 <ucdr_deserialize_sequence_uint8_t>
 800b6ee:	4604      	mov	r4, r0
 800b6f0:	e7e4      	b.n	800b6bc <uxr_deserialize_DATAWRITER_Representation+0x1c>
 800b6f2:	bf00      	nop

0800b6f4 <uxr_serialize_OBJK_DomainParticipant_Binary>:
 800b6f4:	b570      	push	{r4, r5, r6, lr}
 800b6f6:	460d      	mov	r5, r1
 800b6f8:	7809      	ldrb	r1, [r1, #0]
 800b6fa:	4606      	mov	r6, r0
 800b6fc:	f7fd f86a 	bl	80087d4 <ucdr_serialize_bool>
 800b700:	782b      	ldrb	r3, [r5, #0]
 800b702:	4604      	mov	r4, r0
 800b704:	b94b      	cbnz	r3, 800b71a <uxr_serialize_OBJK_DomainParticipant_Binary+0x26>
 800b706:	7a29      	ldrb	r1, [r5, #8]
 800b708:	4630      	mov	r0, r6
 800b70a:	f7fd f863 	bl	80087d4 <ucdr_serialize_bool>
 800b70e:	7a2b      	ldrb	r3, [r5, #8]
 800b710:	4004      	ands	r4, r0
 800b712:	b2e4      	uxtb	r4, r4
 800b714:	b943      	cbnz	r3, 800b728 <uxr_serialize_OBJK_DomainParticipant_Binary+0x34>
 800b716:	4620      	mov	r0, r4
 800b718:	bd70      	pop	{r4, r5, r6, pc}
 800b71a:	6869      	ldr	r1, [r5, #4]
 800b71c:	4630      	mov	r0, r6
 800b71e:	f002 ff45 	bl	800e5ac <ucdr_serialize_string>
 800b722:	4004      	ands	r4, r0
 800b724:	b2e4      	uxtb	r4, r4
 800b726:	e7ee      	b.n	800b706 <uxr_serialize_OBJK_DomainParticipant_Binary+0x12>
 800b728:	68e9      	ldr	r1, [r5, #12]
 800b72a:	4630      	mov	r0, r6
 800b72c:	f002 ff3e 	bl	800e5ac <ucdr_serialize_string>
 800b730:	4004      	ands	r4, r0
 800b732:	4620      	mov	r0, r4
 800b734:	bd70      	pop	{r4, r5, r6, pc}
 800b736:	bf00      	nop

0800b738 <uxr_serialize_OBJK_Topic_Binary>:
 800b738:	b570      	push	{r4, r5, r6, lr}
 800b73a:	460d      	mov	r5, r1
 800b73c:	6809      	ldr	r1, [r1, #0]
 800b73e:	4606      	mov	r6, r0
 800b740:	f002 ff34 	bl	800e5ac <ucdr_serialize_string>
 800b744:	7929      	ldrb	r1, [r5, #4]
 800b746:	4604      	mov	r4, r0
 800b748:	4630      	mov	r0, r6
 800b74a:	f7fd f843 	bl	80087d4 <ucdr_serialize_bool>
 800b74e:	792b      	ldrb	r3, [r5, #4]
 800b750:	4004      	ands	r4, r0
 800b752:	b2e4      	uxtb	r4, r4
 800b754:	b943      	cbnz	r3, 800b768 <uxr_serialize_OBJK_Topic_Binary+0x30>
 800b756:	7b29      	ldrb	r1, [r5, #12]
 800b758:	4630      	mov	r0, r6
 800b75a:	f7fd f83b 	bl	80087d4 <ucdr_serialize_bool>
 800b75e:	7b2b      	ldrb	r3, [r5, #12]
 800b760:	4004      	ands	r4, r0
 800b762:	b93b      	cbnz	r3, 800b774 <uxr_serialize_OBJK_Topic_Binary+0x3c>
 800b764:	4620      	mov	r0, r4
 800b766:	bd70      	pop	{r4, r5, r6, pc}
 800b768:	68a9      	ldr	r1, [r5, #8]
 800b76a:	4630      	mov	r0, r6
 800b76c:	f002 ff1e 	bl	800e5ac <ucdr_serialize_string>
 800b770:	4004      	ands	r4, r0
 800b772:	e7f0      	b.n	800b756 <uxr_serialize_OBJK_Topic_Binary+0x1e>
 800b774:	6929      	ldr	r1, [r5, #16]
 800b776:	4630      	mov	r0, r6
 800b778:	f002 ff18 	bl	800e5ac <ucdr_serialize_string>
 800b77c:	4004      	ands	r4, r0
 800b77e:	b2e4      	uxtb	r4, r4
 800b780:	4620      	mov	r0, r4
 800b782:	bd70      	pop	{r4, r5, r6, pc}

0800b784 <uxr_serialize_OBJK_Publisher_Binary_Qos>:
 800b784:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b788:	460c      	mov	r4, r1
 800b78a:	7809      	ldrb	r1, [r1, #0]
 800b78c:	4606      	mov	r6, r0
 800b78e:	f7fd f821 	bl	80087d4 <ucdr_serialize_bool>
 800b792:	7823      	ldrb	r3, [r4, #0]
 800b794:	4605      	mov	r5, r0
 800b796:	b96b      	cbnz	r3, 800b7b4 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x30>
 800b798:	f894 1028 	ldrb.w	r1, [r4, #40]	; 0x28
 800b79c:	4630      	mov	r0, r6
 800b79e:	f7fd f819 	bl	80087d4 <ucdr_serialize_bool>
 800b7a2:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800b7a6:	4005      	ands	r5, r0
 800b7a8:	b2ed      	uxtb	r5, r5
 800b7aa:	2b00      	cmp	r3, #0
 800b7ac:	d169      	bne.n	800b882 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xfe>
 800b7ae:	4628      	mov	r0, r5
 800b7b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b7b4:	6861      	ldr	r1, [r4, #4]
 800b7b6:	4630      	mov	r0, r6
 800b7b8:	f7fd fa50 	bl	8008c5c <ucdr_serialize_uint32_t>
 800b7bc:	6863      	ldr	r3, [r4, #4]
 800b7be:	2b00      	cmp	r3, #0
 800b7c0:	d06b      	beq.n	800b89a <uxr_serialize_OBJK_Publisher_Binary_Qos+0x116>
 800b7c2:	2800      	cmp	r0, #0
 800b7c4:	d067      	beq.n	800b896 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800b7c6:	68a1      	ldr	r1, [r4, #8]
 800b7c8:	4630      	mov	r0, r6
 800b7ca:	f002 feef 	bl	800e5ac <ucdr_serialize_string>
 800b7ce:	6863      	ldr	r3, [r4, #4]
 800b7d0:	2b01      	cmp	r3, #1
 800b7d2:	d953      	bls.n	800b87c <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800b7d4:	2800      	cmp	r0, #0
 800b7d6:	d05e      	beq.n	800b896 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800b7d8:	68e1      	ldr	r1, [r4, #12]
 800b7da:	4630      	mov	r0, r6
 800b7dc:	f002 fee6 	bl	800e5ac <ucdr_serialize_string>
 800b7e0:	6863      	ldr	r3, [r4, #4]
 800b7e2:	2b02      	cmp	r3, #2
 800b7e4:	d94a      	bls.n	800b87c <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800b7e6:	2800      	cmp	r0, #0
 800b7e8:	d055      	beq.n	800b896 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800b7ea:	6921      	ldr	r1, [r4, #16]
 800b7ec:	4630      	mov	r0, r6
 800b7ee:	f002 fedd 	bl	800e5ac <ucdr_serialize_string>
 800b7f2:	6863      	ldr	r3, [r4, #4]
 800b7f4:	2b03      	cmp	r3, #3
 800b7f6:	d941      	bls.n	800b87c <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800b7f8:	2800      	cmp	r0, #0
 800b7fa:	d04c      	beq.n	800b896 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800b7fc:	6961      	ldr	r1, [r4, #20]
 800b7fe:	4630      	mov	r0, r6
 800b800:	f002 fed4 	bl	800e5ac <ucdr_serialize_string>
 800b804:	6863      	ldr	r3, [r4, #4]
 800b806:	2b04      	cmp	r3, #4
 800b808:	d938      	bls.n	800b87c <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800b80a:	2800      	cmp	r0, #0
 800b80c:	d043      	beq.n	800b896 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800b80e:	69a1      	ldr	r1, [r4, #24]
 800b810:	4630      	mov	r0, r6
 800b812:	f002 fecb 	bl	800e5ac <ucdr_serialize_string>
 800b816:	6863      	ldr	r3, [r4, #4]
 800b818:	2b05      	cmp	r3, #5
 800b81a:	d92f      	bls.n	800b87c <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800b81c:	2800      	cmp	r0, #0
 800b81e:	d03a      	beq.n	800b896 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800b820:	69e1      	ldr	r1, [r4, #28]
 800b822:	4630      	mov	r0, r6
 800b824:	f002 fec2 	bl	800e5ac <ucdr_serialize_string>
 800b828:	6863      	ldr	r3, [r4, #4]
 800b82a:	2b06      	cmp	r3, #6
 800b82c:	d926      	bls.n	800b87c <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800b82e:	b390      	cbz	r0, 800b896 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800b830:	6a21      	ldr	r1, [r4, #32]
 800b832:	4630      	mov	r0, r6
 800b834:	f002 feba 	bl	800e5ac <ucdr_serialize_string>
 800b838:	6863      	ldr	r3, [r4, #4]
 800b83a:	2b07      	cmp	r3, #7
 800b83c:	d91e      	bls.n	800b87c <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800b83e:	b350      	cbz	r0, 800b896 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800b840:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800b842:	4630      	mov	r0, r6
 800b844:	f002 feb2 	bl	800e5ac <ucdr_serialize_string>
 800b848:	6863      	ldr	r3, [r4, #4]
 800b84a:	2b08      	cmp	r3, #8
 800b84c:	d916      	bls.n	800b87c <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800b84e:	b310      	cbz	r0, 800b896 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800b850:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800b852:	4630      	mov	r0, r6
 800b854:	f002 feaa 	bl	800e5ac <ucdr_serialize_string>
 800b858:	6863      	ldr	r3, [r4, #4]
 800b85a:	2b09      	cmp	r3, #9
 800b85c:	d90e      	bls.n	800b87c <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800b85e:	b1d0      	cbz	r0, 800b896 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800b860:	f104 082c 	add.w	r8, r4, #44	; 0x2c
 800b864:	2709      	movs	r7, #9
 800b866:	e000      	b.n	800b86a <uxr_serialize_OBJK_Publisher_Binary_Qos+0xe6>
 800b868:	b1a8      	cbz	r0, 800b896 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800b86a:	f858 1b04 	ldr.w	r1, [r8], #4
 800b86e:	4630      	mov	r0, r6
 800b870:	f002 fe9c 	bl	800e5ac <ucdr_serialize_string>
 800b874:	6862      	ldr	r2, [r4, #4]
 800b876:	3701      	adds	r7, #1
 800b878:	4297      	cmp	r7, r2
 800b87a:	d3f5      	bcc.n	800b868 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xe4>
 800b87c:	4005      	ands	r5, r0
 800b87e:	b2ed      	uxtb	r5, r5
 800b880:	e78a      	b.n	800b798 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 800b882:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800b884:	f104 0130 	add.w	r1, r4, #48	; 0x30
 800b888:	4630      	mov	r0, r6
 800b88a:	f002 fe63 	bl	800e554 <ucdr_serialize_sequence_uint8_t>
 800b88e:	4005      	ands	r5, r0
 800b890:	4628      	mov	r0, r5
 800b892:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b896:	2500      	movs	r5, #0
 800b898:	e77e      	b.n	800b798 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 800b89a:	4028      	ands	r0, r5
 800b89c:	b2c5      	uxtb	r5, r0
 800b89e:	e77b      	b.n	800b798 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>

0800b8a0 <uxr_serialize_OBJK_Publisher_Binary>:
 800b8a0:	b570      	push	{r4, r5, r6, lr}
 800b8a2:	460d      	mov	r5, r1
 800b8a4:	7809      	ldrb	r1, [r1, #0]
 800b8a6:	4606      	mov	r6, r0
 800b8a8:	f7fc ff94 	bl	80087d4 <ucdr_serialize_bool>
 800b8ac:	782b      	ldrb	r3, [r5, #0]
 800b8ae:	4604      	mov	r4, r0
 800b8b0:	b94b      	cbnz	r3, 800b8c6 <uxr_serialize_OBJK_Publisher_Binary+0x26>
 800b8b2:	7a29      	ldrb	r1, [r5, #8]
 800b8b4:	4630      	mov	r0, r6
 800b8b6:	f7fc ff8d 	bl	80087d4 <ucdr_serialize_bool>
 800b8ba:	7a2b      	ldrb	r3, [r5, #8]
 800b8bc:	4004      	ands	r4, r0
 800b8be:	b2e4      	uxtb	r4, r4
 800b8c0:	b943      	cbnz	r3, 800b8d4 <uxr_serialize_OBJK_Publisher_Binary+0x34>
 800b8c2:	4620      	mov	r0, r4
 800b8c4:	bd70      	pop	{r4, r5, r6, pc}
 800b8c6:	6869      	ldr	r1, [r5, #4]
 800b8c8:	4630      	mov	r0, r6
 800b8ca:	f002 fe6f 	bl	800e5ac <ucdr_serialize_string>
 800b8ce:	4004      	ands	r4, r0
 800b8d0:	b2e4      	uxtb	r4, r4
 800b8d2:	e7ee      	b.n	800b8b2 <uxr_serialize_OBJK_Publisher_Binary+0x12>
 800b8d4:	f105 010c 	add.w	r1, r5, #12
 800b8d8:	4630      	mov	r0, r6
 800b8da:	f7ff ff53 	bl	800b784 <uxr_serialize_OBJK_Publisher_Binary_Qos>
 800b8de:	4004      	ands	r4, r0
 800b8e0:	4620      	mov	r0, r4
 800b8e2:	bd70      	pop	{r4, r5, r6, pc}

0800b8e4 <uxr_serialize_OBJK_Endpoint_QosBinary>:
 800b8e4:	e92d 4368 	stmdb	sp!, {r3, r5, r6, r8, r9, lr}
 800b8e8:	4688      	mov	r8, r1
 800b8ea:	8809      	ldrh	r1, [r1, #0]
 800b8ec:	4681      	mov	r9, r0
 800b8ee:	f7fc ffcb 	bl	8008888 <ucdr_serialize_uint16_t>
 800b8f2:	f898 1002 	ldrb.w	r1, [r8, #2]
 800b8f6:	4606      	mov	r6, r0
 800b8f8:	4648      	mov	r0, r9
 800b8fa:	f7fc ff6b 	bl	80087d4 <ucdr_serialize_bool>
 800b8fe:	f898 3002 	ldrb.w	r3, [r8, #2]
 800b902:	4006      	ands	r6, r0
 800b904:	b2f5      	uxtb	r5, r6
 800b906:	b9eb      	cbnz	r3, 800b944 <uxr_serialize_OBJK_Endpoint_QosBinary+0x60>
 800b908:	f898 1006 	ldrb.w	r1, [r8, #6]
 800b90c:	4648      	mov	r0, r9
 800b90e:	f7fc ff61 	bl	80087d4 <ucdr_serialize_bool>
 800b912:	f898 3006 	ldrb.w	r3, [r8, #6]
 800b916:	4005      	ands	r5, r0
 800b918:	bb7b      	cbnz	r3, 800b97a <uxr_serialize_OBJK_Endpoint_QosBinary+0x96>
 800b91a:	f898 100c 	ldrb.w	r1, [r8, #12]
 800b91e:	4648      	mov	r0, r9
 800b920:	f7fc ff58 	bl	80087d4 <ucdr_serialize_bool>
 800b924:	f898 300c 	ldrb.w	r3, [r8, #12]
 800b928:	4005      	ands	r5, r0
 800b92a:	b9f3      	cbnz	r3, 800b96a <uxr_serialize_OBJK_Endpoint_QosBinary+0x86>
 800b92c:	f898 1014 	ldrb.w	r1, [r8, #20]
 800b930:	4648      	mov	r0, r9
 800b932:	f7fc ff4f 	bl	80087d4 <ucdr_serialize_bool>
 800b936:	f898 3014 	ldrb.w	r3, [r8, #20]
 800b93a:	4005      	ands	r5, r0
 800b93c:	b94b      	cbnz	r3, 800b952 <uxr_serialize_OBJK_Endpoint_QosBinary+0x6e>
 800b93e:	4628      	mov	r0, r5
 800b940:	e8bd 8368 	ldmia.w	sp!, {r3, r5, r6, r8, r9, pc}
 800b944:	f8b8 1004 	ldrh.w	r1, [r8, #4]
 800b948:	4648      	mov	r0, r9
 800b94a:	f7fc ff9d 	bl	8008888 <ucdr_serialize_uint16_t>
 800b94e:	4005      	ands	r5, r0
 800b950:	e7da      	b.n	800b908 <uxr_serialize_OBJK_Endpoint_QosBinary+0x24>
 800b952:	f8d8 2018 	ldr.w	r2, [r8, #24]
 800b956:	f108 011c 	add.w	r1, r8, #28
 800b95a:	4648      	mov	r0, r9
 800b95c:	f002 fdfa 	bl	800e554 <ucdr_serialize_sequence_uint8_t>
 800b960:	4028      	ands	r0, r5
 800b962:	b2c5      	uxtb	r5, r0
 800b964:	4628      	mov	r0, r5
 800b966:	e8bd 8368 	ldmia.w	sp!, {r3, r5, r6, r8, r9, pc}
 800b96a:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800b96e:	4648      	mov	r0, r9
 800b970:	f7fd f974 	bl	8008c5c <ucdr_serialize_uint32_t>
 800b974:	4028      	ands	r0, r5
 800b976:	b2c5      	uxtb	r5, r0
 800b978:	e7d8      	b.n	800b92c <uxr_serialize_OBJK_Endpoint_QosBinary+0x48>
 800b97a:	f8d8 1008 	ldr.w	r1, [r8, #8]
 800b97e:	4648      	mov	r0, r9
 800b980:	f7fd f96c 	bl	8008c5c <ucdr_serialize_uint32_t>
 800b984:	4028      	ands	r0, r5
 800b986:	b2c5      	uxtb	r5, r0
 800b988:	e7c7      	b.n	800b91a <uxr_serialize_OBJK_Endpoint_QosBinary+0x36>
 800b98a:	bf00      	nop

0800b98c <uxr_serialize_OBJK_DataWriter_Binary>:
 800b98c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b98e:	2202      	movs	r2, #2
 800b990:	460d      	mov	r5, r1
 800b992:	4606      	mov	r6, r0
 800b994:	f002 fcea 	bl	800e36c <ucdr_serialize_array_uint8_t>
 800b998:	78a9      	ldrb	r1, [r5, #2]
 800b99a:	4604      	mov	r4, r0
 800b99c:	4630      	mov	r0, r6
 800b99e:	f7fc ff19 	bl	80087d4 <ucdr_serialize_bool>
 800b9a2:	78ab      	ldrb	r3, [r5, #2]
 800b9a4:	4004      	ands	r4, r0
 800b9a6:	b2e4      	uxtb	r4, r4
 800b9a8:	b90b      	cbnz	r3, 800b9ae <uxr_serialize_OBJK_DataWriter_Binary+0x22>
 800b9aa:	4620      	mov	r0, r4
 800b9ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b9ae:	f105 0108 	add.w	r1, r5, #8
 800b9b2:	4630      	mov	r0, r6
 800b9b4:	f7ff ff96 	bl	800b8e4 <uxr_serialize_OBJK_Endpoint_QosBinary>
 800b9b8:	f895 102c 	ldrb.w	r1, [r5, #44]	; 0x2c
 800b9bc:	4607      	mov	r7, r0
 800b9be:	4630      	mov	r0, r6
 800b9c0:	f7fc ff08 	bl	80087d4 <ucdr_serialize_bool>
 800b9c4:	f895 302c 	ldrb.w	r3, [r5, #44]	; 0x2c
 800b9c8:	4038      	ands	r0, r7
 800b9ca:	b2c7      	uxtb	r7, r0
 800b9cc:	b913      	cbnz	r3, 800b9d4 <uxr_serialize_OBJK_DataWriter_Binary+0x48>
 800b9ce:	403c      	ands	r4, r7
 800b9d0:	4620      	mov	r0, r4
 800b9d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b9d4:	e9d5 230c 	ldrd	r2, r3, [r5, #48]	; 0x30
 800b9d8:	4630      	mov	r0, r6
 800b9da:	f7fd fb95 	bl	8009108 <ucdr_serialize_uint64_t>
 800b9de:	4007      	ands	r7, r0
 800b9e0:	e7f5      	b.n	800b9ce <uxr_serialize_OBJK_DataWriter_Binary+0x42>
 800b9e2:	bf00      	nop

0800b9e4 <uxr_deserialize_ObjectVariant>:
 800b9e4:	b570      	push	{r4, r5, r6, lr}
 800b9e6:	4605      	mov	r5, r0
 800b9e8:	460e      	mov	r6, r1
 800b9ea:	f7fc ff37 	bl	800885c <ucdr_deserialize_uint8_t>
 800b9ee:	b168      	cbz	r0, 800ba0c <uxr_deserialize_ObjectVariant+0x28>
 800b9f0:	7833      	ldrb	r3, [r6, #0]
 800b9f2:	3b01      	subs	r3, #1
 800b9f4:	4604      	mov	r4, r0
 800b9f6:	2b0d      	cmp	r3, #13
 800b9f8:	d809      	bhi.n	800ba0e <uxr_deserialize_ObjectVariant+0x2a>
 800b9fa:	e8df f003 	tbb	[pc, r3]
 800b9fe:	0a41      	.short	0x0a41
 800ba00:	0a0a2323 	.word	0x0a0a2323
 800ba04:	10080a0a 	.word	0x10080a0a
 800ba08:	565c1010 	.word	0x565c1010
 800ba0c:	2400      	movs	r4, #0
 800ba0e:	4620      	mov	r0, r4
 800ba10:	bd70      	pop	{r4, r5, r6, pc}
 800ba12:	1d31      	adds	r1, r6, #4
 800ba14:	4628      	mov	r0, r5
 800ba16:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ba1a:	f7ff be41 	b.w	800b6a0 <uxr_deserialize_DATAWRITER_Representation>
 800ba1e:	1d31      	adds	r1, r6, #4
 800ba20:	4628      	mov	r0, r5
 800ba22:	f7fc ff1b 	bl	800885c <ucdr_deserialize_uint8_t>
 800ba26:	2800      	cmp	r0, #0
 800ba28:	d0f0      	beq.n	800ba0c <uxr_deserialize_ObjectVariant+0x28>
 800ba2a:	7933      	ldrb	r3, [r6, #4]
 800ba2c:	2b01      	cmp	r3, #1
 800ba2e:	d001      	beq.n	800ba34 <uxr_deserialize_ObjectVariant+0x50>
 800ba30:	2b02      	cmp	r3, #2
 800ba32:	d1ec      	bne.n	800ba0e <uxr_deserialize_ObjectVariant+0x2a>
 800ba34:	68b1      	ldr	r1, [r6, #8]
 800ba36:	4628      	mov	r0, r5
 800ba38:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ba3c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ba40:	f002 bdc4 	b.w	800e5cc <ucdr_deserialize_string>
 800ba44:	1d31      	adds	r1, r6, #4
 800ba46:	4628      	mov	r0, r5
 800ba48:	f7fc ff08 	bl	800885c <ucdr_deserialize_uint8_t>
 800ba4c:	4604      	mov	r4, r0
 800ba4e:	b170      	cbz	r0, 800ba6e <uxr_deserialize_ObjectVariant+0x8a>
 800ba50:	7933      	ldrb	r3, [r6, #4]
 800ba52:	2b02      	cmp	r3, #2
 800ba54:	d04c      	beq.n	800baf0 <uxr_deserialize_ObjectVariant+0x10c>
 800ba56:	2b03      	cmp	r3, #3
 800ba58:	d109      	bne.n	800ba6e <uxr_deserialize_ObjectVariant+0x8a>
 800ba5a:	f106 0308 	add.w	r3, r6, #8
 800ba5e:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ba62:	f106 010c 	add.w	r1, r6, #12
 800ba66:	4628      	mov	r0, r5
 800ba68:	f002 fd86 	bl	800e578 <ucdr_deserialize_sequence_uint8_t>
 800ba6c:	4604      	mov	r4, r0
 800ba6e:	2202      	movs	r2, #2
 800ba70:	f506 7103 	add.w	r1, r6, #524	; 0x20c
 800ba74:	4628      	mov	r0, r5
 800ba76:	f002 fcdd 	bl	800e434 <ucdr_deserialize_array_uint8_t>
 800ba7a:	4020      	ands	r0, r4
 800ba7c:	b2c4      	uxtb	r4, r0
 800ba7e:	e7c6      	b.n	800ba0e <uxr_deserialize_ObjectVariant+0x2a>
 800ba80:	1d31      	adds	r1, r6, #4
 800ba82:	4628      	mov	r0, r5
 800ba84:	f7fc feea 	bl	800885c <ucdr_deserialize_uint8_t>
 800ba88:	4604      	mov	r4, r0
 800ba8a:	b130      	cbz	r0, 800ba9a <uxr_deserialize_ObjectVariant+0xb6>
 800ba8c:	7933      	ldrb	r3, [r6, #4]
 800ba8e:	2b02      	cmp	r3, #2
 800ba90:	d036      	beq.n	800bb00 <uxr_deserialize_ObjectVariant+0x11c>
 800ba92:	2b03      	cmp	r3, #3
 800ba94:	d03c      	beq.n	800bb10 <uxr_deserialize_ObjectVariant+0x12c>
 800ba96:	2b01      	cmp	r3, #1
 800ba98:	d032      	beq.n	800bb00 <uxr_deserialize_ObjectVariant+0x11c>
 800ba9a:	f506 7103 	add.w	r1, r6, #524	; 0x20c
 800ba9e:	4628      	mov	r0, r5
 800baa0:	f7fd fc82 	bl	80093a8 <ucdr_deserialize_int16_t>
 800baa4:	4020      	ands	r0, r4
 800baa6:	b2c4      	uxtb	r4, r0
 800baa8:	e7b1      	b.n	800ba0e <uxr_deserialize_ObjectVariant+0x2a>
 800baaa:	1d31      	adds	r1, r6, #4
 800baac:	4628      	mov	r0, r5
 800baae:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800bab2:	f7ff bcab 	b.w	800b40c <uxr_deserialize_CLIENT_Representation>
 800bab6:	2204      	movs	r2, #4
 800bab8:	18b1      	adds	r1, r6, r2
 800baba:	4628      	mov	r0, r5
 800babc:	f002 fcba 	bl	800e434 <ucdr_deserialize_array_uint8_t>
 800bac0:	2202      	movs	r2, #2
 800bac2:	f106 0108 	add.w	r1, r6, #8
 800bac6:	4604      	mov	r4, r0
 800bac8:	4628      	mov	r0, r5
 800baca:	f002 fcb3 	bl	800e434 <ucdr_deserialize_array_uint8_t>
 800bace:	2202      	movs	r2, #2
 800bad0:	4004      	ands	r4, r0
 800bad2:	f106 010a 	add.w	r1, r6, #10
 800bad6:	4628      	mov	r0, r5
 800bad8:	f002 fcac 	bl	800e434 <ucdr_deserialize_array_uint8_t>
 800badc:	b2e4      	uxtb	r4, r4
 800bade:	4603      	mov	r3, r0
 800bae0:	f106 010c 	add.w	r1, r6, #12
 800bae4:	4628      	mov	r0, r5
 800bae6:	401c      	ands	r4, r3
 800bae8:	f7fc fe8a 	bl	8008800 <ucdr_deserialize_bool>
 800baec:	4004      	ands	r4, r0
 800baee:	e78e      	b.n	800ba0e <uxr_deserialize_ObjectVariant+0x2a>
 800baf0:	68b1      	ldr	r1, [r6, #8]
 800baf2:	f44f 7200 	mov.w	r2, #512	; 0x200
 800baf6:	4628      	mov	r0, r5
 800baf8:	f002 fd68 	bl	800e5cc <ucdr_deserialize_string>
 800bafc:	4604      	mov	r4, r0
 800bafe:	e7b6      	b.n	800ba6e <uxr_deserialize_ObjectVariant+0x8a>
 800bb00:	68b1      	ldr	r1, [r6, #8]
 800bb02:	f44f 7200 	mov.w	r2, #512	; 0x200
 800bb06:	4628      	mov	r0, r5
 800bb08:	f002 fd60 	bl	800e5cc <ucdr_deserialize_string>
 800bb0c:	4604      	mov	r4, r0
 800bb0e:	e7c4      	b.n	800ba9a <uxr_deserialize_ObjectVariant+0xb6>
 800bb10:	f106 0308 	add.w	r3, r6, #8
 800bb14:	f44f 7200 	mov.w	r2, #512	; 0x200
 800bb18:	f106 010c 	add.w	r1, r6, #12
 800bb1c:	4628      	mov	r0, r5
 800bb1e:	f002 fd2b 	bl	800e578 <ucdr_deserialize_sequence_uint8_t>
 800bb22:	4604      	mov	r4, r0
 800bb24:	e7b9      	b.n	800ba9a <uxr_deserialize_ObjectVariant+0xb6>
 800bb26:	bf00      	nop

0800bb28 <uxr_deserialize_BaseObjectRequest>:
 800bb28:	b570      	push	{r4, r5, r6, lr}
 800bb2a:	2202      	movs	r2, #2
 800bb2c:	4605      	mov	r5, r0
 800bb2e:	460e      	mov	r6, r1
 800bb30:	f002 fc80 	bl	800e434 <ucdr_deserialize_array_uint8_t>
 800bb34:	2202      	movs	r2, #2
 800bb36:	4604      	mov	r4, r0
 800bb38:	18b1      	adds	r1, r6, r2
 800bb3a:	4628      	mov	r0, r5
 800bb3c:	f002 fc7a 	bl	800e434 <ucdr_deserialize_array_uint8_t>
 800bb40:	4020      	ands	r0, r4
 800bb42:	b2c0      	uxtb	r0, r0
 800bb44:	bd70      	pop	{r4, r5, r6, pc}
 800bb46:	bf00      	nop

0800bb48 <uxr_serialize_ActivityInfoVariant>:
 800bb48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bb4c:	460d      	mov	r5, r1
 800bb4e:	7809      	ldrb	r1, [r1, #0]
 800bb50:	4607      	mov	r7, r0
 800bb52:	f7fc fe6d 	bl	8008830 <ucdr_serialize_uint8_t>
 800bb56:	4681      	mov	r9, r0
 800bb58:	b138      	cbz	r0, 800bb6a <uxr_serialize_ActivityInfoVariant+0x22>
 800bb5a:	782b      	ldrb	r3, [r5, #0]
 800bb5c:	2b06      	cmp	r3, #6
 800bb5e:	f000 8082 	beq.w	800bc66 <uxr_serialize_ActivityInfoVariant+0x11e>
 800bb62:	2b0d      	cmp	r3, #13
 800bb64:	d016      	beq.n	800bb94 <uxr_serialize_ActivityInfoVariant+0x4c>
 800bb66:	2b05      	cmp	r3, #5
 800bb68:	d002      	beq.n	800bb70 <uxr_serialize_ActivityInfoVariant+0x28>
 800bb6a:	4648      	mov	r0, r9
 800bb6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bb70:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 800bb74:	4638      	mov	r0, r7
 800bb76:	f7fd fb97 	bl	80092a8 <ucdr_serialize_int16_t>
 800bb7a:	e9d5 2304 	ldrd	r2, r3, [r5, #16]
 800bb7e:	4681      	mov	r9, r0
 800bb80:	4638      	mov	r0, r7
 800bb82:	f7fd fac1 	bl	8009108 <ucdr_serialize_uint64_t>
 800bb86:	ea09 0000 	and.w	r0, r9, r0
 800bb8a:	fa5f f980 	uxtb.w	r9, r0
 800bb8e:	4648      	mov	r0, r9
 800bb90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bb94:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 800bb98:	4638      	mov	r0, r7
 800bb9a:	f7fd fb85 	bl	80092a8 <ucdr_serialize_int16_t>
 800bb9e:	68e9      	ldr	r1, [r5, #12]
 800bba0:	4681      	mov	r9, r0
 800bba2:	4638      	mov	r0, r7
 800bba4:	f7fd f85a 	bl	8008c5c <ucdr_serialize_uint32_t>
 800bba8:	68eb      	ldr	r3, [r5, #12]
 800bbaa:	2b00      	cmp	r3, #0
 800bbac:	d0eb      	beq.n	800bb86 <uxr_serialize_ActivityInfoVariant+0x3e>
 800bbae:	b320      	cbz	r0, 800bbfa <uxr_serialize_ActivityInfoVariant+0xb2>
 800bbb0:	f105 080c 	add.w	r8, r5, #12
 800bbb4:	2600      	movs	r6, #0
 800bbb6:	eb06 0a46 	add.w	sl, r6, r6, lsl #1
 800bbba:	eb05 0aca 	add.w	sl, r5, sl, lsl #3
 800bbbe:	f89a 1010 	ldrb.w	r1, [sl, #16]
 800bbc2:	4638      	mov	r0, r7
 800bbc4:	f7fc fe34 	bl	8008830 <ucdr_serialize_uint8_t>
 800bbc8:	2800      	cmp	r0, #0
 800bbca:	d053      	beq.n	800bc74 <uxr_serialize_ActivityInfoVariant+0x12c>
 800bbcc:	f89a 3010 	ldrb.w	r3, [sl, #16]
 800bbd0:	eb06 0146 	add.w	r1, r6, r6, lsl #1
 800bbd4:	0074      	lsls	r4, r6, #1
 800bbd6:	00c9      	lsls	r1, r1, #3
 800bbd8:	2b03      	cmp	r3, #3
 800bbda:	d854      	bhi.n	800bc86 <uxr_serialize_ActivityInfoVariant+0x13e>
 800bbdc:	e8df f003 	tbb	[pc, r3]
 800bbe0:	02102132 	.word	0x02102132
 800bbe4:	4441      	add	r1, r8
 800bbe6:	4638      	mov	r0, r7
 800bbe8:	6889      	ldr	r1, [r1, #8]
 800bbea:	f002 fcdf 	bl	800e5ac <ucdr_serialize_string>
 800bbee:	68ea      	ldr	r2, [r5, #12]
 800bbf0:	3601      	adds	r6, #1
 800bbf2:	4296      	cmp	r6, r2
 800bbf4:	d242      	bcs.n	800bc7c <uxr_serialize_ActivityInfoVariant+0x134>
 800bbf6:	2800      	cmp	r0, #0
 800bbf8:	d1dd      	bne.n	800bbb6 <uxr_serialize_ActivityInfoVariant+0x6e>
 800bbfa:	f04f 0900 	mov.w	r9, #0
 800bbfe:	e7b4      	b.n	800bb6a <uxr_serialize_ActivityInfoVariant+0x22>
 800bc00:	3108      	adds	r1, #8
 800bc02:	4441      	add	r1, r8
 800bc04:	2210      	movs	r2, #16
 800bc06:	4638      	mov	r0, r7
 800bc08:	f002 fbb0 	bl	800e36c <ucdr_serialize_array_uint8_t>
 800bc0c:	4434      	add	r4, r6
 800bc0e:	eb05 03c4 	add.w	r3, r5, r4, lsl #3
 800bc12:	4604      	mov	r4, r0
 800bc14:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800bc16:	4638      	mov	r0, r7
 800bc18:	f7fd f820 	bl	8008c5c <ucdr_serialize_uint32_t>
 800bc1c:	4020      	ands	r0, r4
 800bc1e:	b2c0      	uxtb	r0, r0
 800bc20:	e7e5      	b.n	800bbee <uxr_serialize_ActivityInfoVariant+0xa6>
 800bc22:	3108      	adds	r1, #8
 800bc24:	4441      	add	r1, r8
 800bc26:	2204      	movs	r2, #4
 800bc28:	4638      	mov	r0, r7
 800bc2a:	f002 fb9f 	bl	800e36c <ucdr_serialize_array_uint8_t>
 800bc2e:	4434      	add	r4, r6
 800bc30:	eb05 03c4 	add.w	r3, r5, r4, lsl #3
 800bc34:	4604      	mov	r4, r0
 800bc36:	8b19      	ldrh	r1, [r3, #24]
 800bc38:	4638      	mov	r0, r7
 800bc3a:	f7fc fe25 	bl	8008888 <ucdr_serialize_uint16_t>
 800bc3e:	4020      	ands	r0, r4
 800bc40:	b2c0      	uxtb	r0, r0
 800bc42:	e7d4      	b.n	800bbee <uxr_serialize_ActivityInfoVariant+0xa6>
 800bc44:	3108      	adds	r1, #8
 800bc46:	4441      	add	r1, r8
 800bc48:	2202      	movs	r2, #2
 800bc4a:	4638      	mov	r0, r7
 800bc4c:	f002 fb8e 	bl	800e36c <ucdr_serialize_array_uint8_t>
 800bc50:	4434      	add	r4, r6
 800bc52:	eb05 03c4 	add.w	r3, r5, r4, lsl #3
 800bc56:	4604      	mov	r4, r0
 800bc58:	7d99      	ldrb	r1, [r3, #22]
 800bc5a:	4638      	mov	r0, r7
 800bc5c:	f7fc fde8 	bl	8008830 <ucdr_serialize_uint8_t>
 800bc60:	4020      	ands	r0, r4
 800bc62:	b2c0      	uxtb	r0, r0
 800bc64:	e7c3      	b.n	800bbee <uxr_serialize_ActivityInfoVariant+0xa6>
 800bc66:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 800bc6a:	4638      	mov	r0, r7
 800bc6c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bc70:	f7fd bb1a 	b.w	80092a8 <ucdr_serialize_int16_t>
 800bc74:	68ea      	ldr	r2, [r5, #12]
 800bc76:	3601      	adds	r6, #1
 800bc78:	42b2      	cmp	r2, r6
 800bc7a:	d8be      	bhi.n	800bbfa <uxr_serialize_ActivityInfoVariant+0xb2>
 800bc7c:	ea09 0900 	and.w	r9, r9, r0
 800bc80:	fa5f f989 	uxtb.w	r9, r9
 800bc84:	e771      	b.n	800bb6a <uxr_serialize_ActivityInfoVariant+0x22>
 800bc86:	68eb      	ldr	r3, [r5, #12]
 800bc88:	3601      	adds	r6, #1
 800bc8a:	429e      	cmp	r6, r3
 800bc8c:	f10a 0a18 	add.w	sl, sl, #24
 800bc90:	d395      	bcc.n	800bbbe <uxr_serialize_ActivityInfoVariant+0x76>
 800bc92:	e76a      	b.n	800bb6a <uxr_serialize_ActivityInfoVariant+0x22>

0800bc94 <uxr_deserialize_BaseObjectReply>:
 800bc94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bc98:	2202      	movs	r2, #2
 800bc9a:	4606      	mov	r6, r0
 800bc9c:	460f      	mov	r7, r1
 800bc9e:	f002 fbc9 	bl	800e434 <ucdr_deserialize_array_uint8_t>
 800bca2:	2202      	movs	r2, #2
 800bca4:	18b9      	adds	r1, r7, r2
 800bca6:	4605      	mov	r5, r0
 800bca8:	4630      	mov	r0, r6
 800bcaa:	f002 fbc3 	bl	800e434 <ucdr_deserialize_array_uint8_t>
 800bcae:	1d39      	adds	r1, r7, #4
 800bcb0:	4680      	mov	r8, r0
 800bcb2:	4630      	mov	r0, r6
 800bcb4:	f7fc fdd2 	bl	800885c <ucdr_deserialize_uint8_t>
 800bcb8:	1d79      	adds	r1, r7, #5
 800bcba:	4604      	mov	r4, r0
 800bcbc:	4630      	mov	r0, r6
 800bcbe:	f7fc fdcd 	bl	800885c <ucdr_deserialize_uint8_t>
 800bcc2:	ea05 0508 	and.w	r5, r5, r8
 800bcc6:	402c      	ands	r4, r5
 800bcc8:	4020      	ands	r0, r4
 800bcca:	b2c0      	uxtb	r0, r0
 800bccc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800bcd0 <uxr_serialize_ReadSpecification>:
 800bcd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bcd4:	460e      	mov	r6, r1
 800bcd6:	7809      	ldrb	r1, [r1, #0]
 800bcd8:	4607      	mov	r7, r0
 800bcda:	f7fc fda9 	bl	8008830 <ucdr_serialize_uint8_t>
 800bcde:	7871      	ldrb	r1, [r6, #1]
 800bce0:	4604      	mov	r4, r0
 800bce2:	4638      	mov	r0, r7
 800bce4:	f7fc fda4 	bl	8008830 <ucdr_serialize_uint8_t>
 800bce8:	78b1      	ldrb	r1, [r6, #2]
 800bcea:	4004      	ands	r4, r0
 800bcec:	4638      	mov	r0, r7
 800bcee:	f7fc fd71 	bl	80087d4 <ucdr_serialize_bool>
 800bcf2:	78b3      	ldrb	r3, [r6, #2]
 800bcf4:	b2e4      	uxtb	r4, r4
 800bcf6:	4004      	ands	r4, r0
 800bcf8:	b94b      	cbnz	r3, 800bd0e <uxr_serialize_ReadSpecification+0x3e>
 800bcfa:	7a31      	ldrb	r1, [r6, #8]
 800bcfc:	4638      	mov	r0, r7
 800bcfe:	f7fc fd69 	bl	80087d4 <ucdr_serialize_bool>
 800bd02:	7a33      	ldrb	r3, [r6, #8]
 800bd04:	4004      	ands	r4, r0
 800bd06:	b943      	cbnz	r3, 800bd1a <uxr_serialize_ReadSpecification+0x4a>
 800bd08:	4620      	mov	r0, r4
 800bd0a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bd0e:	6871      	ldr	r1, [r6, #4]
 800bd10:	4638      	mov	r0, r7
 800bd12:	f002 fc4b 	bl	800e5ac <ucdr_serialize_string>
 800bd16:	4004      	ands	r4, r0
 800bd18:	e7ef      	b.n	800bcfa <uxr_serialize_ReadSpecification+0x2a>
 800bd1a:	8971      	ldrh	r1, [r6, #10]
 800bd1c:	4638      	mov	r0, r7
 800bd1e:	f7fc fdb3 	bl	8008888 <ucdr_serialize_uint16_t>
 800bd22:	89b1      	ldrh	r1, [r6, #12]
 800bd24:	4605      	mov	r5, r0
 800bd26:	4638      	mov	r0, r7
 800bd28:	f7fc fdae 	bl	8008888 <ucdr_serialize_uint16_t>
 800bd2c:	89f1      	ldrh	r1, [r6, #14]
 800bd2e:	4005      	ands	r5, r0
 800bd30:	4638      	mov	r0, r7
 800bd32:	f7fc fda9 	bl	8008888 <ucdr_serialize_uint16_t>
 800bd36:	8a31      	ldrh	r1, [r6, #16]
 800bd38:	4680      	mov	r8, r0
 800bd3a:	4638      	mov	r0, r7
 800bd3c:	f7fc fda4 	bl	8008888 <ucdr_serialize_uint16_t>
 800bd40:	b2ed      	uxtb	r5, r5
 800bd42:	4025      	ands	r5, r4
 800bd44:	ea08 0505 	and.w	r5, r8, r5
 800bd48:	ea00 0405 	and.w	r4, r0, r5
 800bd4c:	4620      	mov	r0, r4
 800bd4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bd52:	bf00      	nop

0800bd54 <uxr_serialize_CREATE_CLIENT_Payload>:
 800bd54:	f7ff bb02 	b.w	800b35c <uxr_serialize_CLIENT_Representation>

0800bd58 <uxr_serialize_CREATE_Payload>:
 800bd58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bd5a:	2202      	movs	r2, #2
 800bd5c:	4607      	mov	r7, r0
 800bd5e:	460e      	mov	r6, r1
 800bd60:	f002 fb04 	bl	800e36c <ucdr_serialize_array_uint8_t>
 800bd64:	2202      	movs	r2, #2
 800bd66:	18b1      	adds	r1, r6, r2
 800bd68:	4605      	mov	r5, r0
 800bd6a:	4638      	mov	r0, r7
 800bd6c:	f002 fafe 	bl	800e36c <ucdr_serialize_array_uint8_t>
 800bd70:	7931      	ldrb	r1, [r6, #4]
 800bd72:	4604      	mov	r4, r0
 800bd74:	4638      	mov	r0, r7
 800bd76:	f7fc fd5b 	bl	8008830 <ucdr_serialize_uint8_t>
 800bd7a:	b170      	cbz	r0, 800bd9a <uxr_serialize_CREATE_Payload+0x42>
 800bd7c:	7933      	ldrb	r3, [r6, #4]
 800bd7e:	402c      	ands	r4, r5
 800bd80:	3b01      	subs	r3, #1
 800bd82:	b2e4      	uxtb	r4, r4
 800bd84:	2b0d      	cmp	r3, #13
 800bd86:	d809      	bhi.n	800bd9c <uxr_serialize_CREATE_Payload+0x44>
 800bd88:	e8df f003 	tbb	[pc, r3]
 800bd8c:	23230a4c 	.word	0x23230a4c
 800bd90:	0a0a0a0a 	.word	0x0a0a0a0a
 800bd94:	12121208 	.word	0x12121208
 800bd98:	3e45      	.short	0x3e45
 800bd9a:	2400      	movs	r4, #0
 800bd9c:	4620      	mov	r0, r4
 800bd9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bda0:	f106 0108 	add.w	r1, r6, #8
 800bda4:	4638      	mov	r0, r7
 800bda6:	f7ff fbdf 	bl	800b568 <uxr_serialize_DATAWRITER_Representation>
 800bdaa:	4004      	ands	r4, r0
 800bdac:	4620      	mov	r0, r4
 800bdae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bdb0:	7a31      	ldrb	r1, [r6, #8]
 800bdb2:	4638      	mov	r0, r7
 800bdb4:	f7fc fd3c 	bl	8008830 <ucdr_serialize_uint8_t>
 800bdb8:	2800      	cmp	r0, #0
 800bdba:	d0ee      	beq.n	800bd9a <uxr_serialize_CREATE_Payload+0x42>
 800bdbc:	7a33      	ldrb	r3, [r6, #8]
 800bdbe:	2b01      	cmp	r3, #1
 800bdc0:	d001      	beq.n	800bdc6 <uxr_serialize_CREATE_Payload+0x6e>
 800bdc2:	2b02      	cmp	r3, #2
 800bdc4:	d1ea      	bne.n	800bd9c <uxr_serialize_CREATE_Payload+0x44>
 800bdc6:	68f1      	ldr	r1, [r6, #12]
 800bdc8:	4638      	mov	r0, r7
 800bdca:	f002 fbef 	bl	800e5ac <ucdr_serialize_string>
 800bdce:	4004      	ands	r4, r0
 800bdd0:	e7e4      	b.n	800bd9c <uxr_serialize_CREATE_Payload+0x44>
 800bdd2:	7a31      	ldrb	r1, [r6, #8]
 800bdd4:	4638      	mov	r0, r7
 800bdd6:	f7fc fd2b 	bl	8008830 <ucdr_serialize_uint8_t>
 800bdda:	4605      	mov	r5, r0
 800bddc:	b158      	cbz	r0, 800bdf6 <uxr_serialize_CREATE_Payload+0x9e>
 800bdde:	7a33      	ldrb	r3, [r6, #8]
 800bde0:	2b02      	cmp	r3, #2
 800bde2:	d034      	beq.n	800be4e <uxr_serialize_CREATE_Payload+0xf6>
 800bde4:	2b03      	cmp	r3, #3
 800bde6:	d106      	bne.n	800bdf6 <uxr_serialize_CREATE_Payload+0x9e>
 800bde8:	68f2      	ldr	r2, [r6, #12]
 800bdea:	f106 0110 	add.w	r1, r6, #16
 800bdee:	4638      	mov	r0, r7
 800bdf0:	f002 fbb0 	bl	800e554 <ucdr_serialize_sequence_uint8_t>
 800bdf4:	4605      	mov	r5, r0
 800bdf6:	2202      	movs	r2, #2
 800bdf8:	f506 7104 	add.w	r1, r6, #528	; 0x210
 800bdfc:	4638      	mov	r0, r7
 800bdfe:	f002 fab5 	bl	800e36c <ucdr_serialize_array_uint8_t>
 800be02:	4028      	ands	r0, r5
 800be04:	4004      	ands	r4, r0
 800be06:	e7c9      	b.n	800bd9c <uxr_serialize_CREATE_Payload+0x44>
 800be08:	f106 0108 	add.w	r1, r6, #8
 800be0c:	4638      	mov	r0, r7
 800be0e:	f7ff faa5 	bl	800b35c <uxr_serialize_CLIENT_Representation>
 800be12:	4004      	ands	r4, r0
 800be14:	e7c2      	b.n	800bd9c <uxr_serialize_CREATE_Payload+0x44>
 800be16:	f106 0108 	add.w	r1, r6, #8
 800be1a:	4638      	mov	r0, r7
 800be1c:	f7ff fb5a 	bl	800b4d4 <uxr_serialize_AGENT_Representation>
 800be20:	4004      	ands	r4, r0
 800be22:	e7bb      	b.n	800bd9c <uxr_serialize_CREATE_Payload+0x44>
 800be24:	7a31      	ldrb	r1, [r6, #8]
 800be26:	4638      	mov	r0, r7
 800be28:	f7fc fd02 	bl	8008830 <ucdr_serialize_uint8_t>
 800be2c:	4605      	mov	r5, r0
 800be2e:	b130      	cbz	r0, 800be3e <uxr_serialize_CREATE_Payload+0xe6>
 800be30:	7a33      	ldrb	r3, [r6, #8]
 800be32:	2b02      	cmp	r3, #2
 800be34:	d011      	beq.n	800be5a <uxr_serialize_CREATE_Payload+0x102>
 800be36:	2b03      	cmp	r3, #3
 800be38:	d015      	beq.n	800be66 <uxr_serialize_CREATE_Payload+0x10e>
 800be3a:	2b01      	cmp	r3, #1
 800be3c:	d00d      	beq.n	800be5a <uxr_serialize_CREATE_Payload+0x102>
 800be3e:	f9b6 1210 	ldrsh.w	r1, [r6, #528]	; 0x210
 800be42:	4638      	mov	r0, r7
 800be44:	f7fd fa30 	bl	80092a8 <ucdr_serialize_int16_t>
 800be48:	4028      	ands	r0, r5
 800be4a:	4004      	ands	r4, r0
 800be4c:	e7a6      	b.n	800bd9c <uxr_serialize_CREATE_Payload+0x44>
 800be4e:	68f1      	ldr	r1, [r6, #12]
 800be50:	4638      	mov	r0, r7
 800be52:	f002 fbab 	bl	800e5ac <ucdr_serialize_string>
 800be56:	4605      	mov	r5, r0
 800be58:	e7cd      	b.n	800bdf6 <uxr_serialize_CREATE_Payload+0x9e>
 800be5a:	68f1      	ldr	r1, [r6, #12]
 800be5c:	4638      	mov	r0, r7
 800be5e:	f002 fba5 	bl	800e5ac <ucdr_serialize_string>
 800be62:	4605      	mov	r5, r0
 800be64:	e7eb      	b.n	800be3e <uxr_serialize_CREATE_Payload+0xe6>
 800be66:	68f2      	ldr	r2, [r6, #12]
 800be68:	f106 0110 	add.w	r1, r6, #16
 800be6c:	4638      	mov	r0, r7
 800be6e:	f002 fb71 	bl	800e554 <ucdr_serialize_sequence_uint8_t>
 800be72:	4605      	mov	r5, r0
 800be74:	e7e3      	b.n	800be3e <uxr_serialize_CREATE_Payload+0xe6>
 800be76:	bf00      	nop

0800be78 <uxr_deserialize_GET_INFO_Payload>:
 800be78:	b570      	push	{r4, r5, r6, lr}
 800be7a:	2202      	movs	r2, #2
 800be7c:	4605      	mov	r5, r0
 800be7e:	460e      	mov	r6, r1
 800be80:	f002 fad8 	bl	800e434 <ucdr_deserialize_array_uint8_t>
 800be84:	2202      	movs	r2, #2
 800be86:	18b1      	adds	r1, r6, r2
 800be88:	4604      	mov	r4, r0
 800be8a:	4628      	mov	r0, r5
 800be8c:	f002 fad2 	bl	800e434 <ucdr_deserialize_array_uint8_t>
 800be90:	1d31      	adds	r1, r6, #4
 800be92:	4004      	ands	r4, r0
 800be94:	4628      	mov	r0, r5
 800be96:	f7fd f811 	bl	8008ebc <ucdr_deserialize_uint32_t>
 800be9a:	b2e4      	uxtb	r4, r4
 800be9c:	4020      	ands	r0, r4
 800be9e:	bd70      	pop	{r4, r5, r6, pc}

0800bea0 <uxr_serialize_DELETE_Payload>:
 800bea0:	b570      	push	{r4, r5, r6, lr}
 800bea2:	2202      	movs	r2, #2
 800bea4:	4605      	mov	r5, r0
 800bea6:	460e      	mov	r6, r1
 800bea8:	f002 fa60 	bl	800e36c <ucdr_serialize_array_uint8_t>
 800beac:	2202      	movs	r2, #2
 800beae:	4604      	mov	r4, r0
 800beb0:	18b1      	adds	r1, r6, r2
 800beb2:	4628      	mov	r0, r5
 800beb4:	f002 fa5a 	bl	800e36c <ucdr_serialize_array_uint8_t>
 800beb8:	4020      	ands	r0, r4
 800beba:	b2c0      	uxtb	r0, r0
 800bebc:	bd70      	pop	{r4, r5, r6, pc}
 800bebe:	bf00      	nop

0800bec0 <uxr_deserialize_STATUS_AGENT_Payload>:
 800bec0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bec4:	4605      	mov	r5, r0
 800bec6:	460e      	mov	r6, r1
 800bec8:	f7fc fcc8 	bl	800885c <ucdr_deserialize_uint8_t>
 800becc:	1c71      	adds	r1, r6, #1
 800bece:	4604      	mov	r4, r0
 800bed0:	4628      	mov	r0, r5
 800bed2:	f7fc fcc3 	bl	800885c <ucdr_deserialize_uint8_t>
 800bed6:	2204      	movs	r2, #4
 800bed8:	18b1      	adds	r1, r6, r2
 800beda:	4680      	mov	r8, r0
 800bedc:	4628      	mov	r0, r5
 800bede:	f002 faa9 	bl	800e434 <ucdr_deserialize_array_uint8_t>
 800bee2:	f106 0108 	add.w	r1, r6, #8
 800bee6:	4607      	mov	r7, r0
 800bee8:	2202      	movs	r2, #2
 800beea:	4628      	mov	r0, r5
 800beec:	f002 faa2 	bl	800e434 <ucdr_deserialize_array_uint8_t>
 800bef0:	ea04 0308 	and.w	r3, r4, r8
 800bef4:	b2db      	uxtb	r3, r3
 800bef6:	ea03 0407 	and.w	r4, r3, r7
 800befa:	2202      	movs	r2, #2
 800befc:	4607      	mov	r7, r0
 800befe:	f106 010a 	add.w	r1, r6, #10
 800bf02:	4628      	mov	r0, r5
 800bf04:	f002 fa96 	bl	800e434 <ucdr_deserialize_array_uint8_t>
 800bf08:	f106 010c 	add.w	r1, r6, #12
 800bf0c:	4603      	mov	r3, r0
 800bf0e:	4628      	mov	r0, r5
 800bf10:	461d      	mov	r5, r3
 800bf12:	f7fc fc75 	bl	8008800 <ucdr_deserialize_bool>
 800bf16:	403c      	ands	r4, r7
 800bf18:	4025      	ands	r5, r4
 800bf1a:	4028      	ands	r0, r5
 800bf1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800bf20 <uxr_deserialize_STATUS_Payload>:
 800bf20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bf24:	2202      	movs	r2, #2
 800bf26:	4606      	mov	r6, r0
 800bf28:	460f      	mov	r7, r1
 800bf2a:	f002 fa83 	bl	800e434 <ucdr_deserialize_array_uint8_t>
 800bf2e:	2202      	movs	r2, #2
 800bf30:	18b9      	adds	r1, r7, r2
 800bf32:	4605      	mov	r5, r0
 800bf34:	4630      	mov	r0, r6
 800bf36:	f002 fa7d 	bl	800e434 <ucdr_deserialize_array_uint8_t>
 800bf3a:	1d39      	adds	r1, r7, #4
 800bf3c:	4680      	mov	r8, r0
 800bf3e:	4630      	mov	r0, r6
 800bf40:	f7fc fc8c 	bl	800885c <ucdr_deserialize_uint8_t>
 800bf44:	1d79      	adds	r1, r7, #5
 800bf46:	4604      	mov	r4, r0
 800bf48:	4630      	mov	r0, r6
 800bf4a:	f7fc fc87 	bl	800885c <ucdr_deserialize_uint8_t>
 800bf4e:	ea05 0508 	and.w	r5, r5, r8
 800bf52:	402c      	ands	r4, r5
 800bf54:	4020      	ands	r0, r4
 800bf56:	b2c0      	uxtb	r0, r0
 800bf58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800bf5c <uxr_serialize_INFO_Payload>:
 800bf5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bf60:	2202      	movs	r2, #2
 800bf62:	460c      	mov	r4, r1
 800bf64:	4605      	mov	r5, r0
 800bf66:	f002 fa01 	bl	800e36c <ucdr_serialize_array_uint8_t>
 800bf6a:	2202      	movs	r2, #2
 800bf6c:	18a1      	adds	r1, r4, r2
 800bf6e:	4680      	mov	r8, r0
 800bf70:	4628      	mov	r0, r5
 800bf72:	f002 f9fb 	bl	800e36c <ucdr_serialize_array_uint8_t>
 800bf76:	7921      	ldrb	r1, [r4, #4]
 800bf78:	4607      	mov	r7, r0
 800bf7a:	4628      	mov	r0, r5
 800bf7c:	f7fc fc58 	bl	8008830 <ucdr_serialize_uint8_t>
 800bf80:	7961      	ldrb	r1, [r4, #5]
 800bf82:	4606      	mov	r6, r0
 800bf84:	4628      	mov	r0, r5
 800bf86:	f7fc fc53 	bl	8008830 <ucdr_serialize_uint8_t>
 800bf8a:	ea08 0807 	and.w	r8, r8, r7
 800bf8e:	ea06 0608 	and.w	r6, r6, r8
 800bf92:	4006      	ands	r6, r0
 800bf94:	7a21      	ldrb	r1, [r4, #8]
 800bf96:	4628      	mov	r0, r5
 800bf98:	f7fc fc1c 	bl	80087d4 <ucdr_serialize_bool>
 800bf9c:	7a23      	ldrb	r3, [r4, #8]
 800bf9e:	b2f7      	uxtb	r7, r6
 800bfa0:	4606      	mov	r6, r0
 800bfa2:	b96b      	cbnz	r3, 800bfc0 <uxr_serialize_INFO_Payload+0x64>
 800bfa4:	f894 121c 	ldrb.w	r1, [r4, #540]	; 0x21c
 800bfa8:	4628      	mov	r0, r5
 800bfaa:	f7fc fc13 	bl	80087d4 <ucdr_serialize_bool>
 800bfae:	f894 321c 	ldrb.w	r3, [r4, #540]	; 0x21c
 800bfb2:	4030      	ands	r0, r6
 800bfb4:	b2c6      	uxtb	r6, r0
 800bfb6:	b983      	cbnz	r3, 800bfda <uxr_serialize_INFO_Payload+0x7e>
 800bfb8:	ea06 0007 	and.w	r0, r6, r7
 800bfbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bfc0:	7b21      	ldrb	r1, [r4, #12]
 800bfc2:	4628      	mov	r0, r5
 800bfc4:	f7fc fc34 	bl	8008830 <ucdr_serialize_uint8_t>
 800bfc8:	b188      	cbz	r0, 800bfee <uxr_serialize_INFO_Payload+0x92>
 800bfca:	f104 010c 	add.w	r1, r4, #12
 800bfce:	4628      	mov	r0, r5
 800bfd0:	f7ff faf2 	bl	800b5b8 <uxr_serialize_ObjectVariant.part.0>
 800bfd4:	4030      	ands	r0, r6
 800bfd6:	b2c6      	uxtb	r6, r0
 800bfd8:	e7e4      	b.n	800bfa4 <uxr_serialize_INFO_Payload+0x48>
 800bfda:	f504 7108 	add.w	r1, r4, #544	; 0x220
 800bfde:	4628      	mov	r0, r5
 800bfe0:	f7ff fdb2 	bl	800bb48 <uxr_serialize_ActivityInfoVariant>
 800bfe4:	4006      	ands	r6, r0
 800bfe6:	ea06 0007 	and.w	r0, r6, r7
 800bfea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bfee:	4606      	mov	r6, r0
 800bff0:	e7d8      	b.n	800bfa4 <uxr_serialize_INFO_Payload+0x48>
 800bff2:	bf00      	nop

0800bff4 <uxr_serialize_READ_DATA_Payload>:
 800bff4:	b570      	push	{r4, r5, r6, lr}
 800bff6:	2202      	movs	r2, #2
 800bff8:	4605      	mov	r5, r0
 800bffa:	460e      	mov	r6, r1
 800bffc:	f002 f9b6 	bl	800e36c <ucdr_serialize_array_uint8_t>
 800c000:	2202      	movs	r2, #2
 800c002:	18b1      	adds	r1, r6, r2
 800c004:	4604      	mov	r4, r0
 800c006:	4628      	mov	r0, r5
 800c008:	f002 f9b0 	bl	800e36c <ucdr_serialize_array_uint8_t>
 800c00c:	1d31      	adds	r1, r6, #4
 800c00e:	4004      	ands	r4, r0
 800c010:	4628      	mov	r0, r5
 800c012:	f7ff fe5d 	bl	800bcd0 <uxr_serialize_ReadSpecification>
 800c016:	b2e4      	uxtb	r4, r4
 800c018:	4020      	ands	r0, r4
 800c01a:	bd70      	pop	{r4, r5, r6, pc}

0800c01c <uxr_serialize_WRITE_DATA_Payload_Data>:
 800c01c:	b570      	push	{r4, r5, r6, lr}
 800c01e:	2202      	movs	r2, #2
 800c020:	4605      	mov	r5, r0
 800c022:	460e      	mov	r6, r1
 800c024:	f002 f9a2 	bl	800e36c <ucdr_serialize_array_uint8_t>
 800c028:	2202      	movs	r2, #2
 800c02a:	4604      	mov	r4, r0
 800c02c:	18b1      	adds	r1, r6, r2
 800c02e:	4628      	mov	r0, r5
 800c030:	f002 f99c 	bl	800e36c <ucdr_serialize_array_uint8_t>
 800c034:	4020      	ands	r0, r4
 800c036:	b2c0      	uxtb	r0, r0
 800c038:	bd70      	pop	{r4, r5, r6, pc}
 800c03a:	bf00      	nop

0800c03c <uxr_serialize_ACKNACK_Payload>:
 800c03c:	b570      	push	{r4, r5, r6, lr}
 800c03e:	460c      	mov	r4, r1
 800c040:	460e      	mov	r6, r1
 800c042:	f834 1b02 	ldrh.w	r1, [r4], #2
 800c046:	4605      	mov	r5, r0
 800c048:	f7fc fc1e 	bl	8008888 <ucdr_serialize_uint16_t>
 800c04c:	2202      	movs	r2, #2
 800c04e:	4621      	mov	r1, r4
 800c050:	4604      	mov	r4, r0
 800c052:	4628      	mov	r0, r5
 800c054:	f002 f98a 	bl	800e36c <ucdr_serialize_array_uint8_t>
 800c058:	7931      	ldrb	r1, [r6, #4]
 800c05a:	4004      	ands	r4, r0
 800c05c:	4628      	mov	r0, r5
 800c05e:	f7fc fbe7 	bl	8008830 <ucdr_serialize_uint8_t>
 800c062:	b2e4      	uxtb	r4, r4
 800c064:	4020      	ands	r0, r4
 800c066:	bd70      	pop	{r4, r5, r6, pc}

0800c068 <uxr_deserialize_ACKNACK_Payload>:
 800c068:	b570      	push	{r4, r5, r6, lr}
 800c06a:	4605      	mov	r5, r0
 800c06c:	460e      	mov	r6, r1
 800c06e:	f7fc fd0b 	bl	8008a88 <ucdr_deserialize_uint16_t>
 800c072:	2202      	movs	r2, #2
 800c074:	18b1      	adds	r1, r6, r2
 800c076:	4604      	mov	r4, r0
 800c078:	4628      	mov	r0, r5
 800c07a:	f002 f9db 	bl	800e434 <ucdr_deserialize_array_uint8_t>
 800c07e:	1d31      	adds	r1, r6, #4
 800c080:	4004      	ands	r4, r0
 800c082:	4628      	mov	r0, r5
 800c084:	f7fc fbea 	bl	800885c <ucdr_deserialize_uint8_t>
 800c088:	b2e4      	uxtb	r4, r4
 800c08a:	4020      	ands	r0, r4
 800c08c:	bd70      	pop	{r4, r5, r6, pc}
 800c08e:	bf00      	nop

0800c090 <uxr_serialize_HEARTBEAT_Payload>:
 800c090:	b570      	push	{r4, r5, r6, lr}
 800c092:	460d      	mov	r5, r1
 800c094:	8809      	ldrh	r1, [r1, #0]
 800c096:	4606      	mov	r6, r0
 800c098:	f7fc fbf6 	bl	8008888 <ucdr_serialize_uint16_t>
 800c09c:	8869      	ldrh	r1, [r5, #2]
 800c09e:	4604      	mov	r4, r0
 800c0a0:	4630      	mov	r0, r6
 800c0a2:	f7fc fbf1 	bl	8008888 <ucdr_serialize_uint16_t>
 800c0a6:	7929      	ldrb	r1, [r5, #4]
 800c0a8:	4004      	ands	r4, r0
 800c0aa:	4630      	mov	r0, r6
 800c0ac:	f7fc fbc0 	bl	8008830 <ucdr_serialize_uint8_t>
 800c0b0:	b2e4      	uxtb	r4, r4
 800c0b2:	4020      	ands	r0, r4
 800c0b4:	bd70      	pop	{r4, r5, r6, pc}
 800c0b6:	bf00      	nop

0800c0b8 <uxr_deserialize_HEARTBEAT_Payload>:
 800c0b8:	b570      	push	{r4, r5, r6, lr}
 800c0ba:	4605      	mov	r5, r0
 800c0bc:	460e      	mov	r6, r1
 800c0be:	f7fc fce3 	bl	8008a88 <ucdr_deserialize_uint16_t>
 800c0c2:	1cb1      	adds	r1, r6, #2
 800c0c4:	4604      	mov	r4, r0
 800c0c6:	4628      	mov	r0, r5
 800c0c8:	f7fc fcde 	bl	8008a88 <ucdr_deserialize_uint16_t>
 800c0cc:	1d31      	adds	r1, r6, #4
 800c0ce:	4004      	ands	r4, r0
 800c0d0:	4628      	mov	r0, r5
 800c0d2:	f7fc fbc3 	bl	800885c <ucdr_deserialize_uint8_t>
 800c0d6:	b2e4      	uxtb	r4, r4
 800c0d8:	4020      	ands	r0, r4
 800c0da:	bd70      	pop	{r4, r5, r6, pc}

0800c0dc <uxr_deserialize_TIMESTAMP_REPLY_Payload>:
 800c0dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c0e0:	4605      	mov	r5, r0
 800c0e2:	460e      	mov	r6, r1
 800c0e4:	f7fd fa6c 	bl	80095c0 <ucdr_deserialize_int32_t>
 800c0e8:	1d31      	adds	r1, r6, #4
 800c0ea:	4607      	mov	r7, r0
 800c0ec:	4628      	mov	r0, r5
 800c0ee:	f7fc fee5 	bl	8008ebc <ucdr_deserialize_uint32_t>
 800c0f2:	f106 0108 	add.w	r1, r6, #8
 800c0f6:	4680      	mov	r8, r0
 800c0f8:	4628      	mov	r0, r5
 800c0fa:	f7fd fa61 	bl	80095c0 <ucdr_deserialize_int32_t>
 800c0fe:	f106 010c 	add.w	r1, r6, #12
 800c102:	4604      	mov	r4, r0
 800c104:	4628      	mov	r0, r5
 800c106:	f7fc fed9 	bl	8008ebc <ucdr_deserialize_uint32_t>
 800c10a:	ea07 0708 	and.w	r7, r7, r8
 800c10e:	403c      	ands	r4, r7
 800c110:	f106 0110 	add.w	r1, r6, #16
 800c114:	4004      	ands	r4, r0
 800c116:	4628      	mov	r0, r5
 800c118:	f7fd fa52 	bl	80095c0 <ucdr_deserialize_int32_t>
 800c11c:	f106 0114 	add.w	r1, r6, #20
 800c120:	4607      	mov	r7, r0
 800c122:	4628      	mov	r0, r5
 800c124:	f7fc feca 	bl	8008ebc <ucdr_deserialize_uint32_t>
 800c128:	b2e4      	uxtb	r4, r4
 800c12a:	403c      	ands	r4, r7
 800c12c:	4020      	ands	r0, r4
 800c12e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c132:	bf00      	nop

0800c134 <uxr_deserialize_SampleIdentity>:
 800c134:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c138:	220c      	movs	r2, #12
 800c13a:	4604      	mov	r4, r0
 800c13c:	460d      	mov	r5, r1
 800c13e:	f002 f979 	bl	800e434 <ucdr_deserialize_array_uint8_t>
 800c142:	2203      	movs	r2, #3
 800c144:	f105 010c 	add.w	r1, r5, #12
 800c148:	4607      	mov	r7, r0
 800c14a:	4620      	mov	r0, r4
 800c14c:	f002 f972 	bl	800e434 <ucdr_deserialize_array_uint8_t>
 800c150:	f105 010f 	add.w	r1, r5, #15
 800c154:	4680      	mov	r8, r0
 800c156:	4620      	mov	r0, r4
 800c158:	f7fc fb80 	bl	800885c <ucdr_deserialize_uint8_t>
 800c15c:	f105 0110 	add.w	r1, r5, #16
 800c160:	4606      	mov	r6, r0
 800c162:	4620      	mov	r0, r4
 800c164:	f7fd fa2c 	bl	80095c0 <ucdr_deserialize_int32_t>
 800c168:	f105 0114 	add.w	r1, r5, #20
 800c16c:	4603      	mov	r3, r0
 800c16e:	4620      	mov	r0, r4
 800c170:	ea07 0708 	and.w	r7, r7, r8
 800c174:	461c      	mov	r4, r3
 800c176:	f7fc fea1 	bl	8008ebc <ucdr_deserialize_uint32_t>
 800c17a:	403e      	ands	r6, r7
 800c17c:	4034      	ands	r4, r6
 800c17e:	4020      	ands	r0, r4
 800c180:	b2c0      	uxtb	r0, r0
 800c182:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c186:	bf00      	nop

0800c188 <rcl_convert_rmw_ret_to_rcl_ret>:
 800c188:	280b      	cmp	r0, #11
 800c18a:	dc0d      	bgt.n	800c1a8 <rcl_convert_rmw_ret_to_rcl_ret+0x20>
 800c18c:	2800      	cmp	r0, #0
 800c18e:	db09      	blt.n	800c1a4 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 800c190:	280b      	cmp	r0, #11
 800c192:	d807      	bhi.n	800c1a4 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 800c194:	e8df f000 	tbb	[pc, r0]
 800c198:	07060607 	.word	0x07060607
 800c19c:	06060606 	.word	0x06060606
 800c1a0:	07070606 	.word	0x07070606
 800c1a4:	2001      	movs	r0, #1
 800c1a6:	4770      	bx	lr
 800c1a8:	28cb      	cmp	r0, #203	; 0xcb
 800c1aa:	bf18      	it	ne
 800c1ac:	2001      	movne	r0, #1
 800c1ae:	4770      	bx	lr

0800c1b0 <rcl_get_zero_initialized_context>:
 800c1b0:	4a03      	ldr	r2, [pc, #12]	; (800c1c0 <rcl_get_zero_initialized_context+0x10>)
 800c1b2:	4603      	mov	r3, r0
 800c1b4:	e892 0003 	ldmia.w	r2, {r0, r1}
 800c1b8:	e883 0003 	stmia.w	r3, {r0, r1}
 800c1bc:	4618      	mov	r0, r3
 800c1be:	4770      	bx	lr
 800c1c0:	0801224c 	.word	0x0801224c

0800c1c4 <rcl_context_is_valid>:
 800c1c4:	b118      	cbz	r0, 800c1ce <rcl_context_is_valid+0xa>
 800c1c6:	6840      	ldr	r0, [r0, #4]
 800c1c8:	3800      	subs	r0, #0
 800c1ca:	bf18      	it	ne
 800c1cc:	2001      	movne	r0, #1
 800c1ce:	4770      	bx	lr

0800c1d0 <__cleanup_context>:
 800c1d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c1d4:	4606      	mov	r6, r0
 800c1d6:	6800      	ldr	r0, [r0, #0]
 800c1d8:	2300      	movs	r3, #0
 800c1da:	6073      	str	r3, [r6, #4]
 800c1dc:	2800      	cmp	r0, #0
 800c1de:	d049      	beq.n	800c274 <__cleanup_context+0xa4>
 800c1e0:	6947      	ldr	r7, [r0, #20]
 800c1e2:	f8d0 8004 	ldr.w	r8, [r0, #4]
 800c1e6:	f8d0 9010 	ldr.w	r9, [r0, #16]
 800c1ea:	b137      	cbz	r7, 800c1fa <__cleanup_context+0x2a>
 800c1ec:	3014      	adds	r0, #20
 800c1ee:	f000 f9bb 	bl	800c568 <rcl_init_options_fini>
 800c1f2:	4607      	mov	r7, r0
 800c1f4:	2800      	cmp	r0, #0
 800c1f6:	d144      	bne.n	800c282 <__cleanup_context+0xb2>
 800c1f8:	6830      	ldr	r0, [r6, #0]
 800c1fa:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800c1fc:	b143      	cbz	r3, 800c210 <__cleanup_context+0x40>
 800c1fe:	3028      	adds	r0, #40	; 0x28
 800c200:	f001 fd9a 	bl	800dd38 <rmw_context_fini>
 800c204:	b118      	cbz	r0, 800c20e <__cleanup_context+0x3e>
 800c206:	2f00      	cmp	r7, #0
 800c208:	d03e      	beq.n	800c288 <__cleanup_context+0xb8>
 800c20a:	f7fb fde5 	bl	8007dd8 <rcutils_reset_error>
 800c20e:	6830      	ldr	r0, [r6, #0]
 800c210:	6a03      	ldr	r3, [r0, #32]
 800c212:	b1db      	cbz	r3, 800c24c <__cleanup_context+0x7c>
 800c214:	e9d0 2c06 	ldrd	r2, ip, [r0, #24]
 800c218:	2a01      	cmp	r2, #1
 800c21a:	f17c 0100 	sbcs.w	r1, ip, #0
 800c21e:	db11      	blt.n	800c244 <__cleanup_context+0x74>
 800c220:	2400      	movs	r4, #0
 800c222:	4625      	mov	r5, r4
 800c224:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800c228:	4649      	mov	r1, r9
 800c22a:	b1b8      	cbz	r0, 800c25c <__cleanup_context+0x8c>
 800c22c:	47c0      	blx	r8
 800c22e:	6833      	ldr	r3, [r6, #0]
 800c230:	e9d3 2c06 	ldrd	r2, ip, [r3, #24]
 800c234:	3401      	adds	r4, #1
 800c236:	f145 0500 	adc.w	r5, r5, #0
 800c23a:	4294      	cmp	r4, r2
 800c23c:	eb75 010c 	sbcs.w	r1, r5, ip
 800c240:	6a1b      	ldr	r3, [r3, #32]
 800c242:	dbef      	blt.n	800c224 <__cleanup_context+0x54>
 800c244:	4618      	mov	r0, r3
 800c246:	4649      	mov	r1, r9
 800c248:	47c0      	blx	r8
 800c24a:	6830      	ldr	r0, [r6, #0]
 800c24c:	4649      	mov	r1, r9
 800c24e:	47c0      	blx	r8
 800c250:	2300      	movs	r3, #0
 800c252:	e9c6 3300 	strd	r3, r3, [r6]
 800c256:	4638      	mov	r0, r7
 800c258:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c25c:	3401      	adds	r4, #1
 800c25e:	f145 0500 	adc.w	r5, r5, #0
 800c262:	4294      	cmp	r4, r2
 800c264:	eb75 010c 	sbcs.w	r1, r5, ip
 800c268:	dbdc      	blt.n	800c224 <__cleanup_context+0x54>
 800c26a:	4618      	mov	r0, r3
 800c26c:	4649      	mov	r1, r9
 800c26e:	47c0      	blx	r8
 800c270:	6830      	ldr	r0, [r6, #0]
 800c272:	e7eb      	b.n	800c24c <__cleanup_context+0x7c>
 800c274:	4607      	mov	r7, r0
 800c276:	2300      	movs	r3, #0
 800c278:	e9c6 3300 	strd	r3, r3, [r6]
 800c27c:	4638      	mov	r0, r7
 800c27e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c282:	f7fb fda9 	bl	8007dd8 <rcutils_reset_error>
 800c286:	e7b7      	b.n	800c1f8 <__cleanup_context+0x28>
 800c288:	f7ff ff7e 	bl	800c188 <rcl_convert_rmw_ret_to_rcl_ret>
 800c28c:	4607      	mov	r7, r0
 800c28e:	e7bc      	b.n	800c20a <__cleanup_context+0x3a>

0800c290 <rcl_init>:
 800c290:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c294:	1e05      	subs	r5, r0, #0
 800c296:	b09e      	sub	sp, #120	; 0x78
 800c298:	460e      	mov	r6, r1
 800c29a:	4690      	mov	r8, r2
 800c29c:	461f      	mov	r7, r3
 800c29e:	f340 809c 	ble.w	800c3da <rcl_init+0x14a>
 800c2a2:	2900      	cmp	r1, #0
 800c2a4:	f000 809c 	beq.w	800c3e0 <rcl_init+0x150>
 800c2a8:	f1a1 0e04 	sub.w	lr, r1, #4
 800c2ac:	f04f 0c00 	mov.w	ip, #0
 800c2b0:	f85e 4f04 	ldr.w	r4, [lr, #4]!
 800c2b4:	f10c 0c01 	add.w	ip, ip, #1
 800c2b8:	2c00      	cmp	r4, #0
 800c2ba:	f000 8091 	beq.w	800c3e0 <rcl_init+0x150>
 800c2be:	4565      	cmp	r5, ip
 800c2c0:	d1f6      	bne.n	800c2b0 <rcl_init+0x20>
 800c2c2:	f1b8 0f00 	cmp.w	r8, #0
 800c2c6:	f000 808b 	beq.w	800c3e0 <rcl_init+0x150>
 800c2ca:	f8d8 4000 	ldr.w	r4, [r8]
 800c2ce:	2c00      	cmp	r4, #0
 800c2d0:	f000 8086 	beq.w	800c3e0 <rcl_init+0x150>
 800c2d4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800c2d6:	f10d 0c64 	add.w	ip, sp, #100	; 0x64
 800c2da:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800c2de:	6823      	ldr	r3, [r4, #0]
 800c2e0:	f8cc 3000 	str.w	r3, [ip]
 800c2e4:	a819      	add	r0, sp, #100	; 0x64
 800c2e6:	f7fb fd53 	bl	8007d90 <rcutils_allocator_is_valid>
 800c2ea:	2800      	cmp	r0, #0
 800c2ec:	d078      	beq.n	800c3e0 <rcl_init+0x150>
 800c2ee:	2f00      	cmp	r7, #0
 800c2f0:	d076      	beq.n	800c3e0 <rcl_init+0x150>
 800c2f2:	683b      	ldr	r3, [r7, #0]
 800c2f4:	2b00      	cmp	r3, #0
 800c2f6:	d178      	bne.n	800c3ea <rcl_init+0x15a>
 800c2f8:	e9dd 321c 	ldrd	r3, r2, [sp, #112]	; 0x70
 800c2fc:	2178      	movs	r1, #120	; 0x78
 800c2fe:	2001      	movs	r0, #1
 800c300:	4798      	blx	r3
 800c302:	4604      	mov	r4, r0
 800c304:	6038      	str	r0, [r7, #0]
 800c306:	2800      	cmp	r0, #0
 800c308:	f000 80b6 	beq.w	800c478 <rcl_init+0x1e8>
 800c30c:	a802      	add	r0, sp, #8
 800c30e:	f001 f957 	bl	800d5c0 <rmw_get_zero_initialized_context>
 800c312:	a902      	add	r1, sp, #8
 800c314:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800c318:	2250      	movs	r2, #80	; 0x50
 800c31a:	ac19      	add	r4, sp, #100	; 0x64
 800c31c:	f004 faec 	bl	80108f8 <memcpy>
 800c320:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800c322:	f8d7 e000 	ldr.w	lr, [r7]
 800c326:	46f4      	mov	ip, lr
 800c328:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800c32c:	6823      	ldr	r3, [r4, #0]
 800c32e:	f8cc 3000 	str.w	r3, [ip]
 800c332:	f10e 0114 	add.w	r1, lr, #20
 800c336:	4640      	mov	r0, r8
 800c338:	f000 f940 	bl	800c5bc <rcl_init_options_copy>
 800c33c:	4604      	mov	r4, r0
 800c33e:	2800      	cmp	r0, #0
 800c340:	d144      	bne.n	800c3cc <rcl_init+0x13c>
 800c342:	f8d7 9000 	ldr.w	r9, [r7]
 800c346:	ea4f 78e5 	mov.w	r8, r5, asr #31
 800c34a:	f8c9 0020 	str.w	r0, [r9, #32]
 800c34e:	f8c9 5018 	str.w	r5, [r9, #24]
 800c352:	f8c9 801c 	str.w	r8, [r9, #28]
 800c356:	2d00      	cmp	r5, #0
 800c358:	d04e      	beq.n	800c3f8 <rcl_init+0x168>
 800c35a:	2e00      	cmp	r6, #0
 800c35c:	d04c      	beq.n	800c3f8 <rcl_init+0x168>
 800c35e:	e9dd 321c 	ldrd	r3, r2, [sp, #112]	; 0x70
 800c362:	2104      	movs	r1, #4
 800c364:	4628      	mov	r0, r5
 800c366:	4798      	blx	r3
 800c368:	f8c9 0020 	str.w	r0, [r9, #32]
 800c36c:	f8d7 9000 	ldr.w	r9, [r7]
 800c370:	f8d9 3020 	ldr.w	r3, [r9, #32]
 800c374:	46ca      	mov	sl, r9
 800c376:	b343      	cbz	r3, 800c3ca <rcl_init+0x13a>
 800c378:	2d01      	cmp	r5, #1
 800c37a:	f178 0300 	sbcs.w	r3, r8, #0
 800c37e:	db3b      	blt.n	800c3f8 <rcl_init+0x168>
 800c380:	2400      	movs	r4, #0
 800c382:	3e04      	subs	r6, #4
 800c384:	46a1      	mov	r9, r4
 800c386:	e00b      	b.n	800c3a0 <rcl_init+0x110>
 800c388:	6831      	ldr	r1, [r6, #0]
 800c38a:	f004 fab5 	bl	80108f8 <memcpy>
 800c38e:	3401      	adds	r4, #1
 800c390:	f149 0900 	adc.w	r9, r9, #0
 800c394:	45c8      	cmp	r8, r9
 800c396:	bf08      	it	eq
 800c398:	42a5      	cmpeq	r5, r4
 800c39a:	d02b      	beq.n	800c3f4 <rcl_init+0x164>
 800c39c:	f8d7 a000 	ldr.w	sl, [r7]
 800c3a0:	f856 0f04 	ldr.w	r0, [r6, #4]!
 800c3a4:	f7f3 ff3e 	bl	8000224 <strlen>
 800c3a8:	1c42      	adds	r2, r0, #1
 800c3aa:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800c3ac:	991d      	ldr	r1, [sp, #116]	; 0x74
 800c3ae:	f8da a020 	ldr.w	sl, [sl, #32]
 800c3b2:	9201      	str	r2, [sp, #4]
 800c3b4:	4610      	mov	r0, r2
 800c3b6:	4798      	blx	r3
 800c3b8:	683b      	ldr	r3, [r7, #0]
 800c3ba:	f84a 0024 	str.w	r0, [sl, r4, lsl #2]
 800c3be:	6a1b      	ldr	r3, [r3, #32]
 800c3c0:	9a01      	ldr	r2, [sp, #4]
 800c3c2:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800c3c6:	2800      	cmp	r0, #0
 800c3c8:	d1de      	bne.n	800c388 <rcl_init+0xf8>
 800c3ca:	240a      	movs	r4, #10
 800c3cc:	4638      	mov	r0, r7
 800c3ce:	f7ff feff 	bl	800c1d0 <__cleanup_context>
 800c3d2:	4620      	mov	r0, r4
 800c3d4:	b01e      	add	sp, #120	; 0x78
 800c3d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c3da:	2900      	cmp	r1, #0
 800c3dc:	f43f af71 	beq.w	800c2c2 <rcl_init+0x32>
 800c3e0:	240b      	movs	r4, #11
 800c3e2:	4620      	mov	r0, r4
 800c3e4:	b01e      	add	sp, #120	; 0x78
 800c3e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c3ea:	2464      	movs	r4, #100	; 0x64
 800c3ec:	4620      	mov	r0, r4
 800c3ee:	b01e      	add	sp, #120	; 0x78
 800c3f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c3f4:	f8d7 9000 	ldr.w	r9, [r7]
 800c3f8:	4926      	ldr	r1, [pc, #152]	; (800c494 <rcl_init+0x204>)
 800c3fa:	680b      	ldr	r3, [r1, #0]
 800c3fc:	3301      	adds	r3, #1
 800c3fe:	d036      	beq.n	800c46e <rcl_init+0x1de>
 800c400:	600b      	str	r3, [r1, #0]
 800c402:	461a      	mov	r2, r3
 800c404:	2400      	movs	r4, #0
 800c406:	f8d9 0014 	ldr.w	r0, [r9, #20]
 800c40a:	607b      	str	r3, [r7, #4]
 800c40c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800c40e:	3301      	adds	r3, #1
 800c410:	e9c0 2406 	strd	r2, r4, [r0, #24]
 800c414:	d034      	beq.n	800c480 <rcl_init+0x1f0>
 800c416:	f890 3030 	ldrb.w	r3, [r0, #48]	; 0x30
 800c41a:	b93b      	cbnz	r3, 800c42c <rcl_init+0x19c>
 800c41c:	3030      	adds	r0, #48	; 0x30
 800c41e:	f000 f939 	bl	800c694 <rcl_get_localhost_only>
 800c422:	4604      	mov	r4, r0
 800c424:	2800      	cmp	r0, #0
 800c426:	d1d1      	bne.n	800c3cc <rcl_init+0x13c>
 800c428:	683b      	ldr	r3, [r7, #0]
 800c42a:	6958      	ldr	r0, [r3, #20]
 800c42c:	6b40      	ldr	r0, [r0, #52]	; 0x34
 800c42e:	aa18      	add	r2, sp, #96	; 0x60
 800c430:	a917      	add	r1, sp, #92	; 0x5c
 800c432:	f000 fd81 	bl	800cf38 <rcl_validate_enclave_name>
 800c436:	4604      	mov	r4, r0
 800c438:	2800      	cmp	r0, #0
 800c43a:	d1c7      	bne.n	800c3cc <rcl_init+0x13c>
 800c43c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c43e:	b9eb      	cbnz	r3, 800c47c <rcl_init+0x1ec>
 800c440:	6839      	ldr	r1, [r7, #0]
 800c442:	694b      	ldr	r3, [r1, #20]
 800c444:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800c446:	f103 0228 	add.w	r2, r3, #40	; 0x28
 800c44a:	f000 fc3d 	bl	800ccc8 <rcl_get_security_options_from_environment>
 800c44e:	4604      	mov	r4, r0
 800c450:	2800      	cmp	r0, #0
 800c452:	d1bb      	bne.n	800c3cc <rcl_init+0x13c>
 800c454:	6839      	ldr	r1, [r7, #0]
 800c456:	6948      	ldr	r0, [r1, #20]
 800c458:	3128      	adds	r1, #40	; 0x28
 800c45a:	3018      	adds	r0, #24
 800c45c:	f001 fb36 	bl	800dacc <rmw_init>
 800c460:	4604      	mov	r4, r0
 800c462:	2800      	cmp	r0, #0
 800c464:	d0bd      	beq.n	800c3e2 <rcl_init+0x152>
 800c466:	f7ff fe8f 	bl	800c188 <rcl_convert_rmw_ret_to_rcl_ret>
 800c46a:	4604      	mov	r4, r0
 800c46c:	e7ae      	b.n	800c3cc <rcl_init+0x13c>
 800c46e:	2201      	movs	r2, #1
 800c470:	461c      	mov	r4, r3
 800c472:	600a      	str	r2, [r1, #0]
 800c474:	4613      	mov	r3, r2
 800c476:	e7c6      	b.n	800c406 <rcl_init+0x176>
 800c478:	240a      	movs	r4, #10
 800c47a:	e7b2      	b.n	800c3e2 <rcl_init+0x152>
 800c47c:	2401      	movs	r4, #1
 800c47e:	e7a5      	b.n	800c3cc <rcl_init+0x13c>
 800c480:	3024      	adds	r0, #36	; 0x24
 800c482:	f003 fc4b 	bl	800fd1c <rcl_get_default_domain_id>
 800c486:	4604      	mov	r4, r0
 800c488:	2800      	cmp	r0, #0
 800c48a:	d19f      	bne.n	800c3cc <rcl_init+0x13c>
 800c48c:	683b      	ldr	r3, [r7, #0]
 800c48e:	6958      	ldr	r0, [r3, #20]
 800c490:	e7c1      	b.n	800c416 <rcl_init+0x186>
 800c492:	bf00      	nop
 800c494:	2000db04 	.word	0x2000db04

0800c498 <rcl_get_zero_initialized_init_options>:
 800c498:	2000      	movs	r0, #0
 800c49a:	4770      	bx	lr

0800c49c <rcl_init_options_init>:
 800c49c:	b084      	sub	sp, #16
 800c49e:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c4a0:	b097      	sub	sp, #92	; 0x5c
 800c4a2:	ae1d      	add	r6, sp, #116	; 0x74
 800c4a4:	e886 000e 	stmia.w	r6, {r1, r2, r3}
 800c4a8:	2800      	cmp	r0, #0
 800c4aa:	d058      	beq.n	800c55e <rcl_init_options_init+0xc2>
 800c4ac:	6803      	ldr	r3, [r0, #0]
 800c4ae:	4605      	mov	r5, r0
 800c4b0:	b133      	cbz	r3, 800c4c0 <rcl_init_options_init+0x24>
 800c4b2:	2464      	movs	r4, #100	; 0x64
 800c4b4:	4620      	mov	r0, r4
 800c4b6:	b017      	add	sp, #92	; 0x5c
 800c4b8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800c4bc:	b004      	add	sp, #16
 800c4be:	4770      	bx	lr
 800c4c0:	4630      	mov	r0, r6
 800c4c2:	f7fb fc65 	bl	8007d90 <rcutils_allocator_is_valid>
 800c4c6:	2800      	cmp	r0, #0
 800c4c8:	d049      	beq.n	800c55e <rcl_init_options_init+0xc2>
 800c4ca:	46b4      	mov	ip, r6
 800c4cc:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800c4d0:	ac11      	add	r4, sp, #68	; 0x44
 800c4d2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c4d4:	f8dc 3000 	ldr.w	r3, [ip]
 800c4d8:	6023      	str	r3, [r4, #0]
 800c4da:	9921      	ldr	r1, [sp, #132]	; 0x84
 800c4dc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800c4de:	2050      	movs	r0, #80	; 0x50
 800c4e0:	4798      	blx	r3
 800c4e2:	4604      	mov	r4, r0
 800c4e4:	6028      	str	r0, [r5, #0]
 800c4e6:	2800      	cmp	r0, #0
 800c4e8:	d03b      	beq.n	800c562 <rcl_init_options_init+0xc6>
 800c4ea:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
 800c4ee:	4686      	mov	lr, r0
 800c4f0:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800c4f4:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800c4f8:	f8dc 3000 	ldr.w	r3, [ip]
 800c4fc:	f8ce 3000 	str.w	r3, [lr]
 800c500:	a802      	add	r0, sp, #8
 800c502:	f001 f86d 	bl	800d5e0 <rmw_get_zero_initialized_init_options>
 800c506:	f10d 0e08 	add.w	lr, sp, #8
 800c50a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800c50e:	f104 0c18 	add.w	ip, r4, #24
 800c512:	682f      	ldr	r7, [r5, #0]
 800c514:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800c518:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800c51c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800c520:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800c524:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800c528:	e89e 0003 	ldmia.w	lr, {r0, r1}
 800c52c:	ac20      	add	r4, sp, #128	; 0x80
 800c52e:	e88c 0003 	stmia.w	ip, {r0, r1}
 800c532:	e894 0003 	ldmia.w	r4, {r0, r1}
 800c536:	e88d 0003 	stmia.w	sp, {r0, r1}
 800c53a:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 800c53e:	f107 0018 	add.w	r0, r7, #24
 800c542:	f001 f9cb 	bl	800d8dc <rmw_init_options_init>
 800c546:	4604      	mov	r4, r0
 800c548:	2800      	cmp	r0, #0
 800c54a:	d0b3      	beq.n	800c4b4 <rcl_init_options_init+0x18>
 800c54c:	9921      	ldr	r1, [sp, #132]	; 0x84
 800c54e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800c550:	6828      	ldr	r0, [r5, #0]
 800c552:	4798      	blx	r3
 800c554:	4620      	mov	r0, r4
 800c556:	f7ff fe17 	bl	800c188 <rcl_convert_rmw_ret_to_rcl_ret>
 800c55a:	4604      	mov	r4, r0
 800c55c:	e7aa      	b.n	800c4b4 <rcl_init_options_init+0x18>
 800c55e:	240b      	movs	r4, #11
 800c560:	e7a8      	b.n	800c4b4 <rcl_init_options_init+0x18>
 800c562:	240a      	movs	r4, #10
 800c564:	e7a6      	b.n	800c4b4 <rcl_init_options_init+0x18>
 800c566:	bf00      	nop

0800c568 <rcl_init_options_fini>:
 800c568:	b530      	push	{r4, r5, lr}
 800c56a:	b087      	sub	sp, #28
 800c56c:	b1f0      	cbz	r0, 800c5ac <rcl_init_options_fini+0x44>
 800c56e:	6803      	ldr	r3, [r0, #0]
 800c570:	4604      	mov	r4, r0
 800c572:	b1db      	cbz	r3, 800c5ac <rcl_init_options_fini+0x44>
 800c574:	469c      	mov	ip, r3
 800c576:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800c57a:	f10d 0e04 	add.w	lr, sp, #4
 800c57e:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800c582:	f8dc 3000 	ldr.w	r3, [ip]
 800c586:	f8ce 3000 	str.w	r3, [lr]
 800c58a:	a801      	add	r0, sp, #4
 800c58c:	f7fb fc00 	bl	8007d90 <rcutils_allocator_is_valid>
 800c590:	b160      	cbz	r0, 800c5ac <rcl_init_options_fini+0x44>
 800c592:	6820      	ldr	r0, [r4, #0]
 800c594:	3018      	adds	r0, #24
 800c596:	f001 fa51 	bl	800da3c <rmw_init_options_fini>
 800c59a:	4605      	mov	r5, r0
 800c59c:	b950      	cbnz	r0, 800c5b4 <rcl_init_options_fini+0x4c>
 800c59e:	6820      	ldr	r0, [r4, #0]
 800c5a0:	9b02      	ldr	r3, [sp, #8]
 800c5a2:	9905      	ldr	r1, [sp, #20]
 800c5a4:	4798      	blx	r3
 800c5a6:	4628      	mov	r0, r5
 800c5a8:	b007      	add	sp, #28
 800c5aa:	bd30      	pop	{r4, r5, pc}
 800c5ac:	250b      	movs	r5, #11
 800c5ae:	4628      	mov	r0, r5
 800c5b0:	b007      	add	sp, #28
 800c5b2:	bd30      	pop	{r4, r5, pc}
 800c5b4:	f7ff fde8 	bl	800c188 <rcl_convert_rmw_ret_to_rcl_ret>
 800c5b8:	4605      	mov	r5, r0
 800c5ba:	e7f8      	b.n	800c5ae <rcl_init_options_fini+0x46>

0800c5bc <rcl_init_options_copy>:
 800c5bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c5c0:	b094      	sub	sp, #80	; 0x50
 800c5c2:	2800      	cmp	r0, #0
 800c5c4:	d058      	beq.n	800c678 <rcl_init_options_copy+0xbc>
 800c5c6:	4604      	mov	r4, r0
 800c5c8:	6800      	ldr	r0, [r0, #0]
 800c5ca:	2800      	cmp	r0, #0
 800c5cc:	d054      	beq.n	800c678 <rcl_init_options_copy+0xbc>
 800c5ce:	460e      	mov	r6, r1
 800c5d0:	f7fb fbde 	bl	8007d90 <rcutils_allocator_is_valid>
 800c5d4:	2800      	cmp	r0, #0
 800c5d6:	d04f      	beq.n	800c678 <rcl_init_options_copy+0xbc>
 800c5d8:	2e00      	cmp	r6, #0
 800c5da:	d04d      	beq.n	800c678 <rcl_init_options_copy+0xbc>
 800c5dc:	6833      	ldr	r3, [r6, #0]
 800c5de:	b123      	cbz	r3, 800c5ea <rcl_init_options_copy+0x2e>
 800c5e0:	2464      	movs	r4, #100	; 0x64
 800c5e2:	4620      	mov	r0, r4
 800c5e4:	b014      	add	sp, #80	; 0x50
 800c5e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c5ea:	6827      	ldr	r7, [r4, #0]
 800c5ec:	46bc      	mov	ip, r7
 800c5ee:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800c5f2:	ad0f      	add	r5, sp, #60	; 0x3c
 800c5f4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800c5f6:	f8dc 3000 	ldr.w	r3, [ip]
 800c5fa:	f8d7 8000 	ldr.w	r8, [r7]
 800c5fe:	602b      	str	r3, [r5, #0]
 800c600:	4619      	mov	r1, r3
 800c602:	2050      	movs	r0, #80	; 0x50
 800c604:	47c0      	blx	r8
 800c606:	4605      	mov	r5, r0
 800c608:	6030      	str	r0, [r6, #0]
 800c60a:	b3d0      	cbz	r0, 800c682 <rcl_init_options_copy+0xc6>
 800c60c:	f10d 0c3c 	add.w	ip, sp, #60	; 0x3c
 800c610:	4686      	mov	lr, r0
 800c612:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800c616:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800c61a:	f8dc 3000 	ldr.w	r3, [ip]
 800c61e:	f8ce 3000 	str.w	r3, [lr]
 800c622:	4668      	mov	r0, sp
 800c624:	f000 ffdc 	bl	800d5e0 <rmw_get_zero_initialized_init_options>
 800c628:	46ee      	mov	lr, sp
 800c62a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800c62e:	f105 0c18 	add.w	ip, r5, #24
 800c632:	6824      	ldr	r4, [r4, #0]
 800c634:	6835      	ldr	r5, [r6, #0]
 800c636:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800c63a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800c63e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800c642:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800c646:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800c64a:	e89e 0003 	ldmia.w	lr, {r0, r1}
 800c64e:	e88c 0003 	stmia.w	ip, {r0, r1}
 800c652:	f104 0018 	add.w	r0, r4, #24
 800c656:	f105 0118 	add.w	r1, r5, #24
 800c65a:	f001 f9a7 	bl	800d9ac <rmw_init_options_copy>
 800c65e:	4604      	mov	r4, r0
 800c660:	2800      	cmp	r0, #0
 800c662:	d0be      	beq.n	800c5e2 <rcl_init_options_copy+0x26>
 800c664:	f7fb fba2 	bl	8007dac <rcutils_get_error_string>
 800c668:	f7fb fbb6 	bl	8007dd8 <rcutils_reset_error>
 800c66c:	4630      	mov	r0, r6
 800c66e:	f7ff ff7b 	bl	800c568 <rcl_init_options_fini>
 800c672:	b140      	cbz	r0, 800c686 <rcl_init_options_copy+0xca>
 800c674:	4604      	mov	r4, r0
 800c676:	e7b4      	b.n	800c5e2 <rcl_init_options_copy+0x26>
 800c678:	240b      	movs	r4, #11
 800c67a:	4620      	mov	r0, r4
 800c67c:	b014      	add	sp, #80	; 0x50
 800c67e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c682:	240a      	movs	r4, #10
 800c684:	e7ad      	b.n	800c5e2 <rcl_init_options_copy+0x26>
 800c686:	4620      	mov	r0, r4
 800c688:	b014      	add	sp, #80	; 0x50
 800c68a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c68e:	f7ff bd7b 	b.w	800c188 <rcl_convert_rmw_ret_to_rcl_ret>
 800c692:	bf00      	nop

0800c694 <rcl_get_localhost_only>:
 800c694:	b510      	push	{r4, lr}
 800c696:	b082      	sub	sp, #8
 800c698:	2300      	movs	r3, #0
 800c69a:	9301      	str	r3, [sp, #4]
 800c69c:	b1b8      	cbz	r0, 800c6ce <rcl_get_localhost_only+0x3a>
 800c69e:	4604      	mov	r4, r0
 800c6a0:	a901      	add	r1, sp, #4
 800c6a2:	480c      	ldr	r0, [pc, #48]	; (800c6d4 <rcl_get_localhost_only+0x40>)
 800c6a4:	f000 fc90 	bl	800cfc8 <rcutils_get_env>
 800c6a8:	b110      	cbz	r0, 800c6b0 <rcl_get_localhost_only+0x1c>
 800c6aa:	2001      	movs	r0, #1
 800c6ac:	b002      	add	sp, #8
 800c6ae:	bd10      	pop	{r4, pc}
 800c6b0:	9b01      	ldr	r3, [sp, #4]
 800c6b2:	b113      	cbz	r3, 800c6ba <rcl_get_localhost_only+0x26>
 800c6b4:	781a      	ldrb	r2, [r3, #0]
 800c6b6:	2a31      	cmp	r2, #49	; 0x31
 800c6b8:	d004      	beq.n	800c6c4 <rcl_get_localhost_only+0x30>
 800c6ba:	2302      	movs	r3, #2
 800c6bc:	2000      	movs	r0, #0
 800c6be:	7023      	strb	r3, [r4, #0]
 800c6c0:	b002      	add	sp, #8
 800c6c2:	bd10      	pop	{r4, pc}
 800c6c4:	785b      	ldrb	r3, [r3, #1]
 800c6c6:	2b00      	cmp	r3, #0
 800c6c8:	d1f7      	bne.n	800c6ba <rcl_get_localhost_only+0x26>
 800c6ca:	2301      	movs	r3, #1
 800c6cc:	e7f6      	b.n	800c6bc <rcl_get_localhost_only+0x28>
 800c6ce:	200b      	movs	r0, #11
 800c6d0:	b002      	add	sp, #8
 800c6d2:	bd10      	pop	{r4, pc}
 800c6d4:	08012254 	.word	0x08012254

0800c6d8 <rcl_get_zero_initialized_node>:
 800c6d8:	4a03      	ldr	r2, [pc, #12]	; (800c6e8 <rcl_get_zero_initialized_node+0x10>)
 800c6da:	4603      	mov	r3, r0
 800c6dc:	e892 0003 	ldmia.w	r2, {r0, r1}
 800c6e0:	e883 0003 	stmia.w	r3, {r0, r1}
 800c6e4:	4618      	mov	r0, r3
 800c6e6:	4770      	bx	lr
 800c6e8:	0801227c 	.word	0x0801227c

0800c6ec <rcl_node_init>:
 800c6ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c6f0:	b0a9      	sub	sp, #164	; 0xa4
 800c6f2:	4604      	mov	r4, r0
 800c6f4:	f8dd 80c8 	ldr.w	r8, [sp, #200]	; 0xc8
 800c6f8:	a823      	add	r0, sp, #140	; 0x8c
 800c6fa:	460e      	mov	r6, r1
 800c6fc:	4615      	mov	r5, r2
 800c6fe:	461f      	mov	r7, r3
 800c700:	f003 fd34 	bl	801016c <rcl_guard_condition_get_default_options>
 800c704:	f1b8 0f00 	cmp.w	r8, #0
 800c708:	f000 80e6 	beq.w	800c8d8 <rcl_node_init+0x1ec>
 800c70c:	4640      	mov	r0, r8
 800c70e:	f7fb fb3f 	bl	8007d90 <rcutils_allocator_is_valid>
 800c712:	2800      	cmp	r0, #0
 800c714:	f000 80e0 	beq.w	800c8d8 <rcl_node_init+0x1ec>
 800c718:	2e00      	cmp	r6, #0
 800c71a:	f000 80dd 	beq.w	800c8d8 <rcl_node_init+0x1ec>
 800c71e:	2d00      	cmp	r5, #0
 800c720:	f000 80da 	beq.w	800c8d8 <rcl_node_init+0x1ec>
 800c724:	2c00      	cmp	r4, #0
 800c726:	f000 80d7 	beq.w	800c8d8 <rcl_node_init+0x1ec>
 800c72a:	f8d4 9004 	ldr.w	r9, [r4, #4]
 800c72e:	f1b9 0f00 	cmp.w	r9, #0
 800c732:	f040 80fd 	bne.w	800c930 <rcl_node_init+0x244>
 800c736:	2f00      	cmp	r7, #0
 800c738:	f000 80ce 	beq.w	800c8d8 <rcl_node_init+0x1ec>
 800c73c:	4638      	mov	r0, r7
 800c73e:	f7ff fd41 	bl	800c1c4 <rcl_context_is_valid>
 800c742:	4682      	mov	sl, r0
 800c744:	2800      	cmp	r0, #0
 800c746:	f000 80cd 	beq.w	800c8e4 <rcl_node_init+0x1f8>
 800c74a:	464a      	mov	r2, r9
 800c74c:	a922      	add	r1, sp, #136	; 0x88
 800c74e:	4630      	mov	r0, r6
 800c750:	f8cd 9088 	str.w	r9, [sp, #136]	; 0x88
 800c754:	f001 f83a 	bl	800d7cc <rmw_validate_node_name>
 800c758:	4681      	mov	r9, r0
 800c75a:	2800      	cmp	r0, #0
 800c75c:	f040 80be 	bne.w	800c8dc <rcl_node_init+0x1f0>
 800c760:	9822      	ldr	r0, [sp, #136]	; 0x88
 800c762:	2800      	cmp	r0, #0
 800c764:	f040 80f0 	bne.w	800c948 <rcl_node_init+0x25c>
 800c768:	4628      	mov	r0, r5
 800c76a:	f7f3 fd5b 	bl	8000224 <strlen>
 800c76e:	2800      	cmp	r0, #0
 800c770:	f040 80bb 	bne.w	800c8ea <rcl_node_init+0x1fe>
 800c774:	4d7c      	ldr	r5, [pc, #496]	; (800c968 <rcl_node_init+0x27c>)
 800c776:	a922      	add	r1, sp, #136	; 0x88
 800c778:	2200      	movs	r2, #0
 800c77a:	4628      	mov	r0, r5
 800c77c:	f001 f808 	bl	800d790 <rmw_validate_namespace>
 800c780:	4681      	mov	r9, r0
 800c782:	2800      	cmp	r0, #0
 800c784:	f040 80aa 	bne.w	800c8dc <rcl_node_init+0x1f0>
 800c788:	4682      	mov	sl, r0
 800c78a:	9822      	ldr	r0, [sp, #136]	; 0x88
 800c78c:	2800      	cmp	r0, #0
 800c78e:	f040 80e0 	bne.w	800c952 <rcl_node_init+0x266>
 800c792:	f8d8 3000 	ldr.w	r3, [r8]
 800c796:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800c79a:	2078      	movs	r0, #120	; 0x78
 800c79c:	4798      	blx	r3
 800c79e:	4681      	mov	r9, r0
 800c7a0:	6060      	str	r0, [r4, #4]
 800c7a2:	2800      	cmp	r0, #0
 800c7a4:	f000 80ca 	beq.w	800c93c <rcl_node_init+0x250>
 800c7a8:	2200      	movs	r2, #0
 800c7aa:	2300      	movs	r3, #0
 800c7ac:	e9c9 231a 	strd	r2, r3, [r9, #104]	; 0x68
 800c7b0:	e9c9 231c 	strd	r2, r3, [r9, #112]	; 0x70
 800c7b4:	a808      	add	r0, sp, #32
 800c7b6:	f000 f907 	bl	800c9c8 <rcl_node_get_default_options>
 800c7ba:	a908      	add	r1, sp, #32
 800c7bc:	4648      	mov	r0, r9
 800c7be:	2268      	movs	r2, #104	; 0x68
 800c7c0:	f004 f89a 	bl	80108f8 <memcpy>
 800c7c4:	6861      	ldr	r1, [r4, #4]
 800c7c6:	6027      	str	r7, [r4, #0]
 800c7c8:	4640      	mov	r0, r8
 800c7ca:	f000 f90b 	bl	800c9e4 <rcl_node_options_copy>
 800c7ce:	2800      	cmp	r0, #0
 800c7d0:	d158      	bne.n	800c884 <rcl_node_init+0x198>
 800c7d2:	4628      	mov	r0, r5
 800c7d4:	f7f3 fd26 	bl	8000224 <strlen>
 800c7d8:	4428      	add	r0, r5
 800c7da:	f810 3c01 	ldrb.w	r3, [r0, #-1]
 800c7de:	e9cd 5603 	strd	r5, r6, [sp, #12]
 800c7e2:	2b2f      	cmp	r3, #47	; 0x2f
 800c7e4:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800c7e8:	9300      	str	r3, [sp, #0]
 800c7ea:	bf0c      	ite	eq
 800c7ec:	4b5f      	ldreq	r3, [pc, #380]	; (800c96c <rcl_node_init+0x280>)
 800c7ee:	4b60      	ldrne	r3, [pc, #384]	; (800c970 <rcl_node_init+0x284>)
 800c7f0:	9302      	str	r3, [sp, #8]
 800c7f2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800c7f6:	9301      	str	r3, [sp, #4]
 800c7f8:	e898 000f 	ldmia.w	r8, {r0, r1, r2, r3}
 800c7fc:	f8d4 9004 	ldr.w	r9, [r4, #4]
 800c800:	f000 fc0a 	bl	800d018 <rcutils_format_string_limit>
 800c804:	6823      	ldr	r3, [r4, #0]
 800c806:	f8c9 0074 	str.w	r0, [r9, #116]	; 0x74
 800c80a:	6818      	ldr	r0, [r3, #0]
 800c80c:	4631      	mov	r1, r6
 800c80e:	3028      	adds	r0, #40	; 0x28
 800c810:	462a      	mov	r2, r5
 800c812:	6866      	ldr	r6, [r4, #4]
 800c814:	f001 fbae 	bl	800df74 <rmw_create_node>
 800c818:	6863      	ldr	r3, [r4, #4]
 800c81a:	66b0      	str	r0, [r6, #104]	; 0x68
 800c81c:	6e98      	ldr	r0, [r3, #104]	; 0x68
 800c81e:	2800      	cmp	r0, #0
 800c820:	d032      	beq.n	800c888 <rcl_node_init+0x19c>
 800c822:	f001 fc3b 	bl	800e09c <rmw_node_get_graph_guard_condition>
 800c826:	4681      	mov	r9, r0
 800c828:	b360      	cbz	r0, 800c884 <rcl_node_init+0x198>
 800c82a:	f8d8 3000 	ldr.w	r3, [r8]
 800c82e:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800c832:	6866      	ldr	r6, [r4, #4]
 800c834:	2008      	movs	r0, #8
 800c836:	4798      	blx	r3
 800c838:	6863      	ldr	r3, [r4, #4]
 800c83a:	66f0      	str	r0, [r6, #108]	; 0x6c
 800c83c:	f8d3 b06c 	ldr.w	fp, [r3, #108]	; 0x6c
 800c840:	f1bb 0f00 	cmp.w	fp, #0
 800c844:	d020      	beq.n	800c888 <rcl_node_init+0x19c>
 800c846:	a806      	add	r0, sp, #24
 800c848:	f003 fc00 	bl	801004c <rcl_get_zero_initialized_guard_condition>
 800c84c:	a806      	add	r0, sp, #24
 800c84e:	c803      	ldmia	r0, {r0, r1}
 800c850:	6863      	ldr	r3, [r4, #4]
 800c852:	46c4      	mov	ip, r8
 800c854:	f8d3 e06c 	ldr.w	lr, [r3, #108]	; 0x6c
 800c858:	e88b 0003 	stmia.w	fp, {r0, r1}
 800c85c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800c860:	ae23      	add	r6, sp, #140	; 0x8c
 800c862:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800c864:	f8dc 3000 	ldr.w	r3, [ip]
 800c868:	6033      	str	r3, [r6, #0]
 800c86a:	ab28      	add	r3, sp, #160	; 0xa0
 800c86c:	e913 000f 	ldmdb	r3, {r0, r1, r2, r3}
 800c870:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800c874:	4649      	mov	r1, r9
 800c876:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800c878:	463a      	mov	r2, r7
 800c87a:	4670      	mov	r0, lr
 800c87c:	f003 fbf0 	bl	8010060 <rcl_guard_condition_init_from_rmw>
 800c880:	4681      	mov	r9, r0
 800c882:	b328      	cbz	r0, 800c8d0 <rcl_node_init+0x1e4>
 800c884:	6863      	ldr	r3, [r4, #4]
 800c886:	b1f3      	cbz	r3, 800c8c6 <rcl_node_init+0x1da>
 800c888:	6f58      	ldr	r0, [r3, #116]	; 0x74
 800c88a:	b128      	cbz	r0, 800c898 <rcl_node_init+0x1ac>
 800c88c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800c890:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800c894:	4798      	blx	r3
 800c896:	6863      	ldr	r3, [r4, #4]
 800c898:	6e98      	ldr	r0, [r3, #104]	; 0x68
 800c89a:	b110      	cbz	r0, 800c8a2 <rcl_node_init+0x1b6>
 800c89c:	f001 fb82 	bl	800dfa4 <rmw_destroy_node>
 800c8a0:	6863      	ldr	r3, [r4, #4]
 800c8a2:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 800c8a4:	b148      	cbz	r0, 800c8ba <rcl_node_init+0x1ce>
 800c8a6:	f003 fc3b 	bl	8010120 <rcl_guard_condition_fini>
 800c8aa:	6863      	ldr	r3, [r4, #4]
 800c8ac:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800c8b0:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 800c8b2:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800c8b6:	4798      	blx	r3
 800c8b8:	6863      	ldr	r3, [r4, #4]
 800c8ba:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800c8be:	4618      	mov	r0, r3
 800c8c0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800c8c4:	4798      	blx	r3
 800c8c6:	2300      	movs	r3, #0
 800c8c8:	e9c4 3300 	strd	r3, r3, [r4]
 800c8cc:	f04f 0901 	mov.w	r9, #1
 800c8d0:	f1ba 0f00 	cmp.w	sl, #0
 800c8d4:	d125      	bne.n	800c922 <rcl_node_init+0x236>
 800c8d6:	e001      	b.n	800c8dc <rcl_node_init+0x1f0>
 800c8d8:	f04f 090b 	mov.w	r9, #11
 800c8dc:	4648      	mov	r0, r9
 800c8de:	b029      	add	sp, #164	; 0xa4
 800c8e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c8e4:	f04f 0965 	mov.w	r9, #101	; 0x65
 800c8e8:	e7f8      	b.n	800c8dc <rcl_node_init+0x1f0>
 800c8ea:	782b      	ldrb	r3, [r5, #0]
 800c8ec:	2b2f      	cmp	r3, #47	; 0x2f
 800c8ee:	f43f af42 	beq.w	800c776 <rcl_node_init+0x8a>
 800c8f2:	9503      	str	r5, [sp, #12]
 800c8f4:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800c8f8:	9300      	str	r3, [sp, #0]
 800c8fa:	4b1e      	ldr	r3, [pc, #120]	; (800c974 <rcl_node_init+0x288>)
 800c8fc:	9302      	str	r3, [sp, #8]
 800c8fe:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800c902:	9301      	str	r3, [sp, #4]
 800c904:	e898 000f 	ldmia.w	r8, {r0, r1, r2, r3}
 800c908:	f000 fb86 	bl	800d018 <rcutils_format_string_limit>
 800c90c:	4605      	mov	r5, r0
 800c90e:	b340      	cbz	r0, 800c962 <rcl_node_init+0x276>
 800c910:	2200      	movs	r2, #0
 800c912:	a922      	add	r1, sp, #136	; 0x88
 800c914:	9222      	str	r2, [sp, #136]	; 0x88
 800c916:	f000 ff3b 	bl	800d790 <rmw_validate_namespace>
 800c91a:	4681      	mov	r9, r0
 800c91c:	2800      	cmp	r0, #0
 800c91e:	f43f af34 	beq.w	800c78a <rcl_node_init+0x9e>
 800c922:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800c926:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800c92a:	4628      	mov	r0, r5
 800c92c:	4798      	blx	r3
 800c92e:	e7d5      	b.n	800c8dc <rcl_node_init+0x1f0>
 800c930:	f04f 0964 	mov.w	r9, #100	; 0x64
 800c934:	4648      	mov	r0, r9
 800c936:	b029      	add	sp, #164	; 0xa4
 800c938:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c93c:	f04f 090a 	mov.w	r9, #10
 800c940:	f1ba 0f00 	cmp.w	sl, #0
 800c944:	d1ed      	bne.n	800c922 <rcl_node_init+0x236>
 800c946:	e7c9      	b.n	800c8dc <rcl_node_init+0x1f0>
 800c948:	f000 ff92 	bl	800d870 <rmw_node_name_validation_result_string>
 800c94c:	f04f 09c9 	mov.w	r9, #201	; 0xc9
 800c950:	e7c4      	b.n	800c8dc <rcl_node_init+0x1f0>
 800c952:	f000 ff2f 	bl	800d7b4 <rmw_namespace_validation_result_string>
 800c956:	f04f 09ca 	mov.w	r9, #202	; 0xca
 800c95a:	f1ba 0f00 	cmp.w	sl, #0
 800c95e:	d1e0      	bne.n	800c922 <rcl_node_init+0x236>
 800c960:	e7bc      	b.n	800c8dc <rcl_node_init+0x1f0>
 800c962:	f04f 090a 	mov.w	r9, #10
 800c966:	e7b9      	b.n	800c8dc <rcl_node_init+0x1f0>
 800c968:	0801226c 	.word	0x0801226c
 800c96c:	080120f0 	.word	0x080120f0
 800c970:	08012274 	.word	0x08012274
 800c974:	08012270 	.word	0x08012270

0800c978 <rcl_node_is_valid>:
 800c978:	b130      	cbz	r0, 800c988 <rcl_node_is_valid+0x10>
 800c97a:	6843      	ldr	r3, [r0, #4]
 800c97c:	b123      	cbz	r3, 800c988 <rcl_node_is_valid+0x10>
 800c97e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c980:	b113      	cbz	r3, 800c988 <rcl_node_is_valid+0x10>
 800c982:	6800      	ldr	r0, [r0, #0]
 800c984:	f7ff bc1e 	b.w	800c1c4 <rcl_context_is_valid>
 800c988:	2000      	movs	r0, #0
 800c98a:	4770      	bx	lr

0800c98c <rcl_node_get_name>:
 800c98c:	b120      	cbz	r0, 800c998 <rcl_node_get_name+0xc>
 800c98e:	6840      	ldr	r0, [r0, #4]
 800c990:	b110      	cbz	r0, 800c998 <rcl_node_get_name+0xc>
 800c992:	6e80      	ldr	r0, [r0, #104]	; 0x68
 800c994:	b100      	cbz	r0, 800c998 <rcl_node_get_name+0xc>
 800c996:	6880      	ldr	r0, [r0, #8]
 800c998:	4770      	bx	lr
 800c99a:	bf00      	nop

0800c99c <rcl_node_get_namespace>:
 800c99c:	b120      	cbz	r0, 800c9a8 <rcl_node_get_namespace+0xc>
 800c99e:	6840      	ldr	r0, [r0, #4]
 800c9a0:	b110      	cbz	r0, 800c9a8 <rcl_node_get_namespace+0xc>
 800c9a2:	6e80      	ldr	r0, [r0, #104]	; 0x68
 800c9a4:	b100      	cbz	r0, 800c9a8 <rcl_node_get_namespace+0xc>
 800c9a6:	68c0      	ldr	r0, [r0, #12]
 800c9a8:	4770      	bx	lr
 800c9aa:	bf00      	nop

0800c9ac <rcl_node_get_options>:
 800c9ac:	b128      	cbz	r0, 800c9ba <rcl_node_get_options+0xe>
 800c9ae:	6840      	ldr	r0, [r0, #4]
 800c9b0:	b118      	cbz	r0, 800c9ba <rcl_node_get_options+0xe>
 800c9b2:	6e83      	ldr	r3, [r0, #104]	; 0x68
 800c9b4:	2b00      	cmp	r3, #0
 800c9b6:	bf08      	it	eq
 800c9b8:	2000      	moveq	r0, #0
 800c9ba:	4770      	bx	lr

0800c9bc <rcl_node_get_rmw_handle>:
 800c9bc:	b110      	cbz	r0, 800c9c4 <rcl_node_get_rmw_handle+0x8>
 800c9be:	6840      	ldr	r0, [r0, #4]
 800c9c0:	b100      	cbz	r0, 800c9c4 <rcl_node_get_rmw_handle+0x8>
 800c9c2:	6e80      	ldr	r0, [r0, #104]	; 0x68
 800c9c4:	4770      	bx	lr
 800c9c6:	bf00      	nop

0800c9c8 <rcl_node_get_default_options>:
 800c9c8:	b510      	push	{r4, lr}
 800c9ca:	2268      	movs	r2, #104	; 0x68
 800c9cc:	4604      	mov	r4, r0
 800c9ce:	2100      	movs	r1, #0
 800c9d0:	f003 ffa0 	bl	8010914 <memset>
 800c9d4:	4620      	mov	r0, r4
 800c9d6:	f7fb f9cd 	bl	8007d74 <rcutils_get_default_allocator>
 800c9da:	2301      	movs	r3, #1
 800c9dc:	7523      	strb	r3, [r4, #20]
 800c9de:	4620      	mov	r0, r4
 800c9e0:	bd10      	pop	{r4, pc}
 800c9e2:	bf00      	nop

0800c9e4 <rcl_node_options_copy>:
 800c9e4:	b1d0      	cbz	r0, 800ca1c <rcl_node_options_copy+0x38>
 800c9e6:	b570      	push	{r4, r5, r6, lr}
 800c9e8:	460c      	mov	r4, r1
 800c9ea:	b1a9      	cbz	r1, 800ca18 <rcl_node_options_copy+0x34>
 800c9ec:	4288      	cmp	r0, r1
 800c9ee:	4684      	mov	ip, r0
 800c9f0:	d012      	beq.n	800ca18 <rcl_node_options_copy+0x34>
 800c9f2:	4605      	mov	r5, r0
 800c9f4:	8a86      	ldrh	r6, [r0, #20]
 800c9f6:	468e      	mov	lr, r1
 800c9f8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800c9fa:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800c9fe:	682b      	ldr	r3, [r5, #0]
 800ca00:	f8ce 3000 	str.w	r3, [lr]
 800ca04:	f10c 0118 	add.w	r1, ip, #24
 800ca08:	2250      	movs	r2, #80	; 0x50
 800ca0a:	82a6      	strh	r6, [r4, #20]
 800ca0c:	f104 0018 	add.w	r0, r4, #24
 800ca10:	f003 ff72 	bl	80108f8 <memcpy>
 800ca14:	2000      	movs	r0, #0
 800ca16:	bd70      	pop	{r4, r5, r6, pc}
 800ca18:	200b      	movs	r0, #11
 800ca1a:	bd70      	pop	{r4, r5, r6, pc}
 800ca1c:	200b      	movs	r0, #11
 800ca1e:	4770      	bx	lr

0800ca20 <rcl_node_resolve_name>:
 800ca20:	b082      	sub	sp, #8
 800ca22:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ca26:	b091      	sub	sp, #68	; 0x44
 800ca28:	ac1a      	add	r4, sp, #104	; 0x68
 800ca2a:	e884 000c 	stmia.w	r4, {r2, r3}
 800ca2e:	f89d 807c 	ldrb.w	r8, [sp, #124]	; 0x7c
 800ca32:	2800      	cmp	r0, #0
 800ca34:	d03b      	beq.n	800caae <rcl_node_resolve_name+0x8e>
 800ca36:	460c      	mov	r4, r1
 800ca38:	4605      	mov	r5, r0
 800ca3a:	f7ff ffb7 	bl	800c9ac <rcl_node_get_options>
 800ca3e:	2800      	cmp	r0, #0
 800ca40:	d037      	beq.n	800cab2 <rcl_node_resolve_name+0x92>
 800ca42:	4628      	mov	r0, r5
 800ca44:	f7ff ffa2 	bl	800c98c <rcl_node_get_name>
 800ca48:	4606      	mov	r6, r0
 800ca4a:	4628      	mov	r0, r5
 800ca4c:	f7ff ffa6 	bl	800c99c <rcl_node_get_namespace>
 800ca50:	f10d 0e68 	add.w	lr, sp, #104	; 0x68
 800ca54:	4681      	mov	r9, r0
 800ca56:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800ca5a:	ad0b      	add	r5, sp, #44	; 0x2c
 800ca5c:	46ac      	mov	ip, r5
 800ca5e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800ca62:	f8de 3000 	ldr.w	r3, [lr]
 800ca66:	f8cc 3000 	str.w	r3, [ip]
 800ca6a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ca6c:	b1fb      	cbz	r3, 800caae <rcl_node_resolve_name+0x8e>
 800ca6e:	468a      	mov	sl, r1
 800ca70:	f8dd b078 	ldr.w	fp, [sp, #120]	; 0x78
 800ca74:	f000 fc28 	bl	800d2c8 <rcutils_get_zero_initialized_string_map>
 800ca78:	ab10      	add	r3, sp, #64	; 0x40
 800ca7a:	9008      	str	r0, [sp, #32]
 800ca7c:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 800ca80:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800ca84:	2100      	movs	r1, #0
 800ca86:	e895 000c 	ldmia.w	r5, {r2, r3}
 800ca8a:	a808      	add	r0, sp, #32
 800ca8c:	f000 fc94 	bl	800d3b8 <rcutils_string_map_init>
 800ca90:	4607      	mov	r7, r0
 800ca92:	b180      	cbz	r0, 800cab6 <rcl_node_resolve_name+0x96>
 800ca94:	f7fb f98a 	bl	8007dac <rcutils_get_error_string>
 800ca98:	f7fb f99e 	bl	8007dd8 <rcutils_reset_error>
 800ca9c:	2f0a      	cmp	r7, #10
 800ca9e:	bf18      	it	ne
 800caa0:	2701      	movne	r7, #1
 800caa2:	4638      	mov	r0, r7
 800caa4:	b011      	add	sp, #68	; 0x44
 800caa6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800caaa:	b002      	add	sp, #8
 800caac:	4770      	bx	lr
 800caae:	270b      	movs	r7, #11
 800cab0:	e7f7      	b.n	800caa2 <rcl_node_resolve_name+0x82>
 800cab2:	2701      	movs	r7, #1
 800cab4:	e7f5      	b.n	800caa2 <rcl_node_resolve_name+0x82>
 800cab6:	9009      	str	r0, [sp, #36]	; 0x24
 800cab8:	9007      	str	r0, [sp, #28]
 800caba:	a808      	add	r0, sp, #32
 800cabc:	f003 fac0 	bl	8010040 <rcl_get_default_topic_name_substitutions>
 800cac0:	4607      	mov	r7, r0
 800cac2:	b1a8      	cbz	r0, 800caf0 <rcl_node_resolve_name+0xd0>
 800cac4:	280a      	cmp	r0, #10
 800cac6:	9c07      	ldr	r4, [sp, #28]
 800cac8:	d000      	beq.n	800cacc <rcl_node_resolve_name+0xac>
 800caca:	2701      	movs	r7, #1
 800cacc:	a808      	add	r0, sp, #32
 800cace:	f000 fcb3 	bl	800d438 <rcutils_string_map_fini>
 800cad2:	2800      	cmp	r0, #0
 800cad4:	d13d      	bne.n	800cb52 <rcl_node_resolve_name+0x132>
 800cad6:	9809      	ldr	r0, [sp, #36]	; 0x24
 800cad8:	4659      	mov	r1, fp
 800cada:	47d0      	blx	sl
 800cadc:	4659      	mov	r1, fp
 800cade:	4620      	mov	r0, r4
 800cae0:	47d0      	blx	sl
 800cae2:	f1b8 0f00 	cmp.w	r8, #0
 800cae6:	d0dc      	beq.n	800caa2 <rcl_node_resolve_name+0x82>
 800cae8:	2f67      	cmp	r7, #103	; 0x67
 800caea:	bf08      	it	eq
 800caec:	2768      	moveq	r7, #104	; 0x68
 800caee:	e7d8      	b.n	800caa2 <rcl_node_resolve_name+0x82>
 800caf0:	ab09      	add	r3, sp, #36	; 0x24
 800caf2:	9305      	str	r3, [sp, #20]
 800caf4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800caf6:	46ec      	mov	ip, sp
 800caf8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800cafc:	682b      	ldr	r3, [r5, #0]
 800cafe:	f8cc 3000 	str.w	r3, [ip]
 800cb02:	464a      	mov	r2, r9
 800cb04:	4631      	mov	r1, r6
 800cb06:	4620      	mov	r0, r4
 800cb08:	ab08      	add	r3, sp, #32
 800cb0a:	f003 f93b 	bl	800fd84 <rcl_expand_topic_name>
 800cb0e:	4607      	mov	r7, r0
 800cb10:	b9b8      	cbnz	r0, 800cb42 <rcl_node_resolve_name+0x122>
 800cb12:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800cb14:	9009      	str	r0, [sp, #36]	; 0x24
 800cb16:	4602      	mov	r2, r0
 800cb18:	a90a      	add	r1, sp, #40	; 0x28
 800cb1a:	4620      	mov	r0, r4
 800cb1c:	f000 fd74 	bl	800d608 <rmw_validate_full_topic_name>
 800cb20:	b988      	cbnz	r0, 800cb46 <rcl_node_resolve_name+0x126>
 800cb22:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800cb24:	b9d5      	cbnz	r5, 800cb5c <rcl_node_resolve_name+0x13c>
 800cb26:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800cb28:	a808      	add	r0, sp, #32
 800cb2a:	601c      	str	r4, [r3, #0]
 800cb2c:	f000 fc84 	bl	800d438 <rcutils_string_map_fini>
 800cb30:	4607      	mov	r7, r0
 800cb32:	b1a8      	cbz	r0, 800cb60 <rcl_node_resolve_name+0x140>
 800cb34:	f7fb f93a 	bl	8007dac <rcutils_get_error_string>
 800cb38:	462c      	mov	r4, r5
 800cb3a:	f7fb f94d 	bl	8007dd8 <rcutils_reset_error>
 800cb3e:	2701      	movs	r7, #1
 800cb40:	e7c9      	b.n	800cad6 <rcl_node_resolve_name+0xb6>
 800cb42:	9c07      	ldr	r4, [sp, #28]
 800cb44:	e7c2      	b.n	800cacc <rcl_node_resolve_name+0xac>
 800cb46:	f7fb f931 	bl	8007dac <rcutils_get_error_string>
 800cb4a:	2701      	movs	r7, #1
 800cb4c:	f7fb f944 	bl	8007dd8 <rcutils_reset_error>
 800cb50:	e7bc      	b.n	800cacc <rcl_node_resolve_name+0xac>
 800cb52:	f7fb f92b 	bl	8007dac <rcutils_get_error_string>
 800cb56:	f7fb f93f 	bl	8007dd8 <rcutils_reset_error>
 800cb5a:	e7bc      	b.n	800cad6 <rcl_node_resolve_name+0xb6>
 800cb5c:	2767      	movs	r7, #103	; 0x67
 800cb5e:	e7b5      	b.n	800cacc <rcl_node_resolve_name+0xac>
 800cb60:	9809      	ldr	r0, [sp, #36]	; 0x24
 800cb62:	4659      	mov	r1, fp
 800cb64:	47d0      	blx	sl
 800cb66:	4659      	mov	r1, fp
 800cb68:	4638      	mov	r0, r7
 800cb6a:	47d0      	blx	sl
 800cb6c:	e799      	b.n	800caa2 <rcl_node_resolve_name+0x82>
 800cb6e:	bf00      	nop

0800cb70 <exact_match_lookup>:
 800cb70:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cb72:	f102 0708 	add.w	r7, r2, #8
 800cb76:	460b      	mov	r3, r1
 800cb78:	4614      	mov	r4, r2
 800cb7a:	4606      	mov	r6, r0
 800cb7c:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 800cb80:	b085      	sub	sp, #20
 800cb82:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800cb86:	4618      	mov	r0, r3
 800cb88:	4919      	ldr	r1, [pc, #100]	; (800cbf0 <exact_match_lookup+0x80>)
 800cb8a:	e894 000c 	ldmia.w	r4, {r2, r3}
 800cb8e:	f000 fa35 	bl	800cffc <rcutils_join_path>
 800cb92:	7833      	ldrb	r3, [r6, #0]
 800cb94:	2b2f      	cmp	r3, #47	; 0x2f
 800cb96:	4605      	mov	r5, r0
 800cb98:	d023      	beq.n	800cbe2 <exact_match_lookup+0x72>
 800cb9a:	f104 030c 	add.w	r3, r4, #12
 800cb9e:	e893 0003 	ldmia.w	r3, {r0, r1}
 800cba2:	e88d 0003 	stmia.w	sp, {r0, r1}
 800cba6:	1c70      	adds	r0, r6, #1
 800cba8:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 800cbac:	f000 fa2c 	bl	800d008 <rcutils_to_native_path>
 800cbb0:	4606      	mov	r6, r0
 800cbb2:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 800cbb6:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800cbba:	4631      	mov	r1, r6
 800cbbc:	e894 000c 	ldmia.w	r4, {r2, r3}
 800cbc0:	4628      	mov	r0, r5
 800cbc2:	f000 fa1b 	bl	800cffc <rcutils_join_path>
 800cbc6:	6862      	ldr	r2, [r4, #4]
 800cbc8:	6921      	ldr	r1, [r4, #16]
 800cbca:	4603      	mov	r3, r0
 800cbcc:	4630      	mov	r0, r6
 800cbce:	461e      	mov	r6, r3
 800cbd0:	4790      	blx	r2
 800cbd2:	4628      	mov	r0, r5
 800cbd4:	6863      	ldr	r3, [r4, #4]
 800cbd6:	6921      	ldr	r1, [r4, #16]
 800cbd8:	4798      	blx	r3
 800cbda:	4635      	mov	r5, r6
 800cbdc:	4628      	mov	r0, r5
 800cbde:	b005      	add	sp, #20
 800cbe0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cbe2:	7873      	ldrb	r3, [r6, #1]
 800cbe4:	2b00      	cmp	r3, #0
 800cbe6:	d1d8      	bne.n	800cb9a <exact_match_lookup+0x2a>
 800cbe8:	4628      	mov	r0, r5
 800cbea:	b005      	add	sp, #20
 800cbec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cbee:	bf00      	nop
 800cbf0:	080122c0 	.word	0x080122c0

0800cbf4 <rcl_get_secure_root>:
 800cbf4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800cbf8:	b085      	sub	sp, #20
 800cbfa:	b168      	cbz	r0, 800cc18 <rcl_get_secure_root+0x24>
 800cbfc:	4607      	mov	r7, r0
 800cbfe:	4608      	mov	r0, r1
 800cc00:	460c      	mov	r4, r1
 800cc02:	f7fb f8c5 	bl	8007d90 <rcutils_allocator_is_valid>
 800cc06:	b138      	cbz	r0, 800cc18 <rcl_get_secure_root+0x24>
 800cc08:	2300      	movs	r3, #0
 800cc0a:	482d      	ldr	r0, [pc, #180]	; (800ccc0 <rcl_get_secure_root+0xcc>)
 800cc0c:	9303      	str	r3, [sp, #12]
 800cc0e:	a903      	add	r1, sp, #12
 800cc10:	f000 f9da 	bl	800cfc8 <rcutils_get_env>
 800cc14:	4605      	mov	r5, r0
 800cc16:	b120      	cbz	r0, 800cc22 <rcl_get_secure_root+0x2e>
 800cc18:	2500      	movs	r5, #0
 800cc1a:	4628      	mov	r0, r5
 800cc1c:	b005      	add	sp, #20
 800cc1e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cc22:	9b03      	ldr	r3, [sp, #12]
 800cc24:	781a      	ldrb	r2, [r3, #0]
 800cc26:	2a00      	cmp	r2, #0
 800cc28:	d0f6      	beq.n	800cc18 <rcl_get_secure_root+0x24>
 800cc2a:	f104 090c 	add.w	r9, r4, #12
 800cc2e:	e899 0003 	ldmia.w	r9, {r0, r1}
 800cc32:	e88d 0003 	stmia.w	sp, {r0, r1}
 800cc36:	4618      	mov	r0, r3
 800cc38:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 800cc3c:	f000 fb06 	bl	800d24c <rcutils_strdup>
 800cc40:	4680      	mov	r8, r0
 800cc42:	2800      	cmp	r0, #0
 800cc44:	d0e8      	beq.n	800cc18 <rcl_get_secure_root+0x24>
 800cc46:	481f      	ldr	r0, [pc, #124]	; (800ccc4 <rcl_get_secure_root+0xd0>)
 800cc48:	9503      	str	r5, [sp, #12]
 800cc4a:	a903      	add	r1, sp, #12
 800cc4c:	f000 f9bc 	bl	800cfc8 <rcutils_get_env>
 800cc50:	b160      	cbz	r0, 800cc6c <rcl_get_secure_root+0x78>
 800cc52:	2600      	movs	r6, #0
 800cc54:	6863      	ldr	r3, [r4, #4]
 800cc56:	6921      	ldr	r1, [r4, #16]
 800cc58:	4630      	mov	r0, r6
 800cc5a:	4798      	blx	r3
 800cc5c:	4640      	mov	r0, r8
 800cc5e:	6863      	ldr	r3, [r4, #4]
 800cc60:	6921      	ldr	r1, [r4, #16]
 800cc62:	4798      	blx	r3
 800cc64:	4628      	mov	r0, r5
 800cc66:	b005      	add	sp, #20
 800cc68:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cc6c:	9b03      	ldr	r3, [sp, #12]
 800cc6e:	781e      	ldrb	r6, [r3, #0]
 800cc70:	b1f6      	cbz	r6, 800ccb0 <rcl_get_secure_root+0xbc>
 800cc72:	e899 0003 	ldmia.w	r9, {r0, r1}
 800cc76:	e88d 0003 	stmia.w	sp, {r0, r1}
 800cc7a:	4618      	mov	r0, r3
 800cc7c:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 800cc80:	f000 fae4 	bl	800d24c <rcutils_strdup>
 800cc84:	4606      	mov	r6, r0
 800cc86:	2800      	cmp	r0, #0
 800cc88:	d0e3      	beq.n	800cc52 <rcl_get_secure_root+0x5e>
 800cc8a:	4622      	mov	r2, r4
 800cc8c:	4641      	mov	r1, r8
 800cc8e:	f7ff ff6f 	bl	800cb70 <exact_match_lookup>
 800cc92:	4605      	mov	r5, r0
 800cc94:	2d00      	cmp	r5, #0
 800cc96:	d0dd      	beq.n	800cc54 <rcl_get_secure_root+0x60>
 800cc98:	4628      	mov	r0, r5
 800cc9a:	f000 f9ad 	bl	800cff8 <rcutils_is_directory>
 800cc9e:	4603      	mov	r3, r0
 800cca0:	2800      	cmp	r0, #0
 800cca2:	d1d7      	bne.n	800cc54 <rcl_get_secure_root+0x60>
 800cca4:	4628      	mov	r0, r5
 800cca6:	6921      	ldr	r1, [r4, #16]
 800cca8:	461d      	mov	r5, r3
 800ccaa:	6863      	ldr	r3, [r4, #4]
 800ccac:	4798      	blx	r3
 800ccae:	e7d1      	b.n	800cc54 <rcl_get_secure_root+0x60>
 800ccb0:	4622      	mov	r2, r4
 800ccb2:	4638      	mov	r0, r7
 800ccb4:	4641      	mov	r1, r8
 800ccb6:	f7ff ff5b 	bl	800cb70 <exact_match_lookup>
 800ccba:	4605      	mov	r5, r0
 800ccbc:	e7ea      	b.n	800cc94 <rcl_get_secure_root+0xa0>
 800ccbe:	bf00      	nop
 800ccc0:	080122cc 	.word	0x080122cc
 800ccc4:	080122e4 	.word	0x080122e4

0800ccc8 <rcl_get_security_options_from_environment>:
 800ccc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cccc:	b082      	sub	sp, #8
 800ccce:	2300      	movs	r3, #0
 800ccd0:	4606      	mov	r6, r0
 800ccd2:	460f      	mov	r7, r1
 800ccd4:	4820      	ldr	r0, [pc, #128]	; (800cd58 <rcl_get_security_options_from_environment+0x90>)
 800ccd6:	9301      	str	r3, [sp, #4]
 800ccd8:	a901      	add	r1, sp, #4
 800ccda:	4690      	mov	r8, r2
 800ccdc:	f000 f974 	bl	800cfc8 <rcutils_get_env>
 800cce0:	b120      	cbz	r0, 800ccec <rcl_get_security_options_from_environment+0x24>
 800cce2:	2501      	movs	r5, #1
 800cce4:	4628      	mov	r0, r5
 800cce6:	b002      	add	sp, #8
 800cce8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ccec:	491b      	ldr	r1, [pc, #108]	; (800cd5c <rcl_get_security_options_from_environment+0x94>)
 800ccee:	4604      	mov	r4, r0
 800ccf0:	9801      	ldr	r0, [sp, #4]
 800ccf2:	f7f3 fa8d 	bl	8000210 <strcmp>
 800ccf6:	4605      	mov	r5, r0
 800ccf8:	b9e8      	cbnz	r0, 800cd36 <rcl_get_security_options_from_environment+0x6e>
 800ccfa:	9001      	str	r0, [sp, #4]
 800ccfc:	f1b8 0f00 	cmp.w	r8, #0
 800cd00:	d020      	beq.n	800cd44 <rcl_get_security_options_from_environment+0x7c>
 800cd02:	4817      	ldr	r0, [pc, #92]	; (800cd60 <rcl_get_security_options_from_environment+0x98>)
 800cd04:	a901      	add	r1, sp, #4
 800cd06:	f000 f95f 	bl	800cfc8 <rcutils_get_env>
 800cd0a:	2800      	cmp	r0, #0
 800cd0c:	d1e9      	bne.n	800cce2 <rcl_get_security_options_from_environment+0x1a>
 800cd0e:	4915      	ldr	r1, [pc, #84]	; (800cd64 <rcl_get_security_options_from_environment+0x9c>)
 800cd10:	9801      	ldr	r0, [sp, #4]
 800cd12:	f7f3 fa7d 	bl	8000210 <strcmp>
 800cd16:	fab0 f080 	clz	r0, r0
 800cd1a:	0940      	lsrs	r0, r0, #5
 800cd1c:	f888 0000 	strb.w	r0, [r8]
 800cd20:	4639      	mov	r1, r7
 800cd22:	4630      	mov	r0, r6
 800cd24:	f7ff ff66 	bl	800cbf4 <rcl_get_secure_root>
 800cd28:	b170      	cbz	r0, 800cd48 <rcl_get_security_options_from_environment+0x80>
 800cd2a:	f8c8 0004 	str.w	r0, [r8, #4]
 800cd2e:	4628      	mov	r0, r5
 800cd30:	b002      	add	sp, #8
 800cd32:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cd36:	4625      	mov	r5, r4
 800cd38:	4628      	mov	r0, r5
 800cd3a:	f888 4000 	strb.w	r4, [r8]
 800cd3e:	b002      	add	sp, #8
 800cd40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cd44:	250b      	movs	r5, #11
 800cd46:	e7cd      	b.n	800cce4 <rcl_get_security_options_from_environment+0x1c>
 800cd48:	f898 5000 	ldrb.w	r5, [r8]
 800cd4c:	f1a5 0501 	sub.w	r5, r5, #1
 800cd50:	fab5 f585 	clz	r5, r5
 800cd54:	096d      	lsrs	r5, r5, #5
 800cd56:	e7c5      	b.n	800cce4 <rcl_get_security_options_from_environment+0x1c>
 800cd58:	08012284 	.word	0x08012284
 800cd5c:	08012298 	.word	0x08012298
 800cd60:	080122a0 	.word	0x080122a0
 800cd64:	080122b8 	.word	0x080122b8

0800cd68 <rcl_get_system_time>:
 800cd68:	4608      	mov	r0, r1
 800cd6a:	f000 bbd9 	b.w	800d520 <rcutils_system_time_now>
 800cd6e:	bf00      	nop

0800cd70 <rcl_get_steady_time>:
 800cd70:	4608      	mov	r0, r1
 800cd72:	f000 bbfd 	b.w	800d570 <rcutils_steady_time_now>
 800cd76:	bf00      	nop

0800cd78 <rcl_get_ros_time>:
 800cd78:	7a03      	ldrb	r3, [r0, #8]
 800cd7a:	b510      	push	{r4, lr}
 800cd7c:	460c      	mov	r4, r1
 800cd7e:	b133      	cbz	r3, 800cd8e <rcl_get_ros_time+0x16>
 800cd80:	2105      	movs	r1, #5
 800cd82:	f000 f8eb 	bl	800cf5c <__atomic_load_8>
 800cd86:	e9c4 0100 	strd	r0, r1, [r4]
 800cd8a:	2000      	movs	r0, #0
 800cd8c:	bd10      	pop	{r4, pc}
 800cd8e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cd92:	4608      	mov	r0, r1
 800cd94:	f000 bbc4 	b.w	800d520 <rcutils_system_time_now>

0800cd98 <rcl_clock_init>:
 800cd98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cd9a:	4605      	mov	r5, r0
 800cd9c:	4610      	mov	r0, r2
 800cd9e:	4614      	mov	r4, r2
 800cda0:	460e      	mov	r6, r1
 800cda2:	f7fa fff5 	bl	8007d90 <rcutils_allocator_is_valid>
 800cda6:	b128      	cbz	r0, 800cdb4 <rcl_clock_init+0x1c>
 800cda8:	2d03      	cmp	r5, #3
 800cdaa:	d803      	bhi.n	800cdb4 <rcl_clock_init+0x1c>
 800cdac:	e8df f005 	tbb	[pc, r5]
 800cdb0:	06532e1d 	.word	0x06532e1d
 800cdb4:	f04f 0c0b 	mov.w	ip, #11
 800cdb8:	4660      	mov	r0, ip
 800cdba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cdbc:	2e00      	cmp	r6, #0
 800cdbe:	d0f9      	beq.n	800cdb4 <rcl_clock_init+0x1c>
 800cdc0:	2c00      	cmp	r4, #0
 800cdc2:	d0f7      	beq.n	800cdb4 <rcl_clock_init+0x1c>
 800cdc4:	2300      	movs	r3, #0
 800cdc6:	e9c6 3301 	strd	r3, r3, [r6, #4]
 800cdca:	f8df e0b4 	ldr.w	lr, [pc, #180]	; 800ce80 <rcl_clock_init+0xe8>
 800cdce:	6133      	str	r3, [r6, #16]
 800cdd0:	f106 0514 	add.w	r5, r6, #20
 800cdd4:	469c      	mov	ip, r3
 800cdd6:	2703      	movs	r7, #3
 800cdd8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800cdda:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800cddc:	6823      	ldr	r3, [r4, #0]
 800cdde:	602b      	str	r3, [r5, #0]
 800cde0:	7037      	strb	r7, [r6, #0]
 800cde2:	f8c6 e00c 	str.w	lr, [r6, #12]
 800cde6:	4660      	mov	r0, ip
 800cde8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cdea:	2e00      	cmp	r6, #0
 800cdec:	d0e2      	beq.n	800cdb4 <rcl_clock_init+0x1c>
 800cdee:	2300      	movs	r3, #0
 800cdf0:	7033      	strb	r3, [r6, #0]
 800cdf2:	e9c6 3301 	strd	r3, r3, [r6, #4]
 800cdf6:	e9c6 3303 	strd	r3, r3, [r6, #12]
 800cdfa:	469c      	mov	ip, r3
 800cdfc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800cdfe:	f106 0514 	add.w	r5, r6, #20
 800ce02:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800ce04:	6823      	ldr	r3, [r4, #0]
 800ce06:	602b      	str	r3, [r5, #0]
 800ce08:	4660      	mov	r0, ip
 800ce0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ce0c:	2e00      	cmp	r6, #0
 800ce0e:	d0d1      	beq.n	800cdb4 <rcl_clock_init+0x1c>
 800ce10:	2c00      	cmp	r4, #0
 800ce12:	d0cf      	beq.n	800cdb4 <rcl_clock_init+0x1c>
 800ce14:	2700      	movs	r7, #0
 800ce16:	7037      	strb	r7, [r6, #0]
 800ce18:	46a4      	mov	ip, r4
 800ce1a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800ce1e:	f106 0514 	add.w	r5, r6, #20
 800ce22:	e9c6 7701 	strd	r7, r7, [r6, #4]
 800ce26:	e9c6 7703 	strd	r7, r7, [r6, #12]
 800ce2a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800ce2c:	f8dc 3000 	ldr.w	r3, [ip]
 800ce30:	602b      	str	r3, [r5, #0]
 800ce32:	6921      	ldr	r1, [r4, #16]
 800ce34:	6823      	ldr	r3, [r4, #0]
 800ce36:	2010      	movs	r0, #16
 800ce38:	4798      	blx	r3
 800ce3a:	6130      	str	r0, [r6, #16]
 800ce3c:	b1d0      	cbz	r0, 800ce74 <rcl_clock_init+0xdc>
 800ce3e:	2200      	movs	r2, #0
 800ce40:	2300      	movs	r3, #0
 800ce42:	e9c0 2300 	strd	r2, r3, [r0]
 800ce46:	2301      	movs	r3, #1
 800ce48:	7207      	strb	r7, [r0, #8]
 800ce4a:	4a0c      	ldr	r2, [pc, #48]	; (800ce7c <rcl_clock_init+0xe4>)
 800ce4c:	7033      	strb	r3, [r6, #0]
 800ce4e:	46bc      	mov	ip, r7
 800ce50:	60f2      	str	r2, [r6, #12]
 800ce52:	4660      	mov	r0, ip
 800ce54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ce56:	2e00      	cmp	r6, #0
 800ce58:	d0ac      	beq.n	800cdb4 <rcl_clock_init+0x1c>
 800ce5a:	2c00      	cmp	r4, #0
 800ce5c:	d0aa      	beq.n	800cdb4 <rcl_clock_init+0x1c>
 800ce5e:	2300      	movs	r3, #0
 800ce60:	e9c6 3301 	strd	r3, r3, [r6, #4]
 800ce64:	f8df e01c 	ldr.w	lr, [pc, #28]	; 800ce84 <rcl_clock_init+0xec>
 800ce68:	6133      	str	r3, [r6, #16]
 800ce6a:	f106 0514 	add.w	r5, r6, #20
 800ce6e:	469c      	mov	ip, r3
 800ce70:	2702      	movs	r7, #2
 800ce72:	e7b1      	b.n	800cdd8 <rcl_clock_init+0x40>
 800ce74:	f04f 0c0a 	mov.w	ip, #10
 800ce78:	e79e      	b.n	800cdb8 <rcl_clock_init+0x20>
 800ce7a:	bf00      	nop
 800ce7c:	0800cd79 	.word	0x0800cd79
 800ce80:	0800cd71 	.word	0x0800cd71
 800ce84:	0800cd69 	.word	0x0800cd69

0800ce88 <rcl_validate_enclave_name_with_size>:
 800ce88:	b378      	cbz	r0, 800ceea <rcl_validate_enclave_name_with_size+0x62>
 800ce8a:	b570      	push	{r4, r5, r6, lr}
 800ce8c:	4615      	mov	r5, r2
 800ce8e:	b0c2      	sub	sp, #264	; 0x108
 800ce90:	b302      	cbz	r2, 800ced4 <rcl_validate_enclave_name_with_size+0x4c>
 800ce92:	461e      	mov	r6, r3
 800ce94:	466a      	mov	r2, sp
 800ce96:	ab01      	add	r3, sp, #4
 800ce98:	460c      	mov	r4, r1
 800ce9a:	f000 fc2b 	bl	800d6f4 <rmw_validate_namespace_with_size>
 800ce9e:	4684      	mov	ip, r0
 800cea0:	b9e8      	cbnz	r0, 800cede <rcl_validate_enclave_name_with_size+0x56>
 800cea2:	9b00      	ldr	r3, [sp, #0]
 800cea4:	b923      	cbnz	r3, 800ceb0 <rcl_validate_enclave_name_with_size+0x28>
 800cea6:	2300      	movs	r3, #0
 800cea8:	602b      	str	r3, [r5, #0]
 800ceaa:	4660      	mov	r0, ip
 800ceac:	b042      	add	sp, #264	; 0x108
 800ceae:	bd70      	pop	{r4, r5, r6, pc}
 800ceb0:	2b07      	cmp	r3, #7
 800ceb2:	d007      	beq.n	800cec4 <rcl_validate_enclave_name_with_size+0x3c>
 800ceb4:	1e5a      	subs	r2, r3, #1
 800ceb6:	2a05      	cmp	r2, #5
 800ceb8:	d833      	bhi.n	800cf22 <rcl_validate_enclave_name_with_size+0x9a>
 800ceba:	e8df f002 	tbb	[pc, r2]
 800cebe:	2c2f      	.short	0x2c2f
 800cec0:	1a232629 	.word	0x1a232629
 800cec4:	2cff      	cmp	r4, #255	; 0xff
 800cec6:	d9ee      	bls.n	800cea6 <rcl_validate_enclave_name_with_size+0x1e>
 800cec8:	602b      	str	r3, [r5, #0]
 800ceca:	2e00      	cmp	r6, #0
 800cecc:	d0ed      	beq.n	800ceaa <rcl_validate_enclave_name_with_size+0x22>
 800cece:	23fe      	movs	r3, #254	; 0xfe
 800ced0:	6033      	str	r3, [r6, #0]
 800ced2:	e7ea      	b.n	800ceaa <rcl_validate_enclave_name_with_size+0x22>
 800ced4:	f04f 0c0b 	mov.w	ip, #11
 800ced8:	4660      	mov	r0, ip
 800ceda:	b042      	add	sp, #264	; 0x108
 800cedc:	bd70      	pop	{r4, r5, r6, pc}
 800cede:	f7ff f953 	bl	800c188 <rcl_convert_rmw_ret_to_rcl_ret>
 800cee2:	4684      	mov	ip, r0
 800cee4:	4660      	mov	r0, ip
 800cee6:	b042      	add	sp, #264	; 0x108
 800cee8:	bd70      	pop	{r4, r5, r6, pc}
 800ceea:	f04f 0c0b 	mov.w	ip, #11
 800ceee:	4660      	mov	r0, ip
 800cef0:	4770      	bx	lr
 800cef2:	2306      	movs	r3, #6
 800cef4:	602b      	str	r3, [r5, #0]
 800cef6:	2e00      	cmp	r6, #0
 800cef8:	d0d7      	beq.n	800ceaa <rcl_validate_enclave_name_with_size+0x22>
 800cefa:	9b01      	ldr	r3, [sp, #4]
 800cefc:	6033      	str	r3, [r6, #0]
 800cefe:	4660      	mov	r0, ip
 800cf00:	b042      	add	sp, #264	; 0x108
 800cf02:	bd70      	pop	{r4, r5, r6, pc}
 800cf04:	2305      	movs	r3, #5
 800cf06:	602b      	str	r3, [r5, #0]
 800cf08:	e7f5      	b.n	800cef6 <rcl_validate_enclave_name_with_size+0x6e>
 800cf0a:	2304      	movs	r3, #4
 800cf0c:	602b      	str	r3, [r5, #0]
 800cf0e:	e7f2      	b.n	800cef6 <rcl_validate_enclave_name_with_size+0x6e>
 800cf10:	2303      	movs	r3, #3
 800cf12:	602b      	str	r3, [r5, #0]
 800cf14:	e7ef      	b.n	800cef6 <rcl_validate_enclave_name_with_size+0x6e>
 800cf16:	2302      	movs	r3, #2
 800cf18:	602b      	str	r3, [r5, #0]
 800cf1a:	e7ec      	b.n	800cef6 <rcl_validate_enclave_name_with_size+0x6e>
 800cf1c:	2301      	movs	r3, #1
 800cf1e:	602b      	str	r3, [r5, #0]
 800cf20:	e7e9      	b.n	800cef6 <rcl_validate_enclave_name_with_size+0x6e>
 800cf22:	4a04      	ldr	r2, [pc, #16]	; (800cf34 <rcl_validate_enclave_name_with_size+0xac>)
 800cf24:	f44f 7180 	mov.w	r1, #256	; 0x100
 800cf28:	a802      	add	r0, sp, #8
 800cf2a:	f000 f963 	bl	800d1f4 <rcutils_snprintf>
 800cf2e:	f04f 0c01 	mov.w	ip, #1
 800cf32:	e7ba      	b.n	800ceaa <rcl_validate_enclave_name_with_size+0x22>
 800cf34:	08012304 	.word	0x08012304

0800cf38 <rcl_validate_enclave_name>:
 800cf38:	b168      	cbz	r0, 800cf56 <rcl_validate_enclave_name+0x1e>
 800cf3a:	b570      	push	{r4, r5, r6, lr}
 800cf3c:	460d      	mov	r5, r1
 800cf3e:	4616      	mov	r6, r2
 800cf40:	4604      	mov	r4, r0
 800cf42:	f7f3 f96f 	bl	8000224 <strlen>
 800cf46:	4633      	mov	r3, r6
 800cf48:	4601      	mov	r1, r0
 800cf4a:	462a      	mov	r2, r5
 800cf4c:	4620      	mov	r0, r4
 800cf4e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800cf52:	f7ff bf99 	b.w	800ce88 <rcl_validate_enclave_name_with_size>
 800cf56:	200b      	movs	r0, #11
 800cf58:	4770      	bx	lr
 800cf5a:	bf00      	nop

0800cf5c <__atomic_load_8>:
 800cf5c:	ea80 4110 	eor.w	r1, r0, r0, lsr #16
 800cf60:	f081 013d 	eor.w	r1, r1, #61	; 0x3d
 800cf64:	4a15      	ldr	r2, [pc, #84]	; (800cfbc <__atomic_load_8+0x60>)
 800cf66:	4b16      	ldr	r3, [pc, #88]	; (800cfc0 <__atomic_load_8+0x64>)
 800cf68:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 800cf6c:	ea81 1111 	eor.w	r1, r1, r1, lsr #4
 800cf70:	fb02 f101 	mul.w	r1, r2, r1
 800cf74:	ea81 31d1 	eor.w	r1, r1, r1, lsr #15
 800cf78:	fba3 2301 	umull	r2, r3, r3, r1
 800cf7c:	091b      	lsrs	r3, r3, #4
 800cf7e:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 800cf82:	ebc3 03c2 	rsb	r3, r3, r2, lsl #3
 800cf86:	b4d0      	push	{r4, r6, r7}
 800cf88:	4c0e      	ldr	r4, [pc, #56]	; (800cfc4 <__atomic_load_8+0x68>)
 800cf8a:	1ac9      	subs	r1, r1, r3
 800cf8c:	1862      	adds	r2, r4, r1
 800cf8e:	f04f 0c01 	mov.w	ip, #1
 800cf92:	e8d2 3f4f 	ldrexb	r3, [r2]
 800cf96:	e8c2 cf46 	strexb	r6, ip, [r2]
 800cf9a:	2e00      	cmp	r6, #0
 800cf9c:	d1f9      	bne.n	800cf92 <__atomic_load_8+0x36>
 800cf9e:	f3bf 8f5b 	dmb	ish
 800cfa2:	b2db      	uxtb	r3, r3
 800cfa4:	2b00      	cmp	r3, #0
 800cfa6:	d1f4      	bne.n	800cf92 <__atomic_load_8+0x36>
 800cfa8:	e9d0 6700 	ldrd	r6, r7, [r0]
 800cfac:	f3bf 8f5b 	dmb	ish
 800cfb0:	5463      	strb	r3, [r4, r1]
 800cfb2:	4630      	mov	r0, r6
 800cfb4:	4639      	mov	r1, r7
 800cfb6:	bcd0      	pop	{r4, r6, r7}
 800cfb8:	4770      	bx	lr
 800cfba:	bf00      	nop
 800cfbc:	27d4eb2d 	.word	0x27d4eb2d
 800cfc0:	b21642c9 	.word	0xb21642c9
 800cfc4:	2000db08 	.word	0x2000db08

0800cfc8 <rcutils_get_env>:
 800cfc8:	b168      	cbz	r0, 800cfe6 <rcutils_get_env+0x1e>
 800cfca:	b510      	push	{r4, lr}
 800cfcc:	460c      	mov	r4, r1
 800cfce:	b129      	cbz	r1, 800cfdc <rcutils_get_env+0x14>
 800cfd0:	f003 fc12 	bl	80107f8 <getenv>
 800cfd4:	b120      	cbz	r0, 800cfe0 <rcutils_get_env+0x18>
 800cfd6:	6020      	str	r0, [r4, #0]
 800cfd8:	2000      	movs	r0, #0
 800cfda:	bd10      	pop	{r4, pc}
 800cfdc:	4803      	ldr	r0, [pc, #12]	; (800cfec <rcutils_get_env+0x24>)
 800cfde:	bd10      	pop	{r4, pc}
 800cfe0:	4b03      	ldr	r3, [pc, #12]	; (800cff0 <rcutils_get_env+0x28>)
 800cfe2:	6023      	str	r3, [r4, #0]
 800cfe4:	bd10      	pop	{r4, pc}
 800cfe6:	4803      	ldr	r0, [pc, #12]	; (800cff4 <rcutils_get_env+0x2c>)
 800cfe8:	4770      	bx	lr
 800cfea:	bf00      	nop
 800cfec:	08012380 	.word	0x08012380
 800cff0:	080124a4 	.word	0x080124a4
 800cff4:	08012364 	.word	0x08012364

0800cff8 <rcutils_is_directory>:
 800cff8:	2000      	movs	r0, #0
 800cffa:	4770      	bx	lr

0800cffc <rcutils_join_path>:
 800cffc:	b082      	sub	sp, #8
 800cffe:	e88d 000c 	stmia.w	sp, {r2, r3}
 800d002:	2000      	movs	r0, #0
 800d004:	b002      	add	sp, #8
 800d006:	4770      	bx	lr

0800d008 <rcutils_to_native_path>:
 800d008:	b084      	sub	sp, #16
 800d00a:	a801      	add	r0, sp, #4
 800d00c:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 800d010:	b004      	add	sp, #16
 800d012:	2000      	movs	r0, #0
 800d014:	4770      	bx	lr
 800d016:	bf00      	nop

0800d018 <rcutils_format_string_limit>:
 800d018:	b40f      	push	{r0, r1, r2, r3}
 800d01a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d01c:	b083      	sub	sp, #12
 800d01e:	ac08      	add	r4, sp, #32
 800d020:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 800d022:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800d026:	b34e      	cbz	r6, 800d07c <rcutils_format_string_limit+0x64>
 800d028:	a808      	add	r0, sp, #32
 800d02a:	f7fa feb1 	bl	8007d90 <rcutils_allocator_is_valid>
 800d02e:	b328      	cbz	r0, 800d07c <rcutils_format_string_limit+0x64>
 800d030:	2100      	movs	r1, #0
 800d032:	ab0f      	add	r3, sp, #60	; 0x3c
 800d034:	4632      	mov	r2, r6
 800d036:	4608      	mov	r0, r1
 800d038:	e9cd 3300 	strd	r3, r3, [sp]
 800d03c:	f000 f8f4 	bl	800d228 <rcutils_vsnprintf>
 800d040:	1c43      	adds	r3, r0, #1
 800d042:	4605      	mov	r5, r0
 800d044:	d01a      	beq.n	800d07c <rcutils_format_string_limit+0x64>
 800d046:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d048:	990c      	ldr	r1, [sp, #48]	; 0x30
 800d04a:	1c47      	adds	r7, r0, #1
 800d04c:	429f      	cmp	r7, r3
 800d04e:	bf84      	itt	hi
 800d050:	461f      	movhi	r7, r3
 800d052:	f103 35ff 	addhi.w	r5, r3, #4294967295	; 0xffffffff
 800d056:	4638      	mov	r0, r7
 800d058:	9b08      	ldr	r3, [sp, #32]
 800d05a:	4798      	blx	r3
 800d05c:	4604      	mov	r4, r0
 800d05e:	b168      	cbz	r0, 800d07c <rcutils_format_string_limit+0x64>
 800d060:	9b01      	ldr	r3, [sp, #4]
 800d062:	4632      	mov	r2, r6
 800d064:	4639      	mov	r1, r7
 800d066:	f000 f8df 	bl	800d228 <rcutils_vsnprintf>
 800d06a:	2800      	cmp	r0, #0
 800d06c:	db02      	blt.n	800d074 <rcutils_format_string_limit+0x5c>
 800d06e:	2300      	movs	r3, #0
 800d070:	5563      	strb	r3, [r4, r5]
 800d072:	e004      	b.n	800d07e <rcutils_format_string_limit+0x66>
 800d074:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d076:	990c      	ldr	r1, [sp, #48]	; 0x30
 800d078:	4620      	mov	r0, r4
 800d07a:	4798      	blx	r3
 800d07c:	2400      	movs	r4, #0
 800d07e:	4620      	mov	r0, r4
 800d080:	b003      	add	sp, #12
 800d082:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800d086:	b004      	add	sp, #16
 800d088:	4770      	bx	lr
 800d08a:	bf00      	nop

0800d08c <rcutils_repl_str>:
 800d08c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d090:	ed2d 8b02 	vpush	{d8}
 800d094:	b087      	sub	sp, #28
 800d096:	4680      	mov	r8, r0
 800d098:	4608      	mov	r0, r1
 800d09a:	f8cd 8004 	str.w	r8, [sp, #4]
 800d09e:	ee08 2a10 	vmov	s16, r2
 800d0a2:	468a      	mov	sl, r1
 800d0a4:	4699      	mov	r9, r3
 800d0a6:	f7f3 f8bd 	bl	8000224 <strlen>
 800d0aa:	2600      	movs	r6, #0
 800d0ac:	4647      	mov	r7, r8
 800d0ae:	9002      	str	r0, [sp, #8]
 800d0b0:	46b3      	mov	fp, r6
 800d0b2:	2510      	movs	r5, #16
 800d0b4:	46b0      	mov	r8, r6
 800d0b6:	e01d      	b.n	800d0f4 <rcutils_repl_str+0x68>
 800d0b8:	f10b 0b01 	add.w	fp, fp, #1
 800d0bc:	455e      	cmp	r6, fp
 800d0be:	d211      	bcs.n	800d0e4 <rcutils_repl_str+0x58>
 800d0c0:	442e      	add	r6, r5
 800d0c2:	f8d9 3008 	ldr.w	r3, [r9, #8]
 800d0c6:	f8d9 2010 	ldr.w	r2, [r9, #16]
 800d0ca:	00b1      	lsls	r1, r6, #2
 800d0cc:	4798      	blx	r3
 800d0ce:	2800      	cmp	r0, #0
 800d0d0:	f000 8088 	beq.w	800d1e4 <rcutils_repl_str+0x158>
 800d0d4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d0d8:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
 800d0dc:	4680      	mov	r8, r0
 800d0de:	bf28      	it	cs
 800d0e0:	f44f 1580 	movcs.w	r5, #1048576	; 0x100000
 800d0e4:	9a01      	ldr	r2, [sp, #4]
 800d0e6:	eb08 038b 	add.w	r3, r8, fp, lsl #2
 800d0ea:	1aa2      	subs	r2, r4, r2
 800d0ec:	f843 2c04 	str.w	r2, [r3, #-4]
 800d0f0:	9b02      	ldr	r3, [sp, #8]
 800d0f2:	18e7      	adds	r7, r4, r3
 800d0f4:	4651      	mov	r1, sl
 800d0f6:	4638      	mov	r0, r7
 800d0f8:	f003 feb0 	bl	8010e5c <strstr>
 800d0fc:	4604      	mov	r4, r0
 800d0fe:	4640      	mov	r0, r8
 800d100:	2c00      	cmp	r4, #0
 800d102:	d1d9      	bne.n	800d0b8 <rcutils_repl_str+0x2c>
 800d104:	46b8      	mov	r8, r7
 800d106:	4607      	mov	r7, r0
 800d108:	4640      	mov	r0, r8
 800d10a:	f7f3 f88b 	bl	8000224 <strlen>
 800d10e:	9b01      	ldr	r3, [sp, #4]
 800d110:	eba8 0303 	sub.w	r3, r8, r3
 800d114:	181c      	adds	r4, r3, r0
 800d116:	9404      	str	r4, [sp, #16]
 800d118:	f1bb 0f00 	cmp.w	fp, #0
 800d11c:	d04a      	beq.n	800d1b4 <rcutils_repl_str+0x128>
 800d11e:	ee18 0a10 	vmov	r0, s16
 800d122:	f7f3 f87f 	bl	8000224 <strlen>
 800d126:	9b02      	ldr	r3, [sp, #8]
 800d128:	f8d9 1010 	ldr.w	r1, [r9, #16]
 800d12c:	1ac3      	subs	r3, r0, r3
 800d12e:	fb0b 4303 	mla	r3, fp, r3, r4
 800d132:	461a      	mov	r2, r3
 800d134:	9305      	str	r3, [sp, #20]
 800d136:	4606      	mov	r6, r0
 800d138:	f8d9 3000 	ldr.w	r3, [r9]
 800d13c:	1c50      	adds	r0, r2, #1
 800d13e:	4798      	blx	r3
 800d140:	9003      	str	r0, [sp, #12]
 800d142:	2800      	cmp	r0, #0
 800d144:	d04f      	beq.n	800d1e6 <rcutils_repl_str+0x15a>
 800d146:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800d14a:	683a      	ldr	r2, [r7, #0]
 800d14c:	4641      	mov	r1, r8
 800d14e:	f003 fbd3 	bl	80108f8 <memcpy>
 800d152:	683d      	ldr	r5, [r7, #0]
 800d154:	9b03      	ldr	r3, [sp, #12]
 800d156:	9701      	str	r7, [sp, #4]
 800d158:	46ba      	mov	sl, r7
 800d15a:	441d      	add	r5, r3
 800d15c:	9f02      	ldr	r7, [sp, #8]
 800d15e:	f8cd 9008 	str.w	r9, [sp, #8]
 800d162:	2401      	movs	r4, #1
 800d164:	46d1      	mov	r9, sl
 800d166:	ee18 aa10 	vmov	sl, s16
 800d16a:	e00a      	b.n	800d182 <rcutils_repl_str+0xf6>
 800d16c:	f8d9 5000 	ldr.w	r5, [r9]
 800d170:	1aaa      	subs	r2, r5, r2
 800d172:	1885      	adds	r5, r0, r2
 800d174:	f003 fbc0 	bl	80108f8 <memcpy>
 800d178:	45a3      	cmp	fp, r4
 800d17a:	f104 0201 	add.w	r2, r4, #1
 800d17e:	d935      	bls.n	800d1ec <rcutils_repl_str+0x160>
 800d180:	4614      	mov	r4, r2
 800d182:	4632      	mov	r2, r6
 800d184:	4651      	mov	r1, sl
 800d186:	4628      	mov	r0, r5
 800d188:	f003 fbb6 	bl	80108f8 <memcpy>
 800d18c:	f859 2b04 	ldr.w	r2, [r9], #4
 800d190:	45a3      	cmp	fp, r4
 800d192:	443a      	add	r2, r7
 800d194:	eb05 0006 	add.w	r0, r5, r6
 800d198:	eb08 0102 	add.w	r1, r8, r2
 800d19c:	d1e6      	bne.n	800d16c <rcutils_repl_str+0xe0>
 800d19e:	9b04      	ldr	r3, [sp, #16]
 800d1a0:	1a9a      	subs	r2, r3, r2
 800d1a2:	e9dd 7901 	ldrd	r7, r9, [sp, #4]
 800d1a6:	f003 fba7 	bl	80108f8 <memcpy>
 800d1aa:	9a03      	ldr	r2, [sp, #12]
 800d1ac:	9905      	ldr	r1, [sp, #20]
 800d1ae:	2300      	movs	r3, #0
 800d1b0:	5453      	strb	r3, [r2, r1]
 800d1b2:	e00b      	b.n	800d1cc <rcutils_repl_str+0x140>
 800d1b4:	4620      	mov	r0, r4
 800d1b6:	f8d9 3000 	ldr.w	r3, [r9]
 800d1ba:	f8d9 1010 	ldr.w	r1, [r9, #16]
 800d1be:	3001      	adds	r0, #1
 800d1c0:	4798      	blx	r3
 800d1c2:	9003      	str	r0, [sp, #12]
 800d1c4:	b110      	cbz	r0, 800d1cc <rcutils_repl_str+0x140>
 800d1c6:	9901      	ldr	r1, [sp, #4]
 800d1c8:	f003 fe2c 	bl	8010e24 <strcpy>
 800d1cc:	4638      	mov	r0, r7
 800d1ce:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800d1d2:	f8d9 1010 	ldr.w	r1, [r9, #16]
 800d1d6:	4798      	blx	r3
 800d1d8:	9803      	ldr	r0, [sp, #12]
 800d1da:	b007      	add	sp, #28
 800d1dc:	ecbd 8b02 	vpop	{d8}
 800d1e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d1e4:	4647      	mov	r7, r8
 800d1e6:	2300      	movs	r3, #0
 800d1e8:	9303      	str	r3, [sp, #12]
 800d1ea:	e7ef      	b.n	800d1cc <rcutils_repl_str+0x140>
 800d1ec:	e9dd 7901 	ldrd	r7, r9, [sp, #4]
 800d1f0:	e7db      	b.n	800d1aa <rcutils_repl_str+0x11e>
 800d1f2:	bf00      	nop

0800d1f4 <rcutils_snprintf>:
 800d1f4:	b40c      	push	{r2, r3}
 800d1f6:	b530      	push	{r4, r5, lr}
 800d1f8:	b083      	sub	sp, #12
 800d1fa:	ab06      	add	r3, sp, #24
 800d1fc:	f853 2b04 	ldr.w	r2, [r3], #4
 800d200:	9301      	str	r3, [sp, #4]
 800d202:	b152      	cbz	r2, 800d21a <rcutils_snprintf+0x26>
 800d204:	b138      	cbz	r0, 800d216 <rcutils_snprintf+0x22>
 800d206:	b141      	cbz	r1, 800d21a <rcutils_snprintf+0x26>
 800d208:	f003 fee6 	bl	8010fd8 <vsniprintf>
 800d20c:	b003      	add	sp, #12
 800d20e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d212:	b002      	add	sp, #8
 800d214:	4770      	bx	lr
 800d216:	2900      	cmp	r1, #0
 800d218:	d0f6      	beq.n	800d208 <rcutils_snprintf+0x14>
 800d21a:	f003 f9f1 	bl	8010600 <__errno>
 800d21e:	2316      	movs	r3, #22
 800d220:	6003      	str	r3, [r0, #0]
 800d222:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d226:	e7f1      	b.n	800d20c <rcutils_snprintf+0x18>

0800d228 <rcutils_vsnprintf>:
 800d228:	b570      	push	{r4, r5, r6, lr}
 800d22a:	b13a      	cbz	r2, 800d23c <rcutils_vsnprintf+0x14>
 800d22c:	b120      	cbz	r0, 800d238 <rcutils_vsnprintf+0x10>
 800d22e:	b129      	cbz	r1, 800d23c <rcutils_vsnprintf+0x14>
 800d230:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800d234:	f003 bed0 	b.w	8010fd8 <vsniprintf>
 800d238:	2900      	cmp	r1, #0
 800d23a:	d0f9      	beq.n	800d230 <rcutils_vsnprintf+0x8>
 800d23c:	f003 f9e0 	bl	8010600 <__errno>
 800d240:	2316      	movs	r3, #22
 800d242:	6003      	str	r3, [r0, #0]
 800d244:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d248:	bd70      	pop	{r4, r5, r6, pc}
 800d24a:	bf00      	nop

0800d24c <rcutils_strdup>:
 800d24c:	b084      	sub	sp, #16
 800d24e:	b570      	push	{r4, r5, r6, lr}
 800d250:	b082      	sub	sp, #8
 800d252:	ac07      	add	r4, sp, #28
 800d254:	e884 000e 	stmia.w	r4, {r1, r2, r3}
 800d258:	4605      	mov	r5, r0
 800d25a:	b1b0      	cbz	r0, 800d28a <rcutils_strdup+0x3e>
 800d25c:	f7f2 ffe2 	bl	8000224 <strlen>
 800d260:	1c42      	adds	r2, r0, #1
 800d262:	9b07      	ldr	r3, [sp, #28]
 800d264:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800d266:	9201      	str	r2, [sp, #4]
 800d268:	4606      	mov	r6, r0
 800d26a:	4610      	mov	r0, r2
 800d26c:	4798      	blx	r3
 800d26e:	4604      	mov	r4, r0
 800d270:	b128      	cbz	r0, 800d27e <rcutils_strdup+0x32>
 800d272:	9a01      	ldr	r2, [sp, #4]
 800d274:	4629      	mov	r1, r5
 800d276:	f003 fb3f 	bl	80108f8 <memcpy>
 800d27a:	2300      	movs	r3, #0
 800d27c:	55a3      	strb	r3, [r4, r6]
 800d27e:	4620      	mov	r0, r4
 800d280:	b002      	add	sp, #8
 800d282:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800d286:	b004      	add	sp, #16
 800d288:	4770      	bx	lr
 800d28a:	4604      	mov	r4, r0
 800d28c:	e7f7      	b.n	800d27e <rcutils_strdup+0x32>
 800d28e:	bf00      	nop

0800d290 <rcutils_strndup>:
 800d290:	b082      	sub	sp, #8
 800d292:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d294:	ac06      	add	r4, sp, #24
 800d296:	e884 000c 	stmia.w	r4, {r2, r3}
 800d29a:	4605      	mov	r5, r0
 800d29c:	b188      	cbz	r0, 800d2c2 <rcutils_strndup+0x32>
 800d29e:	1c4f      	adds	r7, r1, #1
 800d2a0:	460e      	mov	r6, r1
 800d2a2:	4638      	mov	r0, r7
 800d2a4:	990a      	ldr	r1, [sp, #40]	; 0x28
 800d2a6:	4790      	blx	r2
 800d2a8:	4604      	mov	r4, r0
 800d2aa:	b128      	cbz	r0, 800d2b8 <rcutils_strndup+0x28>
 800d2ac:	463a      	mov	r2, r7
 800d2ae:	4629      	mov	r1, r5
 800d2b0:	f003 fb22 	bl	80108f8 <memcpy>
 800d2b4:	2300      	movs	r3, #0
 800d2b6:	55a3      	strb	r3, [r4, r6]
 800d2b8:	4620      	mov	r0, r4
 800d2ba:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800d2be:	b002      	add	sp, #8
 800d2c0:	4770      	bx	lr
 800d2c2:	4604      	mov	r4, r0
 800d2c4:	e7f8      	b.n	800d2b8 <rcutils_strndup+0x28>
 800d2c6:	bf00      	nop

0800d2c8 <rcutils_get_zero_initialized_string_map>:
 800d2c8:	4b01      	ldr	r3, [pc, #4]	; (800d2d0 <rcutils_get_zero_initialized_string_map+0x8>)
 800d2ca:	2000      	movs	r0, #0
 800d2cc:	6018      	str	r0, [r3, #0]
 800d2ce:	4770      	bx	lr
 800d2d0:	2000db20 	.word	0x2000db20

0800d2d4 <rcutils_string_map_reserve>:
 800d2d4:	2800      	cmp	r0, #0
 800d2d6:	d05f      	beq.n	800d398 <rcutils_string_map_reserve+0xc4>
 800d2d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d2dc:	460c      	mov	r4, r1
 800d2de:	6801      	ldr	r1, [r0, #0]
 800d2e0:	b082      	sub	sp, #8
 800d2e2:	4605      	mov	r5, r0
 800d2e4:	b129      	cbz	r1, 800d2f2 <rcutils_string_map_reserve+0x1e>
 800d2e6:	68cb      	ldr	r3, [r1, #12]
 800d2e8:	42a3      	cmp	r3, r4
 800d2ea:	d906      	bls.n	800d2fa <rcutils_string_map_reserve+0x26>
 800d2ec:	461c      	mov	r4, r3
 800d2ee:	2900      	cmp	r1, #0
 800d2f0:	d1f9      	bne.n	800d2e6 <rcutils_string_map_reserve+0x12>
 800d2f2:	201f      	movs	r0, #31
 800d2f4:	b002      	add	sp, #8
 800d2f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d2fa:	688b      	ldr	r3, [r1, #8]
 800d2fc:	42a3      	cmp	r3, r4
 800d2fe:	d047      	beq.n	800d390 <rcutils_string_map_reserve+0xbc>
 800d300:	6a0e      	ldr	r6, [r1, #32]
 800d302:	2c00      	cmp	r4, #0
 800d304:	d034      	beq.n	800d370 <rcutils_string_map_reserve+0x9c>
 800d306:	f1b4 4f80 	cmp.w	r4, #1073741824	; 0x40000000
 800d30a:	d243      	bcs.n	800d394 <rcutils_string_map_reserve+0xc0>
 800d30c:	00a7      	lsls	r7, r4, #2
 800d30e:	f8d1 8018 	ldr.w	r8, [r1, #24]
 800d312:	6808      	ldr	r0, [r1, #0]
 800d314:	4632      	mov	r2, r6
 800d316:	4639      	mov	r1, r7
 800d318:	47c0      	blx	r8
 800d31a:	2800      	cmp	r0, #0
 800d31c:	d03a      	beq.n	800d394 <rcutils_string_map_reserve+0xc0>
 800d31e:	682b      	ldr	r3, [r5, #0]
 800d320:	4632      	mov	r2, r6
 800d322:	6018      	str	r0, [r3, #0]
 800d324:	4639      	mov	r1, r7
 800d326:	6858      	ldr	r0, [r3, #4]
 800d328:	47c0      	blx	r8
 800d32a:	2800      	cmp	r0, #0
 800d32c:	d032      	beq.n	800d394 <rcutils_string_map_reserve+0xc0>
 800d32e:	682d      	ldr	r5, [r5, #0]
 800d330:	68ab      	ldr	r3, [r5, #8]
 800d332:	6068      	str	r0, [r5, #4]
 800d334:	42a3      	cmp	r3, r4
 800d336:	d226      	bcs.n	800d386 <rcutils_string_map_reserve+0xb2>
 800d338:	682a      	ldr	r2, [r5, #0]
 800d33a:	eb00 0c07 	add.w	ip, r0, r7
 800d33e:	eb02 0e83 	add.w	lr, r2, r3, lsl #2
 800d342:	45e6      	cmp	lr, ip
 800d344:	ea4f 0183 	mov.w	r1, r3, lsl #2
 800d348:	eb00 0683 	add.w	r6, r0, r3, lsl #2
 800d34c:	d203      	bcs.n	800d356 <rcutils_string_map_reserve+0x82>
 800d34e:	eb02 0c07 	add.w	ip, r2, r7
 800d352:	4566      	cmp	r6, ip
 800d354:	d322      	bcc.n	800d39c <rcutils_string_map_reserve+0xc8>
 800d356:	1ae3      	subs	r3, r4, r3
 800d358:	009a      	lsls	r2, r3, #2
 800d35a:	4670      	mov	r0, lr
 800d35c:	2100      	movs	r1, #0
 800d35e:	9201      	str	r2, [sp, #4]
 800d360:	f003 fad8 	bl	8010914 <memset>
 800d364:	9a01      	ldr	r2, [sp, #4]
 800d366:	2100      	movs	r1, #0
 800d368:	4630      	mov	r0, r6
 800d36a:	f003 fad3 	bl	8010914 <memset>
 800d36e:	e00a      	b.n	800d386 <rcutils_string_map_reserve+0xb2>
 800d370:	694f      	ldr	r7, [r1, #20]
 800d372:	6808      	ldr	r0, [r1, #0]
 800d374:	4631      	mov	r1, r6
 800d376:	47b8      	blx	r7
 800d378:	682b      	ldr	r3, [r5, #0]
 800d37a:	4631      	mov	r1, r6
 800d37c:	6858      	ldr	r0, [r3, #4]
 800d37e:	601c      	str	r4, [r3, #0]
 800d380:	47b8      	blx	r7
 800d382:	682d      	ldr	r5, [r5, #0]
 800d384:	606c      	str	r4, [r5, #4]
 800d386:	2000      	movs	r0, #0
 800d388:	60ac      	str	r4, [r5, #8]
 800d38a:	b002      	add	sp, #8
 800d38c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d390:	2000      	movs	r0, #0
 800d392:	e7af      	b.n	800d2f4 <rcutils_string_map_reserve+0x20>
 800d394:	200a      	movs	r0, #10
 800d396:	e7ad      	b.n	800d2f4 <rcutils_string_map_reserve+0x20>
 800d398:	200b      	movs	r0, #11
 800d39a:	4770      	bx	lr
 800d39c:	1f0b      	subs	r3, r1, #4
 800d39e:	4418      	add	r0, r3
 800d3a0:	4413      	add	r3, r2
 800d3a2:	3a04      	subs	r2, #4
 800d3a4:	4417      	add	r7, r2
 800d3a6:	2200      	movs	r2, #0
 800d3a8:	f843 2f04 	str.w	r2, [r3, #4]!
 800d3ac:	42bb      	cmp	r3, r7
 800d3ae:	f840 2f04 	str.w	r2, [r0, #4]!
 800d3b2:	d1f9      	bne.n	800d3a8 <rcutils_string_map_reserve+0xd4>
 800d3b4:	e7e7      	b.n	800d386 <rcutils_string_map_reserve+0xb2>
 800d3b6:	bf00      	nop

0800d3b8 <rcutils_string_map_init>:
 800d3b8:	b082      	sub	sp, #8
 800d3ba:	b570      	push	{r4, r5, r6, lr}
 800d3bc:	ac04      	add	r4, sp, #16
 800d3be:	e884 000c 	stmia.w	r4, {r2, r3}
 800d3c2:	b380      	cbz	r0, 800d426 <rcutils_string_map_init+0x6e>
 800d3c4:	6806      	ldr	r6, [r0, #0]
 800d3c6:	4604      	mov	r4, r0
 800d3c8:	b12e      	cbz	r6, 800d3d6 <rcutils_string_map_init+0x1e>
 800d3ca:	251e      	movs	r5, #30
 800d3cc:	4628      	mov	r0, r5
 800d3ce:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800d3d2:	b002      	add	sp, #8
 800d3d4:	4770      	bx	lr
 800d3d6:	a804      	add	r0, sp, #16
 800d3d8:	460d      	mov	r5, r1
 800d3da:	f7fa fcd9 	bl	8007d90 <rcutils_allocator_is_valid>
 800d3de:	b310      	cbz	r0, 800d426 <rcutils_string_map_init+0x6e>
 800d3e0:	9b04      	ldr	r3, [sp, #16]
 800d3e2:	9908      	ldr	r1, [sp, #32]
 800d3e4:	2024      	movs	r0, #36	; 0x24
 800d3e6:	4798      	blx	r3
 800d3e8:	6020      	str	r0, [r4, #0]
 800d3ea:	b310      	cbz	r0, 800d432 <rcutils_string_map_init+0x7a>
 800d3ec:	f10d 0e10 	add.w	lr, sp, #16
 800d3f0:	e9c0 6600 	strd	r6, r6, [r0]
 800d3f4:	e9c0 6602 	strd	r6, r6, [r0, #8]
 800d3f8:	f100 0c10 	add.w	ip, r0, #16
 800d3fc:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800d400:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800d404:	f8de 3000 	ldr.w	r3, [lr]
 800d408:	f8cc 3000 	str.w	r3, [ip]
 800d40c:	4629      	mov	r1, r5
 800d40e:	4620      	mov	r0, r4
 800d410:	f7ff ff60 	bl	800d2d4 <rcutils_string_map_reserve>
 800d414:	4605      	mov	r5, r0
 800d416:	2800      	cmp	r0, #0
 800d418:	d0d8      	beq.n	800d3cc <rcutils_string_map_init+0x14>
 800d41a:	9b05      	ldr	r3, [sp, #20]
 800d41c:	9908      	ldr	r1, [sp, #32]
 800d41e:	6820      	ldr	r0, [r4, #0]
 800d420:	4798      	blx	r3
 800d422:	6026      	str	r6, [r4, #0]
 800d424:	e7d2      	b.n	800d3cc <rcutils_string_map_init+0x14>
 800d426:	250b      	movs	r5, #11
 800d428:	4628      	mov	r0, r5
 800d42a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800d42e:	b002      	add	sp, #8
 800d430:	4770      	bx	lr
 800d432:	250a      	movs	r5, #10
 800d434:	e7ca      	b.n	800d3cc <rcutils_string_map_init+0x14>
 800d436:	bf00      	nop

0800d438 <rcutils_string_map_fini>:
 800d438:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d43c:	b082      	sub	sp, #8
 800d43e:	2800      	cmp	r0, #0
 800d440:	d03a      	beq.n	800d4b8 <rcutils_string_map_fini+0x80>
 800d442:	6804      	ldr	r4, [r0, #0]
 800d444:	4606      	mov	r6, r0
 800d446:	2c00      	cmp	r4, #0
 800d448:	d032      	beq.n	800d4b0 <rcutils_string_map_fini+0x78>
 800d44a:	68a3      	ldr	r3, [r4, #8]
 800d44c:	b32b      	cbz	r3, 800d49a <rcutils_string_map_fini+0x62>
 800d44e:	2500      	movs	r5, #0
 800d450:	6822      	ldr	r2, [r4, #0]
 800d452:	462f      	mov	r7, r5
 800d454:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 800d458:	b1e0      	cbz	r0, 800d494 <rcutils_string_map_fini+0x5c>
 800d45a:	6a21      	ldr	r1, [r4, #32]
 800d45c:	f8d4 8014 	ldr.w	r8, [r4, #20]
 800d460:	9101      	str	r1, [sp, #4]
 800d462:	47c0      	blx	r8
 800d464:	e9d4 2300 	ldrd	r2, r3, [r4]
 800d468:	f842 7025 	str.w	r7, [r2, r5, lsl #2]
 800d46c:	9901      	ldr	r1, [sp, #4]
 800d46e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800d472:	47c0      	blx	r8
 800d474:	68e3      	ldr	r3, [r4, #12]
 800d476:	6862      	ldr	r2, [r4, #4]
 800d478:	3b01      	subs	r3, #1
 800d47a:	f842 7025 	str.w	r7, [r2, r5, lsl #2]
 800d47e:	60e3      	str	r3, [r4, #12]
 800d480:	6834      	ldr	r4, [r6, #0]
 800d482:	68a3      	ldr	r3, [r4, #8]
 800d484:	3501      	adds	r5, #1
 800d486:	429d      	cmp	r5, r3
 800d488:	d207      	bcs.n	800d49a <rcutils_string_map_fini+0x62>
 800d48a:	6822      	ldr	r2, [r4, #0]
 800d48c:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 800d490:	2800      	cmp	r0, #0
 800d492:	d1e2      	bne.n	800d45a <rcutils_string_map_fini+0x22>
 800d494:	3501      	adds	r5, #1
 800d496:	429d      	cmp	r5, r3
 800d498:	d3dc      	bcc.n	800d454 <rcutils_string_map_fini+0x1c>
 800d49a:	2100      	movs	r1, #0
 800d49c:	4630      	mov	r0, r6
 800d49e:	f7ff ff19 	bl	800d2d4 <rcutils_string_map_reserve>
 800d4a2:	4604      	mov	r4, r0
 800d4a4:	b920      	cbnz	r0, 800d4b0 <rcutils_string_map_fini+0x78>
 800d4a6:	6830      	ldr	r0, [r6, #0]
 800d4a8:	6943      	ldr	r3, [r0, #20]
 800d4aa:	6a01      	ldr	r1, [r0, #32]
 800d4ac:	4798      	blx	r3
 800d4ae:	6034      	str	r4, [r6, #0]
 800d4b0:	4620      	mov	r0, r4
 800d4b2:	b002      	add	sp, #8
 800d4b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d4b8:	240b      	movs	r4, #11
 800d4ba:	4620      	mov	r0, r4
 800d4bc:	b002      	add	sp, #8
 800d4be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d4c2:	bf00      	nop

0800d4c4 <rcutils_string_map_getn>:
 800d4c4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d4c8:	b300      	cbz	r0, 800d50c <rcutils_string_map_getn+0x48>
 800d4ca:	6807      	ldr	r7, [r0, #0]
 800d4cc:	b1ff      	cbz	r7, 800d50e <rcutils_string_map_getn+0x4a>
 800d4ce:	4688      	mov	r8, r1
 800d4d0:	b1e1      	cbz	r1, 800d50c <rcutils_string_map_getn+0x48>
 800d4d2:	f8d7 a008 	ldr.w	sl, [r7, #8]
 800d4d6:	683e      	ldr	r6, [r7, #0]
 800d4d8:	f1ba 0f00 	cmp.w	sl, #0
 800d4dc:	d016      	beq.n	800d50c <rcutils_string_map_getn+0x48>
 800d4de:	4691      	mov	r9, r2
 800d4e0:	3e04      	subs	r6, #4
 800d4e2:	2400      	movs	r4, #0
 800d4e4:	f856 5f04 	ldr.w	r5, [r6, #4]!
 800d4e8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800d4ec:	4628      	mov	r0, r5
 800d4ee:	3401      	adds	r4, #1
 800d4f0:	b155      	cbz	r5, 800d508 <rcutils_string_map_getn+0x44>
 800d4f2:	f7f2 fe97 	bl	8000224 <strlen>
 800d4f6:	4548      	cmp	r0, r9
 800d4f8:	4602      	mov	r2, r0
 800d4fa:	4629      	mov	r1, r5
 800d4fc:	bf38      	it	cc
 800d4fe:	464a      	movcc	r2, r9
 800d500:	4640      	mov	r0, r8
 800d502:	f003 fc97 	bl	8010e34 <strncmp>
 800d506:	b128      	cbz	r0, 800d514 <rcutils_string_map_getn+0x50>
 800d508:	45a2      	cmp	sl, r4
 800d50a:	d1eb      	bne.n	800d4e4 <rcutils_string_map_getn+0x20>
 800d50c:	2700      	movs	r7, #0
 800d50e:	4638      	mov	r0, r7
 800d510:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d514:	687b      	ldr	r3, [r7, #4]
 800d516:	f853 700b 	ldr.w	r7, [r3, fp]
 800d51a:	4638      	mov	r0, r7
 800d51c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800d520 <rcutils_system_time_now>:
 800d520:	b308      	cbz	r0, 800d566 <rcutils_system_time_now+0x46>
 800d522:	b570      	push	{r4, r5, r6, lr}
 800d524:	b084      	sub	sp, #16
 800d526:	4604      	mov	r4, r0
 800d528:	4669      	mov	r1, sp
 800d52a:	2001      	movs	r0, #1
 800d52c:	f7f3 fef4 	bl	8001318 <clock_gettime>
 800d530:	e9dd 3500 	ldrd	r3, r5, [sp]
 800d534:	2d00      	cmp	r5, #0
 800d536:	db13      	blt.n	800d560 <rcutils_system_time_now+0x40>
 800d538:	9902      	ldr	r1, [sp, #8]
 800d53a:	2900      	cmp	r1, #0
 800d53c:	db0d      	blt.n	800d55a <rcutils_system_time_now+0x3a>
 800d53e:	4e0b      	ldr	r6, [pc, #44]	; (800d56c <rcutils_system_time_now+0x4c>)
 800d540:	fba3 3206 	umull	r3, r2, r3, r6
 800d544:	185b      	adds	r3, r3, r1
 800d546:	fb06 2205 	mla	r2, r6, r5, r2
 800d54a:	f04f 0000 	mov.w	r0, #0
 800d54e:	eb42 72e1 	adc.w	r2, r2, r1, asr #31
 800d552:	e9c4 3200 	strd	r3, r2, [r4]
 800d556:	b004      	add	sp, #16
 800d558:	bd70      	pop	{r4, r5, r6, pc}
 800d55a:	ea53 0205 	orrs.w	r2, r3, r5
 800d55e:	d1ee      	bne.n	800d53e <rcutils_system_time_now+0x1e>
 800d560:	2002      	movs	r0, #2
 800d562:	b004      	add	sp, #16
 800d564:	bd70      	pop	{r4, r5, r6, pc}
 800d566:	200b      	movs	r0, #11
 800d568:	4770      	bx	lr
 800d56a:	bf00      	nop
 800d56c:	3b9aca00 	.word	0x3b9aca00

0800d570 <rcutils_steady_time_now>:
 800d570:	b308      	cbz	r0, 800d5b6 <rcutils_steady_time_now+0x46>
 800d572:	b570      	push	{r4, r5, r6, lr}
 800d574:	b084      	sub	sp, #16
 800d576:	4604      	mov	r4, r0
 800d578:	4669      	mov	r1, sp
 800d57a:	2000      	movs	r0, #0
 800d57c:	f7f3 fecc 	bl	8001318 <clock_gettime>
 800d580:	e9dd 3500 	ldrd	r3, r5, [sp]
 800d584:	2d00      	cmp	r5, #0
 800d586:	db13      	blt.n	800d5b0 <rcutils_steady_time_now+0x40>
 800d588:	9902      	ldr	r1, [sp, #8]
 800d58a:	2900      	cmp	r1, #0
 800d58c:	db0d      	blt.n	800d5aa <rcutils_steady_time_now+0x3a>
 800d58e:	4e0b      	ldr	r6, [pc, #44]	; (800d5bc <rcutils_steady_time_now+0x4c>)
 800d590:	fba3 3206 	umull	r3, r2, r3, r6
 800d594:	185b      	adds	r3, r3, r1
 800d596:	fb06 2205 	mla	r2, r6, r5, r2
 800d59a:	f04f 0000 	mov.w	r0, #0
 800d59e:	eb42 72e1 	adc.w	r2, r2, r1, asr #31
 800d5a2:	e9c4 3200 	strd	r3, r2, [r4]
 800d5a6:	b004      	add	sp, #16
 800d5a8:	bd70      	pop	{r4, r5, r6, pc}
 800d5aa:	ea53 0205 	orrs.w	r2, r3, r5
 800d5ae:	d1ee      	bne.n	800d58e <rcutils_steady_time_now+0x1e>
 800d5b0:	2002      	movs	r0, #2
 800d5b2:	b004      	add	sp, #16
 800d5b4:	bd70      	pop	{r4, r5, r6, pc}
 800d5b6:	200b      	movs	r0, #11
 800d5b8:	4770      	bx	lr
 800d5ba:	bf00      	nop
 800d5bc:	3b9aca00 	.word	0x3b9aca00

0800d5c0 <rmw_get_zero_initialized_context>:
 800d5c0:	b510      	push	{r4, lr}
 800d5c2:	4604      	mov	r4, r0
 800d5c4:	3010      	adds	r0, #16
 800d5c6:	f000 f80b 	bl	800d5e0 <rmw_get_zero_initialized_init_options>
 800d5ca:	2300      	movs	r3, #0
 800d5cc:	2000      	movs	r0, #0
 800d5ce:	2100      	movs	r1, #0
 800d5d0:	e9c4 0100 	strd	r0, r1, [r4]
 800d5d4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800d5d8:	60a3      	str	r3, [r4, #8]
 800d5da:	4620      	mov	r0, r4
 800d5dc:	bd10      	pop	{r4, pc}
 800d5de:	bf00      	nop

0800d5e0 <rmw_get_zero_initialized_init_options>:
 800d5e0:	b510      	push	{r4, lr}
 800d5e2:	2238      	movs	r2, #56	; 0x38
 800d5e4:	4604      	mov	r4, r0
 800d5e6:	2100      	movs	r1, #0
 800d5e8:	f003 f994 	bl	8010914 <memset>
 800d5ec:	f104 0010 	add.w	r0, r4, #16
 800d5f0:	f000 f806 	bl	800d600 <rmw_get_default_security_options>
 800d5f4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d5f8:	60e3      	str	r3, [r4, #12]
 800d5fa:	4620      	mov	r0, r4
 800d5fc:	bd10      	pop	{r4, pc}
 800d5fe:	bf00      	nop

0800d600 <rmw_get_default_security_options>:
 800d600:	2200      	movs	r2, #0
 800d602:	7002      	strb	r2, [r0, #0]
 800d604:	6042      	str	r2, [r0, #4]
 800d606:	4770      	bx	lr

0800d608 <rmw_validate_full_topic_name>:
 800d608:	2800      	cmp	r0, #0
 800d60a:	d057      	beq.n	800d6bc <rmw_validate_full_topic_name+0xb4>
 800d60c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d610:	460d      	mov	r5, r1
 800d612:	2900      	cmp	r1, #0
 800d614:	d054      	beq.n	800d6c0 <rmw_validate_full_topic_name+0xb8>
 800d616:	4616      	mov	r6, r2
 800d618:	4604      	mov	r4, r0
 800d61a:	f7f2 fe03 	bl	8000224 <strlen>
 800d61e:	b148      	cbz	r0, 800d634 <rmw_validate_full_topic_name+0x2c>
 800d620:	7823      	ldrb	r3, [r4, #0]
 800d622:	2b2f      	cmp	r3, #47	; 0x2f
 800d624:	d00d      	beq.n	800d642 <rmw_validate_full_topic_name+0x3a>
 800d626:	2302      	movs	r3, #2
 800d628:	602b      	str	r3, [r5, #0]
 800d62a:	b13e      	cbz	r6, 800d63c <rmw_validate_full_topic_name+0x34>
 800d62c:	2000      	movs	r0, #0
 800d62e:	6030      	str	r0, [r6, #0]
 800d630:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d634:	2301      	movs	r3, #1
 800d636:	602b      	str	r3, [r5, #0]
 800d638:	2e00      	cmp	r6, #0
 800d63a:	d1f7      	bne.n	800d62c <rmw_validate_full_topic_name+0x24>
 800d63c:	2000      	movs	r0, #0
 800d63e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d642:	1e43      	subs	r3, r0, #1
 800d644:	5ce2      	ldrb	r2, [r4, r3]
 800d646:	2a2f      	cmp	r2, #47	; 0x2f
 800d648:	d03c      	beq.n	800d6c4 <rmw_validate_full_topic_name+0xbc>
 800d64a:	1e63      	subs	r3, r4, #1
 800d64c:	eb03 0800 	add.w	r8, r3, r0
 800d650:	f1c4 0e01 	rsb	lr, r4, #1
 800d654:	eb0e 0703 	add.w	r7, lr, r3
 800d658:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 800d65c:	f021 0220 	bic.w	r2, r1, #32
 800d660:	3a41      	subs	r2, #65	; 0x41
 800d662:	2a19      	cmp	r2, #25
 800d664:	f1a1 0c2f 	sub.w	ip, r1, #47	; 0x2f
 800d668:	d90b      	bls.n	800d682 <rmw_validate_full_topic_name+0x7a>
 800d66a:	295f      	cmp	r1, #95	; 0x5f
 800d66c:	d009      	beq.n	800d682 <rmw_validate_full_topic_name+0x7a>
 800d66e:	f1bc 0f0a 	cmp.w	ip, #10
 800d672:	d906      	bls.n	800d682 <rmw_validate_full_topic_name+0x7a>
 800d674:	2304      	movs	r3, #4
 800d676:	602b      	str	r3, [r5, #0]
 800d678:	2e00      	cmp	r6, #0
 800d67a:	d0df      	beq.n	800d63c <rmw_validate_full_topic_name+0x34>
 800d67c:	6037      	str	r7, [r6, #0]
 800d67e:	2000      	movs	r0, #0
 800d680:	e7d6      	b.n	800d630 <rmw_validate_full_topic_name+0x28>
 800d682:	4543      	cmp	r3, r8
 800d684:	d1e6      	bne.n	800d654 <rmw_validate_full_topic_name+0x4c>
 800d686:	4f1a      	ldr	r7, [pc, #104]	; (800d6f0 <rmw_validate_full_topic_name+0xe8>)
 800d688:	2301      	movs	r3, #1
 800d68a:	e004      	b.n	800d696 <rmw_validate_full_topic_name+0x8e>
 800d68c:	4298      	cmp	r0, r3
 800d68e:	f104 0401 	add.w	r4, r4, #1
 800d692:	d91c      	bls.n	800d6ce <rmw_validate_full_topic_name+0xc6>
 800d694:	4613      	mov	r3, r2
 800d696:	4298      	cmp	r0, r3
 800d698:	f103 0201 	add.w	r2, r3, #1
 800d69c:	d0f6      	beq.n	800d68c <rmw_validate_full_topic_name+0x84>
 800d69e:	7821      	ldrb	r1, [r4, #0]
 800d6a0:	292f      	cmp	r1, #47	; 0x2f
 800d6a2:	d1f3      	bne.n	800d68c <rmw_validate_full_topic_name+0x84>
 800d6a4:	7861      	ldrb	r1, [r4, #1]
 800d6a6:	292f      	cmp	r1, #47	; 0x2f
 800d6a8:	d01c      	beq.n	800d6e4 <rmw_validate_full_topic_name+0xdc>
 800d6aa:	5dc9      	ldrb	r1, [r1, r7]
 800d6ac:	0749      	lsls	r1, r1, #29
 800d6ae:	d5ed      	bpl.n	800d68c <rmw_validate_full_topic_name+0x84>
 800d6b0:	2206      	movs	r2, #6
 800d6b2:	602a      	str	r2, [r5, #0]
 800d6b4:	2e00      	cmp	r6, #0
 800d6b6:	d0c1      	beq.n	800d63c <rmw_validate_full_topic_name+0x34>
 800d6b8:	6033      	str	r3, [r6, #0]
 800d6ba:	e7bf      	b.n	800d63c <rmw_validate_full_topic_name+0x34>
 800d6bc:	200b      	movs	r0, #11
 800d6be:	4770      	bx	lr
 800d6c0:	200b      	movs	r0, #11
 800d6c2:	e7b5      	b.n	800d630 <rmw_validate_full_topic_name+0x28>
 800d6c4:	2203      	movs	r2, #3
 800d6c6:	602a      	str	r2, [r5, #0]
 800d6c8:	2e00      	cmp	r6, #0
 800d6ca:	d1f5      	bne.n	800d6b8 <rmw_validate_full_topic_name+0xb0>
 800d6cc:	e7b6      	b.n	800d63c <rmw_validate_full_topic_name+0x34>
 800d6ce:	28f7      	cmp	r0, #247	; 0xf7
 800d6d0:	d802      	bhi.n	800d6d8 <rmw_validate_full_topic_name+0xd0>
 800d6d2:	2000      	movs	r0, #0
 800d6d4:	6028      	str	r0, [r5, #0]
 800d6d6:	e7ab      	b.n	800d630 <rmw_validate_full_topic_name+0x28>
 800d6d8:	2307      	movs	r3, #7
 800d6da:	602b      	str	r3, [r5, #0]
 800d6dc:	2e00      	cmp	r6, #0
 800d6de:	d0ad      	beq.n	800d63c <rmw_validate_full_topic_name+0x34>
 800d6e0:	23f6      	movs	r3, #246	; 0xf6
 800d6e2:	e7e9      	b.n	800d6b8 <rmw_validate_full_topic_name+0xb0>
 800d6e4:	2205      	movs	r2, #5
 800d6e6:	602a      	str	r2, [r5, #0]
 800d6e8:	2e00      	cmp	r6, #0
 800d6ea:	d1e5      	bne.n	800d6b8 <rmw_validate_full_topic_name+0xb0>
 800d6ec:	e7a6      	b.n	800d63c <rmw_validate_full_topic_name+0x34>
 800d6ee:	bf00      	nop
 800d6f0:	08012925 	.word	0x08012925

0800d6f4 <rmw_validate_namespace_with_size>:
 800d6f4:	b340      	cbz	r0, 800d748 <rmw_validate_namespace_with_size+0x54>
 800d6f6:	b570      	push	{r4, r5, r6, lr}
 800d6f8:	4614      	mov	r4, r2
 800d6fa:	b0c2      	sub	sp, #264	; 0x108
 800d6fc:	b332      	cbz	r2, 800d74c <rmw_validate_namespace_with_size+0x58>
 800d6fe:	2901      	cmp	r1, #1
 800d700:	460d      	mov	r5, r1
 800d702:	461e      	mov	r6, r3
 800d704:	d102      	bne.n	800d70c <rmw_validate_namespace_with_size+0x18>
 800d706:	7803      	ldrb	r3, [r0, #0]
 800d708:	2b2f      	cmp	r3, #47	; 0x2f
 800d70a:	d012      	beq.n	800d732 <rmw_validate_namespace_with_size+0x3e>
 800d70c:	aa01      	add	r2, sp, #4
 800d70e:	4669      	mov	r1, sp
 800d710:	f7ff ff7a 	bl	800d608 <rmw_validate_full_topic_name>
 800d714:	b978      	cbnz	r0, 800d736 <rmw_validate_namespace_with_size+0x42>
 800d716:	9b00      	ldr	r3, [sp, #0]
 800d718:	b14b      	cbz	r3, 800d72e <rmw_validate_namespace_with_size+0x3a>
 800d71a:	2b07      	cmp	r3, #7
 800d71c:	d007      	beq.n	800d72e <rmw_validate_namespace_with_size+0x3a>
 800d71e:	1e5a      	subs	r2, r3, #1
 800d720:	2a05      	cmp	r2, #5
 800d722:	d82b      	bhi.n	800d77c <rmw_validate_namespace_with_size+0x88>
 800d724:	e8df f002 	tbb	[pc, r2]
 800d728:	1e212427 	.word	0x1e212427
 800d72c:	141b      	.short	0x141b
 800d72e:	2df5      	cmp	r5, #245	; 0xf5
 800d730:	d803      	bhi.n	800d73a <rmw_validate_namespace_with_size+0x46>
 800d732:	2000      	movs	r0, #0
 800d734:	6020      	str	r0, [r4, #0]
 800d736:	b042      	add	sp, #264	; 0x108
 800d738:	bd70      	pop	{r4, r5, r6, pc}
 800d73a:	2307      	movs	r3, #7
 800d73c:	6023      	str	r3, [r4, #0]
 800d73e:	2e00      	cmp	r6, #0
 800d740:	d0f9      	beq.n	800d736 <rmw_validate_namespace_with_size+0x42>
 800d742:	23f4      	movs	r3, #244	; 0xf4
 800d744:	6033      	str	r3, [r6, #0]
 800d746:	e7f6      	b.n	800d736 <rmw_validate_namespace_with_size+0x42>
 800d748:	200b      	movs	r0, #11
 800d74a:	4770      	bx	lr
 800d74c:	200b      	movs	r0, #11
 800d74e:	e7f2      	b.n	800d736 <rmw_validate_namespace_with_size+0x42>
 800d750:	2306      	movs	r3, #6
 800d752:	6023      	str	r3, [r4, #0]
 800d754:	2e00      	cmp	r6, #0
 800d756:	d0ee      	beq.n	800d736 <rmw_validate_namespace_with_size+0x42>
 800d758:	9b01      	ldr	r3, [sp, #4]
 800d75a:	6033      	str	r3, [r6, #0]
 800d75c:	e7eb      	b.n	800d736 <rmw_validate_namespace_with_size+0x42>
 800d75e:	2305      	movs	r3, #5
 800d760:	6023      	str	r3, [r4, #0]
 800d762:	e7f7      	b.n	800d754 <rmw_validate_namespace_with_size+0x60>
 800d764:	2304      	movs	r3, #4
 800d766:	6023      	str	r3, [r4, #0]
 800d768:	e7f4      	b.n	800d754 <rmw_validate_namespace_with_size+0x60>
 800d76a:	2303      	movs	r3, #3
 800d76c:	6023      	str	r3, [r4, #0]
 800d76e:	e7f1      	b.n	800d754 <rmw_validate_namespace_with_size+0x60>
 800d770:	2302      	movs	r3, #2
 800d772:	6023      	str	r3, [r4, #0]
 800d774:	e7ee      	b.n	800d754 <rmw_validate_namespace_with_size+0x60>
 800d776:	2301      	movs	r3, #1
 800d778:	6023      	str	r3, [r4, #0]
 800d77a:	e7eb      	b.n	800d754 <rmw_validate_namespace_with_size+0x60>
 800d77c:	4a03      	ldr	r2, [pc, #12]	; (800d78c <rmw_validate_namespace_with_size+0x98>)
 800d77e:	f44f 7180 	mov.w	r1, #256	; 0x100
 800d782:	a802      	add	r0, sp, #8
 800d784:	f7ff fd36 	bl	800d1f4 <rcutils_snprintf>
 800d788:	2001      	movs	r0, #1
 800d78a:	e7d4      	b.n	800d736 <rmw_validate_namespace_with_size+0x42>
 800d78c:	0801239c 	.word	0x0801239c

0800d790 <rmw_validate_namespace>:
 800d790:	b168      	cbz	r0, 800d7ae <rmw_validate_namespace+0x1e>
 800d792:	b570      	push	{r4, r5, r6, lr}
 800d794:	460d      	mov	r5, r1
 800d796:	4616      	mov	r6, r2
 800d798:	4604      	mov	r4, r0
 800d79a:	f7f2 fd43 	bl	8000224 <strlen>
 800d79e:	4633      	mov	r3, r6
 800d7a0:	4601      	mov	r1, r0
 800d7a2:	462a      	mov	r2, r5
 800d7a4:	4620      	mov	r0, r4
 800d7a6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800d7aa:	f7ff bfa3 	b.w	800d6f4 <rmw_validate_namespace_with_size>
 800d7ae:	200b      	movs	r0, #11
 800d7b0:	4770      	bx	lr
 800d7b2:	bf00      	nop

0800d7b4 <rmw_namespace_validation_result_string>:
 800d7b4:	2807      	cmp	r0, #7
 800d7b6:	bf9a      	itte	ls
 800d7b8:	4b02      	ldrls	r3, [pc, #8]	; (800d7c4 <rmw_namespace_validation_result_string+0x10>)
 800d7ba:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 800d7be:	4802      	ldrhi	r0, [pc, #8]	; (800d7c8 <rmw_namespace_validation_result_string+0x14>)
 800d7c0:	4770      	bx	lr
 800d7c2:	bf00      	nop
 800d7c4:	08012594 	.word	0x08012594
 800d7c8:	080123ec 	.word	0x080123ec

0800d7cc <rmw_validate_node_name>:
 800d7cc:	2800      	cmp	r0, #0
 800d7ce:	d03b      	beq.n	800d848 <rmw_validate_node_name+0x7c>
 800d7d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d7d4:	460d      	mov	r5, r1
 800d7d6:	2900      	cmp	r1, #0
 800d7d8:	d038      	beq.n	800d84c <rmw_validate_node_name+0x80>
 800d7da:	4616      	mov	r6, r2
 800d7dc:	4604      	mov	r4, r0
 800d7de:	f7f2 fd21 	bl	8000224 <strlen>
 800d7e2:	b1e0      	cbz	r0, 800d81e <rmw_validate_node_name+0x52>
 800d7e4:	1e63      	subs	r3, r4, #1
 800d7e6:	eb03 0800 	add.w	r8, r3, r0
 800d7ea:	f1c4 0101 	rsb	r1, r4, #1
 800d7ee:	18cf      	adds	r7, r1, r3
 800d7f0:	f813 ef01 	ldrb.w	lr, [r3, #1]!
 800d7f4:	f1ae 0230 	sub.w	r2, lr, #48	; 0x30
 800d7f8:	f02e 0c20 	bic.w	ip, lr, #32
 800d7fc:	2a09      	cmp	r2, #9
 800d7fe:	f1ac 0c41 	sub.w	ip, ip, #65	; 0x41
 800d802:	d914      	bls.n	800d82e <rmw_validate_node_name+0x62>
 800d804:	f1bc 0f19 	cmp.w	ip, #25
 800d808:	d911      	bls.n	800d82e <rmw_validate_node_name+0x62>
 800d80a:	f1be 0f5f 	cmp.w	lr, #95	; 0x5f
 800d80e:	d00e      	beq.n	800d82e <rmw_validate_node_name+0x62>
 800d810:	2302      	movs	r3, #2
 800d812:	602b      	str	r3, [r5, #0]
 800d814:	b106      	cbz	r6, 800d818 <rmw_validate_node_name+0x4c>
 800d816:	6037      	str	r7, [r6, #0]
 800d818:	2000      	movs	r0, #0
 800d81a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d81e:	2301      	movs	r3, #1
 800d820:	602b      	str	r3, [r5, #0]
 800d822:	2e00      	cmp	r6, #0
 800d824:	d0f8      	beq.n	800d818 <rmw_validate_node_name+0x4c>
 800d826:	2000      	movs	r0, #0
 800d828:	6030      	str	r0, [r6, #0]
 800d82a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d82e:	4543      	cmp	r3, r8
 800d830:	d1dd      	bne.n	800d7ee <rmw_validate_node_name+0x22>
 800d832:	7822      	ldrb	r2, [r4, #0]
 800d834:	4b0d      	ldr	r3, [pc, #52]	; (800d86c <rmw_validate_node_name+0xa0>)
 800d836:	5cd3      	ldrb	r3, [r2, r3]
 800d838:	f013 0304 	ands.w	r3, r3, #4
 800d83c:	d110      	bne.n	800d860 <rmw_validate_node_name+0x94>
 800d83e:	28ff      	cmp	r0, #255	; 0xff
 800d840:	d806      	bhi.n	800d850 <rmw_validate_node_name+0x84>
 800d842:	602b      	str	r3, [r5, #0]
 800d844:	4618      	mov	r0, r3
 800d846:	e7e8      	b.n	800d81a <rmw_validate_node_name+0x4e>
 800d848:	200b      	movs	r0, #11
 800d84a:	4770      	bx	lr
 800d84c:	200b      	movs	r0, #11
 800d84e:	e7e4      	b.n	800d81a <rmw_validate_node_name+0x4e>
 800d850:	2204      	movs	r2, #4
 800d852:	602a      	str	r2, [r5, #0]
 800d854:	2e00      	cmp	r6, #0
 800d856:	d0df      	beq.n	800d818 <rmw_validate_node_name+0x4c>
 800d858:	22fe      	movs	r2, #254	; 0xfe
 800d85a:	6032      	str	r2, [r6, #0]
 800d85c:	4618      	mov	r0, r3
 800d85e:	e7dc      	b.n	800d81a <rmw_validate_node_name+0x4e>
 800d860:	2303      	movs	r3, #3
 800d862:	602b      	str	r3, [r5, #0]
 800d864:	2e00      	cmp	r6, #0
 800d866:	d1de      	bne.n	800d826 <rmw_validate_node_name+0x5a>
 800d868:	e7d6      	b.n	800d818 <rmw_validate_node_name+0x4c>
 800d86a:	bf00      	nop
 800d86c:	08012925 	.word	0x08012925

0800d870 <rmw_node_name_validation_result_string>:
 800d870:	2804      	cmp	r0, #4
 800d872:	bf9a      	itte	ls
 800d874:	4b02      	ldrls	r3, [pc, #8]	; (800d880 <rmw_node_name_validation_result_string+0x10>)
 800d876:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 800d87a:	4802      	ldrhi	r0, [pc, #8]	; (800d884 <rmw_node_name_validation_result_string+0x14>)
 800d87c:	4770      	bx	lr
 800d87e:	bf00      	nop
 800d880:	080126a0 	.word	0x080126a0
 800d884:	080125b4 	.word	0x080125b4

0800d888 <get_memory>:
 800d888:	4603      	mov	r3, r0
 800d88a:	6840      	ldr	r0, [r0, #4]
 800d88c:	b158      	cbz	r0, 800d8a6 <get_memory+0x1e>
 800d88e:	6842      	ldr	r2, [r0, #4]
 800d890:	605a      	str	r2, [r3, #4]
 800d892:	b10a      	cbz	r2, 800d898 <get_memory+0x10>
 800d894:	2100      	movs	r1, #0
 800d896:	6011      	str	r1, [r2, #0]
 800d898:	681a      	ldr	r2, [r3, #0]
 800d89a:	6042      	str	r2, [r0, #4]
 800d89c:	b102      	cbz	r2, 800d8a0 <get_memory+0x18>
 800d89e:	6010      	str	r0, [r2, #0]
 800d8a0:	2200      	movs	r2, #0
 800d8a2:	6002      	str	r2, [r0, #0]
 800d8a4:	6018      	str	r0, [r3, #0]
 800d8a6:	4770      	bx	lr

0800d8a8 <put_memory>:
 800d8a8:	680b      	ldr	r3, [r1, #0]
 800d8aa:	b10b      	cbz	r3, 800d8b0 <put_memory+0x8>
 800d8ac:	684a      	ldr	r2, [r1, #4]
 800d8ae:	605a      	str	r2, [r3, #4]
 800d8b0:	684a      	ldr	r2, [r1, #4]
 800d8b2:	b102      	cbz	r2, 800d8b6 <put_memory+0xe>
 800d8b4:	6013      	str	r3, [r2, #0]
 800d8b6:	6803      	ldr	r3, [r0, #0]
 800d8b8:	428b      	cmp	r3, r1
 800d8ba:	6843      	ldr	r3, [r0, #4]
 800d8bc:	bf08      	it	eq
 800d8be:	6002      	streq	r2, [r0, #0]
 800d8c0:	604b      	str	r3, [r1, #4]
 800d8c2:	b103      	cbz	r3, 800d8c6 <put_memory+0x1e>
 800d8c4:	6019      	str	r1, [r3, #0]
 800d8c6:	2300      	movs	r3, #0
 800d8c8:	600b      	str	r3, [r1, #0]
 800d8ca:	6041      	str	r1, [r0, #4]
 800d8cc:	4770      	bx	lr
 800d8ce:	bf00      	nop

0800d8d0 <rmw_get_implementation_identifier>:
 800d8d0:	4b01      	ldr	r3, [pc, #4]	; (800d8d8 <rmw_get_implementation_identifier+0x8>)
 800d8d2:	6818      	ldr	r0, [r3, #0]
 800d8d4:	4770      	bx	lr
 800d8d6:	bf00      	nop
 800d8d8:	080126cc 	.word	0x080126cc

0800d8dc <rmw_init_options_init>:
 800d8dc:	b084      	sub	sp, #16
 800d8de:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d8e0:	b083      	sub	sp, #12
 800d8e2:	ad09      	add	r5, sp, #36	; 0x24
 800d8e4:	e885 000e 	stmia.w	r5, {r1, r2, r3}
 800d8e8:	b130      	cbz	r0, 800d8f8 <rmw_init_options_init+0x1c>
 800d8ea:	4604      	mov	r4, r0
 800d8ec:	4628      	mov	r0, r5
 800d8ee:	f7fa fa4f 	bl	8007d90 <rcutils_allocator_is_valid>
 800d8f2:	b108      	cbz	r0, 800d8f8 <rmw_init_options_init+0x1c>
 800d8f4:	68a6      	ldr	r6, [r4, #8]
 800d8f6:	b12e      	cbz	r6, 800d904 <rmw_init_options_init+0x28>
 800d8f8:	200b      	movs	r0, #11
 800d8fa:	b003      	add	sp, #12
 800d8fc:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800d900:	b004      	add	sp, #16
 800d902:	4770      	bx	lr
 800d904:	2200      	movs	r2, #0
 800d906:	2300      	movs	r3, #0
 800d908:	e9c4 2300 	strd	r2, r3, [r4]
 800d90c:	4b22      	ldr	r3, [pc, #136]	; (800d998 <rmw_init_options_init+0xbc>)
 800d90e:	f8df e098 	ldr.w	lr, [pc, #152]	; 800d9a8 <rmw_init_options_init+0xcc>
 800d912:	681b      	ldr	r3, [r3, #0]
 800d914:	60a3      	str	r3, [r4, #8]
 800d916:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d918:	f104 0c20 	add.w	ip, r4, #32
 800d91c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800d920:	466f      	mov	r7, sp
 800d922:	682b      	ldr	r3, [r5, #0]
 800d924:	f8cc 3000 	str.w	r3, [ip]
 800d928:	4638      	mov	r0, r7
 800d92a:	f8c4 e01c 	str.w	lr, [r4, #28]
 800d92e:	60e6      	str	r6, [r4, #12]
 800d930:	f7ff fe66 	bl	800d600 <rmw_get_default_security_options>
 800d934:	e897 0003 	ldmia.w	r7, {r0, r1}
 800d938:	f104 0310 	add.w	r3, r4, #16
 800d93c:	e883 0003 	stmia.w	r3, {r0, r1}
 800d940:	2203      	movs	r2, #3
 800d942:	4816      	ldr	r0, [pc, #88]	; (800d99c <rmw_init_options_init+0xc0>)
 800d944:	4916      	ldr	r1, [pc, #88]	; (800d9a0 <rmw_init_options_init+0xc4>)
 800d946:	7626      	strb	r6, [r4, #24]
 800d948:	f7fa fd20 	bl	800838c <rmw_uxrce_init_init_options_impl_memory>
 800d94c:	4813      	ldr	r0, [pc, #76]	; (800d99c <rmw_init_options_init+0xc0>)
 800d94e:	f7ff ff9b 	bl	800d888 <get_memory>
 800d952:	b1f0      	cbz	r0, 800d992 <rmw_init_options_init+0xb6>
 800d954:	4a13      	ldr	r2, [pc, #76]	; (800d9a4 <rmw_init_options_init+0xc8>)
 800d956:	6883      	ldr	r3, [r0, #8]
 800d958:	6851      	ldr	r1, [r2, #4]
 800d95a:	7810      	ldrb	r0, [r2, #0]
 800d95c:	6363      	str	r3, [r4, #52]	; 0x34
 800d95e:	7418      	strb	r0, [r3, #16]
 800d960:	6159      	str	r1, [r3, #20]
 800d962:	68d1      	ldr	r1, [r2, #12]
 800d964:	61d9      	str	r1, [r3, #28]
 800d966:	6911      	ldr	r1, [r2, #16]
 800d968:	6219      	str	r1, [r3, #32]
 800d96a:	6951      	ldr	r1, [r2, #20]
 800d96c:	6892      	ldr	r2, [r2, #8]
 800d96e:	619a      	str	r2, [r3, #24]
 800d970:	6259      	str	r1, [r3, #36]	; 0x24
 800d972:	f7fd faf3 	bl	800af5c <uxr_nanos>
 800d976:	f003 f8e3 	bl	8010b40 <srand>
 800d97a:	f003 f90f 	bl	8010b9c <rand>
 800d97e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800d980:	6298      	str	r0, [r3, #40]	; 0x28
 800d982:	2800      	cmp	r0, #0
 800d984:	d0f9      	beq.n	800d97a <rmw_init_options_init+0x9e>
 800d986:	2000      	movs	r0, #0
 800d988:	b003      	add	sp, #12
 800d98a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800d98e:	b004      	add	sp, #16
 800d990:	4770      	bx	lr
 800d992:	2001      	movs	r0, #1
 800d994:	e7b1      	b.n	800d8fa <rmw_init_options_init+0x1e>
 800d996:	bf00      	nop
 800d998:	080126cc 	.word	0x080126cc
 800d99c:	2000da74 	.word	0x2000da74
 800d9a0:	20009310 	.word	0x20009310
 800d9a4:	2000919c 	.word	0x2000919c
 800d9a8:	0801226c 	.word	0x0801226c

0800d9ac <rmw_init_options_copy>:
 800d9ac:	b570      	push	{r4, r5, r6, lr}
 800d9ae:	b158      	cbz	r0, 800d9c8 <rmw_init_options_copy+0x1c>
 800d9b0:	460d      	mov	r5, r1
 800d9b2:	b149      	cbz	r1, 800d9c8 <rmw_init_options_copy+0x1c>
 800d9b4:	4604      	mov	r4, r0
 800d9b6:	6880      	ldr	r0, [r0, #8]
 800d9b8:	b120      	cbz	r0, 800d9c4 <rmw_init_options_copy+0x18>
 800d9ba:	4b1e      	ldr	r3, [pc, #120]	; (800da34 <rmw_init_options_copy+0x88>)
 800d9bc:	6819      	ldr	r1, [r3, #0]
 800d9be:	f7f2 fc27 	bl	8000210 <strcmp>
 800d9c2:	bb90      	cbnz	r0, 800da2a <rmw_init_options_copy+0x7e>
 800d9c4:	68ab      	ldr	r3, [r5, #8]
 800d9c6:	b113      	cbz	r3, 800d9ce <rmw_init_options_copy+0x22>
 800d9c8:	250b      	movs	r5, #11
 800d9ca:	4628      	mov	r0, r5
 800d9cc:	bd70      	pop	{r4, r5, r6, pc}
 800d9ce:	4623      	mov	r3, r4
 800d9d0:	462a      	mov	r2, r5
 800d9d2:	f104 0630 	add.w	r6, r4, #48	; 0x30
 800d9d6:	f8d3 c000 	ldr.w	ip, [r3]
 800d9da:	6858      	ldr	r0, [r3, #4]
 800d9dc:	6899      	ldr	r1, [r3, #8]
 800d9de:	f8d3 e00c 	ldr.w	lr, [r3, #12]
 800d9e2:	f8c2 e00c 	str.w	lr, [r2, #12]
 800d9e6:	3310      	adds	r3, #16
 800d9e8:	42b3      	cmp	r3, r6
 800d9ea:	f8c2 c000 	str.w	ip, [r2]
 800d9ee:	6050      	str	r0, [r2, #4]
 800d9f0:	6091      	str	r1, [r2, #8]
 800d9f2:	f102 0210 	add.w	r2, r2, #16
 800d9f6:	d1ee      	bne.n	800d9d6 <rmw_init_options_copy+0x2a>
 800d9f8:	6819      	ldr	r1, [r3, #0]
 800d9fa:	685b      	ldr	r3, [r3, #4]
 800d9fc:	480e      	ldr	r0, [pc, #56]	; (800da38 <rmw_init_options_copy+0x8c>)
 800d9fe:	6053      	str	r3, [r2, #4]
 800da00:	6011      	str	r1, [r2, #0]
 800da02:	f7ff ff41 	bl	800d888 <get_memory>
 800da06:	b198      	cbz	r0, 800da30 <rmw_init_options_copy+0x84>
 800da08:	6883      	ldr	r3, [r0, #8]
 800da0a:	636b      	str	r3, [r5, #52]	; 0x34
 800da0c:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800da0e:	f102 0c10 	add.w	ip, r2, #16
 800da12:	f103 0410 	add.w	r4, r3, #16
 800da16:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800da1a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800da1c:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 800da20:	2500      	movs	r5, #0
 800da22:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800da26:	4628      	mov	r0, r5
 800da28:	bd70      	pop	{r4, r5, r6, pc}
 800da2a:	250c      	movs	r5, #12
 800da2c:	4628      	mov	r0, r5
 800da2e:	bd70      	pop	{r4, r5, r6, pc}
 800da30:	2501      	movs	r5, #1
 800da32:	e7ca      	b.n	800d9ca <rmw_init_options_copy+0x1e>
 800da34:	080126cc 	.word	0x080126cc
 800da38:	2000da74 	.word	0x2000da74

0800da3c <rmw_init_options_fini>:
 800da3c:	2800      	cmp	r0, #0
 800da3e:	d03d      	beq.n	800dabc <rmw_init_options_fini+0x80>
 800da40:	b510      	push	{r4, lr}
 800da42:	4604      	mov	r4, r0
 800da44:	b08e      	sub	sp, #56	; 0x38
 800da46:	3020      	adds	r0, #32
 800da48:	f7fa f9a2 	bl	8007d90 <rcutils_allocator_is_valid>
 800da4c:	b360      	cbz	r0, 800daa8 <rmw_init_options_fini+0x6c>
 800da4e:	68a0      	ldr	r0, [r4, #8]
 800da50:	b120      	cbz	r0, 800da5c <rmw_init_options_fini+0x20>
 800da52:	4b1c      	ldr	r3, [pc, #112]	; (800dac4 <rmw_init_options_fini+0x88>)
 800da54:	6819      	ldr	r1, [r3, #0]
 800da56:	f7f2 fbdb 	bl	8000210 <strcmp>
 800da5a:	bb68      	cbnz	r0, 800dab8 <rmw_init_options_fini+0x7c>
 800da5c:	4b1a      	ldr	r3, [pc, #104]	; (800dac8 <rmw_init_options_fini+0x8c>)
 800da5e:	6819      	ldr	r1, [r3, #0]
 800da60:	b331      	cbz	r1, 800dab0 <rmw_init_options_fini+0x74>
 800da62:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800da64:	e001      	b.n	800da6a <rmw_init_options_fini+0x2e>
 800da66:	6849      	ldr	r1, [r1, #4]
 800da68:	b311      	cbz	r1, 800dab0 <rmw_init_options_fini+0x74>
 800da6a:	688b      	ldr	r3, [r1, #8]
 800da6c:	429a      	cmp	r2, r3
 800da6e:	d1fa      	bne.n	800da66 <rmw_init_options_fini+0x2a>
 800da70:	4815      	ldr	r0, [pc, #84]	; (800dac8 <rmw_init_options_fini+0x8c>)
 800da72:	f7ff ff19 	bl	800d8a8 <put_memory>
 800da76:	4668      	mov	r0, sp
 800da78:	f7ff fdb2 	bl	800d5e0 <rmw_get_zero_initialized_init_options>
 800da7c:	46ee      	mov	lr, sp
 800da7e:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800da82:	46a4      	mov	ip, r4
 800da84:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800da88:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800da8c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800da90:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800da94:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800da98:	e89e 0003 	ldmia.w	lr, {r0, r1}
 800da9c:	e88c 0003 	stmia.w	ip, {r0, r1}
 800daa0:	2300      	movs	r3, #0
 800daa2:	4618      	mov	r0, r3
 800daa4:	b00e      	add	sp, #56	; 0x38
 800daa6:	bd10      	pop	{r4, pc}
 800daa8:	230b      	movs	r3, #11
 800daaa:	4618      	mov	r0, r3
 800daac:	b00e      	add	sp, #56	; 0x38
 800daae:	bd10      	pop	{r4, pc}
 800dab0:	2301      	movs	r3, #1
 800dab2:	4618      	mov	r0, r3
 800dab4:	b00e      	add	sp, #56	; 0x38
 800dab6:	bd10      	pop	{r4, pc}
 800dab8:	230c      	movs	r3, #12
 800daba:	e7f2      	b.n	800daa2 <rmw_init_options_fini+0x66>
 800dabc:	230b      	movs	r3, #11
 800dabe:	4618      	mov	r0, r3
 800dac0:	4770      	bx	lr
 800dac2:	bf00      	nop
 800dac4:	080126cc 	.word	0x080126cc
 800dac8:	2000da74 	.word	0x2000da74

0800dacc <rmw_init>:
 800dacc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800dad0:	b083      	sub	sp, #12
 800dad2:	2800      	cmp	r0, #0
 800dad4:	f000 80d3 	beq.w	800dc7e <rmw_init+0x1b2>
 800dad8:	460e      	mov	r6, r1
 800dada:	2900      	cmp	r1, #0
 800dadc:	f000 80cf 	beq.w	800dc7e <rmw_init+0x1b2>
 800dae0:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800dae2:	4605      	mov	r5, r0
 800dae4:	2b00      	cmp	r3, #0
 800dae6:	f000 80ca 	beq.w	800dc7e <rmw_init+0x1b2>
 800daea:	4b78      	ldr	r3, [pc, #480]	; (800dccc <rmw_init+0x200>)
 800daec:	6880      	ldr	r0, [r0, #8]
 800daee:	681f      	ldr	r7, [r3, #0]
 800daf0:	b128      	cbz	r0, 800dafe <rmw_init+0x32>
 800daf2:	4639      	mov	r1, r7
 800daf4:	f7f2 fb8c 	bl	8000210 <strcmp>
 800daf8:	2800      	cmp	r0, #0
 800dafa:	f040 80ca 	bne.w	800dc92 <rmw_init+0x1c6>
 800dafe:	e9d5 2300 	ldrd	r2, r3, [r5]
 800db02:	4c73      	ldr	r4, [pc, #460]	; (800dcd0 <rmw_init+0x204>)
 800db04:	4973      	ldr	r1, [pc, #460]	; (800dcd4 <rmw_init+0x208>)
 800db06:	4874      	ldr	r0, [pc, #464]	; (800dcd8 <rmw_init+0x20c>)
 800db08:	60b7      	str	r7, [r6, #8]
 800db0a:	e9c6 2300 	strd	r2, r3, [r6]
 800db0e:	68eb      	ldr	r3, [r5, #12]
 800db10:	64b3      	str	r3, [r6, #72]	; 0x48
 800db12:	2201      	movs	r2, #1
 800db14:	f7fa fbda 	bl	80082cc <rmw_uxrce_init_session_memory>
 800db18:	4620      	mov	r0, r4
 800db1a:	4970      	ldr	r1, [pc, #448]	; (800dcdc <rmw_init+0x210>)
 800db1c:	2204      	movs	r2, #4
 800db1e:	f7fa fc15 	bl	800834c <rmw_uxrce_init_static_input_buffer_memory>
 800db22:	f04f 0800 	mov.w	r8, #0
 800db26:	486c      	ldr	r0, [pc, #432]	; (800dcd8 <rmw_init+0x20c>)
 800db28:	f884 800d 	strb.w	r8, [r4, #13]
 800db2c:	f7ff feac 	bl	800d888 <get_memory>
 800db30:	2800      	cmp	r0, #0
 800db32:	f000 80a9 	beq.w	800dc88 <rmw_init+0x1bc>
 800db36:	6884      	ldr	r4, [r0, #8]
 800db38:	6b68      	ldr	r0, [r5, #52]	; 0x34
 800db3a:	6a41      	ldr	r1, [r0, #36]	; 0x24
 800db3c:	f890 c010 	ldrb.w	ip, [r0, #16]
 800db40:	e9d0 2306 	ldrd	r2, r3, [r0, #24]
 800db44:	9101      	str	r1, [sp, #4]
 800db46:	6a00      	ldr	r0, [r0, #32]
 800db48:	9000      	str	r0, [sp, #0]
 800db4a:	f104 0910 	add.w	r9, r4, #16
 800db4e:	4661      	mov	r1, ip
 800db50:	4648      	mov	r0, r9
 800db52:	f000 fdbf 	bl	800e6d4 <uxr_set_custom_transport_callbacks>
 800db56:	f504 5380 	add.w	r3, r4, #4096	; 0x1000
 800db5a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800db5e:	e9c4 22e3 	strd	r2, r2, [r4, #908]	; 0x38c
 800db62:	f504 725e 	add.w	r2, r4, #888	; 0x378
 800db66:	e9c4 22e1 	strd	r2, r2, [r4, #900]	; 0x384
 800db6a:	495d      	ldr	r1, [pc, #372]	; (800dce0 <rmw_init+0x214>)
 800db6c:	f8c3 8594 	str.w	r8, [r3, #1428]	; 0x594
 800db70:	f8c3 8598 	str.w	r8, [r3, #1432]	; 0x598
 800db74:	f8c3 859c 	str.w	r8, [r3, #1436]	; 0x59c
 800db78:	f8c3 85a0 	str.w	r8, [r3, #1440]	; 0x5a0
 800db7c:	4859      	ldr	r0, [pc, #356]	; (800dce4 <rmw_init+0x218>)
 800db7e:	e9c4 78da 	strd	r7, r8, [r4, #872]	; 0x368
 800db82:	2201      	movs	r2, #1
 800db84:	64f4      	str	r4, [r6, #76]	; 0x4c
 800db86:	f7fa fb81 	bl	800828c <rmw_uxrce_init_node_memory>
 800db8a:	4957      	ldr	r1, [pc, #348]	; (800dce8 <rmw_init+0x21c>)
 800db8c:	4857      	ldr	r0, [pc, #348]	; (800dcec <rmw_init+0x220>)
 800db8e:	2205      	movs	r2, #5
 800db90:	f7fa fb5c 	bl	800824c <rmw_uxrce_init_subscription_memory>
 800db94:	4956      	ldr	r1, [pc, #344]	; (800dcf0 <rmw_init+0x224>)
 800db96:	4857      	ldr	r0, [pc, #348]	; (800dcf4 <rmw_init+0x228>)
 800db98:	220a      	movs	r2, #10
 800db9a:	f7fa fb37 	bl	800820c <rmw_uxrce_init_publisher_memory>
 800db9e:	4956      	ldr	r1, [pc, #344]	; (800dcf8 <rmw_init+0x22c>)
 800dba0:	4856      	ldr	r0, [pc, #344]	; (800dcfc <rmw_init+0x230>)
 800dba2:	2201      	movs	r2, #1
 800dba4:	f7fa faf2 	bl	800818c <rmw_uxrce_init_service_memory>
 800dba8:	4955      	ldr	r1, [pc, #340]	; (800dd00 <rmw_init+0x234>)
 800dbaa:	4856      	ldr	r0, [pc, #344]	; (800dd04 <rmw_init+0x238>)
 800dbac:	2201      	movs	r2, #1
 800dbae:	f7fa fb0d 	bl	80081cc <rmw_uxrce_init_client_memory>
 800dbb2:	4955      	ldr	r1, [pc, #340]	; (800dd08 <rmw_init+0x23c>)
 800dbb4:	4855      	ldr	r0, [pc, #340]	; (800dd0c <rmw_init+0x240>)
 800dbb6:	220f      	movs	r2, #15
 800dbb8:	f7fa fba8 	bl	800830c <rmw_uxrce_init_topic_memory>
 800dbbc:	4954      	ldr	r1, [pc, #336]	; (800dd10 <rmw_init+0x244>)
 800dbbe:	4855      	ldr	r0, [pc, #340]	; (800dd14 <rmw_init+0x248>)
 800dbc0:	2203      	movs	r2, #3
 800dbc2:	f7fa fbe3 	bl	800838c <rmw_uxrce_init_init_options_impl_memory>
 800dbc6:	4954      	ldr	r1, [pc, #336]	; (800dd18 <rmw_init+0x24c>)
 800dbc8:	4854      	ldr	r0, [pc, #336]	; (800dd1c <rmw_init+0x250>)
 800dbca:	2204      	movs	r2, #4
 800dbcc:	f7fa fbfe 	bl	80083cc <rmw_uxrce_init_wait_set_memory>
 800dbd0:	4953      	ldr	r1, [pc, #332]	; (800dd20 <rmw_init+0x254>)
 800dbd2:	4854      	ldr	r0, [pc, #336]	; (800dd24 <rmw_init+0x258>)
 800dbd4:	2204      	movs	r2, #4
 800dbd6:	f7fa fc19 	bl	800840c <rmw_uxrce_init_guard_condition_memory>
 800dbda:	6b69      	ldr	r1, [r5, #52]	; 0x34
 800dbdc:	6cf0      	ldr	r0, [r6, #76]	; 0x4c
 800dbde:	4642      	mov	r2, r8
 800dbe0:	f000 fb06 	bl	800e1f0 <rmw_uxrce_transport_init>
 800dbe4:	4607      	mov	r7, r0
 800dbe6:	2800      	cmp	r0, #0
 800dbe8:	d158      	bne.n	800dc9c <rmw_init+0x1d0>
 800dbea:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 800dbec:	f504 7528 	add.w	r5, r4, #672	; 0x2a0
 800dbf0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800dbf2:	f504 7122 	add.w	r1, r4, #648	; 0x288
 800dbf6:	4628      	mov	r0, r5
 800dbf8:	f7fc f84e 	bl	8009c98 <uxr_init_session>
 800dbfc:	494a      	ldr	r1, [pc, #296]	; (800dd28 <rmw_init+0x25c>)
 800dbfe:	4622      	mov	r2, r4
 800dc00:	4628      	mov	r0, r5
 800dc02:	f7fc f86d 	bl	8009ce0 <uxr_set_topic_callback>
 800dc06:	4949      	ldr	r1, [pc, #292]	; (800dd2c <rmw_init+0x260>)
 800dc08:	463a      	mov	r2, r7
 800dc0a:	4628      	mov	r0, r5
 800dc0c:	f7fc f864 	bl	8009cd8 <uxr_set_status_callback>
 800dc10:	4947      	ldr	r1, [pc, #284]	; (800dd30 <rmw_init+0x264>)
 800dc12:	463a      	mov	r2, r7
 800dc14:	4628      	mov	r0, r5
 800dc16:	f7fc f867 	bl	8009ce8 <uxr_set_request_callback>
 800dc1a:	4946      	ldr	r1, [pc, #280]	; (800dd34 <rmw_init+0x268>)
 800dc1c:	463a      	mov	r2, r7
 800dc1e:	4628      	mov	r0, r5
 800dc20:	f7fc f866 	bl	8009cf0 <uxr_set_reply_callback>
 800dc24:	f8b4 2298 	ldrh.w	r2, [r4, #664]	; 0x298
 800dc28:	2304      	movs	r3, #4
 800dc2a:	0092      	lsls	r2, r2, #2
 800dc2c:	f504 7165 	add.w	r1, r4, #916	; 0x394
 800dc30:	4628      	mov	r0, r5
 800dc32:	f7fc f89b 	bl	8009d6c <uxr_create_input_reliable_stream>
 800dc36:	f8b4 2298 	ldrh.w	r2, [r4, #664]	; 0x298
 800dc3a:	f8c4 0374 	str.w	r0, [r4, #884]	; 0x374
 800dc3e:	0092      	lsls	r2, r2, #2
 800dc40:	2304      	movs	r3, #4
 800dc42:	f604 3194 	addw	r1, r4, #2964	; 0xb94
 800dc46:	4628      	mov	r0, r5
 800dc48:	f7fc f868 	bl	8009d1c <uxr_create_output_reliable_stream>
 800dc4c:	f8c4 0378 	str.w	r0, [r4, #888]	; 0x378
 800dc50:	4628      	mov	r0, r5
 800dc52:	f7fc f885 	bl	8009d60 <uxr_create_input_best_effort_stream>
 800dc56:	f504 519c 	add.w	r1, r4, #4992	; 0x1380
 800dc5a:	f8c4 0380 	str.w	r0, [r4, #896]	; 0x380
 800dc5e:	f8b4 2298 	ldrh.w	r2, [r4, #664]	; 0x298
 800dc62:	3114      	adds	r1, #20
 800dc64:	4628      	mov	r0, r5
 800dc66:	f7fc f847 	bl	8009cf8 <uxr_create_output_best_effort_stream>
 800dc6a:	f8c4 037c 	str.w	r0, [r4, #892]	; 0x37c
 800dc6e:	4628      	mov	r0, r5
 800dc70:	f7fc fd98 	bl	800a7a4 <uxr_create_session>
 800dc74:	b1f8      	cbz	r0, 800dcb6 <rmw_init+0x1ea>
 800dc76:	4638      	mov	r0, r7
 800dc78:	b003      	add	sp, #12
 800dc7a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800dc7e:	270b      	movs	r7, #11
 800dc80:	4638      	mov	r0, r7
 800dc82:	b003      	add	sp, #12
 800dc84:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800dc88:	2701      	movs	r7, #1
 800dc8a:	4638      	mov	r0, r7
 800dc8c:	b003      	add	sp, #12
 800dc8e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800dc92:	270c      	movs	r7, #12
 800dc94:	4638      	mov	r0, r7
 800dc96:	b003      	add	sp, #12
 800dc98:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800dc9c:	4648      	mov	r0, r9
 800dc9e:	f000 fd5b 	bl	800e758 <uxr_close_custom_transport>
 800dca2:	480d      	ldr	r0, [pc, #52]	; (800dcd8 <rmw_init+0x20c>)
 800dca4:	4621      	mov	r1, r4
 800dca6:	f7ff fdff 	bl	800d8a8 <put_memory>
 800dcaa:	4638      	mov	r0, r7
 800dcac:	f8c6 804c 	str.w	r8, [r6, #76]	; 0x4c
 800dcb0:	b003      	add	sp, #12
 800dcb2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800dcb6:	4648      	mov	r0, r9
 800dcb8:	f000 fd4e 	bl	800e758 <uxr_close_custom_transport>
 800dcbc:	4806      	ldr	r0, [pc, #24]	; (800dcd8 <rmw_init+0x20c>)
 800dcbe:	4621      	mov	r1, r4
 800dcc0:	f7ff fdf2 	bl	800d8a8 <put_memory>
 800dcc4:	64f7      	str	r7, [r6, #76]	; 0x4c
 800dcc6:	2701      	movs	r7, #1
 800dcc8:	e7d5      	b.n	800dc76 <rmw_init+0x1aa>
 800dcca:	bf00      	nop
 800dccc:	080126cc 	.word	0x080126cc
 800dcd0:	2000dac4 	.word	0x2000dac4
 800dcd4:	20009d70 	.word	0x20009d70
 800dcd8:	2000dab4 	.word	0x2000dab4
 800dcdc:	2000b318 	.word	0x2000b318
 800dce0:	20009394 	.word	0x20009394
 800dce4:	2000da84 	.word	0x2000da84
 800dce8:	2000d418 	.word	0x2000d418
 800dcec:	2000dad4 	.word	0x2000dad4
 800dcf0:	20009438 	.word	0x20009438
 800dcf4:	2000da94 	.word	0x2000da94
 800dcf8:	20009ca8 	.word	0x20009ca8
 800dcfc:	2000daa4 	.word	0x2000daa4
 800dd00:	200091c8 	.word	0x200091c8
 800dd04:	200091b8 	.word	0x200091b8
 800dd08:	2000d850 	.word	0x2000d850
 800dd0c:	2000dae4 	.word	0x2000dae4
 800dd10:	20009310 	.word	0x20009310
 800dd14:	2000da74 	.word	0x2000da74
 800dd18:	2000d9f4 	.word	0x2000d9f4
 800dd1c:	2000daf4 	.word	0x2000daf4
 800dd20:	20009290 	.word	0x20009290
 800dd24:	2000da64 	.word	0x2000da64
 800dd28:	08010351 	.word	0x08010351
 800dd2c:	08010349 	.word	0x08010349
 800dd30:	080103e9 	.word	0x080103e9
 800dd34:	08010485 	.word	0x08010485

0800dd38 <rmw_context_fini>:
 800dd38:	4b17      	ldr	r3, [pc, #92]	; (800dd98 <rmw_context_fini+0x60>)
 800dd3a:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 800dd3c:	b570      	push	{r4, r5, r6, lr}
 800dd3e:	681c      	ldr	r4, [r3, #0]
 800dd40:	4605      	mov	r5, r0
 800dd42:	b334      	cbz	r4, 800dd92 <rmw_context_fini+0x5a>
 800dd44:	2600      	movs	r6, #0
 800dd46:	e9d4 4001 	ldrd	r4, r0, [r4, #4]
 800dd4a:	6902      	ldr	r2, [r0, #16]
 800dd4c:	428a      	cmp	r2, r1
 800dd4e:	d018      	beq.n	800dd82 <rmw_context_fini+0x4a>
 800dd50:	2c00      	cmp	r4, #0
 800dd52:	d1f8      	bne.n	800dd46 <rmw_context_fini+0xe>
 800dd54:	b189      	cbz	r1, 800dd7a <rmw_context_fini+0x42>
 800dd56:	f8d1 3388 	ldr.w	r3, [r1, #904]	; 0x388
 800dd5a:	789b      	ldrb	r3, [r3, #2]
 800dd5c:	2b01      	cmp	r3, #1
 800dd5e:	f501 7028 	add.w	r0, r1, #672	; 0x2a0
 800dd62:	bf14      	ite	ne
 800dd64:	210a      	movne	r1, #10
 800dd66:	2100      	moveq	r1, #0
 800dd68:	f7fc fcf4 	bl	800a754 <uxr_delete_session_retries>
 800dd6c:	6ce8      	ldr	r0, [r5, #76]	; 0x4c
 800dd6e:	f7fa fb6d 	bl	800844c <rmw_uxrce_fini_session_memory>
 800dd72:	6ce8      	ldr	r0, [r5, #76]	; 0x4c
 800dd74:	3010      	adds	r0, #16
 800dd76:	f000 fcef 	bl	800e758 <uxr_close_custom_transport>
 800dd7a:	2300      	movs	r3, #0
 800dd7c:	64eb      	str	r3, [r5, #76]	; 0x4c
 800dd7e:	4630      	mov	r0, r6
 800dd80:	bd70      	pop	{r4, r5, r6, pc}
 800dd82:	3018      	adds	r0, #24
 800dd84:	f000 f90e 	bl	800dfa4 <rmw_destroy_node>
 800dd88:	6ce9      	ldr	r1, [r5, #76]	; 0x4c
 800dd8a:	4606      	mov	r6, r0
 800dd8c:	2c00      	cmp	r4, #0
 800dd8e:	d1da      	bne.n	800dd46 <rmw_context_fini+0xe>
 800dd90:	e7e0      	b.n	800dd54 <rmw_context_fini+0x1c>
 800dd92:	4626      	mov	r6, r4
 800dd94:	e7de      	b.n	800dd54 <rmw_context_fini+0x1c>
 800dd96:	bf00      	nop
 800dd98:	2000da84 	.word	0x2000da84

0800dd9c <create_topic>:
 800dd9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dda0:	4605      	mov	r5, r0
 800dda2:	b084      	sub	sp, #16
 800dda4:	4822      	ldr	r0, [pc, #136]	; (800de30 <create_topic+0x94>)
 800dda6:	460f      	mov	r7, r1
 800dda8:	4616      	mov	r6, r2
 800ddaa:	f7ff fd6d 	bl	800d888 <get_memory>
 800ddae:	4604      	mov	r4, r0
 800ddb0:	2800      	cmp	r0, #0
 800ddb2:	d039      	beq.n	800de28 <create_topic+0x8c>
 800ddb4:	692b      	ldr	r3, [r5, #16]
 800ddb6:	6884      	ldr	r4, [r0, #8]
 800ddb8:	f8df 807c 	ldr.w	r8, [pc, #124]	; 800de38 <create_topic+0x9c>
 800ddbc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ddc0:	e9c4 6505 	strd	r6, r5, [r4, #20]
 800ddc4:	f8b3 0596 	ldrh.w	r0, [r3, #1430]	; 0x596
 800ddc8:	1c42      	adds	r2, r0, #1
 800ddca:	2102      	movs	r1, #2
 800ddcc:	f8a3 2596 	strh.w	r2, [r3, #1430]	; 0x596
 800ddd0:	f7fb fea4 	bl	8009b1c <uxr_object_id>
 800ddd4:	223c      	movs	r2, #60	; 0x3c
 800ddd6:	6120      	str	r0, [r4, #16]
 800ddd8:	4641      	mov	r1, r8
 800ddda:	4638      	mov	r0, r7
 800dddc:	f7fa fc6e 	bl	80086bc <generate_topic_name>
 800dde0:	b1f0      	cbz	r0, 800de20 <create_topic+0x84>
 800dde2:	4f14      	ldr	r7, [pc, #80]	; (800de34 <create_topic+0x98>)
 800dde4:	4630      	mov	r0, r6
 800dde6:	2264      	movs	r2, #100	; 0x64
 800dde8:	4639      	mov	r1, r7
 800ddea:	f7fa fc37 	bl	800865c <generate_type_name>
 800ddee:	b1b8      	cbz	r0, 800de20 <create_topic+0x84>
 800ddf0:	6928      	ldr	r0, [r5, #16]
 800ddf2:	2306      	movs	r3, #6
 800ddf4:	f8d0 2384 	ldr.w	r2, [r0, #900]	; 0x384
 800ddf8:	f8cd 8000 	str.w	r8, [sp]
 800ddfc:	e9cd 7301 	strd	r7, r3, [sp, #4]
 800de00:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800de04:	6811      	ldr	r1, [r2, #0]
 800de06:	696b      	ldr	r3, [r5, #20]
 800de08:	6922      	ldr	r2, [r4, #16]
 800de0a:	f7fb fdab 	bl	8009964 <uxr_buffer_create_topic_bin>
 800de0e:	4602      	mov	r2, r0
 800de10:	6928      	ldr	r0, [r5, #16]
 800de12:	f8d0 338c 	ldr.w	r3, [r0, #908]	; 0x38c
 800de16:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 800de1a:	f7fa fbe9 	bl	80085f0 <run_xrce_session>
 800de1e:	b918      	cbnz	r0, 800de28 <create_topic+0x8c>
 800de20:	4620      	mov	r0, r4
 800de22:	f7fa fb89 	bl	8008538 <rmw_uxrce_fini_topic_memory>
 800de26:	2400      	movs	r4, #0
 800de28:	4620      	mov	r0, r4
 800de2a:	b004      	add	sp, #16
 800de2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800de30:	2000dae4 	.word	0x2000dae4
 800de34:	2000db60 	.word	0x2000db60
 800de38:	2000db24 	.word	0x2000db24

0800de3c <destroy_topic>:
 800de3c:	b538      	push	{r3, r4, r5, lr}
 800de3e:	6985      	ldr	r5, [r0, #24]
 800de40:	b1d5      	cbz	r5, 800de78 <destroy_topic+0x3c>
 800de42:	4604      	mov	r4, r0
 800de44:	6928      	ldr	r0, [r5, #16]
 800de46:	6922      	ldr	r2, [r4, #16]
 800de48:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 800de4c:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800de50:	6819      	ldr	r1, [r3, #0]
 800de52:	f7fb fd09 	bl	8009868 <uxr_buffer_delete_entity>
 800de56:	4602      	mov	r2, r0
 800de58:	6928      	ldr	r0, [r5, #16]
 800de5a:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 800de5e:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 800de62:	f7fa fbc5 	bl	80085f0 <run_xrce_session>
 800de66:	2800      	cmp	r0, #0
 800de68:	4620      	mov	r0, r4
 800de6a:	bf14      	ite	ne
 800de6c:	2400      	movne	r4, #0
 800de6e:	2402      	moveq	r4, #2
 800de70:	f7fa fb62 	bl	8008538 <rmw_uxrce_fini_topic_memory>
 800de74:	4620      	mov	r0, r4
 800de76:	bd38      	pop	{r3, r4, r5, pc}
 800de78:	2401      	movs	r4, #1
 800de7a:	4620      	mov	r0, r4
 800de7c:	bd38      	pop	{r3, r4, r5, pc}
 800de7e:	bf00      	nop

0800de80 <create_node>:
 800de80:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800de84:	b083      	sub	sp, #12
 800de86:	2b00      	cmp	r3, #0
 800de88:	d05f      	beq.n	800df4a <create_node+0xca>
 800de8a:	4606      	mov	r6, r0
 800de8c:	4835      	ldr	r0, [pc, #212]	; (800df64 <create_node+0xe4>)
 800de8e:	460f      	mov	r7, r1
 800de90:	4690      	mov	r8, r2
 800de92:	461d      	mov	r5, r3
 800de94:	f7ff fcf8 	bl	800d888 <get_memory>
 800de98:	2800      	cmp	r0, #0
 800de9a:	d056      	beq.n	800df4a <create_node+0xca>
 800de9c:	6884      	ldr	r4, [r0, #8]
 800de9e:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 800dea0:	6123      	str	r3, [r4, #16]
 800dea2:	f7ff fd15 	bl	800d8d0 <rmw_get_implementation_identifier>
 800dea6:	f104 092c 	add.w	r9, r4, #44	; 0x2c
 800deaa:	e9c4 0406 	strd	r0, r4, [r4, #24]
 800deae:	f8c4 9020 	str.w	r9, [r4, #32]
 800deb2:	4630      	mov	r0, r6
 800deb4:	f7f2 f9b6 	bl	8000224 <strlen>
 800deb8:	1c42      	adds	r2, r0, #1
 800deba:	2a3c      	cmp	r2, #60	; 0x3c
 800debc:	f104 0518 	add.w	r5, r4, #24
 800dec0:	d840      	bhi.n	800df44 <create_node+0xc4>
 800dec2:	4648      	mov	r0, r9
 800dec4:	4631      	mov	r1, r6
 800dec6:	f104 0968 	add.w	r9, r4, #104	; 0x68
 800deca:	f002 fd15 	bl	80108f8 <memcpy>
 800dece:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
 800ded2:	4638      	mov	r0, r7
 800ded4:	f7f2 f9a6 	bl	8000224 <strlen>
 800ded8:	1c42      	adds	r2, r0, #1
 800deda:	2a3c      	cmp	r2, #60	; 0x3c
 800dedc:	d832      	bhi.n	800df44 <create_node+0xc4>
 800dede:	4639      	mov	r1, r7
 800dee0:	4648      	mov	r0, r9
 800dee2:	f002 fd09 	bl	80108f8 <memcpy>
 800dee6:	6923      	ldr	r3, [r4, #16]
 800dee8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800deec:	2101      	movs	r1, #1
 800deee:	f8b3 0594 	ldrh.w	r0, [r3, #1428]	; 0x594
 800def2:	1842      	adds	r2, r0, r1
 800def4:	f8a3 2594 	strh.w	r2, [r3, #1428]	; 0x594
 800def8:	f7fb fe10 	bl	8009b1c <uxr_object_id>
 800defc:	6160      	str	r0, [r4, #20]
 800defe:	783b      	ldrb	r3, [r7, #0]
 800df00:	2b2f      	cmp	r3, #47	; 0x2f
 800df02:	d127      	bne.n	800df54 <create_node+0xd4>
 800df04:	787b      	ldrb	r3, [r7, #1]
 800df06:	bb2b      	cbnz	r3, 800df54 <create_node+0xd4>
 800df08:	4a17      	ldr	r2, [pc, #92]	; (800df68 <create_node+0xe8>)
 800df0a:	4818      	ldr	r0, [pc, #96]	; (800df6c <create_node+0xec>)
 800df0c:	4633      	mov	r3, r6
 800df0e:	213c      	movs	r1, #60	; 0x3c
 800df10:	f002 ff04 	bl	8010d1c <sniprintf>
 800df14:	6920      	ldr	r0, [r4, #16]
 800df16:	4915      	ldr	r1, [pc, #84]	; (800df6c <create_node+0xec>)
 800df18:	f8d0 2384 	ldr.w	r2, [r0, #900]	; 0x384
 800df1c:	9100      	str	r1, [sp, #0]
 800df1e:	2106      	movs	r1, #6
 800df20:	9101      	str	r1, [sp, #4]
 800df22:	6811      	ldr	r1, [r2, #0]
 800df24:	6962      	ldr	r2, [r4, #20]
 800df26:	fa1f f388 	uxth.w	r3, r8
 800df2a:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800df2e:	f7fb fce7 	bl	8009900 <uxr_buffer_create_participant_bin>
 800df32:	4602      	mov	r2, r0
 800df34:	6920      	ldr	r0, [r4, #16]
 800df36:	f8d0 338c 	ldr.w	r3, [r0, #908]	; 0x38c
 800df3a:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 800df3e:	f7fa fb57 	bl	80085f0 <run_xrce_session>
 800df42:	b918      	cbnz	r0, 800df4c <create_node+0xcc>
 800df44:	4628      	mov	r0, r5
 800df46:	f7fa fa87 	bl	8008458 <rmw_uxrce_fini_node_memory>
 800df4a:	2500      	movs	r5, #0
 800df4c:	4628      	mov	r0, r5
 800df4e:	b003      	add	sp, #12
 800df50:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800df54:	4a06      	ldr	r2, [pc, #24]	; (800df70 <create_node+0xf0>)
 800df56:	9600      	str	r6, [sp, #0]
 800df58:	463b      	mov	r3, r7
 800df5a:	213c      	movs	r1, #60	; 0x3c
 800df5c:	4803      	ldr	r0, [pc, #12]	; (800df6c <create_node+0xec>)
 800df5e:	f002 fedd 	bl	8010d1c <sniprintf>
 800df62:	e7d7      	b.n	800df14 <create_node+0x94>
 800df64:	2000da84 	.word	0x2000da84
 800df68:	080120e4 	.word	0x080120e4
 800df6c:	2000dbc4 	.word	0x2000dbc4
 800df70:	08012274 	.word	0x08012274

0800df74 <rmw_create_node>:
 800df74:	b199      	cbz	r1, 800df9e <rmw_create_node+0x2a>
 800df76:	780b      	ldrb	r3, [r1, #0]
 800df78:	468c      	mov	ip, r1
 800df7a:	b183      	cbz	r3, 800df9e <rmw_create_node+0x2a>
 800df7c:	b410      	push	{r4}
 800df7e:	4614      	mov	r4, r2
 800df80:	b14a      	cbz	r2, 800df96 <rmw_create_node+0x22>
 800df82:	7813      	ldrb	r3, [r2, #0]
 800df84:	b13b      	cbz	r3, 800df96 <rmw_create_node+0x22>
 800df86:	6c82      	ldr	r2, [r0, #72]	; 0x48
 800df88:	4603      	mov	r3, r0
 800df8a:	4621      	mov	r1, r4
 800df8c:	4660      	mov	r0, ip
 800df8e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800df92:	f7ff bf75 	b.w	800de80 <create_node>
 800df96:	2000      	movs	r0, #0
 800df98:	f85d 4b04 	ldr.w	r4, [sp], #4
 800df9c:	4770      	bx	lr
 800df9e:	2000      	movs	r0, #0
 800dfa0:	4770      	bx	lr
 800dfa2:	bf00      	nop

0800dfa4 <rmw_destroy_node>:
 800dfa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dfa6:	b328      	cbz	r0, 800dff4 <rmw_destroy_node+0x50>
 800dfa8:	4607      	mov	r7, r0
 800dfaa:	6800      	ldr	r0, [r0, #0]
 800dfac:	b120      	cbz	r0, 800dfb8 <rmw_destroy_node+0x14>
 800dfae:	4b36      	ldr	r3, [pc, #216]	; (800e088 <rmw_destroy_node+0xe4>)
 800dfb0:	6819      	ldr	r1, [r3, #0]
 800dfb2:	f7f2 f92d 	bl	8000210 <strcmp>
 800dfb6:	b9e8      	cbnz	r0, 800dff4 <rmw_destroy_node+0x50>
 800dfb8:	687d      	ldr	r5, [r7, #4]
 800dfba:	b1dd      	cbz	r5, 800dff4 <rmw_destroy_node+0x50>
 800dfbc:	4b33      	ldr	r3, [pc, #204]	; (800e08c <rmw_destroy_node+0xe8>)
 800dfbe:	681c      	ldr	r4, [r3, #0]
 800dfc0:	2c00      	cmp	r4, #0
 800dfc2:	d05f      	beq.n	800e084 <rmw_destroy_node+0xe0>
 800dfc4:	2600      	movs	r6, #0
 800dfc6:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 800dfca:	f8d1 3080 	ldr.w	r3, [r1, #128]	; 0x80
 800dfce:	429d      	cmp	r5, r3
 800dfd0:	d013      	beq.n	800dffa <rmw_destroy_node+0x56>
 800dfd2:	2c00      	cmp	r4, #0
 800dfd4:	d1f7      	bne.n	800dfc6 <rmw_destroy_node+0x22>
 800dfd6:	4b2e      	ldr	r3, [pc, #184]	; (800e090 <rmw_destroy_node+0xec>)
 800dfd8:	681c      	ldr	r4, [r3, #0]
 800dfda:	b1c4      	cbz	r4, 800e00e <rmw_destroy_node+0x6a>
 800dfdc:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 800dfe0:	6a0b      	ldr	r3, [r1, #32]
 800dfe2:	429d      	cmp	r5, r3
 800dfe4:	d1f9      	bne.n	800dfda <rmw_destroy_node+0x36>
 800dfe6:	317c      	adds	r1, #124	; 0x7c
 800dfe8:	4638      	mov	r0, r7
 800dfea:	f000 f8a1 	bl	800e130 <rmw_destroy_subscription>
 800dfee:	2801      	cmp	r0, #1
 800dff0:	4606      	mov	r6, r0
 800dff2:	d1f2      	bne.n	800dfda <rmw_destroy_node+0x36>
 800dff4:	2601      	movs	r6, #1
 800dff6:	4630      	mov	r0, r6
 800dff8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dffa:	3184      	adds	r1, #132	; 0x84
 800dffc:	4638      	mov	r0, r7
 800dffe:	f7fa f873 	bl	80080e8 <rmw_destroy_publisher>
 800e002:	2801      	cmp	r0, #1
 800e004:	4606      	mov	r6, r0
 800e006:	d0f5      	beq.n	800dff4 <rmw_destroy_node+0x50>
 800e008:	2c00      	cmp	r4, #0
 800e00a:	d1dc      	bne.n	800dfc6 <rmw_destroy_node+0x22>
 800e00c:	e7e3      	b.n	800dfd6 <rmw_destroy_node+0x32>
 800e00e:	4b21      	ldr	r3, [pc, #132]	; (800e094 <rmw_destroy_node+0xf0>)
 800e010:	681c      	ldr	r4, [r3, #0]
 800e012:	b16c      	cbz	r4, 800e030 <rmw_destroy_node+0x8c>
 800e014:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 800e018:	6f8b      	ldr	r3, [r1, #120]	; 0x78
 800e01a:	429d      	cmp	r5, r3
 800e01c:	d1f9      	bne.n	800e012 <rmw_destroy_node+0x6e>
 800e01e:	317c      	adds	r1, #124	; 0x7c
 800e020:	4638      	mov	r0, r7
 800e022:	f000 f841 	bl	800e0a8 <rmw_destroy_service>
 800e026:	2801      	cmp	r0, #1
 800e028:	4606      	mov	r6, r0
 800e02a:	d0e3      	beq.n	800dff4 <rmw_destroy_node+0x50>
 800e02c:	2c00      	cmp	r4, #0
 800e02e:	d1f1      	bne.n	800e014 <rmw_destroy_node+0x70>
 800e030:	4b19      	ldr	r3, [pc, #100]	; (800e098 <rmw_destroy_node+0xf4>)
 800e032:	681c      	ldr	r4, [r3, #0]
 800e034:	b16c      	cbz	r4, 800e052 <rmw_destroy_node+0xae>
 800e036:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 800e03a:	6f8b      	ldr	r3, [r1, #120]	; 0x78
 800e03c:	429d      	cmp	r5, r3
 800e03e:	d1f9      	bne.n	800e034 <rmw_destroy_node+0x90>
 800e040:	317c      	adds	r1, #124	; 0x7c
 800e042:	4638      	mov	r0, r7
 800e044:	f002 fa68 	bl	8010518 <rmw_destroy_client>
 800e048:	2801      	cmp	r0, #1
 800e04a:	4606      	mov	r6, r0
 800e04c:	d0d2      	beq.n	800dff4 <rmw_destroy_node+0x50>
 800e04e:	2c00      	cmp	r4, #0
 800e050:	d1f1      	bne.n	800e036 <rmw_destroy_node+0x92>
 800e052:	6928      	ldr	r0, [r5, #16]
 800e054:	696a      	ldr	r2, [r5, #20]
 800e056:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 800e05a:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800e05e:	6819      	ldr	r1, [r3, #0]
 800e060:	f7fb fc02 	bl	8009868 <uxr_buffer_delete_entity>
 800e064:	4602      	mov	r2, r0
 800e066:	6928      	ldr	r0, [r5, #16]
 800e068:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 800e06c:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 800e070:	f7fa fabe 	bl	80085f0 <run_xrce_session>
 800e074:	2800      	cmp	r0, #0
 800e076:	bf08      	it	eq
 800e078:	2602      	moveq	r6, #2
 800e07a:	4638      	mov	r0, r7
 800e07c:	f7fa f9ec 	bl	8008458 <rmw_uxrce_fini_node_memory>
 800e080:	4630      	mov	r0, r6
 800e082:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e084:	4626      	mov	r6, r4
 800e086:	e7a6      	b.n	800dfd6 <rmw_destroy_node+0x32>
 800e088:	080126cc 	.word	0x080126cc
 800e08c:	2000da94 	.word	0x2000da94
 800e090:	2000dad4 	.word	0x2000dad4
 800e094:	2000daa4 	.word	0x2000daa4
 800e098:	200091b8 	.word	0x200091b8

0800e09c <rmw_node_get_graph_guard_condition>:
 800e09c:	6843      	ldr	r3, [r0, #4]
 800e09e:	6918      	ldr	r0, [r3, #16]
 800e0a0:	f500 705a 	add.w	r0, r0, #872	; 0x368
 800e0a4:	4770      	bx	lr
 800e0a6:	bf00      	nop

0800e0a8 <rmw_destroy_service>:
 800e0a8:	b570      	push	{r4, r5, r6, lr}
 800e0aa:	b128      	cbz	r0, 800e0b8 <rmw_destroy_service+0x10>
 800e0ac:	4604      	mov	r4, r0
 800e0ae:	6800      	ldr	r0, [r0, #0]
 800e0b0:	460d      	mov	r5, r1
 800e0b2:	f7fa fb1d 	bl	80086f0 <is_uxrce_rmw_identifier_valid>
 800e0b6:	b910      	cbnz	r0, 800e0be <rmw_destroy_service+0x16>
 800e0b8:	2401      	movs	r4, #1
 800e0ba:	4620      	mov	r0, r4
 800e0bc:	bd70      	pop	{r4, r5, r6, pc}
 800e0be:	6863      	ldr	r3, [r4, #4]
 800e0c0:	2b00      	cmp	r3, #0
 800e0c2:	d0f9      	beq.n	800e0b8 <rmw_destroy_service+0x10>
 800e0c4:	2d00      	cmp	r5, #0
 800e0c6:	d0f7      	beq.n	800e0b8 <rmw_destroy_service+0x10>
 800e0c8:	6828      	ldr	r0, [r5, #0]
 800e0ca:	f7fa fb11 	bl	80086f0 <is_uxrce_rmw_identifier_valid>
 800e0ce:	2800      	cmp	r0, #0
 800e0d0:	d0f2      	beq.n	800e0b8 <rmw_destroy_service+0x10>
 800e0d2:	686e      	ldr	r6, [r5, #4]
 800e0d4:	2e00      	cmp	r6, #0
 800e0d6:	d0ef      	beq.n	800e0b8 <rmw_destroy_service+0x10>
 800e0d8:	6864      	ldr	r4, [r4, #4]
 800e0da:	6932      	ldr	r2, [r6, #16]
 800e0dc:	6920      	ldr	r0, [r4, #16]
 800e0de:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 800e0e2:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800e0e6:	6819      	ldr	r1, [r3, #0]
 800e0e8:	f001 f870 	bl	800f1cc <uxr_buffer_cancel_data>
 800e0ec:	4602      	mov	r2, r0
 800e0ee:	6920      	ldr	r0, [r4, #16]
 800e0f0:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 800e0f4:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 800e0f8:	f7fa fa7a 	bl	80085f0 <run_xrce_session>
 800e0fc:	6920      	ldr	r0, [r4, #16]
 800e0fe:	6932      	ldr	r2, [r6, #16]
 800e100:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 800e104:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800e108:	6819      	ldr	r1, [r3, #0]
 800e10a:	f7fb fbad 	bl	8009868 <uxr_buffer_delete_entity>
 800e10e:	4602      	mov	r2, r0
 800e110:	6920      	ldr	r0, [r4, #16]
 800e112:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 800e116:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 800e11a:	f7fa fa69 	bl	80085f0 <run_xrce_session>
 800e11e:	2800      	cmp	r0, #0
 800e120:	4628      	mov	r0, r5
 800e122:	bf14      	ite	ne
 800e124:	2400      	movne	r4, #0
 800e126:	2402      	moveq	r4, #2
 800e128:	f7fa f9da 	bl	80084e0 <rmw_uxrce_fini_service_memory>
 800e12c:	e7c5      	b.n	800e0ba <rmw_destroy_service+0x12>
 800e12e:	bf00      	nop

0800e130 <rmw_destroy_subscription>:
 800e130:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e132:	b128      	cbz	r0, 800e140 <rmw_destroy_subscription+0x10>
 800e134:	4604      	mov	r4, r0
 800e136:	6800      	ldr	r0, [r0, #0]
 800e138:	460d      	mov	r5, r1
 800e13a:	f7fa fad9 	bl	80086f0 <is_uxrce_rmw_identifier_valid>
 800e13e:	b910      	cbnz	r0, 800e146 <rmw_destroy_subscription+0x16>
 800e140:	2401      	movs	r4, #1
 800e142:	4620      	mov	r0, r4
 800e144:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e146:	6863      	ldr	r3, [r4, #4]
 800e148:	2b00      	cmp	r3, #0
 800e14a:	d0f9      	beq.n	800e140 <rmw_destroy_subscription+0x10>
 800e14c:	2d00      	cmp	r5, #0
 800e14e:	d0f7      	beq.n	800e140 <rmw_destroy_subscription+0x10>
 800e150:	6828      	ldr	r0, [r5, #0]
 800e152:	f7fa facd 	bl	80086f0 <is_uxrce_rmw_identifier_valid>
 800e156:	2800      	cmp	r0, #0
 800e158:	d0f2      	beq.n	800e140 <rmw_destroy_subscription+0x10>
 800e15a:	686c      	ldr	r4, [r5, #4]
 800e15c:	2c00      	cmp	r4, #0
 800e15e:	d0ef      	beq.n	800e140 <rmw_destroy_subscription+0x10>
 800e160:	6a26      	ldr	r6, [r4, #32]
 800e162:	6962      	ldr	r2, [r4, #20]
 800e164:	6930      	ldr	r0, [r6, #16]
 800e166:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 800e16a:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800e16e:	6819      	ldr	r1, [r3, #0]
 800e170:	f001 f82c 	bl	800f1cc <uxr_buffer_cancel_data>
 800e174:	4602      	mov	r2, r0
 800e176:	6930      	ldr	r0, [r6, #16]
 800e178:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 800e17c:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 800e180:	f7fa fa36 	bl	80085f0 <run_xrce_session>
 800e184:	69e0      	ldr	r0, [r4, #28]
 800e186:	f7ff fe59 	bl	800de3c <destroy_topic>
 800e18a:	6a23      	ldr	r3, [r4, #32]
 800e18c:	6962      	ldr	r2, [r4, #20]
 800e18e:	6918      	ldr	r0, [r3, #16]
 800e190:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 800e194:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800e198:	6819      	ldr	r1, [r3, #0]
 800e19a:	f7fb fb65 	bl	8009868 <uxr_buffer_delete_entity>
 800e19e:	6a23      	ldr	r3, [r4, #32]
 800e1a0:	6922      	ldr	r2, [r4, #16]
 800e1a2:	691b      	ldr	r3, [r3, #16]
 800e1a4:	f8d3 1388 	ldr.w	r1, [r3, #904]	; 0x388
 800e1a8:	4604      	mov	r4, r0
 800e1aa:	6809      	ldr	r1, [r1, #0]
 800e1ac:	f503 7028 	add.w	r0, r3, #672	; 0x2a0
 800e1b0:	f7fb fb5a 	bl	8009868 <uxr_buffer_delete_entity>
 800e1b4:	6937      	ldr	r7, [r6, #16]
 800e1b6:	4622      	mov	r2, r4
 800e1b8:	f8d7 3390 	ldr.w	r3, [r7, #912]	; 0x390
 800e1bc:	f8d7 1388 	ldr.w	r1, [r7, #904]	; 0x388
 800e1c0:	4604      	mov	r4, r0
 800e1c2:	4638      	mov	r0, r7
 800e1c4:	f7fa fa14 	bl	80085f0 <run_xrce_session>
 800e1c8:	6936      	ldr	r6, [r6, #16]
 800e1ca:	4622      	mov	r2, r4
 800e1cc:	f8d6 3390 	ldr.w	r3, [r6, #912]	; 0x390
 800e1d0:	f8d6 1388 	ldr.w	r1, [r6, #904]	; 0x388
 800e1d4:	4604      	mov	r4, r0
 800e1d6:	4630      	mov	r0, r6
 800e1d8:	f7fa fa0a 	bl	80085f0 <run_xrce_session>
 800e1dc:	b12c      	cbz	r4, 800e1ea <rmw_destroy_subscription+0xba>
 800e1de:	b120      	cbz	r0, 800e1ea <rmw_destroy_subscription+0xba>
 800e1e0:	2400      	movs	r4, #0
 800e1e2:	4628      	mov	r0, r5
 800e1e4:	f7fa f966 	bl	80084b4 <rmw_uxrce_fini_subscription_memory>
 800e1e8:	e7ab      	b.n	800e142 <rmw_destroy_subscription+0x12>
 800e1ea:	2402      	movs	r4, #2
 800e1ec:	e7f9      	b.n	800e1e2 <rmw_destroy_subscription+0xb2>
 800e1ee:	bf00      	nop

0800e1f0 <rmw_uxrce_transport_init>:
 800e1f0:	b508      	push	{r3, lr}
 800e1f2:	b108      	cbz	r0, 800e1f8 <rmw_uxrce_transport_init+0x8>
 800e1f4:	f100 0210 	add.w	r2, r0, #16
 800e1f8:	b139      	cbz	r1, 800e20a <rmw_uxrce_transport_init+0x1a>
 800e1fa:	6949      	ldr	r1, [r1, #20]
 800e1fc:	4610      	mov	r0, r2
 800e1fe:	f000 fa77 	bl	800e6f0 <uxr_init_custom_transport>
 800e202:	f080 0001 	eor.w	r0, r0, #1
 800e206:	b2c0      	uxtb	r0, r0
 800e208:	bd08      	pop	{r3, pc}
 800e20a:	4b04      	ldr	r3, [pc, #16]	; (800e21c <rmw_uxrce_transport_init+0x2c>)
 800e20c:	4610      	mov	r0, r2
 800e20e:	6859      	ldr	r1, [r3, #4]
 800e210:	f000 fa6e 	bl	800e6f0 <uxr_init_custom_transport>
 800e214:	f080 0001 	eor.w	r0, r0, #1
 800e218:	b2c0      	uxtb	r0, r0
 800e21a:	bd08      	pop	{r3, pc}
 800e21c:	2000919c 	.word	0x2000919c

0800e220 <rmw_uros_epoch_nanos>:
 800e220:	4b05      	ldr	r3, [pc, #20]	; (800e238 <rmw_uros_epoch_nanos+0x18>)
 800e222:	681b      	ldr	r3, [r3, #0]
 800e224:	b123      	cbz	r3, 800e230 <rmw_uros_epoch_nanos+0x10>
 800e226:	6898      	ldr	r0, [r3, #8]
 800e228:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800e22c:	f7fb bdba 	b.w	8009da4 <uxr_epoch_nanos>
 800e230:	2000      	movs	r0, #0
 800e232:	2100      	movs	r1, #0
 800e234:	4770      	bx	lr
 800e236:	bf00      	nop
 800e238:	2000dab4 	.word	0x2000dab4

0800e23c <rosidl_typesupport_c__get_message_typesupport_handle_function>:
 800e23c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e240:	6805      	ldr	r5, [r0, #0]
 800e242:	4604      	mov	r4, r0
 800e244:	4628      	mov	r0, r5
 800e246:	460e      	mov	r6, r1
 800e248:	f7f1 ffe2 	bl	8000210 <strcmp>
 800e24c:	b1c8      	cbz	r0, 800e282 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x46>
 800e24e:	4b11      	ldr	r3, [pc, #68]	; (800e294 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x58>)
 800e250:	681b      	ldr	r3, [r3, #0]
 800e252:	429d      	cmp	r5, r3
 800e254:	d112      	bne.n	800e27c <rosidl_typesupport_c__get_message_typesupport_handle_function+0x40>
 800e256:	f8d4 8004 	ldr.w	r8, [r4, #4]
 800e25a:	f8d8 4000 	ldr.w	r4, [r8]
 800e25e:	b16c      	cbz	r4, 800e27c <rosidl_typesupport_c__get_message_typesupport_handle_function+0x40>
 800e260:	f8d8 5008 	ldr.w	r5, [r8, #8]
 800e264:	2700      	movs	r7, #0
 800e266:	3d04      	subs	r5, #4
 800e268:	f855 0f04 	ldr.w	r0, [r5, #4]!
 800e26c:	4631      	mov	r1, r6
 800e26e:	f7f1 ffcf 	bl	8000210 <strcmp>
 800e272:	00bb      	lsls	r3, r7, #2
 800e274:	b140      	cbz	r0, 800e288 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x4c>
 800e276:	3701      	adds	r7, #1
 800e278:	42bc      	cmp	r4, r7
 800e27a:	d1f5      	bne.n	800e268 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x2c>
 800e27c:	2000      	movs	r0, #0
 800e27e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e282:	4620      	mov	r0, r4
 800e284:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e288:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800e28c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e290:	58d3      	ldr	r3, [r2, r3]
 800e292:	4718      	bx	r3
 800e294:	200000ac 	.word	0x200000ac

0800e298 <std_msgs__msg__Int32__init>:
 800e298:	3800      	subs	r0, #0
 800e29a:	bf18      	it	ne
 800e29c:	2001      	movne	r0, #1
 800e29e:	4770      	bx	lr

0800e2a0 <std_msgs__msg__Int32__fini>:
 800e2a0:	4770      	bx	lr
 800e2a2:	bf00      	nop

0800e2a4 <ucdr_serialize_endian_array_char>:
 800e2a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e2a8:	4619      	mov	r1, r3
 800e2aa:	461f      	mov	r7, r3
 800e2ac:	4605      	mov	r5, r0
 800e2ae:	4690      	mov	r8, r2
 800e2b0:	f7fb fa16 	bl	80096e0 <ucdr_check_buffer_available_for>
 800e2b4:	b9e0      	cbnz	r0, 800e2f0 <ucdr_serialize_endian_array_char+0x4c>
 800e2b6:	463e      	mov	r6, r7
 800e2b8:	e009      	b.n	800e2ce <ucdr_serialize_endian_array_char+0x2a>
 800e2ba:	68a8      	ldr	r0, [r5, #8]
 800e2bc:	f002 fb1c 	bl	80108f8 <memcpy>
 800e2c0:	68ab      	ldr	r3, [r5, #8]
 800e2c2:	6928      	ldr	r0, [r5, #16]
 800e2c4:	4423      	add	r3, r4
 800e2c6:	4420      	add	r0, r4
 800e2c8:	1b36      	subs	r6, r6, r4
 800e2ca:	60ab      	str	r3, [r5, #8]
 800e2cc:	6128      	str	r0, [r5, #16]
 800e2ce:	4631      	mov	r1, r6
 800e2d0:	2201      	movs	r2, #1
 800e2d2:	4628      	mov	r0, r5
 800e2d4:	f7fb fa8c 	bl	80097f0 <ucdr_check_final_buffer_behavior_array>
 800e2d8:	1bb9      	subs	r1, r7, r6
 800e2da:	4441      	add	r1, r8
 800e2dc:	4604      	mov	r4, r0
 800e2de:	4602      	mov	r2, r0
 800e2e0:	2800      	cmp	r0, #0
 800e2e2:	d1ea      	bne.n	800e2ba <ucdr_serialize_endian_array_char+0x16>
 800e2e4:	2301      	movs	r3, #1
 800e2e6:	7da8      	ldrb	r0, [r5, #22]
 800e2e8:	756b      	strb	r3, [r5, #21]
 800e2ea:	4058      	eors	r0, r3
 800e2ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e2f0:	463a      	mov	r2, r7
 800e2f2:	68a8      	ldr	r0, [r5, #8]
 800e2f4:	4641      	mov	r1, r8
 800e2f6:	f002 faff 	bl	80108f8 <memcpy>
 800e2fa:	68aa      	ldr	r2, [r5, #8]
 800e2fc:	692b      	ldr	r3, [r5, #16]
 800e2fe:	443a      	add	r2, r7
 800e300:	443b      	add	r3, r7
 800e302:	60aa      	str	r2, [r5, #8]
 800e304:	612b      	str	r3, [r5, #16]
 800e306:	e7ed      	b.n	800e2e4 <ucdr_serialize_endian_array_char+0x40>

0800e308 <ucdr_deserialize_endian_array_char>:
 800e308:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e30c:	4619      	mov	r1, r3
 800e30e:	461f      	mov	r7, r3
 800e310:	4605      	mov	r5, r0
 800e312:	4690      	mov	r8, r2
 800e314:	f7fb f9e4 	bl	80096e0 <ucdr_check_buffer_available_for>
 800e318:	b9e0      	cbnz	r0, 800e354 <ucdr_deserialize_endian_array_char+0x4c>
 800e31a:	463e      	mov	r6, r7
 800e31c:	e009      	b.n	800e332 <ucdr_deserialize_endian_array_char+0x2a>
 800e31e:	68a9      	ldr	r1, [r5, #8]
 800e320:	f002 faea 	bl	80108f8 <memcpy>
 800e324:	68ab      	ldr	r3, [r5, #8]
 800e326:	6928      	ldr	r0, [r5, #16]
 800e328:	4423      	add	r3, r4
 800e32a:	4420      	add	r0, r4
 800e32c:	1b36      	subs	r6, r6, r4
 800e32e:	60ab      	str	r3, [r5, #8]
 800e330:	6128      	str	r0, [r5, #16]
 800e332:	2201      	movs	r2, #1
 800e334:	4631      	mov	r1, r6
 800e336:	4628      	mov	r0, r5
 800e338:	f7fb fa5a 	bl	80097f0 <ucdr_check_final_buffer_behavior_array>
 800e33c:	4604      	mov	r4, r0
 800e33e:	1bb8      	subs	r0, r7, r6
 800e340:	4440      	add	r0, r8
 800e342:	4622      	mov	r2, r4
 800e344:	2c00      	cmp	r4, #0
 800e346:	d1ea      	bne.n	800e31e <ucdr_deserialize_endian_array_char+0x16>
 800e348:	2301      	movs	r3, #1
 800e34a:	7da8      	ldrb	r0, [r5, #22]
 800e34c:	756b      	strb	r3, [r5, #21]
 800e34e:	4058      	eors	r0, r3
 800e350:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e354:	463a      	mov	r2, r7
 800e356:	68a9      	ldr	r1, [r5, #8]
 800e358:	4640      	mov	r0, r8
 800e35a:	f002 facd 	bl	80108f8 <memcpy>
 800e35e:	68aa      	ldr	r2, [r5, #8]
 800e360:	692b      	ldr	r3, [r5, #16]
 800e362:	443a      	add	r2, r7
 800e364:	443b      	add	r3, r7
 800e366:	60aa      	str	r2, [r5, #8]
 800e368:	612b      	str	r3, [r5, #16]
 800e36a:	e7ed      	b.n	800e348 <ucdr_deserialize_endian_array_char+0x40>

0800e36c <ucdr_serialize_array_uint8_t>:
 800e36c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e370:	4688      	mov	r8, r1
 800e372:	4611      	mov	r1, r2
 800e374:	4617      	mov	r7, r2
 800e376:	4605      	mov	r5, r0
 800e378:	f7fb f9b2 	bl	80096e0 <ucdr_check_buffer_available_for>
 800e37c:	b9e0      	cbnz	r0, 800e3b8 <ucdr_serialize_array_uint8_t+0x4c>
 800e37e:	463e      	mov	r6, r7
 800e380:	e009      	b.n	800e396 <ucdr_serialize_array_uint8_t+0x2a>
 800e382:	68a8      	ldr	r0, [r5, #8]
 800e384:	f002 fab8 	bl	80108f8 <memcpy>
 800e388:	68aa      	ldr	r2, [r5, #8]
 800e38a:	692b      	ldr	r3, [r5, #16]
 800e38c:	4422      	add	r2, r4
 800e38e:	4423      	add	r3, r4
 800e390:	1b36      	subs	r6, r6, r4
 800e392:	60aa      	str	r2, [r5, #8]
 800e394:	612b      	str	r3, [r5, #16]
 800e396:	4631      	mov	r1, r6
 800e398:	2201      	movs	r2, #1
 800e39a:	4628      	mov	r0, r5
 800e39c:	f7fb fa28 	bl	80097f0 <ucdr_check_final_buffer_behavior_array>
 800e3a0:	1bb9      	subs	r1, r7, r6
 800e3a2:	4441      	add	r1, r8
 800e3a4:	4604      	mov	r4, r0
 800e3a6:	4602      	mov	r2, r0
 800e3a8:	2800      	cmp	r0, #0
 800e3aa:	d1ea      	bne.n	800e382 <ucdr_serialize_array_uint8_t+0x16>
 800e3ac:	2301      	movs	r3, #1
 800e3ae:	7da8      	ldrb	r0, [r5, #22]
 800e3b0:	756b      	strb	r3, [r5, #21]
 800e3b2:	4058      	eors	r0, r3
 800e3b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e3b8:	463a      	mov	r2, r7
 800e3ba:	68a8      	ldr	r0, [r5, #8]
 800e3bc:	4641      	mov	r1, r8
 800e3be:	f002 fa9b 	bl	80108f8 <memcpy>
 800e3c2:	68aa      	ldr	r2, [r5, #8]
 800e3c4:	692b      	ldr	r3, [r5, #16]
 800e3c6:	443a      	add	r2, r7
 800e3c8:	443b      	add	r3, r7
 800e3ca:	60aa      	str	r2, [r5, #8]
 800e3cc:	612b      	str	r3, [r5, #16]
 800e3ce:	e7ed      	b.n	800e3ac <ucdr_serialize_array_uint8_t+0x40>

0800e3d0 <ucdr_serialize_endian_array_uint8_t>:
 800e3d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e3d4:	4619      	mov	r1, r3
 800e3d6:	461f      	mov	r7, r3
 800e3d8:	4605      	mov	r5, r0
 800e3da:	4690      	mov	r8, r2
 800e3dc:	f7fb f980 	bl	80096e0 <ucdr_check_buffer_available_for>
 800e3e0:	b9e0      	cbnz	r0, 800e41c <ucdr_serialize_endian_array_uint8_t+0x4c>
 800e3e2:	463e      	mov	r6, r7
 800e3e4:	e009      	b.n	800e3fa <ucdr_serialize_endian_array_uint8_t+0x2a>
 800e3e6:	68a8      	ldr	r0, [r5, #8]
 800e3e8:	f002 fa86 	bl	80108f8 <memcpy>
 800e3ec:	68ab      	ldr	r3, [r5, #8]
 800e3ee:	6928      	ldr	r0, [r5, #16]
 800e3f0:	4423      	add	r3, r4
 800e3f2:	4420      	add	r0, r4
 800e3f4:	1b36      	subs	r6, r6, r4
 800e3f6:	60ab      	str	r3, [r5, #8]
 800e3f8:	6128      	str	r0, [r5, #16]
 800e3fa:	4631      	mov	r1, r6
 800e3fc:	2201      	movs	r2, #1
 800e3fe:	4628      	mov	r0, r5
 800e400:	f7fb f9f6 	bl	80097f0 <ucdr_check_final_buffer_behavior_array>
 800e404:	1bb9      	subs	r1, r7, r6
 800e406:	4441      	add	r1, r8
 800e408:	4604      	mov	r4, r0
 800e40a:	4602      	mov	r2, r0
 800e40c:	2800      	cmp	r0, #0
 800e40e:	d1ea      	bne.n	800e3e6 <ucdr_serialize_endian_array_uint8_t+0x16>
 800e410:	2301      	movs	r3, #1
 800e412:	7da8      	ldrb	r0, [r5, #22]
 800e414:	756b      	strb	r3, [r5, #21]
 800e416:	4058      	eors	r0, r3
 800e418:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e41c:	463a      	mov	r2, r7
 800e41e:	68a8      	ldr	r0, [r5, #8]
 800e420:	4641      	mov	r1, r8
 800e422:	f002 fa69 	bl	80108f8 <memcpy>
 800e426:	68aa      	ldr	r2, [r5, #8]
 800e428:	692b      	ldr	r3, [r5, #16]
 800e42a:	443a      	add	r2, r7
 800e42c:	443b      	add	r3, r7
 800e42e:	60aa      	str	r2, [r5, #8]
 800e430:	612b      	str	r3, [r5, #16]
 800e432:	e7ed      	b.n	800e410 <ucdr_serialize_endian_array_uint8_t+0x40>

0800e434 <ucdr_deserialize_array_uint8_t>:
 800e434:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e438:	4688      	mov	r8, r1
 800e43a:	4611      	mov	r1, r2
 800e43c:	4617      	mov	r7, r2
 800e43e:	4605      	mov	r5, r0
 800e440:	f7fb f94e 	bl	80096e0 <ucdr_check_buffer_available_for>
 800e444:	b9e0      	cbnz	r0, 800e480 <ucdr_deserialize_array_uint8_t+0x4c>
 800e446:	463e      	mov	r6, r7
 800e448:	e009      	b.n	800e45e <ucdr_deserialize_array_uint8_t+0x2a>
 800e44a:	68a9      	ldr	r1, [r5, #8]
 800e44c:	f002 fa54 	bl	80108f8 <memcpy>
 800e450:	68aa      	ldr	r2, [r5, #8]
 800e452:	692b      	ldr	r3, [r5, #16]
 800e454:	4422      	add	r2, r4
 800e456:	4423      	add	r3, r4
 800e458:	1b36      	subs	r6, r6, r4
 800e45a:	60aa      	str	r2, [r5, #8]
 800e45c:	612b      	str	r3, [r5, #16]
 800e45e:	2201      	movs	r2, #1
 800e460:	4631      	mov	r1, r6
 800e462:	4628      	mov	r0, r5
 800e464:	f7fb f9c4 	bl	80097f0 <ucdr_check_final_buffer_behavior_array>
 800e468:	4604      	mov	r4, r0
 800e46a:	1bb8      	subs	r0, r7, r6
 800e46c:	4440      	add	r0, r8
 800e46e:	4622      	mov	r2, r4
 800e470:	2c00      	cmp	r4, #0
 800e472:	d1ea      	bne.n	800e44a <ucdr_deserialize_array_uint8_t+0x16>
 800e474:	2301      	movs	r3, #1
 800e476:	7da8      	ldrb	r0, [r5, #22]
 800e478:	756b      	strb	r3, [r5, #21]
 800e47a:	4058      	eors	r0, r3
 800e47c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e480:	463a      	mov	r2, r7
 800e482:	68a9      	ldr	r1, [r5, #8]
 800e484:	4640      	mov	r0, r8
 800e486:	f002 fa37 	bl	80108f8 <memcpy>
 800e48a:	68aa      	ldr	r2, [r5, #8]
 800e48c:	692b      	ldr	r3, [r5, #16]
 800e48e:	443a      	add	r2, r7
 800e490:	443b      	add	r3, r7
 800e492:	60aa      	str	r2, [r5, #8]
 800e494:	612b      	str	r3, [r5, #16]
 800e496:	e7ed      	b.n	800e474 <ucdr_deserialize_array_uint8_t+0x40>

0800e498 <ucdr_deserialize_endian_array_uint8_t>:
 800e498:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e49c:	4619      	mov	r1, r3
 800e49e:	461f      	mov	r7, r3
 800e4a0:	4605      	mov	r5, r0
 800e4a2:	4690      	mov	r8, r2
 800e4a4:	f7fb f91c 	bl	80096e0 <ucdr_check_buffer_available_for>
 800e4a8:	b9e0      	cbnz	r0, 800e4e4 <ucdr_deserialize_endian_array_uint8_t+0x4c>
 800e4aa:	463e      	mov	r6, r7
 800e4ac:	e009      	b.n	800e4c2 <ucdr_deserialize_endian_array_uint8_t+0x2a>
 800e4ae:	68a9      	ldr	r1, [r5, #8]
 800e4b0:	f002 fa22 	bl	80108f8 <memcpy>
 800e4b4:	68ab      	ldr	r3, [r5, #8]
 800e4b6:	6928      	ldr	r0, [r5, #16]
 800e4b8:	4423      	add	r3, r4
 800e4ba:	4420      	add	r0, r4
 800e4bc:	1b36      	subs	r6, r6, r4
 800e4be:	60ab      	str	r3, [r5, #8]
 800e4c0:	6128      	str	r0, [r5, #16]
 800e4c2:	2201      	movs	r2, #1
 800e4c4:	4631      	mov	r1, r6
 800e4c6:	4628      	mov	r0, r5
 800e4c8:	f7fb f992 	bl	80097f0 <ucdr_check_final_buffer_behavior_array>
 800e4cc:	4604      	mov	r4, r0
 800e4ce:	1bb8      	subs	r0, r7, r6
 800e4d0:	4440      	add	r0, r8
 800e4d2:	4622      	mov	r2, r4
 800e4d4:	2c00      	cmp	r4, #0
 800e4d6:	d1ea      	bne.n	800e4ae <ucdr_deserialize_endian_array_uint8_t+0x16>
 800e4d8:	2301      	movs	r3, #1
 800e4da:	7da8      	ldrb	r0, [r5, #22]
 800e4dc:	756b      	strb	r3, [r5, #21]
 800e4de:	4058      	eors	r0, r3
 800e4e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e4e4:	463a      	mov	r2, r7
 800e4e6:	68a9      	ldr	r1, [r5, #8]
 800e4e8:	4640      	mov	r0, r8
 800e4ea:	f002 fa05 	bl	80108f8 <memcpy>
 800e4ee:	68aa      	ldr	r2, [r5, #8]
 800e4f0:	692b      	ldr	r3, [r5, #16]
 800e4f2:	443a      	add	r2, r7
 800e4f4:	443b      	add	r3, r7
 800e4f6:	60aa      	str	r2, [r5, #8]
 800e4f8:	612b      	str	r3, [r5, #16]
 800e4fa:	e7ed      	b.n	800e4d8 <ucdr_deserialize_endian_array_uint8_t+0x40>

0800e4fc <ucdr_serialize_sequence_char>:
 800e4fc:	b570      	push	{r4, r5, r6, lr}
 800e4fe:	4615      	mov	r5, r2
 800e500:	460e      	mov	r6, r1
 800e502:	7d01      	ldrb	r1, [r0, #20]
 800e504:	4604      	mov	r4, r0
 800e506:	f7fa fc41 	bl	8008d8c <ucdr_serialize_endian_uint32_t>
 800e50a:	b90d      	cbnz	r5, 800e510 <ucdr_serialize_sequence_char+0x14>
 800e50c:	2001      	movs	r0, #1
 800e50e:	bd70      	pop	{r4, r5, r6, pc}
 800e510:	7d21      	ldrb	r1, [r4, #20]
 800e512:	462b      	mov	r3, r5
 800e514:	4632      	mov	r2, r6
 800e516:	4620      	mov	r0, r4
 800e518:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e51c:	f7ff bec2 	b.w	800e2a4 <ucdr_serialize_endian_array_char>

0800e520 <ucdr_deserialize_sequence_char>:
 800e520:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e524:	461d      	mov	r5, r3
 800e526:	4616      	mov	r6, r2
 800e528:	460f      	mov	r7, r1
 800e52a:	461a      	mov	r2, r3
 800e52c:	7d01      	ldrb	r1, [r0, #20]
 800e52e:	4604      	mov	r4, r0
 800e530:	f7fa fd54 	bl	8008fdc <ucdr_deserialize_endian_uint32_t>
 800e534:	682b      	ldr	r3, [r5, #0]
 800e536:	429e      	cmp	r6, r3
 800e538:	bf3c      	itt	cc
 800e53a:	2201      	movcc	r2, #1
 800e53c:	75a2      	strbcc	r2, [r4, #22]
 800e53e:	b913      	cbnz	r3, 800e546 <ucdr_deserialize_sequence_char+0x26>
 800e540:	2001      	movs	r0, #1
 800e542:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e546:	7d21      	ldrb	r1, [r4, #20]
 800e548:	463a      	mov	r2, r7
 800e54a:	4620      	mov	r0, r4
 800e54c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e550:	f7ff beda 	b.w	800e308 <ucdr_deserialize_endian_array_char>

0800e554 <ucdr_serialize_sequence_uint8_t>:
 800e554:	b570      	push	{r4, r5, r6, lr}
 800e556:	4615      	mov	r5, r2
 800e558:	460e      	mov	r6, r1
 800e55a:	7d01      	ldrb	r1, [r0, #20]
 800e55c:	4604      	mov	r4, r0
 800e55e:	f7fa fc15 	bl	8008d8c <ucdr_serialize_endian_uint32_t>
 800e562:	b90d      	cbnz	r5, 800e568 <ucdr_serialize_sequence_uint8_t+0x14>
 800e564:	2001      	movs	r0, #1
 800e566:	bd70      	pop	{r4, r5, r6, pc}
 800e568:	7d21      	ldrb	r1, [r4, #20]
 800e56a:	462b      	mov	r3, r5
 800e56c:	4632      	mov	r2, r6
 800e56e:	4620      	mov	r0, r4
 800e570:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e574:	f7ff bf2c 	b.w	800e3d0 <ucdr_serialize_endian_array_uint8_t>

0800e578 <ucdr_deserialize_sequence_uint8_t>:
 800e578:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e57c:	461d      	mov	r5, r3
 800e57e:	4616      	mov	r6, r2
 800e580:	460f      	mov	r7, r1
 800e582:	461a      	mov	r2, r3
 800e584:	7d01      	ldrb	r1, [r0, #20]
 800e586:	4604      	mov	r4, r0
 800e588:	f7fa fd28 	bl	8008fdc <ucdr_deserialize_endian_uint32_t>
 800e58c:	682b      	ldr	r3, [r5, #0]
 800e58e:	429e      	cmp	r6, r3
 800e590:	bf3c      	itt	cc
 800e592:	2201      	movcc	r2, #1
 800e594:	75a2      	strbcc	r2, [r4, #22]
 800e596:	b913      	cbnz	r3, 800e59e <ucdr_deserialize_sequence_uint8_t+0x26>
 800e598:	2001      	movs	r0, #1
 800e59a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e59e:	7d21      	ldrb	r1, [r4, #20]
 800e5a0:	463a      	mov	r2, r7
 800e5a2:	4620      	mov	r0, r4
 800e5a4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e5a8:	f7ff bf76 	b.w	800e498 <ucdr_deserialize_endian_array_uint8_t>

0800e5ac <ucdr_serialize_string>:
 800e5ac:	b510      	push	{r4, lr}
 800e5ae:	b082      	sub	sp, #8
 800e5b0:	4604      	mov	r4, r0
 800e5b2:	4608      	mov	r0, r1
 800e5b4:	9101      	str	r1, [sp, #4]
 800e5b6:	f7f1 fe35 	bl	8000224 <strlen>
 800e5ba:	9901      	ldr	r1, [sp, #4]
 800e5bc:	1c42      	adds	r2, r0, #1
 800e5be:	4620      	mov	r0, r4
 800e5c0:	b002      	add	sp, #8
 800e5c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e5c6:	f7ff bf99 	b.w	800e4fc <ucdr_serialize_sequence_char>
 800e5ca:	bf00      	nop

0800e5cc <ucdr_deserialize_string>:
 800e5cc:	b500      	push	{lr}
 800e5ce:	b083      	sub	sp, #12
 800e5d0:	ab01      	add	r3, sp, #4
 800e5d2:	f7ff ffa5 	bl	800e520 <ucdr_deserialize_sequence_char>
 800e5d6:	b003      	add	sp, #12
 800e5d8:	f85d fb04 	ldr.w	pc, [sp], #4

0800e5dc <get_custom_error>:
 800e5dc:	4b01      	ldr	r3, [pc, #4]	; (800e5e4 <get_custom_error+0x8>)
 800e5de:	7818      	ldrb	r0, [r3, #0]
 800e5e0:	4770      	bx	lr
 800e5e2:	bf00      	nop
 800e5e4:	2000dc00 	.word	0x2000dc00

0800e5e8 <recv_custom_msg>:
 800e5e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e5ec:	4693      	mov	fp, r2
 800e5ee:	b089      	sub	sp, #36	; 0x24
 800e5f0:	f890 2200 	ldrb.w	r2, [r0, #512]	; 0x200
 800e5f4:	9305      	str	r3, [sp, #20]
 800e5f6:	468a      	mov	sl, r1
 800e5f8:	2100      	movs	r1, #0
 800e5fa:	4604      	mov	r4, r0
 800e5fc:	f88d 101e 	strb.w	r1, [sp, #30]
 800e600:	b322      	cbz	r2, 800e64c <recv_custom_msg+0x64>
 800e602:	f200 2902 	addw	r9, r0, #514	; 0x202
 800e606:	f10d 081f 	add.w	r8, sp, #31
 800e60a:	af05      	add	r7, sp, #20
 800e60c:	f10d 061e 	add.w	r6, sp, #30
 800e610:	f44f 7500 	mov.w	r5, #512	; 0x200
 800e614:	e002      	b.n	800e61c <recv_custom_msg+0x34>
 800e616:	9b05      	ldr	r3, [sp, #20]
 800e618:	2b00      	cmp	r3, #0
 800e61a:	dd0f      	ble.n	800e63c <recv_custom_msg+0x54>
 800e61c:	f8d4 1274 	ldr.w	r1, [r4, #628]	; 0x274
 800e620:	4623      	mov	r3, r4
 800e622:	e9cd 7802 	strd	r7, r8, [sp, #8]
 800e626:	e9cd 5600 	strd	r5, r6, [sp]
 800e62a:	4622      	mov	r2, r4
 800e62c:	4648      	mov	r0, r9
 800e62e:	f001 f8e1 	bl	800f7f4 <uxr_read_framed_msg>
 800e632:	2800      	cmp	r0, #0
 800e634:	d0ef      	beq.n	800e616 <recv_custom_msg+0x2e>
 800e636:	f89d 301e 	ldrb.w	r3, [sp, #30]
 800e63a:	b1b3      	cbz	r3, 800e66a <recv_custom_msg+0x82>
 800e63c:	4b0f      	ldr	r3, [pc, #60]	; (800e67c <recv_custom_msg+0x94>)
 800e63e:	f89d 201f 	ldrb.w	r2, [sp, #31]
 800e642:	701a      	strb	r2, [r3, #0]
 800e644:	2000      	movs	r0, #0
 800e646:	b009      	add	sp, #36	; 0x24
 800e648:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e64c:	f10d 021f 	add.w	r2, sp, #31
 800e650:	9200      	str	r2, [sp, #0]
 800e652:	f8d0 5274 	ldr.w	r5, [r0, #628]	; 0x274
 800e656:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e65a:	4601      	mov	r1, r0
 800e65c:	47a8      	blx	r5
 800e65e:	2800      	cmp	r0, #0
 800e660:	d0ec      	beq.n	800e63c <recv_custom_msg+0x54>
 800e662:	f89d 301e 	ldrb.w	r3, [sp, #30]
 800e666:	2b00      	cmp	r3, #0
 800e668:	d1e8      	bne.n	800e63c <recv_custom_msg+0x54>
 800e66a:	f8cb 0000 	str.w	r0, [fp]
 800e66e:	2001      	movs	r0, #1
 800e670:	f8ca 4000 	str.w	r4, [sl]
 800e674:	b009      	add	sp, #36	; 0x24
 800e676:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e67a:	bf00      	nop
 800e67c:	2000dc00 	.word	0x2000dc00

0800e680 <send_custom_msg>:
 800e680:	b530      	push	{r4, r5, lr}
 800e682:	f890 4200 	ldrb.w	r4, [r0, #512]	; 0x200
 800e686:	b087      	sub	sp, #28
 800e688:	4615      	mov	r5, r2
 800e68a:	b974      	cbnz	r4, 800e6aa <send_custom_msg+0x2a>
 800e68c:	f8d0 4270 	ldr.w	r4, [r0, #624]	; 0x270
 800e690:	f10d 0317 	add.w	r3, sp, #23
 800e694:	47a0      	blx	r4
 800e696:	b108      	cbz	r0, 800e69c <send_custom_msg+0x1c>
 800e698:	42a8      	cmp	r0, r5
 800e69a:	d015      	beq.n	800e6c8 <send_custom_msg+0x48>
 800e69c:	4b0c      	ldr	r3, [pc, #48]	; (800e6d0 <send_custom_msg+0x50>)
 800e69e:	f89d 2017 	ldrb.w	r2, [sp, #23]
 800e6a2:	701a      	strb	r2, [r3, #0]
 800e6a4:	2000      	movs	r0, #0
 800e6a6:	b007      	add	sp, #28
 800e6a8:	bd30      	pop	{r4, r5, pc}
 800e6aa:	460b      	mov	r3, r1
 800e6ac:	2200      	movs	r2, #0
 800e6ae:	f10d 0117 	add.w	r1, sp, #23
 800e6b2:	e9cd 2101 	strd	r2, r1, [sp, #4]
 800e6b6:	4602      	mov	r2, r0
 800e6b8:	f8d0 1270 	ldr.w	r1, [r0, #624]	; 0x270
 800e6bc:	9500      	str	r5, [sp, #0]
 800e6be:	f200 2002 	addw	r0, r0, #514	; 0x202
 800e6c2:	f000 fe9f 	bl	800f404 <uxr_write_framed_msg>
 800e6c6:	e7e6      	b.n	800e696 <send_custom_msg+0x16>
 800e6c8:	2001      	movs	r0, #1
 800e6ca:	b007      	add	sp, #28
 800e6cc:	bd30      	pop	{r4, r5, pc}
 800e6ce:	bf00      	nop
 800e6d0:	2000dc00 	.word	0x2000dc00

0800e6d4 <uxr_set_custom_transport_callbacks>:
 800e6d4:	b410      	push	{r4}
 800e6d6:	9c01      	ldr	r4, [sp, #4]
 800e6d8:	f8c0 4270 	str.w	r4, [r0, #624]	; 0x270
 800e6dc:	e9c0 239a 	strd	r2, r3, [r0, #616]	; 0x268
 800e6e0:	9b02      	ldr	r3, [sp, #8]
 800e6e2:	f880 1200 	strb.w	r1, [r0, #512]	; 0x200
 800e6e6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e6ea:	f8c0 3274 	str.w	r3, [r0, #628]	; 0x274
 800e6ee:	4770      	bx	lr

0800e6f0 <uxr_init_custom_transport>:
 800e6f0:	b538      	push	{r3, r4, r5, lr}
 800e6f2:	f8d0 3268 	ldr.w	r3, [r0, #616]	; 0x268
 800e6f6:	b303      	cbz	r3, 800e73a <uxr_init_custom_transport+0x4a>
 800e6f8:	f8d0 226c 	ldr.w	r2, [r0, #620]	; 0x26c
 800e6fc:	4604      	mov	r4, r0
 800e6fe:	b1e2      	cbz	r2, 800e73a <uxr_init_custom_transport+0x4a>
 800e700:	f8d0 2270 	ldr.w	r2, [r0, #624]	; 0x270
 800e704:	b1ca      	cbz	r2, 800e73a <uxr_init_custom_transport+0x4a>
 800e706:	f8d0 2274 	ldr.w	r2, [r0, #628]	; 0x274
 800e70a:	b1b2      	cbz	r2, 800e73a <uxr_init_custom_transport+0x4a>
 800e70c:	f8c0 128c 	str.w	r1, [r0, #652]	; 0x28c
 800e710:	4798      	blx	r3
 800e712:	4605      	mov	r5, r0
 800e714:	b188      	cbz	r0, 800e73a <uxr_init_custom_transport+0x4a>
 800e716:	f894 3200 	ldrb.w	r3, [r4, #512]	; 0x200
 800e71a:	b98b      	cbnz	r3, 800e740 <uxr_init_custom_transport+0x50>
 800e71c:	490b      	ldr	r1, [pc, #44]	; (800e74c <uxr_init_custom_transport+0x5c>)
 800e71e:	4b0c      	ldr	r3, [pc, #48]	; (800e750 <uxr_init_custom_transport+0x60>)
 800e720:	4a0c      	ldr	r2, [pc, #48]	; (800e754 <uxr_init_custom_transport+0x64>)
 800e722:	f8c4 3280 	str.w	r3, [r4, #640]	; 0x280
 800e726:	f44f 7300 	mov.w	r3, #512	; 0x200
 800e72a:	e9c4 419e 	strd	r4, r1, [r4, #632]	; 0x278
 800e72e:	f8c4 2284 	str.w	r2, [r4, #644]	; 0x284
 800e732:	f8a4 3288 	strh.w	r3, [r4, #648]	; 0x288
 800e736:	4628      	mov	r0, r5
 800e738:	bd38      	pop	{r3, r4, r5, pc}
 800e73a:	2500      	movs	r5, #0
 800e73c:	4628      	mov	r0, r5
 800e73e:	bd38      	pop	{r3, r4, r5, pc}
 800e740:	2100      	movs	r1, #0
 800e742:	f204 2002 	addw	r0, r4, #514	; 0x202
 800e746:	f000 fe57 	bl	800f3f8 <uxr_init_framing_io>
 800e74a:	e7e7      	b.n	800e71c <uxr_init_custom_transport+0x2c>
 800e74c:	0800e681 	.word	0x0800e681
 800e750:	0800e5e9 	.word	0x0800e5e9
 800e754:	0800e5dd 	.word	0x0800e5dd

0800e758 <uxr_close_custom_transport>:
 800e758:	f8d0 326c 	ldr.w	r3, [r0, #620]	; 0x26c
 800e75c:	4718      	bx	r3
 800e75e:	bf00      	nop

0800e760 <uxr_init_input_best_effort_stream>:
 800e760:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800e764:	8003      	strh	r3, [r0, #0]
 800e766:	4770      	bx	lr

0800e768 <uxr_reset_input_best_effort_stream>:
 800e768:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800e76c:	8003      	strh	r3, [r0, #0]
 800e76e:	4770      	bx	lr

0800e770 <uxr_receive_best_effort_message>:
 800e770:	b538      	push	{r3, r4, r5, lr}
 800e772:	4604      	mov	r4, r0
 800e774:	8800      	ldrh	r0, [r0, #0]
 800e776:	460d      	mov	r5, r1
 800e778:	f000 fe26 	bl	800f3c8 <uxr_seq_num_cmp>
 800e77c:	4603      	mov	r3, r0
 800e77e:	2b00      	cmp	r3, #0
 800e780:	ea4f 70d0 	mov.w	r0, r0, lsr #31
 800e784:	bfb8      	it	lt
 800e786:	8025      	strhlt	r5, [r4, #0]
 800e788:	bd38      	pop	{r3, r4, r5, pc}
 800e78a:	bf00      	nop

0800e78c <on_full_input_buffer>:
 800e78c:	b570      	push	{r4, r5, r6, lr}
 800e78e:	4605      	mov	r5, r0
 800e790:	460c      	mov	r4, r1
 800e792:	682b      	ldr	r3, [r5, #0]
 800e794:	6809      	ldr	r1, [r1, #0]
 800e796:	8920      	ldrh	r0, [r4, #8]
 800e798:	6862      	ldr	r2, [r4, #4]
 800e79a:	fbb2 f2f0 	udiv	r2, r2, r0
 800e79e:	eba3 0c01 	sub.w	ip, r3, r1
 800e7a2:	fbbc fcf2 	udiv	ip, ip, r2
 800e7a6:	f10c 0c01 	add.w	ip, ip, #1
 800e7aa:	fa1f f38c 	uxth.w	r3, ip
 800e7ae:	fbb3 f6f0 	udiv	r6, r3, r0
 800e7b2:	fb00 3316 	mls	r3, r0, r6, r3
 800e7b6:	b29b      	uxth	r3, r3
 800e7b8:	fb02 f303 	mul.w	r3, r2, r3
 800e7bc:	1d18      	adds	r0, r3, #4
 800e7be:	4408      	add	r0, r1
 800e7c0:	7d26      	ldrb	r6, [r4, #20]
 800e7c2:	f850 2c04 	ldr.w	r2, [r0, #-4]
 800e7c6:	b116      	cbz	r6, 800e7ce <on_full_input_buffer+0x42>
 800e7c8:	2600      	movs	r6, #0
 800e7ca:	f840 6c04 	str.w	r6, [r0, #-4]
 800e7ce:	2a03      	cmp	r2, #3
 800e7d0:	d801      	bhi.n	800e7d6 <on_full_input_buffer+0x4a>
 800e7d2:	2001      	movs	r0, #1
 800e7d4:	bd70      	pop	{r4, r5, r6, pc}
 800e7d6:	3308      	adds	r3, #8
 800e7d8:	4419      	add	r1, r3
 800e7da:	4628      	mov	r0, r5
 800e7dc:	692b      	ldr	r3, [r5, #16]
 800e7de:	3a04      	subs	r2, #4
 800e7e0:	f7fa ffca 	bl	8009778 <ucdr_init_buffer_origin>
 800e7e4:	4628      	mov	r0, r5
 800e7e6:	4903      	ldr	r1, [pc, #12]	; (800e7f4 <on_full_input_buffer+0x68>)
 800e7e8:	4622      	mov	r2, r4
 800e7ea:	f7fa ffa1 	bl	8009730 <ucdr_set_on_full_buffer_callback>
 800e7ee:	2000      	movs	r0, #0
 800e7f0:	bd70      	pop	{r4, r5, r6, pc}
 800e7f2:	bf00      	nop
 800e7f4:	0800e78d 	.word	0x0800e78d

0800e7f8 <uxr_init_input_reliable_stream>:
 800e7f8:	b500      	push	{lr}
 800e7fa:	e9c0 1200 	strd	r1, r2, [r0]
 800e7fe:	f04f 0e00 	mov.w	lr, #0
 800e802:	9a01      	ldr	r2, [sp, #4]
 800e804:	8103      	strh	r3, [r0, #8]
 800e806:	6102      	str	r2, [r0, #16]
 800e808:	f880 e014 	strb.w	lr, [r0, #20]
 800e80c:	b1d3      	cbz	r3, 800e844 <uxr_init_input_reliable_stream+0x4c>
 800e80e:	f8c1 e000 	str.w	lr, [r1]
 800e812:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 800e816:	f1bc 0f01 	cmp.w	ip, #1
 800e81a:	d913      	bls.n	800e844 <uxr_init_input_reliable_stream+0x4c>
 800e81c:	2301      	movs	r3, #1
 800e81e:	fbb3 f1fc 	udiv	r1, r3, ip
 800e822:	fb0c 3111 	mls	r1, ip, r1, r3
 800e826:	b289      	uxth	r1, r1
 800e828:	6842      	ldr	r2, [r0, #4]
 800e82a:	fbb2 f2fc 	udiv	r2, r2, ip
 800e82e:	fb01 f202 	mul.w	r2, r1, r2
 800e832:	6801      	ldr	r1, [r0, #0]
 800e834:	f841 e002 	str.w	lr, [r1, r2]
 800e838:	3301      	adds	r3, #1
 800e83a:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 800e83e:	b29b      	uxth	r3, r3
 800e840:	459c      	cmp	ip, r3
 800e842:	d8ec      	bhi.n	800e81e <uxr_init_input_reliable_stream+0x26>
 800e844:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e848:	60c3      	str	r3, [r0, #12]
 800e84a:	f85d fb04 	ldr.w	pc, [sp], #4
 800e84e:	bf00      	nop

0800e850 <uxr_reset_input_reliable_stream>:
 800e850:	8901      	ldrh	r1, [r0, #8]
 800e852:	b1e9      	cbz	r1, 800e890 <uxr_reset_input_reliable_stream+0x40>
 800e854:	f04f 0c00 	mov.w	ip, #0
 800e858:	b500      	push	{lr}
 800e85a:	4663      	mov	r3, ip
 800e85c:	46e6      	mov	lr, ip
 800e85e:	fbb3 f2f1 	udiv	r2, r3, r1
 800e862:	fb01 3312 	mls	r3, r1, r2, r3
 800e866:	b29b      	uxth	r3, r3
 800e868:	6842      	ldr	r2, [r0, #4]
 800e86a:	fbb2 f2f1 	udiv	r2, r2, r1
 800e86e:	fb02 f303 	mul.w	r3, r2, r3
 800e872:	6802      	ldr	r2, [r0, #0]
 800e874:	f842 e003 	str.w	lr, [r2, r3]
 800e878:	f10c 0c01 	add.w	ip, ip, #1
 800e87c:	8901      	ldrh	r1, [r0, #8]
 800e87e:	fa1f f38c 	uxth.w	r3, ip
 800e882:	4299      	cmp	r1, r3
 800e884:	d8eb      	bhi.n	800e85e <uxr_reset_input_reliable_stream+0xe>
 800e886:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e88a:	60c3      	str	r3, [r0, #12]
 800e88c:	f85d fb04 	ldr.w	pc, [sp], #4
 800e890:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e894:	60c3      	str	r3, [r0, #12]
 800e896:	4770      	bx	lr

0800e898 <uxr_receive_reliable_message>:
 800e898:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e89c:	4604      	mov	r4, r0
 800e89e:	460d      	mov	r5, r1
 800e8a0:	8901      	ldrh	r1, [r0, #8]
 800e8a2:	8980      	ldrh	r0, [r0, #12]
 800e8a4:	4690      	mov	r8, r2
 800e8a6:	461f      	mov	r7, r3
 800e8a8:	f000 fd86 	bl	800f3b8 <uxr_seq_num_add>
 800e8ac:	4629      	mov	r1, r5
 800e8ae:	4606      	mov	r6, r0
 800e8b0:	89a0      	ldrh	r0, [r4, #12]
 800e8b2:	f000 fd89 	bl	800f3c8 <uxr_seq_num_cmp>
 800e8b6:	2800      	cmp	r0, #0
 800e8b8:	db0a      	blt.n	800e8d0 <uxr_receive_reliable_message+0x38>
 800e8ba:	2600      	movs	r6, #0
 800e8bc:	89e0      	ldrh	r0, [r4, #14]
 800e8be:	4629      	mov	r1, r5
 800e8c0:	f000 fd82 	bl	800f3c8 <uxr_seq_num_cmp>
 800e8c4:	2800      	cmp	r0, #0
 800e8c6:	da00      	bge.n	800e8ca <uxr_receive_reliable_message+0x32>
 800e8c8:	81e5      	strh	r5, [r4, #14]
 800e8ca:	4630      	mov	r0, r6
 800e8cc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e8d0:	4630      	mov	r0, r6
 800e8d2:	4629      	mov	r1, r5
 800e8d4:	f000 fd78 	bl	800f3c8 <uxr_seq_num_cmp>
 800e8d8:	2800      	cmp	r0, #0
 800e8da:	dbee      	blt.n	800e8ba <uxr_receive_reliable_message+0x22>
 800e8dc:	6923      	ldr	r3, [r4, #16]
 800e8de:	4640      	mov	r0, r8
 800e8e0:	4798      	blx	r3
 800e8e2:	2101      	movs	r1, #1
 800e8e4:	4681      	mov	r9, r0
 800e8e6:	89a0      	ldrh	r0, [r4, #12]
 800e8e8:	f000 fd66 	bl	800f3b8 <uxr_seq_num_add>
 800e8ec:	f1b9 0f00 	cmp.w	r9, #0
 800e8f0:	d101      	bne.n	800e8f6 <uxr_receive_reliable_message+0x5e>
 800e8f2:	4285      	cmp	r5, r0
 800e8f4:	d047      	beq.n	800e986 <uxr_receive_reliable_message+0xee>
 800e8f6:	8922      	ldrh	r2, [r4, #8]
 800e8f8:	fbb5 f0f2 	udiv	r0, r5, r2
 800e8fc:	fb02 5010 	mls	r0, r2, r0, r5
 800e900:	b280      	uxth	r0, r0
 800e902:	6863      	ldr	r3, [r4, #4]
 800e904:	fbb3 f3f2 	udiv	r3, r3, r2
 800e908:	fb00 f303 	mul.w	r3, r0, r3
 800e90c:	6820      	ldr	r0, [r4, #0]
 800e90e:	3304      	adds	r3, #4
 800e910:	4418      	add	r0, r3
 800e912:	f850 3c04 	ldr.w	r3, [r0, #-4]
 800e916:	2b00      	cmp	r3, #0
 800e918:	d1cf      	bne.n	800e8ba <uxr_receive_reliable_message+0x22>
 800e91a:	4641      	mov	r1, r8
 800e91c:	463a      	mov	r2, r7
 800e91e:	f001 ffeb 	bl	80108f8 <memcpy>
 800e922:	8921      	ldrh	r1, [r4, #8]
 800e924:	fbb5 f2f1 	udiv	r2, r5, r1
 800e928:	fb01 5212 	mls	r2, r1, r2, r5
 800e92c:	b292      	uxth	r2, r2
 800e92e:	6863      	ldr	r3, [r4, #4]
 800e930:	fbb3 f3f1 	udiv	r3, r3, r1
 800e934:	fb02 f303 	mul.w	r3, r2, r3
 800e938:	6822      	ldr	r2, [r4, #0]
 800e93a:	50d7      	str	r7, [r2, r3]
 800e93c:	9a08      	ldr	r2, [sp, #32]
 800e93e:	2301      	movs	r3, #1
 800e940:	7013      	strb	r3, [r2, #0]
 800e942:	f1b9 0f00 	cmp.w	r9, #0
 800e946:	d0b8      	beq.n	800e8ba <uxr_receive_reliable_message+0x22>
 800e948:	89a6      	ldrh	r6, [r4, #12]
 800e94a:	4630      	mov	r0, r6
 800e94c:	2101      	movs	r1, #1
 800e94e:	f000 fd33 	bl	800f3b8 <uxr_seq_num_add>
 800e952:	8922      	ldrh	r2, [r4, #8]
 800e954:	6863      	ldr	r3, [r4, #4]
 800e956:	fbb3 f3f2 	udiv	r3, r3, r2
 800e95a:	4606      	mov	r6, r0
 800e95c:	fbb0 f0f2 	udiv	r0, r0, r2
 800e960:	fb02 6010 	mls	r0, r2, r0, r6
 800e964:	b280      	uxth	r0, r0
 800e966:	fb00 f303 	mul.w	r3, r0, r3
 800e96a:	6820      	ldr	r0, [r4, #0]
 800e96c:	3304      	adds	r3, #4
 800e96e:	4418      	add	r0, r3
 800e970:	f850 3c04 	ldr.w	r3, [r0, #-4]
 800e974:	2b00      	cmp	r3, #0
 800e976:	d0a0      	beq.n	800e8ba <uxr_receive_reliable_message+0x22>
 800e978:	6923      	ldr	r3, [r4, #16]
 800e97a:	4798      	blx	r3
 800e97c:	2802      	cmp	r0, #2
 800e97e:	d008      	beq.n	800e992 <uxr_receive_reliable_message+0xfa>
 800e980:	2801      	cmp	r0, #1
 800e982:	d0e2      	beq.n	800e94a <uxr_receive_reliable_message+0xb2>
 800e984:	e799      	b.n	800e8ba <uxr_receive_reliable_message+0x22>
 800e986:	9b08      	ldr	r3, [sp, #32]
 800e988:	81a5      	strh	r5, [r4, #12]
 800e98a:	2601      	movs	r6, #1
 800e98c:	f883 9000 	strb.w	r9, [r3]
 800e990:	e794      	b.n	800e8bc <uxr_receive_reliable_message+0x24>
 800e992:	2601      	movs	r6, #1
 800e994:	e792      	b.n	800e8bc <uxr_receive_reliable_message+0x24>
 800e996:	bf00      	nop

0800e998 <uxr_next_input_reliable_buffer_available>:
 800e998:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e99c:	4604      	mov	r4, r0
 800e99e:	460f      	mov	r7, r1
 800e9a0:	8980      	ldrh	r0, [r0, #12]
 800e9a2:	2101      	movs	r1, #1
 800e9a4:	4690      	mov	r8, r2
 800e9a6:	f000 fd07 	bl	800f3b8 <uxr_seq_num_add>
 800e9aa:	8922      	ldrh	r2, [r4, #8]
 800e9ac:	fbb0 f6f2 	udiv	r6, r0, r2
 800e9b0:	fb02 0616 	mls	r6, r2, r6, r0
 800e9b4:	b2b6      	uxth	r6, r6
 800e9b6:	6863      	ldr	r3, [r4, #4]
 800e9b8:	fbb3 f3f2 	udiv	r3, r3, r2
 800e9bc:	fb06 f303 	mul.w	r3, r6, r3
 800e9c0:	6826      	ldr	r6, [r4, #0]
 800e9c2:	3304      	adds	r3, #4
 800e9c4:	441e      	add	r6, r3
 800e9c6:	f856 9c04 	ldr.w	r9, [r6, #-4]
 800e9ca:	f1b9 0f00 	cmp.w	r9, #0
 800e9ce:	d023      	beq.n	800ea18 <uxr_next_input_reliable_buffer_available+0x80>
 800e9d0:	6923      	ldr	r3, [r4, #16]
 800e9d2:	4605      	mov	r5, r0
 800e9d4:	4630      	mov	r0, r6
 800e9d6:	4798      	blx	r3
 800e9d8:	4682      	mov	sl, r0
 800e9da:	b300      	cbz	r0, 800ea1e <uxr_next_input_reliable_buffer_available+0x86>
 800e9dc:	f8b4 a00c 	ldrh.w	sl, [r4, #12]
 800e9e0:	2101      	movs	r1, #1
 800e9e2:	4650      	mov	r0, sl
 800e9e4:	f000 fce8 	bl	800f3b8 <uxr_seq_num_add>
 800e9e8:	8921      	ldrh	r1, [r4, #8]
 800e9ea:	fbb0 f2f1 	udiv	r2, r0, r1
 800e9ee:	4682      	mov	sl, r0
 800e9f0:	fb01 0212 	mls	r2, r1, r2, r0
 800e9f4:	e9d4 0300 	ldrd	r0, r3, [r4]
 800e9f8:	b292      	uxth	r2, r2
 800e9fa:	fbb3 f3f1 	udiv	r3, r3, r1
 800e9fe:	fb02 f303 	mul.w	r3, r2, r3
 800ea02:	3304      	adds	r3, #4
 800ea04:	4418      	add	r0, r3
 800ea06:	f850 3c04 	ldr.w	r3, [r0, #-4]
 800ea0a:	b12b      	cbz	r3, 800ea18 <uxr_next_input_reliable_buffer_available+0x80>
 800ea0c:	6923      	ldr	r3, [r4, #16]
 800ea0e:	4798      	blx	r3
 800ea10:	2802      	cmp	r0, #2
 800ea12:	d01b      	beq.n	800ea4c <uxr_next_input_reliable_buffer_available+0xb4>
 800ea14:	2801      	cmp	r0, #1
 800ea16:	d0e3      	beq.n	800e9e0 <uxr_next_input_reliable_buffer_available+0x48>
 800ea18:	2000      	movs	r0, #0
 800ea1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ea1e:	464a      	mov	r2, r9
 800ea20:	4631      	mov	r1, r6
 800ea22:	4638      	mov	r0, r7
 800ea24:	f7fa feb0 	bl	8009788 <ucdr_init_buffer>
 800ea28:	8921      	ldrh	r1, [r4, #8]
 800ea2a:	fbb5 f2f1 	udiv	r2, r5, r1
 800ea2e:	fb01 5212 	mls	r2, r1, r2, r5
 800ea32:	b292      	uxth	r2, r2
 800ea34:	6863      	ldr	r3, [r4, #4]
 800ea36:	fbb3 f3f1 	udiv	r3, r3, r1
 800ea3a:	fb02 f303 	mul.w	r3, r2, r3
 800ea3e:	6822      	ldr	r2, [r4, #0]
 800ea40:	f842 a003 	str.w	sl, [r2, r3]
 800ea44:	2001      	movs	r0, #1
 800ea46:	81a5      	strh	r5, [r4, #12]
 800ea48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ea4c:	8920      	ldrh	r0, [r4, #8]
 800ea4e:	fbb5 f3f0 	udiv	r3, r5, r0
 800ea52:	fb00 5513 	mls	r5, r0, r3, r5
 800ea56:	b2ad      	uxth	r5, r5
 800ea58:	6863      	ldr	r3, [r4, #4]
 800ea5a:	fbb3 f3f0 	udiv	r3, r3, r0
 800ea5e:	fb03 f505 	mul.w	r5, r3, r5
 800ea62:	6823      	ldr	r3, [r4, #0]
 800ea64:	2000      	movs	r0, #0
 800ea66:	5158      	str	r0, [r3, r5]
 800ea68:	eb06 0108 	add.w	r1, r6, r8
 800ea6c:	eba9 0208 	sub.w	r2, r9, r8
 800ea70:	4638      	mov	r0, r7
 800ea72:	f7fa fe89 	bl	8009788 <ucdr_init_buffer>
 800ea76:	4638      	mov	r0, r7
 800ea78:	4903      	ldr	r1, [pc, #12]	; (800ea88 <uxr_next_input_reliable_buffer_available+0xf0>)
 800ea7a:	4622      	mov	r2, r4
 800ea7c:	f7fa fe58 	bl	8009730 <ucdr_set_on_full_buffer_callback>
 800ea80:	f8a4 a00c 	strh.w	sl, [r4, #12]
 800ea84:	2001      	movs	r0, #1
 800ea86:	e7c8      	b.n	800ea1a <uxr_next_input_reliable_buffer_available+0x82>
 800ea88:	0800e78d 	.word	0x0800e78d

0800ea8c <uxr_process_heartbeat>:
 800ea8c:	b538      	push	{r3, r4, r5, lr}
 800ea8e:	4611      	mov	r1, r2
 800ea90:	4604      	mov	r4, r0
 800ea92:	89c0      	ldrh	r0, [r0, #14]
 800ea94:	4615      	mov	r5, r2
 800ea96:	f000 fc97 	bl	800f3c8 <uxr_seq_num_cmp>
 800ea9a:	2800      	cmp	r0, #0
 800ea9c:	bfb8      	it	lt
 800ea9e:	81e5      	strhlt	r5, [r4, #14]
 800eaa0:	bd38      	pop	{r3, r4, r5, pc}
 800eaa2:	bf00      	nop

0800eaa4 <uxr_compute_acknack>:
 800eaa4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800eaa8:	8903      	ldrh	r3, [r0, #8]
 800eaaa:	8985      	ldrh	r5, [r0, #12]
 800eaac:	4604      	mov	r4, r0
 800eaae:	460e      	mov	r6, r1
 800eab0:	b1d3      	cbz	r3, 800eae8 <uxr_compute_acknack+0x44>
 800eab2:	4628      	mov	r0, r5
 800eab4:	2701      	movs	r7, #1
 800eab6:	e003      	b.n	800eac0 <uxr_compute_acknack+0x1c>
 800eab8:	4567      	cmp	r7, ip
 800eaba:	d215      	bcs.n	800eae8 <uxr_compute_acknack+0x44>
 800eabc:	89a0      	ldrh	r0, [r4, #12]
 800eabe:	3701      	adds	r7, #1
 800eac0:	b2b9      	uxth	r1, r7
 800eac2:	f000 fc79 	bl	800f3b8 <uxr_seq_num_add>
 800eac6:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 800eaca:	fbb0 f3fc 	udiv	r3, r0, ip
 800eace:	fb0c 0313 	mls	r3, ip, r3, r0
 800ead2:	b29a      	uxth	r2, r3
 800ead4:	e9d4 1300 	ldrd	r1, r3, [r4]
 800ead8:	fbb3 f3fc 	udiv	r3, r3, ip
 800eadc:	fb02 f303 	mul.w	r3, r2, r3
 800eae0:	58cb      	ldr	r3, [r1, r3]
 800eae2:	2b00      	cmp	r3, #0
 800eae4:	d1e8      	bne.n	800eab8 <uxr_compute_acknack+0x14>
 800eae6:	4605      	mov	r5, r0
 800eae8:	8035      	strh	r5, [r6, #0]
 800eaea:	2101      	movs	r1, #1
 800eaec:	4628      	mov	r0, r5
 800eaee:	89e7      	ldrh	r7, [r4, #14]
 800eaf0:	f000 fc66 	bl	800f3c0 <uxr_seq_num_sub>
 800eaf4:	4601      	mov	r1, r0
 800eaf6:	4638      	mov	r0, r7
 800eaf8:	f000 fc62 	bl	800f3c0 <uxr_seq_num_sub>
 800eafc:	4605      	mov	r5, r0
 800eafe:	b318      	cbz	r0, 800eb48 <uxr_compute_acknack+0xa4>
 800eb00:	f04f 0900 	mov.w	r9, #0
 800eb04:	464f      	mov	r7, r9
 800eb06:	f04f 0801 	mov.w	r8, #1
 800eb0a:	fa1f f189 	uxth.w	r1, r9
 800eb0e:	8830      	ldrh	r0, [r6, #0]
 800eb10:	f000 fc52 	bl	800f3b8 <uxr_seq_num_add>
 800eb14:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 800eb18:	fbb0 f3fc 	udiv	r3, r0, ip
 800eb1c:	e9d4 1200 	ldrd	r1, r2, [r4]
 800eb20:	fb03 001c 	mls	r0, r3, ip, r0
 800eb24:	b283      	uxth	r3, r0
 800eb26:	fbb2 f2fc 	udiv	r2, r2, ip
 800eb2a:	fb02 f303 	mul.w	r3, r2, r3
 800eb2e:	fa08 f209 	lsl.w	r2, r8, r9
 800eb32:	58cb      	ldr	r3, [r1, r3]
 800eb34:	f109 0901 	add.w	r9, r9, #1
 800eb38:	b90b      	cbnz	r3, 800eb3e <uxr_compute_acknack+0x9a>
 800eb3a:	4317      	orrs	r7, r2
 800eb3c:	b2bf      	uxth	r7, r7
 800eb3e:	454d      	cmp	r5, r9
 800eb40:	d1e3      	bne.n	800eb0a <uxr_compute_acknack+0x66>
 800eb42:	4638      	mov	r0, r7
 800eb44:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800eb48:	4607      	mov	r7, r0
 800eb4a:	4638      	mov	r0, r7
 800eb4c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0800eb50 <uxr_init_output_best_effort_stream>:
 800eb50:	f64f 7cff 	movw	ip, #65535	; 0xffff
 800eb54:	e9c0 3201 	strd	r3, r2, [r0, #4]
 800eb58:	6001      	str	r1, [r0, #0]
 800eb5a:	7303      	strb	r3, [r0, #12]
 800eb5c:	f8a0 c00e 	strh.w	ip, [r0, #14]
 800eb60:	4770      	bx	lr
 800eb62:	bf00      	nop

0800eb64 <uxr_reset_output_best_effort_stream>:
 800eb64:	7b02      	ldrb	r2, [r0, #12]
 800eb66:	6042      	str	r2, [r0, #4]
 800eb68:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800eb6c:	81c3      	strh	r3, [r0, #14]
 800eb6e:	4770      	bx	lr

0800eb70 <uxr_prepare_best_effort_buffer_to_write>:
 800eb70:	b5f0      	push	{r4, r5, r6, r7, lr}
 800eb72:	4604      	mov	r4, r0
 800eb74:	b083      	sub	sp, #12
 800eb76:	6840      	ldr	r0, [r0, #4]
 800eb78:	460d      	mov	r5, r1
 800eb7a:	4616      	mov	r6, r2
 800eb7c:	f7fc f9ce 	bl	800af1c <uxr_submessage_padding>
 800eb80:	6863      	ldr	r3, [r4, #4]
 800eb82:	4418      	add	r0, r3
 800eb84:	68a3      	ldr	r3, [r4, #8]
 800eb86:	1942      	adds	r2, r0, r5
 800eb88:	4293      	cmp	r3, r2
 800eb8a:	bf2c      	ite	cs
 800eb8c:	2701      	movcs	r7, #1
 800eb8e:	2700      	movcc	r7, #0
 800eb90:	d202      	bcs.n	800eb98 <uxr_prepare_best_effort_buffer_to_write+0x28>
 800eb92:	4638      	mov	r0, r7
 800eb94:	b003      	add	sp, #12
 800eb96:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800eb98:	9000      	str	r0, [sp, #0]
 800eb9a:	6821      	ldr	r1, [r4, #0]
 800eb9c:	4630      	mov	r0, r6
 800eb9e:	2300      	movs	r3, #0
 800eba0:	f7fa fde0 	bl	8009764 <ucdr_init_buffer_origin_offset>
 800eba4:	6861      	ldr	r1, [r4, #4]
 800eba6:	4638      	mov	r0, r7
 800eba8:	4429      	add	r1, r5
 800ebaa:	6061      	str	r1, [r4, #4]
 800ebac:	b003      	add	sp, #12
 800ebae:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800ebb0 <uxr_prepare_best_effort_buffer_to_send>:
 800ebb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ebb4:	4604      	mov	r4, r0
 800ebb6:	461d      	mov	r5, r3
 800ebb8:	6840      	ldr	r0, [r0, #4]
 800ebba:	7b23      	ldrb	r3, [r4, #12]
 800ebbc:	4298      	cmp	r0, r3
 800ebbe:	bf8c      	ite	hi
 800ebc0:	2601      	movhi	r6, #1
 800ebc2:	2600      	movls	r6, #0
 800ebc4:	d802      	bhi.n	800ebcc <uxr_prepare_best_effort_buffer_to_send+0x1c>
 800ebc6:	4630      	mov	r0, r6
 800ebc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ebcc:	4688      	mov	r8, r1
 800ebce:	89e0      	ldrh	r0, [r4, #14]
 800ebd0:	2101      	movs	r1, #1
 800ebd2:	4617      	mov	r7, r2
 800ebd4:	f000 fbf0 	bl	800f3b8 <uxr_seq_num_add>
 800ebd8:	6823      	ldr	r3, [r4, #0]
 800ebda:	81e0      	strh	r0, [r4, #14]
 800ebdc:	8028      	strh	r0, [r5, #0]
 800ebde:	f8c8 3000 	str.w	r3, [r8]
 800ebe2:	6863      	ldr	r3, [r4, #4]
 800ebe4:	603b      	str	r3, [r7, #0]
 800ebe6:	7b23      	ldrb	r3, [r4, #12]
 800ebe8:	6063      	str	r3, [r4, #4]
 800ebea:	4630      	mov	r0, r6
 800ebec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800ebf0 <on_full_output_buffer>:
 800ebf0:	b538      	push	{r3, r4, r5, lr}
 800ebf2:	6802      	ldr	r2, [r0, #0]
 800ebf4:	460c      	mov	r4, r1
 800ebf6:	6809      	ldr	r1, [r1, #0]
 800ebf8:	8923      	ldrh	r3, [r4, #8]
 800ebfa:	eba2 0c01 	sub.w	ip, r2, r1
 800ebfe:	6862      	ldr	r2, [r4, #4]
 800ec00:	fbb2 f2f3 	udiv	r2, r2, r3
 800ec04:	fbbc fcf2 	udiv	ip, ip, r2
 800ec08:	f10c 0c01 	add.w	ip, ip, #1
 800ec0c:	fa1f fc8c 	uxth.w	ip, ip
 800ec10:	fbbc fef3 	udiv	lr, ip, r3
 800ec14:	fb03 c31e 	mls	r3, r3, lr, ip
 800ec18:	b29b      	uxth	r3, r3
 800ec1a:	fb02 f303 	mul.w	r3, r2, r3
 800ec1e:	f894 c00c 	ldrb.w	ip, [r4, #12]
 800ec22:	58ca      	ldr	r2, [r1, r3]
 800ec24:	4463      	add	r3, ip
 800ec26:	eba2 020c 	sub.w	r2, r2, ip
 800ec2a:	3308      	adds	r3, #8
 800ec2c:	4605      	mov	r5, r0
 800ec2e:	4419      	add	r1, r3
 800ec30:	3a04      	subs	r2, #4
 800ec32:	6903      	ldr	r3, [r0, #16]
 800ec34:	f7fa fda0 	bl	8009778 <ucdr_init_buffer_origin>
 800ec38:	4628      	mov	r0, r5
 800ec3a:	4903      	ldr	r1, [pc, #12]	; (800ec48 <on_full_output_buffer+0x58>)
 800ec3c:	4622      	mov	r2, r4
 800ec3e:	f7fa fd77 	bl	8009730 <ucdr_set_on_full_buffer_callback>
 800ec42:	2000      	movs	r0, #0
 800ec44:	bd38      	pop	{r3, r4, r5, pc}
 800ec46:	bf00      	nop
 800ec48:	0800ebf1 	.word	0x0800ebf1

0800ec4c <uxr_init_output_reliable_stream>:
 800ec4c:	b410      	push	{r4}
 800ec4e:	f89d c004 	ldrb.w	ip, [sp, #4]
 800ec52:	8103      	strh	r3, [r0, #8]
 800ec54:	e9c0 1200 	strd	r1, r2, [r0]
 800ec58:	f880 c00c 	strb.w	ip, [r0, #12]
 800ec5c:	b1d3      	cbz	r3, 800ec94 <uxr_init_output_reliable_stream+0x48>
 800ec5e:	f8c1 c000 	str.w	ip, [r1]
 800ec62:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 800ec66:	f1bc 0f01 	cmp.w	ip, #1
 800ec6a:	d913      	bls.n	800ec94 <uxr_init_output_reliable_stream+0x48>
 800ec6c:	2301      	movs	r3, #1
 800ec6e:	fbb3 f1fc 	udiv	r1, r3, ip
 800ec72:	fb0c 3111 	mls	r1, ip, r1, r3
 800ec76:	b289      	uxth	r1, r1
 800ec78:	6842      	ldr	r2, [r0, #4]
 800ec7a:	6804      	ldr	r4, [r0, #0]
 800ec7c:	fbb2 f2fc 	udiv	r2, r2, ip
 800ec80:	fb01 f202 	mul.w	r2, r1, r2
 800ec84:	7b01      	ldrb	r1, [r0, #12]
 800ec86:	50a1      	str	r1, [r4, r2]
 800ec88:	3301      	adds	r3, #1
 800ec8a:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 800ec8e:	b29b      	uxth	r3, r3
 800ec90:	459c      	cmp	ip, r3
 800ec92:	d8ec      	bhi.n	800ec6e <uxr_init_output_reliable_stream+0x22>
 800ec94:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ec98:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800ec9c:	e9c0 2306 	strd	r2, r3, [r0, #24]
 800eca0:	4905      	ldr	r1, [pc, #20]	; (800ecb8 <uxr_init_output_reliable_stream+0x6c>)
 800eca2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800eca6:	f8c0 100e 	str.w	r1, [r0, #14]
 800ecaa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ecae:	2300      	movs	r3, #0
 800ecb0:	8242      	strh	r2, [r0, #18]
 800ecb2:	8403      	strh	r3, [r0, #32]
 800ecb4:	4770      	bx	lr
 800ecb6:	bf00      	nop
 800ecb8:	ffff0000 	.word	0xffff0000

0800ecbc <uxr_reset_output_reliable_stream>:
 800ecbc:	8901      	ldrh	r1, [r0, #8]
 800ecbe:	b1b1      	cbz	r1, 800ecee <uxr_reset_output_reliable_stream+0x32>
 800ecc0:	f04f 0c00 	mov.w	ip, #0
 800ecc4:	4663      	mov	r3, ip
 800ecc6:	fbb3 f2f1 	udiv	r2, r3, r1
 800ecca:	fb01 3312 	mls	r3, r1, r2, r3
 800ecce:	b29b      	uxth	r3, r3
 800ecd0:	6842      	ldr	r2, [r0, #4]
 800ecd2:	fbb2 f2f1 	udiv	r2, r2, r1
 800ecd6:	6801      	ldr	r1, [r0, #0]
 800ecd8:	fb02 f303 	mul.w	r3, r2, r3
 800ecdc:	7b02      	ldrb	r2, [r0, #12]
 800ecde:	50ca      	str	r2, [r1, r3]
 800ece0:	f10c 0c01 	add.w	ip, ip, #1
 800ece4:	8901      	ldrh	r1, [r0, #8]
 800ece6:	fa1f f38c 	uxth.w	r3, ip
 800ecea:	4299      	cmp	r1, r3
 800ecec:	d8eb      	bhi.n	800ecc6 <uxr_reset_output_reliable_stream+0xa>
 800ecee:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ecf2:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800ecf6:	e9c0 2306 	strd	r2, r3, [r0, #24]
 800ecfa:	4904      	ldr	r1, [pc, #16]	; (800ed0c <uxr_reset_output_reliable_stream+0x50>)
 800ecfc:	f8c0 100e 	str.w	r1, [r0, #14]
 800ed00:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ed04:	2300      	movs	r3, #0
 800ed06:	8242      	strh	r2, [r0, #18]
 800ed08:	8403      	strh	r3, [r0, #32]
 800ed0a:	4770      	bx	lr
 800ed0c:	ffff0000 	.word	0xffff0000

0800ed10 <uxr_prepare_reliable_buffer_to_write>:
 800ed10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ed14:	4604      	mov	r4, r0
 800ed16:	8900      	ldrh	r0, [r0, #8]
 800ed18:	89e5      	ldrh	r5, [r4, #14]
 800ed1a:	fbb5 f3f0 	udiv	r3, r5, r0
 800ed1e:	b091      	sub	sp, #68	; 0x44
 800ed20:	fb00 5313 	mls	r3, r0, r3, r5
 800ed24:	b29b      	uxth	r3, r3
 800ed26:	9205      	str	r2, [sp, #20]
 800ed28:	6862      	ldr	r2, [r4, #4]
 800ed2a:	fbb2 f0f0 	udiv	r0, r2, r0
 800ed2e:	6822      	ldr	r2, [r4, #0]
 800ed30:	9006      	str	r0, [sp, #24]
 800ed32:	fb00 f303 	mul.w	r3, r0, r3
 800ed36:	3304      	adds	r3, #4
 800ed38:	18d3      	adds	r3, r2, r3
 800ed3a:	4689      	mov	r9, r1
 800ed3c:	f853 6c04 	ldr.w	r6, [r3, #-4]
 800ed40:	9304      	str	r3, [sp, #16]
 800ed42:	f1a0 0804 	sub.w	r8, r0, #4
 800ed46:	2104      	movs	r1, #4
 800ed48:	4630      	mov	r0, r6
 800ed4a:	f7fa fd21 	bl	8009790 <ucdr_alignment>
 800ed4e:	1833      	adds	r3, r6, r0
 800ed50:	eb03 0609 	add.w	r6, r3, r9
 800ed54:	4546      	cmp	r6, r8
 800ed56:	9303      	str	r3, [sp, #12]
 800ed58:	f240 80d6 	bls.w	800ef08 <uxr_prepare_reliable_buffer_to_write+0x1f8>
 800ed5c:	7b26      	ldrb	r6, [r4, #12]
 800ed5e:	eb06 0309 	add.w	r3, r6, r9
 800ed62:	4543      	cmp	r3, r8
 800ed64:	f240 80bd 	bls.w	800eee2 <uxr_prepare_reliable_buffer_to_write+0x1d2>
 800ed68:	9b03      	ldr	r3, [sp, #12]
 800ed6a:	3304      	adds	r3, #4
 800ed6c:	4543      	cmp	r3, r8
 800ed6e:	f080 810d 	bcs.w	800ef8c <uxr_prepare_reliable_buffer_to_write+0x27c>
 800ed72:	8920      	ldrh	r0, [r4, #8]
 800ed74:	2800      	cmp	r0, #0
 800ed76:	f000 8122 	beq.w	800efbe <uxr_prepare_reliable_buffer_to_write+0x2ae>
 800ed7a:	2100      	movs	r1, #0
 800ed7c:	6827      	ldr	r7, [r4, #0]
 800ed7e:	6862      	ldr	r2, [r4, #4]
 800ed80:	fbb2 fef0 	udiv	lr, r2, r0
 800ed84:	468c      	mov	ip, r1
 800ed86:	460b      	mov	r3, r1
 800ed88:	fbb3 f2f0 	udiv	r2, r3, r0
 800ed8c:	fb00 3312 	mls	r3, r0, r2, r3
 800ed90:	b29b      	uxth	r3, r3
 800ed92:	fb0e f303 	mul.w	r3, lr, r3
 800ed96:	3101      	adds	r1, #1
 800ed98:	58fa      	ldr	r2, [r7, r3]
 800ed9a:	4296      	cmp	r6, r2
 800ed9c:	bf08      	it	eq
 800ed9e:	f10c 0c01 	addeq.w	ip, ip, #1
 800eda2:	b28b      	uxth	r3, r1
 800eda4:	bf08      	it	eq
 800eda6:	fa1f fc8c 	uxtheq.w	ip, ip
 800edaa:	4283      	cmp	r3, r0
 800edac:	d3ec      	bcc.n	800ed88 <uxr_prepare_reliable_buffer_to_write+0x78>
 800edae:	9b03      	ldr	r3, [sp, #12]
 800edb0:	f1a8 0704 	sub.w	r7, r8, #4
 800edb4:	b2bf      	uxth	r7, r7
 800edb6:	1bbe      	subs	r6, r7, r6
 800edb8:	1aff      	subs	r7, r7, r3
 800edba:	b2bf      	uxth	r7, r7
 800edbc:	b2b6      	uxth	r6, r6
 800edbe:	eba9 0907 	sub.w	r9, r9, r7
 800edc2:	fbb9 faf6 	udiv	sl, r9, r6
 800edc6:	fb06 911a 	mls	r1, r6, sl, r9
 800edca:	9607      	str	r6, [sp, #28]
 800edcc:	2900      	cmp	r1, #0
 800edce:	f040 80bc 	bne.w	800ef4a <uxr_prepare_reliable_buffer_to_write+0x23a>
 800edd2:	fa1f fa8a 	uxth.w	sl, sl
 800edd6:	45e2      	cmp	sl, ip
 800edd8:	f200 8092 	bhi.w	800ef00 <uxr_prepare_reliable_buffer_to_write+0x1f0>
 800eddc:	f10d 0b20 	add.w	fp, sp, #32
 800ede0:	f1ba 0f00 	cmp.w	sl, #0
 800ede4:	d03a      	beq.n	800ee5c <uxr_prepare_reliable_buffer_to_write+0x14c>
 800ede6:	f04f 0900 	mov.w	r9, #0
 800edea:	f10d 0b20 	add.w	fp, sp, #32
 800edee:	e9d4 2300 	ldrd	r2, r3, [r4]
 800edf2:	fbb5 fcf0 	udiv	ip, r5, r0
 800edf6:	fb00 511c 	mls	r1, r0, ip, r5
 800edfa:	fa1f fc81 	uxth.w	ip, r1
 800edfe:	fbb3 f1f0 	udiv	r1, r3, r0
 800ee02:	fb0c f101 	mul.w	r1, ip, r1
 800ee06:	3104      	adds	r1, #4
 800ee08:	4411      	add	r1, r2
 800ee0a:	4658      	mov	r0, fp
 800ee0c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ee10:	9300      	str	r3, [sp, #0]
 800ee12:	4642      	mov	r2, r8
 800ee14:	2300      	movs	r3, #0
 800ee16:	f7fa fca5 	bl	8009764 <ucdr_init_buffer_origin_offset>
 800ee1a:	463a      	mov	r2, r7
 800ee1c:	2300      	movs	r3, #0
 800ee1e:	210d      	movs	r1, #13
 800ee20:	4658      	mov	r0, fp
 800ee22:	f7fc f83b 	bl	800ae9c <uxr_buffer_submessage_header>
 800ee26:	8921      	ldrh	r1, [r4, #8]
 800ee28:	fbb5 f2f1 	udiv	r2, r5, r1
 800ee2c:	fb01 5212 	mls	r2, r1, r2, r5
 800ee30:	b292      	uxth	r2, r2
 800ee32:	6863      	ldr	r3, [r4, #4]
 800ee34:	fbb3 f3f1 	udiv	r3, r3, r1
 800ee38:	fb02 f303 	mul.w	r3, r2, r3
 800ee3c:	6822      	ldr	r2, [r4, #0]
 800ee3e:	4628      	mov	r0, r5
 800ee40:	f842 8003 	str.w	r8, [r2, r3]
 800ee44:	2101      	movs	r1, #1
 800ee46:	f000 fab7 	bl	800f3b8 <uxr_seq_num_add>
 800ee4a:	f109 0901 	add.w	r9, r9, #1
 800ee4e:	fa1f f389 	uxth.w	r3, r9
 800ee52:	459a      	cmp	sl, r3
 800ee54:	4605      	mov	r5, r0
 800ee56:	4637      	mov	r7, r6
 800ee58:	8920      	ldrh	r0, [r4, #8]
 800ee5a:	d8c8      	bhi.n	800edee <uxr_prepare_reliable_buffer_to_write+0xde>
 800ee5c:	fbb5 f1f0 	udiv	r1, r5, r0
 800ee60:	fb00 5111 	mls	r1, r0, r1, r5
 800ee64:	b28e      	uxth	r6, r1
 800ee66:	6863      	ldr	r3, [r4, #4]
 800ee68:	fbb3 f1f0 	udiv	r1, r3, r0
 800ee6c:	6823      	ldr	r3, [r4, #0]
 800ee6e:	fb06 f101 	mul.w	r1, r6, r1
 800ee72:	3104      	adds	r1, #4
 800ee74:	4419      	add	r1, r3
 800ee76:	4642      	mov	r2, r8
 800ee78:	f851 0c04 	ldr.w	r0, [r1, #-4]
 800ee7c:	9000      	str	r0, [sp, #0]
 800ee7e:	2300      	movs	r3, #0
 800ee80:	4658      	mov	r0, fp
 800ee82:	f7fa fc6f 	bl	8009764 <ucdr_init_buffer_origin_offset>
 800ee86:	9e07      	ldr	r6, [sp, #28]
 800ee88:	4658      	mov	r0, fp
 800ee8a:	b2b2      	uxth	r2, r6
 800ee8c:	2302      	movs	r3, #2
 800ee8e:	210d      	movs	r1, #13
 800ee90:	f7fc f804 	bl	800ae9c <uxr_buffer_submessage_header>
 800ee94:	9b06      	ldr	r3, [sp, #24]
 800ee96:	7b20      	ldrb	r0, [r4, #12]
 800ee98:	8927      	ldrh	r7, [r4, #8]
 800ee9a:	f1a3 0208 	sub.w	r2, r3, #8
 800ee9e:	9b03      	ldr	r3, [sp, #12]
 800eea0:	3004      	adds	r0, #4
 800eea2:	1ad2      	subs	r2, r2, r3
 800eea4:	1d19      	adds	r1, r3, #4
 800eea6:	9b04      	ldr	r3, [sp, #16]
 800eea8:	4430      	add	r0, r6
 800eeaa:	fbb5 f6f7 	udiv	r6, r5, r7
 800eeae:	fb07 5616 	mls	r6, r7, r6, r5
 800eeb2:	440b      	add	r3, r1
 800eeb4:	b2b6      	uxth	r6, r6
 800eeb6:	4619      	mov	r1, r3
 800eeb8:	6863      	ldr	r3, [r4, #4]
 800eeba:	fbb3 f3f7 	udiv	r3, r3, r7
 800eebe:	fb06 f303 	mul.w	r3, r6, r3
 800eec2:	6826      	ldr	r6, [r4, #0]
 800eec4:	50f0      	str	r0, [r6, r3]
 800eec6:	9e05      	ldr	r6, [sp, #20]
 800eec8:	4630      	mov	r0, r6
 800eeca:	f7fa fc5d 	bl	8009788 <ucdr_init_buffer>
 800eece:	4630      	mov	r0, r6
 800eed0:	493c      	ldr	r1, [pc, #240]	; (800efc4 <uxr_prepare_reliable_buffer_to_write+0x2b4>)
 800eed2:	4622      	mov	r2, r4
 800eed4:	f7fa fc2c 	bl	8009730 <ucdr_set_on_full_buffer_callback>
 800eed8:	2001      	movs	r0, #1
 800eeda:	81e5      	strh	r5, [r4, #14]
 800eedc:	b011      	add	sp, #68	; 0x44
 800eede:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eee2:	2101      	movs	r1, #1
 800eee4:	89e0      	ldrh	r0, [r4, #14]
 800eee6:	f000 fa67 	bl	800f3b8 <uxr_seq_num_add>
 800eeea:	8921      	ldrh	r1, [r4, #8]
 800eeec:	4605      	mov	r5, r0
 800eeee:	8a60      	ldrh	r0, [r4, #18]
 800eef0:	f000 fa62 	bl	800f3b8 <uxr_seq_num_add>
 800eef4:	4601      	mov	r1, r0
 800eef6:	4628      	mov	r0, r5
 800eef8:	f000 fa66 	bl	800f3c8 <uxr_seq_num_cmp>
 800eefc:	2800      	cmp	r0, #0
 800eefe:	dd2a      	ble.n	800ef56 <uxr_prepare_reliable_buffer_to_write+0x246>
 800ef00:	2000      	movs	r0, #0
 800ef02:	b011      	add	sp, #68	; 0x44
 800ef04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ef08:	8921      	ldrh	r1, [r4, #8]
 800ef0a:	8a60      	ldrh	r0, [r4, #18]
 800ef0c:	f000 fa54 	bl	800f3b8 <uxr_seq_num_add>
 800ef10:	4601      	mov	r1, r0
 800ef12:	4628      	mov	r0, r5
 800ef14:	f000 fa58 	bl	800f3c8 <uxr_seq_num_cmp>
 800ef18:	2800      	cmp	r0, #0
 800ef1a:	dcf1      	bgt.n	800ef00 <uxr_prepare_reliable_buffer_to_write+0x1f0>
 800ef1c:	8927      	ldrh	r7, [r4, #8]
 800ef1e:	fbb5 f2f7 	udiv	r2, r5, r7
 800ef22:	fb07 5512 	mls	r5, r7, r2, r5
 800ef26:	b2ad      	uxth	r5, r5
 800ef28:	6863      	ldr	r3, [r4, #4]
 800ef2a:	6822      	ldr	r2, [r4, #0]
 800ef2c:	fbb3 f3f7 	udiv	r3, r3, r7
 800ef30:	fb05 f303 	mul.w	r3, r5, r3
 800ef34:	e9dd 1004 	ldrd	r1, r0, [sp, #16]
 800ef38:	50d6      	str	r6, [r2, r3]
 800ef3a:	9a03      	ldr	r2, [sp, #12]
 800ef3c:	9200      	str	r2, [sp, #0]
 800ef3e:	2300      	movs	r3, #0
 800ef40:	4632      	mov	r2, r6
 800ef42:	f7fa fc0f 	bl	8009764 <ucdr_init_buffer_origin_offset>
 800ef46:	2001      	movs	r0, #1
 800ef48:	e7db      	b.n	800ef02 <uxr_prepare_reliable_buffer_to_write+0x1f2>
 800ef4a:	f10a 0a01 	add.w	sl, sl, #1
 800ef4e:	fa1f fa8a 	uxth.w	sl, sl
 800ef52:	9107      	str	r1, [sp, #28]
 800ef54:	e73f      	b.n	800edd6 <uxr_prepare_reliable_buffer_to_write+0xc6>
 800ef56:	8921      	ldrh	r1, [r4, #8]
 800ef58:	fbb5 f3f1 	udiv	r3, r5, r1
 800ef5c:	fb01 5313 	mls	r3, r1, r3, r5
 800ef60:	b29a      	uxth	r2, r3
 800ef62:	6863      	ldr	r3, [r4, #4]
 800ef64:	fbb3 f3f1 	udiv	r3, r3, r1
 800ef68:	6821      	ldr	r1, [r4, #0]
 800ef6a:	9805      	ldr	r0, [sp, #20]
 800ef6c:	fb02 f303 	mul.w	r3, r2, r3
 800ef70:	3304      	adds	r3, #4
 800ef72:	7b22      	ldrb	r2, [r4, #12]
 800ef74:	4419      	add	r1, r3
 800ef76:	444a      	add	r2, r9
 800ef78:	f841 2c04 	str.w	r2, [r1, #-4]
 800ef7c:	7b23      	ldrb	r3, [r4, #12]
 800ef7e:	9300      	str	r3, [sp, #0]
 800ef80:	2300      	movs	r3, #0
 800ef82:	f7fa fbef 	bl	8009764 <ucdr_init_buffer_origin_offset>
 800ef86:	81e5      	strh	r5, [r4, #14]
 800ef88:	2001      	movs	r0, #1
 800ef8a:	e7ba      	b.n	800ef02 <uxr_prepare_reliable_buffer_to_write+0x1f2>
 800ef8c:	4628      	mov	r0, r5
 800ef8e:	2101      	movs	r1, #1
 800ef90:	f000 fa12 	bl	800f3b8 <uxr_seq_num_add>
 800ef94:	4605      	mov	r5, r0
 800ef96:	8920      	ldrh	r0, [r4, #8]
 800ef98:	fbb5 f3f0 	udiv	r3, r5, r0
 800ef9c:	fb00 5313 	mls	r3, r0, r3, r5
 800efa0:	b29a      	uxth	r2, r3
 800efa2:	6863      	ldr	r3, [r4, #4]
 800efa4:	fbb3 f3f0 	udiv	r3, r3, r0
 800efa8:	fb02 f303 	mul.w	r3, r2, r3
 800efac:	6822      	ldr	r2, [r4, #0]
 800efae:	7b26      	ldrb	r6, [r4, #12]
 800efb0:	3304      	adds	r3, #4
 800efb2:	18d3      	adds	r3, r2, r3
 800efb4:	9304      	str	r3, [sp, #16]
 800efb6:	f853 3c04 	ldr.w	r3, [r3, #-4]
 800efba:	9303      	str	r3, [sp, #12]
 800efbc:	e6da      	b.n	800ed74 <uxr_prepare_reliable_buffer_to_write+0x64>
 800efbe:	4684      	mov	ip, r0
 800efc0:	e6f5      	b.n	800edae <uxr_prepare_reliable_buffer_to_write+0x9e>
 800efc2:	bf00      	nop
 800efc4:	0800ebf1 	.word	0x0800ebf1

0800efc8 <uxr_prepare_next_reliable_buffer_to_send>:
 800efc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800efca:	4604      	mov	r4, r0
 800efcc:	460f      	mov	r7, r1
 800efce:	8a00      	ldrh	r0, [r0, #16]
 800efd0:	2101      	movs	r1, #1
 800efd2:	4616      	mov	r6, r2
 800efd4:	461d      	mov	r5, r3
 800efd6:	f000 f9ef 	bl	800f3b8 <uxr_seq_num_add>
 800efda:	8028      	strh	r0, [r5, #0]
 800efdc:	8922      	ldrh	r2, [r4, #8]
 800efde:	fbb0 f3f2 	udiv	r3, r0, r2
 800efe2:	fb02 0c13 	mls	ip, r2, r3, r0
 800efe6:	fa1f fc8c 	uxth.w	ip, ip
 800efea:	6863      	ldr	r3, [r4, #4]
 800efec:	fbb3 f3f2 	udiv	r3, r3, r2
 800eff0:	fb0c fc03 	mul.w	ip, ip, r3
 800eff4:	6823      	ldr	r3, [r4, #0]
 800eff6:	89e1      	ldrh	r1, [r4, #14]
 800eff8:	f10c 0c04 	add.w	ip, ip, #4
 800effc:	4463      	add	r3, ip
 800effe:	603b      	str	r3, [r7, #0]
 800f000:	6823      	ldr	r3, [r4, #0]
 800f002:	449c      	add	ip, r3
 800f004:	f85c 3c04 	ldr.w	r3, [ip, #-4]
 800f008:	6033      	str	r3, [r6, #0]
 800f00a:	f000 f9dd 	bl	800f3c8 <uxr_seq_num_cmp>
 800f00e:	2800      	cmp	r0, #0
 800f010:	dd01      	ble.n	800f016 <uxr_prepare_next_reliable_buffer_to_send+0x4e>
 800f012:	2000      	movs	r0, #0
 800f014:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f016:	7b23      	ldrb	r3, [r4, #12]
 800f018:	6832      	ldr	r2, [r6, #0]
 800f01a:	429a      	cmp	r2, r3
 800f01c:	d9f9      	bls.n	800f012 <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 800f01e:	8a61      	ldrh	r1, [r4, #18]
 800f020:	8a20      	ldrh	r0, [r4, #16]
 800f022:	f000 f9cd 	bl	800f3c0 <uxr_seq_num_sub>
 800f026:	8923      	ldrh	r3, [r4, #8]
 800f028:	4283      	cmp	r3, r0
 800f02a:	d0f2      	beq.n	800f012 <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 800f02c:	8828      	ldrh	r0, [r5, #0]
 800f02e:	89e3      	ldrh	r3, [r4, #14]
 800f030:	8220      	strh	r0, [r4, #16]
 800f032:	4298      	cmp	r0, r3
 800f034:	d001      	beq.n	800f03a <uxr_prepare_next_reliable_buffer_to_send+0x72>
 800f036:	2001      	movs	r0, #1
 800f038:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f03a:	2101      	movs	r1, #1
 800f03c:	f000 f9bc 	bl	800f3b8 <uxr_seq_num_add>
 800f040:	81e0      	strh	r0, [r4, #14]
 800f042:	2001      	movs	r0, #1
 800f044:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f046:	bf00      	nop

0800f048 <uxr_update_output_stream_heartbeat_timestamp>:
 800f048:	b570      	push	{r4, r5, r6, lr}
 800f04a:	8a01      	ldrh	r1, [r0, #16]
 800f04c:	4604      	mov	r4, r0
 800f04e:	8a40      	ldrh	r0, [r0, #18]
 800f050:	4615      	mov	r5, r2
 800f052:	461e      	mov	r6, r3
 800f054:	f000 f9b8 	bl	800f3c8 <uxr_seq_num_cmp>
 800f058:	2800      	cmp	r0, #0
 800f05a:	db07      	blt.n	800f06c <uxr_update_output_stream_heartbeat_timestamp+0x24>
 800f05c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800f060:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800f064:	e9c4 2306 	strd	r2, r3, [r4, #24]
 800f068:	2000      	movs	r0, #0
 800f06a:	bd70      	pop	{r4, r5, r6, pc}
 800f06c:	f894 0020 	ldrb.w	r0, [r4, #32]
 800f070:	b940      	cbnz	r0, 800f084 <uxr_update_output_stream_heartbeat_timestamp+0x3c>
 800f072:	2301      	movs	r3, #1
 800f074:	f884 3020 	strb.w	r3, [r4, #32]
 800f078:	3564      	adds	r5, #100	; 0x64
 800f07a:	f146 0600 	adc.w	r6, r6, #0
 800f07e:	e9c4 5606 	strd	r5, r6, [r4, #24]
 800f082:	bd70      	pop	{r4, r5, r6, pc}
 800f084:	e9d4 2306 	ldrd	r2, r3, [r4, #24]
 800f088:	4295      	cmp	r5, r2
 800f08a:	eb76 0303 	sbcs.w	r3, r6, r3
 800f08e:	bfa5      	ittet	ge
 800f090:	3001      	addge	r0, #1
 800f092:	f884 0020 	strbge.w	r0, [r4, #32]
 800f096:	2000      	movlt	r0, #0
 800f098:	2001      	movge	r0, #1
 800f09a:	e7ed      	b.n	800f078 <uxr_update_output_stream_heartbeat_timestamp+0x30>

0800f09c <uxr_begin_output_nack_buffer_it>:
 800f09c:	8a40      	ldrh	r0, [r0, #18]
 800f09e:	4770      	bx	lr

0800f0a0 <uxr_next_reliable_nack_buffer_to_send>:
 800f0a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f0a4:	f890 8021 	ldrb.w	r8, [r0, #33]	; 0x21
 800f0a8:	b082      	sub	sp, #8
 800f0aa:	f1b8 0f00 	cmp.w	r8, #0
 800f0ae:	d011      	beq.n	800f0d4 <uxr_next_reliable_nack_buffer_to_send+0x34>
 800f0b0:	4604      	mov	r4, r0
 800f0b2:	8818      	ldrh	r0, [r3, #0]
 800f0b4:	460e      	mov	r6, r1
 800f0b6:	4617      	mov	r7, r2
 800f0b8:	461d      	mov	r5, r3
 800f0ba:	2101      	movs	r1, #1
 800f0bc:	f000 f97c 	bl	800f3b8 <uxr_seq_num_add>
 800f0c0:	8028      	strh	r0, [r5, #0]
 800f0c2:	8a21      	ldrh	r1, [r4, #16]
 800f0c4:	f000 f980 	bl	800f3c8 <uxr_seq_num_cmp>
 800f0c8:	2800      	cmp	r0, #0
 800f0ca:	dd07      	ble.n	800f0dc <uxr_next_reliable_nack_buffer_to_send+0x3c>
 800f0cc:	f04f 0800 	mov.w	r8, #0
 800f0d0:	f884 8021 	strb.w	r8, [r4, #33]	; 0x21
 800f0d4:	4640      	mov	r0, r8
 800f0d6:	b002      	add	sp, #8
 800f0d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f0dc:	8921      	ldrh	r1, [r4, #8]
 800f0de:	8828      	ldrh	r0, [r5, #0]
 800f0e0:	6823      	ldr	r3, [r4, #0]
 800f0e2:	fbb0 f2f1 	udiv	r2, r0, r1
 800f0e6:	fb01 0c12 	mls	ip, r1, r2, r0
 800f0ea:	fa1f f28c 	uxth.w	r2, ip
 800f0ee:	9301      	str	r3, [sp, #4]
 800f0f0:	6863      	ldr	r3, [r4, #4]
 800f0f2:	fbb3 fcf1 	udiv	ip, r3, r1
 800f0f6:	9b01      	ldr	r3, [sp, #4]
 800f0f8:	fb02 fc0c 	mul.w	ip, r2, ip
 800f0fc:	f10c 0c04 	add.w	ip, ip, #4
 800f100:	4463      	add	r3, ip
 800f102:	6033      	str	r3, [r6, #0]
 800f104:	6823      	ldr	r3, [r4, #0]
 800f106:	4463      	add	r3, ip
 800f108:	f853 3c04 	ldr.w	r3, [r3, #-4]
 800f10c:	603b      	str	r3, [r7, #0]
 800f10e:	7b22      	ldrb	r2, [r4, #12]
 800f110:	429a      	cmp	r2, r3
 800f112:	d0d2      	beq.n	800f0ba <uxr_next_reliable_nack_buffer_to_send+0x1a>
 800f114:	4640      	mov	r0, r8
 800f116:	b002      	add	sp, #8
 800f118:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800f11c <uxr_process_acknack>:
 800f11c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f11e:	4604      	mov	r4, r0
 800f120:	460e      	mov	r6, r1
 800f122:	4610      	mov	r0, r2
 800f124:	2101      	movs	r1, #1
 800f126:	f000 f94b 	bl	800f3c0 <uxr_seq_num_sub>
 800f12a:	8a61      	ldrh	r1, [r4, #18]
 800f12c:	f000 f948 	bl	800f3c0 <uxr_seq_num_sub>
 800f130:	b1c0      	cbz	r0, 800f164 <uxr_process_acknack+0x48>
 800f132:	4605      	mov	r5, r0
 800f134:	2700      	movs	r7, #0
 800f136:	2101      	movs	r1, #1
 800f138:	8a60      	ldrh	r0, [r4, #18]
 800f13a:	f000 f93d 	bl	800f3b8 <uxr_seq_num_add>
 800f13e:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 800f142:	fbb0 f1fc 	udiv	r1, r0, ip
 800f146:	e9d4 2300 	ldrd	r2, r3, [r4]
 800f14a:	fb0c 0111 	mls	r1, ip, r1, r0
 800f14e:	b289      	uxth	r1, r1
 800f150:	3701      	adds	r7, #1
 800f152:	fbb3 f3fc 	udiv	r3, r3, ip
 800f156:	fb01 f303 	mul.w	r3, r1, r3
 800f15a:	42bd      	cmp	r5, r7
 800f15c:	7b21      	ldrb	r1, [r4, #12]
 800f15e:	8260      	strh	r0, [r4, #18]
 800f160:	50d1      	str	r1, [r2, r3]
 800f162:	d1e8      	bne.n	800f136 <uxr_process_acknack+0x1a>
 800f164:	3e00      	subs	r6, #0
 800f166:	f04f 0300 	mov.w	r3, #0
 800f16a:	bf18      	it	ne
 800f16c:	2601      	movne	r6, #1
 800f16e:	f884 3020 	strb.w	r3, [r4, #32]
 800f172:	f884 6021 	strb.w	r6, [r4, #33]	; 0x21
 800f176:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800f178 <uxr_is_output_up_to_date>:
 800f178:	8a01      	ldrh	r1, [r0, #16]
 800f17a:	8a40      	ldrh	r0, [r0, #18]
 800f17c:	b508      	push	{r3, lr}
 800f17e:	f000 f923 	bl	800f3c8 <uxr_seq_num_cmp>
 800f182:	fab0 f080 	clz	r0, r0
 800f186:	0940      	lsrs	r0, r0, #5
 800f188:	bd08      	pop	{r3, pc}
 800f18a:	bf00      	nop

0800f18c <get_available_free_slots>:
 800f18c:	8902      	ldrh	r2, [r0, #8]
 800f18e:	b1da      	cbz	r2, 800f1c8 <get_available_free_slots+0x3c>
 800f190:	b530      	push	{r4, r5, lr}
 800f192:	2100      	movs	r1, #0
 800f194:	6843      	ldr	r3, [r0, #4]
 800f196:	6805      	ldr	r5, [r0, #0]
 800f198:	7b04      	ldrb	r4, [r0, #12]
 800f19a:	fbb3 fef2 	udiv	lr, r3, r2
 800f19e:	4608      	mov	r0, r1
 800f1a0:	460b      	mov	r3, r1
 800f1a2:	fbb3 fcf2 	udiv	ip, r3, r2
 800f1a6:	fb02 331c 	mls	r3, r2, ip, r3
 800f1aa:	b29b      	uxth	r3, r3
 800f1ac:	fb0e f303 	mul.w	r3, lr, r3
 800f1b0:	3101      	adds	r1, #1
 800f1b2:	f855 c003 	ldr.w	ip, [r5, r3]
 800f1b6:	4564      	cmp	r4, ip
 800f1b8:	bf08      	it	eq
 800f1ba:	3001      	addeq	r0, #1
 800f1bc:	b28b      	uxth	r3, r1
 800f1be:	bf08      	it	eq
 800f1c0:	b280      	uxtheq	r0, r0
 800f1c2:	4293      	cmp	r3, r2
 800f1c4:	d3ed      	bcc.n	800f1a2 <get_available_free_slots+0x16>
 800f1c6:	bd30      	pop	{r4, r5, pc}
 800f1c8:	4610      	mov	r0, r2
 800f1ca:	4770      	bx	lr

0800f1cc <uxr_buffer_cancel_data>:
 800f1cc:	b510      	push	{r4, lr}
 800f1ce:	b094      	sub	sp, #80	; 0x50
 800f1d0:	2300      	movs	r3, #0
 800f1d2:	9202      	str	r2, [sp, #8]
 800f1d4:	9205      	str	r2, [sp, #20]
 800f1d6:	9301      	str	r3, [sp, #4]
 800f1d8:	2201      	movs	r2, #1
 800f1da:	f8ad 301c 	strh.w	r3, [sp, #28]
 800f1de:	f88d 301e 	strb.w	r3, [sp, #30]
 800f1e2:	f8cd 3026 	str.w	r3, [sp, #38]	; 0x26
 800f1e6:	f8cd 302a 	str.w	r3, [sp, #42]	; 0x2a
 800f1ea:	2308      	movs	r3, #8
 800f1ec:	f88d 2024 	strb.w	r2, [sp, #36]	; 0x24
 800f1f0:	9300      	str	r3, [sp, #0]
 800f1f2:	2210      	movs	r2, #16
 800f1f4:	ab0c      	add	r3, sp, #48	; 0x30
 800f1f6:	4604      	mov	r4, r0
 800f1f8:	9103      	str	r1, [sp, #12]
 800f1fa:	f7fb fbb1 	bl	800a960 <uxr_prepare_stream_to_write_submessage>
 800f1fe:	b918      	cbnz	r0, 800f208 <uxr_buffer_cancel_data+0x3c>
 800f200:	4604      	mov	r4, r0
 800f202:	4620      	mov	r0, r4
 800f204:	b014      	add	sp, #80	; 0x50
 800f206:	bd10      	pop	{r4, pc}
 800f208:	9905      	ldr	r1, [sp, #20]
 800f20a:	aa06      	add	r2, sp, #24
 800f20c:	4620      	mov	r0, r4
 800f20e:	f7fb fcdd 	bl	800abcc <uxr_init_base_object_request>
 800f212:	a906      	add	r1, sp, #24
 800f214:	4604      	mov	r4, r0
 800f216:	a80c      	add	r0, sp, #48	; 0x30
 800f218:	f7fc feec 	bl	800bff4 <uxr_serialize_READ_DATA_Payload>
 800f21c:	4620      	mov	r0, r4
 800f21e:	b014      	add	sp, #80	; 0x50
 800f220:	bd10      	pop	{r4, pc}
 800f222:	bf00      	nop

0800f224 <read_submessage_format>:
 800f224:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f228:	b095      	sub	sp, #84	; 0x54
 800f22a:	f8bd 6078 	ldrh.w	r6, [sp, #120]	; 0x78
 800f22e:	b113      	cbz	r3, 800f236 <read_submessage_format+0x12>
 800f230:	b015      	add	sp, #84	; 0x54
 800f232:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f236:	460c      	mov	r4, r1
 800f238:	4615      	mov	r5, r2
 800f23a:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 800f23e:	4607      	mov	r7, r0
 800f240:	981c      	ldr	r0, [sp, #112]	; 0x70
 800f242:	9004      	str	r0, [sp, #16]
 800f244:	981d      	ldr	r0, [sp, #116]	; 0x74
 800f246:	9005      	str	r0, [sp, #20]
 800f248:	1a52      	subs	r2, r2, r1
 800f24a:	a80c      	add	r0, sp, #48	; 0x30
 800f24c:	4699      	mov	r9, r3
 800f24e:	f89d 8076 	ldrb.w	r8, [sp, #118]	; 0x76
 800f252:	f7fa fa99 	bl	8009788 <ucdr_init_buffer>
 800f256:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 800f25a:	a80c      	add	r0, sp, #48	; 0x30
 800f25c:	f7fa fa68 	bl	8009730 <ucdr_set_on_full_buffer_callback>
 800f260:	69e2      	ldr	r2, [r4, #28]
 800f262:	b19a      	cbz	r2, 800f28c <read_submessage_format+0x68>
 800f264:	f1b8 0f07 	cmp.w	r8, #7
 800f268:	f882 9014 	strb.w	r9, [r2, #20]
 800f26c:	d040      	beq.n	800f2f0 <read_submessage_format+0xcc>
 800f26e:	f1b8 0f08 	cmp.w	r8, #8
 800f272:	d02e      	beq.n	800f2d2 <read_submessage_format+0xae>
 800f274:	f1b8 0f06 	cmp.w	r8, #6
 800f278:	d011      	beq.n	800f29e <read_submessage_format+0x7a>
 800f27a:	2301      	movs	r3, #1
 800f27c:	7513      	strb	r3, [r2, #20]
 800f27e:	4629      	mov	r1, r5
 800f280:	4620      	mov	r0, r4
 800f282:	f7fa fad1 	bl	8009828 <ucdr_advance_buffer>
 800f286:	b015      	add	sp, #84	; 0x54
 800f288:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f28c:	f1b8 0f07 	cmp.w	r8, #7
 800f290:	d02e      	beq.n	800f2f0 <read_submessage_format+0xcc>
 800f292:	f1b8 0f08 	cmp.w	r8, #8
 800f296:	d01c      	beq.n	800f2d2 <read_submessage_format+0xae>
 800f298:	f1b8 0f06 	cmp.w	r8, #6
 800f29c:	d1ef      	bne.n	800f27e <read_submessage_format+0x5a>
 800f29e:	f8d7 8088 	ldr.w	r8, [r7, #136]	; 0x88
 800f2a2:	f1b8 0f00 	cmp.w	r8, #0
 800f2a6:	d011      	beq.n	800f2cc <read_submessage_format+0xa8>
 800f2a8:	ab0c      	add	r3, sp, #48	; 0x30
 800f2aa:	e9cd 3500 	strd	r3, r5, [sp]
 800f2ae:	2306      	movs	r3, #6
 800f2b0:	f88d 3016 	strb.w	r3, [sp, #22]
 800f2b4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800f2b8:	9302      	str	r3, [sp, #8]
 800f2ba:	4632      	mov	r2, r6
 800f2bc:	e9dd 3104 	ldrd	r3, r1, [sp, #16]
 800f2c0:	4638      	mov	r0, r7
 800f2c2:	47c0      	blx	r8
 800f2c4:	2301      	movs	r3, #1
 800f2c6:	69e2      	ldr	r2, [r4, #28]
 800f2c8:	f887 30b4 	strb.w	r3, [r7, #180]	; 0xb4
 800f2cc:	2a00      	cmp	r2, #0
 800f2ce:	d1d4      	bne.n	800f27a <read_submessage_format+0x56>
 800f2d0:	e7d5      	b.n	800f27e <read_submessage_format+0x5a>
 800f2d2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800f2d6:	2b00      	cmp	r3, #0
 800f2d8:	d0f8      	beq.n	800f2cc <read_submessage_format+0xa8>
 800f2da:	a906      	add	r1, sp, #24
 800f2dc:	a80c      	add	r0, sp, #48	; 0x30
 800f2de:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
 800f2e2:	f7fc ff27 	bl	800c134 <uxr_deserialize_SampleIdentity>
 800f2e6:	b9a0      	cbnz	r0, 800f312 <read_submessage_format+0xee>
 800f2e8:	69e2      	ldr	r2, [r4, #28]
 800f2ea:	2a00      	cmp	r2, #0
 800f2ec:	d1c5      	bne.n	800f27a <read_submessage_format+0x56>
 800f2ee:	e7c6      	b.n	800f27e <read_submessage_format+0x5a>
 800f2f0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800f2f4:	b13b      	cbz	r3, 800f306 <read_submessage_format+0xe2>
 800f2f6:	a906      	add	r1, sp, #24
 800f2f8:	a80c      	add	r0, sp, #48	; 0x30
 800f2fa:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
 800f2fe:	f7fc fc13 	bl	800bb28 <uxr_deserialize_BaseObjectRequest>
 800f302:	bb60      	cbnz	r0, 800f35e <read_submessage_format+0x13a>
 800f304:	69e2      	ldr	r2, [r4, #28]
 800f306:	68a3      	ldr	r3, [r4, #8]
 800f308:	442b      	add	r3, r5
 800f30a:	60a3      	str	r3, [r4, #8]
 800f30c:	2a00      	cmp	r2, #0
 800f30e:	d1b4      	bne.n	800f27a <read_submessage_format+0x56>
 800f310:	e7b5      	b.n	800f27e <read_submessage_format+0x5a>
 800f312:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	; 0x34
 800f316:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800f318:	1a52      	subs	r2, r2, r1
 800f31a:	eba8 0803 	sub.w	r8, r8, r3
 800f31e:	a80c      	add	r0, sp, #48	; 0x30
 800f320:	f7fa fa32 	bl	8009788 <ucdr_init_buffer>
 800f324:	44a8      	add	r8, r5
 800f326:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 800f32a:	a80c      	add	r0, sp, #48	; 0x30
 800f32c:	f7fa fa00 	bl	8009730 <ucdr_set_on_full_buffer_callback>
 800f330:	fa1f f888 	uxth.w	r8, r8
 800f334:	ab0c      	add	r3, sp, #48	; 0x30
 800f336:	9300      	str	r3, [sp, #0]
 800f338:	f8cd 8004 	str.w	r8, [sp, #4]
 800f33c:	2108      	movs	r1, #8
 800f33e:	f88d 1016 	strb.w	r1, [sp, #22]
 800f342:	f8d7 10a8 	ldr.w	r1, [r7, #168]	; 0xa8
 800f346:	9102      	str	r1, [sp, #8]
 800f348:	ab06      	add	r3, sp, #24
 800f34a:	4632      	mov	r2, r6
 800f34c:	9905      	ldr	r1, [sp, #20]
 800f34e:	f8d7 60a4 	ldr.w	r6, [r7, #164]	; 0xa4
 800f352:	4638      	mov	r0, r7
 800f354:	47b0      	blx	r6
 800f356:	2301      	movs	r3, #1
 800f358:	f887 30b4 	strb.w	r3, [r7, #180]	; 0xb4
 800f35c:	e7c4      	b.n	800f2e8 <read_submessage_format+0xc4>
 800f35e:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	; 0x34
 800f362:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800f364:	1a52      	subs	r2, r2, r1
 800f366:	a80c      	add	r0, sp, #48	; 0x30
 800f368:	eba8 0803 	sub.w	r8, r8, r3
 800f36c:	f7fa fa0c 	bl	8009788 <ucdr_init_buffer>
 800f370:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 800f374:	a80c      	add	r0, sp, #48	; 0x30
 800f376:	f7fa f9db 	bl	8009730 <ucdr_set_on_full_buffer_callback>
 800f37a:	ab0c      	add	r3, sp, #48	; 0x30
 800f37c:	9300      	str	r3, [sp, #0]
 800f37e:	f89d 1018 	ldrb.w	r1, [sp, #24]
 800f382:	f89d 3019 	ldrb.w	r3, [sp, #25]
 800f386:	44a8      	add	r8, r5
 800f388:	fa1f f888 	uxth.w	r8, r8
 800f38c:	f8cd 8004 	str.w	r8, [sp, #4]
 800f390:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 800f394:	2107      	movs	r1, #7
 800f396:	f88d 1016 	strb.w	r1, [sp, #22]
 800f39a:	f8d7 10b0 	ldr.w	r1, [r7, #176]	; 0xb0
 800f39e:	9102      	str	r1, [sp, #8]
 800f3a0:	4632      	mov	r2, r6
 800f3a2:	b29b      	uxth	r3, r3
 800f3a4:	f8d7 60ac 	ldr.w	r6, [r7, #172]	; 0xac
 800f3a8:	9905      	ldr	r1, [sp, #20]
 800f3aa:	4638      	mov	r0, r7
 800f3ac:	47b0      	blx	r6
 800f3ae:	2301      	movs	r3, #1
 800f3b0:	f887 30b4 	strb.w	r3, [r7, #180]	; 0xb4
 800f3b4:	e7a6      	b.n	800f304 <read_submessage_format+0xe0>
 800f3b6:	bf00      	nop

0800f3b8 <uxr_seq_num_add>:
 800f3b8:	4408      	add	r0, r1
 800f3ba:	b280      	uxth	r0, r0
 800f3bc:	4770      	bx	lr
 800f3be:	bf00      	nop

0800f3c0 <uxr_seq_num_sub>:
 800f3c0:	1a40      	subs	r0, r0, r1
 800f3c2:	b280      	uxth	r0, r0
 800f3c4:	4770      	bx	lr
 800f3c6:	bf00      	nop

0800f3c8 <uxr_seq_num_cmp>:
 800f3c8:	4288      	cmp	r0, r1
 800f3ca:	d011      	beq.n	800f3f0 <uxr_seq_num_cmp+0x28>
 800f3cc:	d309      	bcc.n	800f3e2 <uxr_seq_num_cmp+0x1a>
 800f3ce:	4288      	cmp	r0, r1
 800f3d0:	d910      	bls.n	800f3f4 <uxr_seq_num_cmp+0x2c>
 800f3d2:	1a40      	subs	r0, r0, r1
 800f3d4:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 800f3d8:	bfd4      	ite	le
 800f3da:	2001      	movle	r0, #1
 800f3dc:	f04f 30ff 	movgt.w	r0, #4294967295	; 0xffffffff
 800f3e0:	4770      	bx	lr
 800f3e2:	1a0b      	subs	r3, r1, r0
 800f3e4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f3e8:	daf1      	bge.n	800f3ce <uxr_seq_num_cmp+0x6>
 800f3ea:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f3ee:	4770      	bx	lr
 800f3f0:	2000      	movs	r0, #0
 800f3f2:	4770      	bx	lr
 800f3f4:	2001      	movs	r0, #1
 800f3f6:	4770      	bx	lr

0800f3f8 <uxr_init_framing_io>:
 800f3f8:	2300      	movs	r3, #0
 800f3fa:	7041      	strb	r1, [r0, #1]
 800f3fc:	7003      	strb	r3, [r0, #0]
 800f3fe:	8583      	strh	r3, [r0, #44]	; 0x2c
 800f400:	4770      	bx	lr
 800f402:	bf00      	nop

0800f404 <uxr_write_framed_msg>:
 800f404:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f408:	4617      	mov	r7, r2
 800f40a:	7842      	ldrb	r2, [r0, #1]
 800f40c:	b083      	sub	sp, #12
 800f40e:	460e      	mov	r6, r1
 800f410:	f1a2 017d 	sub.w	r1, r2, #125	; 0x7d
 800f414:	469a      	mov	sl, r3
 800f416:	2901      	cmp	r1, #1
 800f418:	f04f 037e 	mov.w	r3, #126	; 0x7e
 800f41c:	4604      	mov	r4, r0
 800f41e:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
 800f422:	f8dd b038 	ldr.w	fp, [sp, #56]	; 0x38
 800f426:	f89d 0034 	ldrb.w	r0, [sp, #52]	; 0x34
 800f42a:	f240 8137 	bls.w	800f69c <uxr_write_framed_msg+0x298>
 800f42e:	f1a0 017d 	sub.w	r1, r0, #125	; 0x7d
 800f432:	f884 2039 	strb.w	r2, [r4, #57]	; 0x39
 800f436:	2901      	cmp	r1, #1
 800f438:	f04f 0202 	mov.w	r2, #2
 800f43c:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 800f440:	f240 808f 	bls.w	800f562 <uxr_write_framed_msg+0x15e>
 800f444:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f446:	f884 003a 	strb.w	r0, [r4, #58]	; 0x3a
 800f44a:	b2dd      	uxtb	r5, r3
 800f44c:	f1a5 017d 	sub.w	r1, r5, #125	; 0x7d
 800f450:	2203      	movs	r2, #3
 800f452:	2901      	cmp	r1, #1
 800f454:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 800f458:	f240 809a 	bls.w	800f590 <uxr_write_framed_msg+0x18c>
 800f45c:	18a1      	adds	r1, r4, r2
 800f45e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f460:	f881 5038 	strb.w	r5, [r1, #56]	; 0x38
 800f464:	f3c3 2107 	ubfx	r1, r3, #8, #8
 800f468:	f1a1 007d 	sub.w	r0, r1, #125	; 0x7d
 800f46c:	3201      	adds	r2, #1
 800f46e:	2801      	cmp	r0, #1
 800f470:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 800f474:	f240 80a0 	bls.w	800f5b8 <uxr_write_framed_msg+0x1b4>
 800f478:	18a0      	adds	r0, r4, r2
 800f47a:	3201      	adds	r2, #1
 800f47c:	b2d2      	uxtb	r2, r2
 800f47e:	f880 1038 	strb.w	r1, [r0, #56]	; 0x38
 800f482:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 800f486:	2b00      	cmp	r3, #0
 800f488:	f000 80a9 	beq.w	800f5de <uxr_write_framed_msg+0x1da>
 800f48c:	f04f 0900 	mov.w	r9, #0
 800f490:	46c8      	mov	r8, r9
 800f492:	f81a 3008 	ldrb.w	r3, [sl, r8]
 800f496:	f1a3 017d 	sub.w	r1, r3, #125	; 0x7d
 800f49a:	2901      	cmp	r1, #1
 800f49c:	f240 80c3 	bls.w	800f626 <uxr_write_framed_msg+0x222>
 800f4a0:	2a29      	cmp	r2, #41	; 0x29
 800f4a2:	f200 809f 	bhi.w	800f5e4 <uxr_write_framed_msg+0x1e0>
 800f4a6:	18a1      	adds	r1, r4, r2
 800f4a8:	3201      	adds	r2, #1
 800f4aa:	b2d2      	uxtb	r2, r2
 800f4ac:	f881 3038 	strb.w	r3, [r1, #56]	; 0x38
 800f4b0:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 800f4b4:	ea89 0303 	eor.w	r3, r9, r3
 800f4b8:	498c      	ldr	r1, [pc, #560]	; (800f6ec <uxr_write_framed_msg+0x2e8>)
 800f4ba:	b2db      	uxtb	r3, r3
 800f4bc:	f108 0801 	add.w	r8, r8, #1
 800f4c0:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800f4c4:	ea83 2919 	eor.w	r9, r3, r9, lsr #8
 800f4c8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f4ca:	4543      	cmp	r3, r8
 800f4cc:	d8e1      	bhi.n	800f492 <uxr_write_framed_msg+0x8e>
 800f4ce:	ea4f 2319 	mov.w	r3, r9, lsr #8
 800f4d2:	fa5f f889 	uxtb.w	r8, r9
 800f4d6:	9301      	str	r3, [sp, #4]
 800f4d8:	f04f 0900 	mov.w	r9, #0
 800f4dc:	f1a8 0a7d 	sub.w	sl, r8, #125	; 0x7d
 800f4e0:	fa5f f18a 	uxtb.w	r1, sl
 800f4e4:	2901      	cmp	r1, #1
 800f4e6:	d921      	bls.n	800f52c <uxr_write_framed_msg+0x128>
 800f4e8:	2a29      	cmp	r2, #41	; 0x29
 800f4ea:	f240 80af 	bls.w	800f64c <uxr_write_framed_msg+0x248>
 800f4ee:	2500      	movs	r5, #0
 800f4f0:	e000      	b.n	800f4f4 <uxr_write_framed_msg+0xf0>
 800f4f2:	b160      	cbz	r0, 800f50e <uxr_write_framed_msg+0x10a>
 800f4f4:	f105 0138 	add.w	r1, r5, #56	; 0x38
 800f4f8:	1b52      	subs	r2, r2, r5
 800f4fa:	465b      	mov	r3, fp
 800f4fc:	4421      	add	r1, r4
 800f4fe:	4638      	mov	r0, r7
 800f500:	47b0      	blx	r6
 800f502:	f894 2062 	ldrb.w	r2, [r4, #98]	; 0x62
 800f506:	4405      	add	r5, r0
 800f508:	4295      	cmp	r5, r2
 800f50a:	d3f2      	bcc.n	800f4f2 <uxr_write_framed_msg+0xee>
 800f50c:	d003      	beq.n	800f516 <uxr_write_framed_msg+0x112>
 800f50e:	2000      	movs	r0, #0
 800f510:	b003      	add	sp, #12
 800f512:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f516:	fa5f f18a 	uxtb.w	r1, sl
 800f51a:	f04f 0300 	mov.w	r3, #0
 800f51e:	2901      	cmp	r1, #1
 800f520:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
 800f524:	f04f 0200 	mov.w	r2, #0
 800f528:	f200 8090 	bhi.w	800f64c <uxr_write_framed_msg+0x248>
 800f52c:	1c51      	adds	r1, r2, #1
 800f52e:	b2c9      	uxtb	r1, r1
 800f530:	2929      	cmp	r1, #41	; 0x29
 800f532:	d8dc      	bhi.n	800f4ee <uxr_write_framed_msg+0xea>
 800f534:	18a5      	adds	r5, r4, r2
 800f536:	4421      	add	r1, r4
 800f538:	3202      	adds	r2, #2
 800f53a:	f088 0820 	eor.w	r8, r8, #32
 800f53e:	4648      	mov	r0, r9
 800f540:	f04f 037d 	mov.w	r3, #125	; 0x7d
 800f544:	b2d2      	uxtb	r2, r2
 800f546:	f885 3038 	strb.w	r3, [r5, #56]	; 0x38
 800f54a:	f04f 0901 	mov.w	r9, #1
 800f54e:	f881 8038 	strb.w	r8, [r1, #56]	; 0x38
 800f552:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 800f556:	2800      	cmp	r0, #0
 800f558:	f040 8085 	bne.w	800f666 <uxr_write_framed_msg+0x262>
 800f55c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800f560:	e7bc      	b.n	800f4dc <uxr_write_framed_msg+0xd8>
 800f562:	4611      	mov	r1, r2
 800f564:	f04f 0c03 	mov.w	ip, #3
 800f568:	2204      	movs	r2, #4
 800f56a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f56c:	4421      	add	r1, r4
 800f56e:	b2dd      	uxtb	r5, r3
 800f570:	f04f 0e7d 	mov.w	lr, #125	; 0x7d
 800f574:	f881 e038 	strb.w	lr, [r1, #56]	; 0x38
 800f578:	44a4      	add	ip, r4
 800f57a:	f1a5 017d 	sub.w	r1, r5, #125	; 0x7d
 800f57e:	f080 0020 	eor.w	r0, r0, #32
 800f582:	2901      	cmp	r1, #1
 800f584:	f88c 0038 	strb.w	r0, [ip, #56]	; 0x38
 800f588:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 800f58c:	f63f af66 	bhi.w	800f45c <uxr_write_framed_msg+0x58>
 800f590:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f592:	18a0      	adds	r0, r4, r2
 800f594:	f085 0520 	eor.w	r5, r5, #32
 800f598:	f04f 0c7d 	mov.w	ip, #125	; 0x7d
 800f59c:	f3c3 2107 	ubfx	r1, r3, #8, #8
 800f5a0:	f880 c038 	strb.w	ip, [r0, #56]	; 0x38
 800f5a4:	f880 5039 	strb.w	r5, [r0, #57]	; 0x39
 800f5a8:	f1a1 007d 	sub.w	r0, r1, #125	; 0x7d
 800f5ac:	3202      	adds	r2, #2
 800f5ae:	2801      	cmp	r0, #1
 800f5b0:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 800f5b4:	f63f af60 	bhi.w	800f478 <uxr_write_framed_msg+0x74>
 800f5b8:	1c50      	adds	r0, r2, #1
 800f5ba:	18a5      	adds	r5, r4, r2
 800f5bc:	fa54 f080 	uxtab	r0, r4, r0
 800f5c0:	3202      	adds	r2, #2
 800f5c2:	f081 0120 	eor.w	r1, r1, #32
 800f5c6:	b2d2      	uxtb	r2, r2
 800f5c8:	f04f 0c7d 	mov.w	ip, #125	; 0x7d
 800f5cc:	f885 c038 	strb.w	ip, [r5, #56]	; 0x38
 800f5d0:	f880 1038 	strb.w	r1, [r0, #56]	; 0x38
 800f5d4:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 800f5d8:	2b00      	cmp	r3, #0
 800f5da:	f47f af57 	bne.w	800f48c <uxr_write_framed_msg+0x88>
 800f5de:	9301      	str	r3, [sp, #4]
 800f5e0:	4698      	mov	r8, r3
 800f5e2:	e779      	b.n	800f4d8 <uxr_write_framed_msg+0xd4>
 800f5e4:	2500      	movs	r5, #0
 800f5e6:	e001      	b.n	800f5ec <uxr_write_framed_msg+0x1e8>
 800f5e8:	2800      	cmp	r0, #0
 800f5ea:	d090      	beq.n	800f50e <uxr_write_framed_msg+0x10a>
 800f5ec:	f105 0138 	add.w	r1, r5, #56	; 0x38
 800f5f0:	1b52      	subs	r2, r2, r5
 800f5f2:	465b      	mov	r3, fp
 800f5f4:	4421      	add	r1, r4
 800f5f6:	4638      	mov	r0, r7
 800f5f8:	47b0      	blx	r6
 800f5fa:	f894 2062 	ldrb.w	r2, [r4, #98]	; 0x62
 800f5fe:	4405      	add	r5, r0
 800f600:	4295      	cmp	r5, r2
 800f602:	d3f1      	bcc.n	800f5e8 <uxr_write_framed_msg+0x1e4>
 800f604:	d183      	bne.n	800f50e <uxr_write_framed_msg+0x10a>
 800f606:	f04f 0300 	mov.w	r3, #0
 800f60a:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
 800f60e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f610:	4543      	cmp	r3, r8
 800f612:	d964      	bls.n	800f6de <uxr_write_framed_msg+0x2da>
 800f614:	f81a 3008 	ldrb.w	r3, [sl, r8]
 800f618:	f1a3 017d 	sub.w	r1, r3, #125	; 0x7d
 800f61c:	2901      	cmp	r1, #1
 800f61e:	f04f 0200 	mov.w	r2, #0
 800f622:	f63f af3d 	bhi.w	800f4a0 <uxr_write_framed_msg+0x9c>
 800f626:	1c51      	adds	r1, r2, #1
 800f628:	b2c9      	uxtb	r1, r1
 800f62a:	2929      	cmp	r1, #41	; 0x29
 800f62c:	d8da      	bhi.n	800f5e4 <uxr_write_framed_msg+0x1e0>
 800f62e:	18a0      	adds	r0, r4, r2
 800f630:	4421      	add	r1, r4
 800f632:	f04f 057d 	mov.w	r5, #125	; 0x7d
 800f636:	3202      	adds	r2, #2
 800f638:	f880 5038 	strb.w	r5, [r0, #56]	; 0x38
 800f63c:	b2d2      	uxtb	r2, r2
 800f63e:	f083 0020 	eor.w	r0, r3, #32
 800f642:	f881 0038 	strb.w	r0, [r1, #56]	; 0x38
 800f646:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 800f64a:	e733      	b.n	800f4b4 <uxr_write_framed_msg+0xb0>
 800f64c:	18a1      	adds	r1, r4, r2
 800f64e:	3201      	adds	r2, #1
 800f650:	4648      	mov	r0, r9
 800f652:	b2d2      	uxtb	r2, r2
 800f654:	f881 8038 	strb.w	r8, [r1, #56]	; 0x38
 800f658:	f04f 0901 	mov.w	r9, #1
 800f65c:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 800f660:	2800      	cmp	r0, #0
 800f662:	f43f af7b 	beq.w	800f55c <uxr_write_framed_msg+0x158>
 800f666:	2500      	movs	r5, #0
 800f668:	e002      	b.n	800f670 <uxr_write_framed_msg+0x26c>
 800f66a:	2800      	cmp	r0, #0
 800f66c:	f43f af4f 	beq.w	800f50e <uxr_write_framed_msg+0x10a>
 800f670:	f105 0138 	add.w	r1, r5, #56	; 0x38
 800f674:	1b52      	subs	r2, r2, r5
 800f676:	465b      	mov	r3, fp
 800f678:	4421      	add	r1, r4
 800f67a:	4638      	mov	r0, r7
 800f67c:	47b0      	blx	r6
 800f67e:	f894 2062 	ldrb.w	r2, [r4, #98]	; 0x62
 800f682:	4405      	add	r5, r0
 800f684:	4295      	cmp	r5, r2
 800f686:	d3f0      	bcc.n	800f66a <uxr_write_framed_msg+0x266>
 800f688:	f47f af41 	bne.w	800f50e <uxr_write_framed_msg+0x10a>
 800f68c:	2300      	movs	r3, #0
 800f68e:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
 800f692:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f694:	b298      	uxth	r0, r3
 800f696:	b003      	add	sp, #12
 800f698:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f69c:	217d      	movs	r1, #125	; 0x7d
 800f69e:	f082 0220 	eor.w	r2, r2, #32
 800f6a2:	f884 1039 	strb.w	r1, [r4, #57]	; 0x39
 800f6a6:	f1a0 017d 	sub.w	r1, r0, #125	; 0x7d
 800f6aa:	f884 203a 	strb.w	r2, [r4, #58]	; 0x3a
 800f6ae:	2901      	cmp	r1, #1
 800f6b0:	f04f 0203 	mov.w	r2, #3
 800f6b4:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 800f6b8:	d804      	bhi.n	800f6c4 <uxr_write_framed_msg+0x2c0>
 800f6ba:	4611      	mov	r1, r2
 800f6bc:	f04f 0c04 	mov.w	ip, #4
 800f6c0:	2205      	movs	r2, #5
 800f6c2:	e752      	b.n	800f56a <uxr_write_framed_msg+0x166>
 800f6c4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f6c6:	f884 003b 	strb.w	r0, [r4, #59]	; 0x3b
 800f6ca:	b2dd      	uxtb	r5, r3
 800f6cc:	f1a5 017d 	sub.w	r1, r5, #125	; 0x7d
 800f6d0:	2204      	movs	r2, #4
 800f6d2:	2901      	cmp	r1, #1
 800f6d4:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 800f6d8:	f63f aec0 	bhi.w	800f45c <uxr_write_framed_msg+0x58>
 800f6dc:	e758      	b.n	800f590 <uxr_write_framed_msg+0x18c>
 800f6de:	ea4f 2319 	mov.w	r3, r9, lsr #8
 800f6e2:	fa5f f889 	uxtb.w	r8, r9
 800f6e6:	9301      	str	r3, [sp, #4]
 800f6e8:	2200      	movs	r2, #0
 800f6ea:	e6f5      	b.n	800f4d8 <uxr_write_framed_msg+0xd4>
 800f6ec:	080126e8 	.word	0x080126e8

0800f6f0 <uxr_framing_read_transport>:
 800f6f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f6f4:	4604      	mov	r4, r0
 800f6f6:	b083      	sub	sp, #12
 800f6f8:	461f      	mov	r7, r3
 800f6fa:	f8dd b034 	ldr.w	fp, [sp, #52]	; 0x34
 800f6fe:	4689      	mov	r9, r1
 800f700:	4692      	mov	sl, r2
 800f702:	f7fb fc11 	bl	800af28 <uxr_millis>
 800f706:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 800f70a:	f894 602d 	ldrb.w	r6, [r4, #45]	; 0x2d
 800f70e:	42b3      	cmp	r3, r6
 800f710:	4680      	mov	r8, r0
 800f712:	d061      	beq.n	800f7d8 <uxr_framing_read_transport+0xe8>
 800f714:	d81c      	bhi.n	800f750 <uxr_framing_read_transport+0x60>
 800f716:	1e75      	subs	r5, r6, #1
 800f718:	1aed      	subs	r5, r5, r3
 800f71a:	b2ed      	uxtb	r5, r5
 800f71c:	2600      	movs	r6, #0
 800f71e:	455d      	cmp	r5, fp
 800f720:	d81f      	bhi.n	800f762 <uxr_framing_read_transport+0x72>
 800f722:	19ab      	adds	r3, r5, r6
 800f724:	455b      	cmp	r3, fp
 800f726:	bf84      	itt	hi
 800f728:	ebab 0605 	subhi.w	r6, fp, r5
 800f72c:	b2f6      	uxtbhi	r6, r6
 800f72e:	b9ed      	cbnz	r5, 800f76c <uxr_framing_read_transport+0x7c>
 800f730:	f04f 0b00 	mov.w	fp, #0
 800f734:	f7fb fbf8 	bl	800af28 <uxr_millis>
 800f738:	683b      	ldr	r3, [r7, #0]
 800f73a:	eba0 0808 	sub.w	r8, r0, r8
 800f73e:	eba3 0308 	sub.w	r3, r3, r8
 800f742:	4658      	mov	r0, fp
 800f744:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800f748:	603b      	str	r3, [r7, #0]
 800f74a:	b003      	add	sp, #12
 800f74c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f750:	2e00      	cmp	r6, #0
 800f752:	d049      	beq.n	800f7e8 <uxr_framing_read_transport+0xf8>
 800f754:	f1c3 052a 	rsb	r5, r3, #42	; 0x2a
 800f758:	b2ed      	uxtb	r5, r5
 800f75a:	3e01      	subs	r6, #1
 800f75c:	455d      	cmp	r5, fp
 800f75e:	b2f6      	uxtb	r6, r6
 800f760:	d9df      	bls.n	800f722 <uxr_framing_read_transport+0x32>
 800f762:	fa5f f58b 	uxtb.w	r5, fp
 800f766:	2600      	movs	r6, #0
 800f768:	2d00      	cmp	r5, #0
 800f76a:	d0e1      	beq.n	800f730 <uxr_framing_read_transport+0x40>
 800f76c:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
 800f770:	3102      	adds	r1, #2
 800f772:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f774:	9300      	str	r3, [sp, #0]
 800f776:	683b      	ldr	r3, [r7, #0]
 800f778:	4421      	add	r1, r4
 800f77a:	462a      	mov	r2, r5
 800f77c:	4650      	mov	r0, sl
 800f77e:	47c8      	blx	r9
 800f780:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 800f784:	4a1a      	ldr	r2, [pc, #104]	; (800f7f0 <uxr_framing_read_transport+0x100>)
 800f786:	4403      	add	r3, r0
 800f788:	0859      	lsrs	r1, r3, #1
 800f78a:	fba2 2101 	umull	r2, r1, r2, r1
 800f78e:	0889      	lsrs	r1, r1, #2
 800f790:	222a      	movs	r2, #42	; 0x2a
 800f792:	fb02 3111 	mls	r1, r2, r1, r3
 800f796:	4683      	mov	fp, r0
 800f798:	f884 102c 	strb.w	r1, [r4, #44]	; 0x2c
 800f79c:	2800      	cmp	r0, #0
 800f79e:	d0c7      	beq.n	800f730 <uxr_framing_read_transport+0x40>
 800f7a0:	42a8      	cmp	r0, r5
 800f7a2:	d1c7      	bne.n	800f734 <uxr_framing_read_transport+0x44>
 800f7a4:	2e00      	cmp	r6, #0
 800f7a6:	d0c5      	beq.n	800f734 <uxr_framing_read_transport+0x44>
 800f7a8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f7aa:	9300      	str	r3, [sp, #0]
 800f7ac:	3102      	adds	r1, #2
 800f7ae:	4632      	mov	r2, r6
 800f7b0:	4421      	add	r1, r4
 800f7b2:	2300      	movs	r3, #0
 800f7b4:	4650      	mov	r0, sl
 800f7b6:	47c8      	blx	r9
 800f7b8:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
 800f7bc:	4a0c      	ldr	r2, [pc, #48]	; (800f7f0 <uxr_framing_read_transport+0x100>)
 800f7be:	180b      	adds	r3, r1, r0
 800f7c0:	0859      	lsrs	r1, r3, #1
 800f7c2:	fba2 1201 	umull	r1, r2, r2, r1
 800f7c6:	0892      	lsrs	r2, r2, #2
 800f7c8:	212a      	movs	r1, #42	; 0x2a
 800f7ca:	fb01 3312 	mls	r3, r1, r2, r3
 800f7ce:	eb00 0b05 	add.w	fp, r0, r5
 800f7d2:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
 800f7d6:	e7ad      	b.n	800f734 <uxr_framing_read_transport+0x44>
 800f7d8:	2600      	movs	r6, #0
 800f7da:	f1bb 0f28 	cmp.w	fp, #40	; 0x28
 800f7de:	85a6      	strh	r6, [r4, #44]	; 0x2c
 800f7e0:	d9bf      	bls.n	800f762 <uxr_framing_read_transport+0x72>
 800f7e2:	2102      	movs	r1, #2
 800f7e4:	2529      	movs	r5, #41	; 0x29
 800f7e6:	e7c4      	b.n	800f772 <uxr_framing_read_transport+0x82>
 800f7e8:	f1c3 0529 	rsb	r5, r3, #41	; 0x29
 800f7ec:	b2ed      	uxtb	r5, r5
 800f7ee:	e796      	b.n	800f71e <uxr_framing_read_transport+0x2e>
 800f7f0:	30c30c31 	.word	0x30c30c31

0800f7f4 <uxr_read_framed_msg>:
 800f7f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f7f8:	461e      	mov	r6, r3
 800f7fa:	f890 502c 	ldrb.w	r5, [r0, #44]	; 0x2c
 800f7fe:	f890 302d 	ldrb.w	r3, [r0, #45]	; 0x2d
 800f802:	429d      	cmp	r5, r3
 800f804:	b083      	sub	sp, #12
 800f806:	4604      	mov	r4, r0
 800f808:	4688      	mov	r8, r1
 800f80a:	4691      	mov	r9, r2
 800f80c:	f000 8188 	beq.w	800fb20 <uxr_read_framed_msg+0x32c>
 800f810:	7823      	ldrb	r3, [r4, #0]
 800f812:	4dc1      	ldr	r5, [pc, #772]	; (800fb18 <uxr_read_framed_msg+0x324>)
 800f814:	4fc1      	ldr	r7, [pc, #772]	; (800fb1c <uxr_read_framed_msg+0x328>)
 800f816:	2b07      	cmp	r3, #7
 800f818:	d8fd      	bhi.n	800f816 <uxr_read_framed_msg+0x22>
 800f81a:	e8df f013 	tbh	[pc, r3, lsl #1]
 800f81e:	0115      	.short	0x0115
 800f820:	00d600f6 	.word	0x00d600f6
 800f824:	009000b9 	.word	0x009000b9
 800f828:	0030004d 	.word	0x0030004d
 800f82c:	0008      	.short	0x0008
 800f82e:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
 800f832:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 800f836:	4299      	cmp	r1, r3
 800f838:	f000 814a 	beq.w	800fad0 <uxr_read_framed_msg+0x2dc>
 800f83c:	18e2      	adds	r2, r4, r3
 800f83e:	7892      	ldrb	r2, [r2, #2]
 800f840:	2a7d      	cmp	r2, #125	; 0x7d
 800f842:	f000 8199 	beq.w	800fb78 <uxr_read_framed_msg+0x384>
 800f846:	3301      	adds	r3, #1
 800f848:	0858      	lsrs	r0, r3, #1
 800f84a:	fba5 1000 	umull	r1, r0, r5, r0
 800f84e:	0880      	lsrs	r0, r0, #2
 800f850:	212a      	movs	r1, #42	; 0x2a
 800f852:	fb01 3310 	mls	r3, r1, r0, r3
 800f856:	2a7e      	cmp	r2, #126	; 0x7e
 800f858:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 800f85c:	f000 8252 	beq.w	800fd04 <uxr_read_framed_msg+0x510>
 800f860:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 800f862:	8ee1      	ldrh	r1, [r4, #54]	; 0x36
 800f864:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800f868:	b29b      	uxth	r3, r3
 800f86a:	2200      	movs	r2, #0
 800f86c:	4299      	cmp	r1, r3
 800f86e:	86a3      	strh	r3, [r4, #52]	; 0x34
 800f870:	7022      	strb	r2, [r4, #0]
 800f872:	f000 8179 	beq.w	800fb68 <uxr_read_framed_msg+0x374>
 800f876:	2000      	movs	r0, #0
 800f878:	b003      	add	sp, #12
 800f87a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f87e:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
 800f882:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 800f886:	4299      	cmp	r1, r3
 800f888:	f000 8131 	beq.w	800faee <uxr_read_framed_msg+0x2fa>
 800f88c:	18e2      	adds	r2, r4, r3
 800f88e:	7890      	ldrb	r0, [r2, #2]
 800f890:	287d      	cmp	r0, #125	; 0x7d
 800f892:	f000 8190 	beq.w	800fbb6 <uxr_read_framed_msg+0x3c2>
 800f896:	3301      	adds	r3, #1
 800f898:	085a      	lsrs	r2, r3, #1
 800f89a:	fba5 1202 	umull	r1, r2, r5, r2
 800f89e:	0892      	lsrs	r2, r2, #2
 800f8a0:	212a      	movs	r1, #42	; 0x2a
 800f8a2:	fb01 3312 	mls	r3, r1, r2, r3
 800f8a6:	287e      	cmp	r0, #126	; 0x7e
 800f8a8:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 800f8ac:	f000 821a 	beq.w	800fce4 <uxr_read_framed_msg+0x4f0>
 800f8b0:	2307      	movs	r3, #7
 800f8b2:	86a0      	strh	r0, [r4, #52]	; 0x34
 800f8b4:	7023      	strb	r3, [r4, #0]
 800f8b6:	e7ae      	b.n	800f816 <uxr_read_framed_msg+0x22>
 800f8b8:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 800f8ba:	f8b4 e030 	ldrh.w	lr, [r4, #48]	; 0x30
 800f8be:	459e      	cmp	lr, r3
 800f8c0:	d938      	bls.n	800f934 <uxr_read_framed_msg+0x140>
 800f8c2:	ee07 8a90 	vmov	s15, r8
 800f8c6:	212a      	movs	r1, #42	; 0x2a
 800f8c8:	e020      	b.n	800f90c <uxr_read_framed_msg+0x118>
 800f8ca:	f89b c002 	ldrb.w	ip, [fp, #2]
 800f8ce:	f1bc 0f7d 	cmp.w	ip, #125	; 0x7d
 800f8d2:	f000 80d4 	beq.w	800fa7e <uxr_read_framed_msg+0x28a>
 800f8d6:	f1bc 0f7e 	cmp.w	ip, #126	; 0x7e
 800f8da:	f884 202d 	strb.w	r2, [r4, #45]	; 0x2d
 800f8de:	f000 8219 	beq.w	800fd14 <uxr_read_framed_msg+0x520>
 800f8e2:	f806 c003 	strb.w	ip, [r6, r3]
 800f8e6:	f8b4 a036 	ldrh.w	sl, [r4, #54]	; 0x36
 800f8ea:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 800f8ec:	f8b4 e030 	ldrh.w	lr, [r4, #48]	; 0x30
 800f8f0:	ea8a 000c 	eor.w	r0, sl, ip
 800f8f4:	b2c0      	uxtb	r0, r0
 800f8f6:	3301      	adds	r3, #1
 800f8f8:	f837 2010 	ldrh.w	r2, [r7, r0, lsl #1]
 800f8fc:	b29b      	uxth	r3, r3
 800f8fe:	ea82 221a 	eor.w	r2, r2, sl, lsr #8
 800f902:	4573      	cmp	r3, lr
 800f904:	8663      	strh	r3, [r4, #50]	; 0x32
 800f906:	86e2      	strh	r2, [r4, #54]	; 0x36
 800f908:	f080 8120 	bcs.w	800fb4c <uxr_read_framed_msg+0x358>
 800f90c:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
 800f910:	f894 a02c 	ldrb.w	sl, [r4, #44]	; 0x2c
 800f914:	f100 0c01 	add.w	ip, r0, #1
 800f918:	ea4f 025c 	mov.w	r2, ip, lsr #1
 800f91c:	fba5 8202 	umull	r8, r2, r5, r2
 800f920:	0892      	lsrs	r2, r2, #2
 800f922:	4582      	cmp	sl, r0
 800f924:	eb04 0b00 	add.w	fp, r4, r0
 800f928:	fb01 c212 	mls	r2, r1, r2, ip
 800f92c:	d1cd      	bne.n	800f8ca <uxr_read_framed_msg+0xd6>
 800f92e:	ee17 8a90 	vmov	r8, s15
 800f932:	459e      	cmp	lr, r3
 800f934:	f040 8111 	bne.w	800fb5a <uxr_read_framed_msg+0x366>
 800f938:	2306      	movs	r3, #6
 800f93a:	7023      	strb	r3, [r4, #0]
 800f93c:	e76b      	b.n	800f816 <uxr_read_framed_msg+0x22>
 800f93e:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
 800f942:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 800f946:	4298      	cmp	r0, r3
 800f948:	f000 80c2 	beq.w	800fad0 <uxr_read_framed_msg+0x2dc>
 800f94c:	18e2      	adds	r2, r4, r3
 800f94e:	7891      	ldrb	r1, [r2, #2]
 800f950:	297d      	cmp	r1, #125	; 0x7d
 800f952:	f000 814c 	beq.w	800fbee <uxr_read_framed_msg+0x3fa>
 800f956:	3301      	adds	r3, #1
 800f958:	085a      	lsrs	r2, r3, #1
 800f95a:	fba5 0202 	umull	r0, r2, r5, r2
 800f95e:	0892      	lsrs	r2, r2, #2
 800f960:	202a      	movs	r0, #42	; 0x2a
 800f962:	fb00 3312 	mls	r3, r0, r2, r3
 800f966:	297e      	cmp	r1, #126	; 0x7e
 800f968:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 800f96c:	f000 81ca 	beq.w	800fd04 <uxr_read_framed_msg+0x510>
 800f970:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 800f972:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 800f976:	990c      	ldr	r1, [sp, #48]	; 0x30
 800f978:	b29b      	uxth	r3, r3
 800f97a:	2000      	movs	r0, #0
 800f97c:	428b      	cmp	r3, r1
 800f97e:	8623      	strh	r3, [r4, #48]	; 0x30
 800f980:	8660      	strh	r0, [r4, #50]	; 0x32
 800f982:	86e0      	strh	r0, [r4, #54]	; 0x36
 800f984:	f240 80df 	bls.w	800fb46 <uxr_read_framed_msg+0x352>
 800f988:	7020      	strb	r0, [r4, #0]
 800f98a:	b003      	add	sp, #12
 800f98c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f990:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
 800f994:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 800f998:	4299      	cmp	r1, r3
 800f99a:	f000 80a8 	beq.w	800faee <uxr_read_framed_msg+0x2fa>
 800f99e:	18e2      	adds	r2, r4, r3
 800f9a0:	7890      	ldrb	r0, [r2, #2]
 800f9a2:	287d      	cmp	r0, #125	; 0x7d
 800f9a4:	f000 8164 	beq.w	800fc70 <uxr_read_framed_msg+0x47c>
 800f9a8:	3301      	adds	r3, #1
 800f9aa:	085a      	lsrs	r2, r3, #1
 800f9ac:	fba5 1202 	umull	r1, r2, r5, r2
 800f9b0:	0892      	lsrs	r2, r2, #2
 800f9b2:	212a      	movs	r1, #42	; 0x2a
 800f9b4:	fb01 3312 	mls	r3, r1, r2, r3
 800f9b8:	287e      	cmp	r0, #126	; 0x7e
 800f9ba:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 800f9be:	f000 8191 	beq.w	800fce4 <uxr_read_framed_msg+0x4f0>
 800f9c2:	2304      	movs	r3, #4
 800f9c4:	8620      	strh	r0, [r4, #48]	; 0x30
 800f9c6:	7023      	strb	r3, [r4, #0]
 800f9c8:	e725      	b.n	800f816 <uxr_read_framed_msg+0x22>
 800f9ca:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
 800f9ce:	f894 202d 	ldrb.w	r2, [r4, #45]	; 0x2d
 800f9d2:	4290      	cmp	r0, r2
 800f9d4:	f000 80b3 	beq.w	800fb3e <uxr_read_framed_msg+0x34a>
 800f9d8:	18a3      	adds	r3, r4, r2
 800f9da:	7899      	ldrb	r1, [r3, #2]
 800f9dc:	297d      	cmp	r1, #125	; 0x7d
 800f9de:	f000 8164 	beq.w	800fcaa <uxr_read_framed_msg+0x4b6>
 800f9e2:	3201      	adds	r2, #1
 800f9e4:	0850      	lsrs	r0, r2, #1
 800f9e6:	fba5 3000 	umull	r3, r0, r5, r0
 800f9ea:	0880      	lsrs	r0, r0, #2
 800f9ec:	232a      	movs	r3, #42	; 0x2a
 800f9ee:	fb03 2210 	mls	r2, r3, r0, r2
 800f9f2:	297e      	cmp	r1, #126	; 0x7e
 800f9f4:	f884 202d 	strb.w	r2, [r4, #45]	; 0x2d
 800f9f8:	f000 8188 	beq.w	800fd0c <uxr_read_framed_msg+0x518>
 800f9fc:	7863      	ldrb	r3, [r4, #1]
 800f9fe:	428b      	cmp	r3, r1
 800fa00:	bf0c      	ite	eq
 800fa02:	2303      	moveq	r3, #3
 800fa04:	2300      	movne	r3, #0
 800fa06:	7023      	strb	r3, [r4, #0]
 800fa08:	e705      	b.n	800f816 <uxr_read_framed_msg+0x22>
 800fa0a:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
 800fa0e:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 800fa12:	2200      	movs	r2, #0
 800fa14:	4299      	cmp	r1, r3
 800fa16:	f884 202e 	strb.w	r2, [r4, #46]	; 0x2e
 800fa1a:	d06c      	beq.n	800faf6 <uxr_read_framed_msg+0x302>
 800fa1c:	18e2      	adds	r2, r4, r3
 800fa1e:	7890      	ldrb	r0, [r2, #2]
 800fa20:	287d      	cmp	r0, #125	; 0x7d
 800fa22:	f000 8101 	beq.w	800fc28 <uxr_read_framed_msg+0x434>
 800fa26:	3301      	adds	r3, #1
 800fa28:	085a      	lsrs	r2, r3, #1
 800fa2a:	fba5 1202 	umull	r1, r2, r5, r2
 800fa2e:	0892      	lsrs	r2, r2, #2
 800fa30:	212a      	movs	r1, #42	; 0x2a
 800fa32:	fb01 3312 	mls	r3, r1, r2, r3
 800fa36:	287e      	cmp	r0, #126	; 0x7e
 800fa38:	f884 002e 	strb.w	r0, [r4, #46]	; 0x2e
 800fa3c:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 800fa40:	d059      	beq.n	800faf6 <uxr_read_framed_msg+0x302>
 800fa42:	2302      	movs	r3, #2
 800fa44:	7023      	strb	r3, [r4, #0]
 800fa46:	e6e6      	b.n	800f816 <uxr_read_framed_msg+0x22>
 800fa48:	f894 a02c 	ldrb.w	sl, [r4, #44]	; 0x2c
 800fa4c:	f894 202d 	ldrb.w	r2, [r4, #45]	; 0x2d
 800fa50:	f04f 0e2a 	mov.w	lr, #42	; 0x2a
 800fa54:	1c51      	adds	r1, r2, #1
 800fa56:	084b      	lsrs	r3, r1, #1
 800fa58:	fba5 c303 	umull	ip, r3, r5, r3
 800fa5c:	089b      	lsrs	r3, r3, #2
 800fa5e:	fb0e 1313 	mls	r3, lr, r3, r1
 800fa62:	4592      	cmp	sl, r2
 800fa64:	eb04 0002 	add.w	r0, r4, r2
 800fa68:	b2da      	uxtb	r2, r3
 800fa6a:	f43f af04 	beq.w	800f876 <uxr_read_framed_msg+0x82>
 800fa6e:	7883      	ldrb	r3, [r0, #2]
 800fa70:	f884 202d 	strb.w	r2, [r4, #45]	; 0x2d
 800fa74:	2b7e      	cmp	r3, #126	; 0x7e
 800fa76:	d1ed      	bne.n	800fa54 <uxr_read_framed_msg+0x260>
 800fa78:	2301      	movs	r3, #1
 800fa7a:	7023      	strb	r3, [r4, #0]
 800fa7c:	e6cb      	b.n	800f816 <uxr_read_framed_msg+0x22>
 800fa7e:	f100 0c01 	add.w	ip, r0, #1
 800fa82:	ea4f 025c 	mov.w	r2, ip, lsr #1
 800fa86:	fba5 8202 	umull	r8, r2, r5, r2
 800fa8a:	0892      	lsrs	r2, r2, #2
 800fa8c:	fb01 c212 	mls	r2, r1, r2, ip
 800fa90:	eb04 0c02 	add.w	ip, r4, r2
 800fa94:	b2d2      	uxtb	r2, r2
 800fa96:	4592      	cmp	sl, r2
 800fa98:	f100 0002 	add.w	r0, r0, #2
 800fa9c:	f43f af47 	beq.w	800f92e <uxr_read_framed_msg+0x13a>
 800faa0:	0842      	lsrs	r2, r0, #1
 800faa2:	f89c a002 	ldrb.w	sl, [ip, #2]
 800faa6:	fba5 8202 	umull	r8, r2, r5, r2
 800faaa:	0892      	lsrs	r2, r2, #2
 800faac:	fb01 0012 	mls	r0, r1, r2, r0
 800fab0:	f1ba 0f7e 	cmp.w	sl, #126	; 0x7e
 800fab4:	f08a 0c20 	eor.w	ip, sl, #32
 800fab8:	f884 002d 	strb.w	r0, [r4, #45]	; 0x2d
 800fabc:	f47f af11 	bne.w	800f8e2 <uxr_read_framed_msg+0xee>
 800fac0:	459e      	cmp	lr, r3
 800fac2:	ee17 8a90 	vmov	r8, s15
 800fac6:	f43f af37 	beq.w	800f938 <uxr_read_framed_msg+0x144>
 800faca:	2301      	movs	r3, #1
 800facc:	7023      	strb	r3, [r4, #0]
 800face:	e6a2      	b.n	800f816 <uxr_read_framed_msg+0x22>
 800fad0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800fad2:	9300      	str	r3, [sp, #0]
 800fad4:	2301      	movs	r3, #1
 800fad6:	9301      	str	r3, [sp, #4]
 800fad8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800fada:	464a      	mov	r2, r9
 800fadc:	4641      	mov	r1, r8
 800fade:	4620      	mov	r0, r4
 800fae0:	f7ff fe06 	bl	800f6f0 <uxr_framing_read_transport>
 800fae4:	2800      	cmp	r0, #0
 800fae6:	f43f aec6 	beq.w	800f876 <uxr_read_framed_msg+0x82>
 800faea:	7823      	ldrb	r3, [r4, #0]
 800faec:	e693      	b.n	800f816 <uxr_read_framed_msg+0x22>
 800faee:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800faf0:	9300      	str	r3, [sp, #0]
 800faf2:	2302      	movs	r3, #2
 800faf4:	e7ef      	b.n	800fad6 <uxr_read_framed_msg+0x2e2>
 800faf6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800faf8:	9300      	str	r3, [sp, #0]
 800fafa:	2304      	movs	r3, #4
 800fafc:	9301      	str	r3, [sp, #4]
 800fafe:	464a      	mov	r2, r9
 800fb00:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800fb02:	4641      	mov	r1, r8
 800fb04:	4620      	mov	r0, r4
 800fb06:	f7ff fdf3 	bl	800f6f0 <uxr_framing_read_transport>
 800fb0a:	2800      	cmp	r0, #0
 800fb0c:	d1ed      	bne.n	800faea <uxr_read_framed_msg+0x2f6>
 800fb0e:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
 800fb12:	2b7e      	cmp	r3, #126	; 0x7e
 800fb14:	d0e9      	beq.n	800faea <uxr_read_framed_msg+0x2f6>
 800fb16:	e6ae      	b.n	800f876 <uxr_read_framed_msg+0x82>
 800fb18:	30c30c31 	.word	0x30c30c31
 800fb1c:	080126e8 	.word	0x080126e8
 800fb20:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800fb22:	9300      	str	r3, [sp, #0]
 800fb24:	2305      	movs	r3, #5
 800fb26:	9301      	str	r3, [sp, #4]
 800fb28:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800fb2a:	f7ff fde1 	bl	800f6f0 <uxr_framing_read_transport>
 800fb2e:	f894 202d 	ldrb.w	r2, [r4, #45]	; 0x2d
 800fb32:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 800fb36:	429a      	cmp	r2, r3
 800fb38:	f43f ae9d 	beq.w	800f876 <uxr_read_framed_msg+0x82>
 800fb3c:	e668      	b.n	800f810 <uxr_read_framed_msg+0x1c>
 800fb3e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800fb40:	9300      	str	r3, [sp, #0]
 800fb42:	2303      	movs	r3, #3
 800fb44:	e7c7      	b.n	800fad6 <uxr_read_framed_msg+0x2e2>
 800fb46:	2305      	movs	r3, #5
 800fb48:	7023      	strb	r3, [r4, #0]
 800fb4a:	e664      	b.n	800f816 <uxr_read_framed_msg+0x22>
 800fb4c:	ee17 8a90 	vmov	r8, s15
 800fb50:	f43f aef2 	beq.w	800f938 <uxr_read_framed_msg+0x144>
 800fb54:	f1bc 0f7e 	cmp.w	ip, #126	; 0x7e
 800fb58:	d08e      	beq.n	800fa78 <uxr_read_framed_msg+0x284>
 800fb5a:	ebae 0303 	sub.w	r3, lr, r3
 800fb5e:	3302      	adds	r3, #2
 800fb60:	9301      	str	r3, [sp, #4]
 800fb62:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800fb64:	9300      	str	r3, [sp, #0]
 800fb66:	e7b7      	b.n	800fad8 <uxr_read_framed_msg+0x2e4>
 800fb68:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800fb6a:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
 800fb6e:	7013      	strb	r3, [r2, #0]
 800fb70:	8e20      	ldrh	r0, [r4, #48]	; 0x30
 800fb72:	b003      	add	sp, #12
 800fb74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fb78:	f103 0c01 	add.w	ip, r3, #1
 800fb7c:	ea4f 025c 	mov.w	r2, ip, lsr #1
 800fb80:	fba5 0202 	umull	r0, r2, r5, r2
 800fb84:	0892      	lsrs	r2, r2, #2
 800fb86:	202a      	movs	r0, #42	; 0x2a
 800fb88:	fb00 c212 	mls	r2, r0, r2, ip
 800fb8c:	fa5f fc82 	uxtb.w	ip, r2
 800fb90:	4561      	cmp	r1, ip
 800fb92:	d09d      	beq.n	800fad0 <uxr_read_framed_msg+0x2dc>
 800fb94:	3302      	adds	r3, #2
 800fb96:	4422      	add	r2, r4
 800fb98:	0859      	lsrs	r1, r3, #1
 800fb9a:	7892      	ldrb	r2, [r2, #2]
 800fb9c:	fba5 c101 	umull	ip, r1, r5, r1
 800fba0:	0889      	lsrs	r1, r1, #2
 800fba2:	fb00 3311 	mls	r3, r0, r1, r3
 800fba6:	2a7e      	cmp	r2, #126	; 0x7e
 800fba8:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 800fbac:	f000 80aa 	beq.w	800fd04 <uxr_read_framed_msg+0x510>
 800fbb0:	f082 0220 	eor.w	r2, r2, #32
 800fbb4:	e654      	b.n	800f860 <uxr_read_framed_msg+0x6c>
 800fbb6:	1c58      	adds	r0, r3, #1
 800fbb8:	0842      	lsrs	r2, r0, #1
 800fbba:	fba5 c202 	umull	ip, r2, r5, r2
 800fbbe:	0892      	lsrs	r2, r2, #2
 800fbc0:	f04f 0c2a 	mov.w	ip, #42	; 0x2a
 800fbc4:	fb0c 0212 	mls	r2, ip, r2, r0
 800fbc8:	b2d0      	uxtb	r0, r2
 800fbca:	4281      	cmp	r1, r0
 800fbcc:	d08f      	beq.n	800faee <uxr_read_framed_msg+0x2fa>
 800fbce:	4422      	add	r2, r4
 800fbd0:	3302      	adds	r3, #2
 800fbd2:	7890      	ldrb	r0, [r2, #2]
 800fbd4:	085a      	lsrs	r2, r3, #1
 800fbd6:	fba5 1202 	umull	r1, r2, r5, r2
 800fbda:	0892      	lsrs	r2, r2, #2
 800fbdc:	fb0c 3312 	mls	r3, ip, r2, r3
 800fbe0:	287e      	cmp	r0, #126	; 0x7e
 800fbe2:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 800fbe6:	d07d      	beq.n	800fce4 <uxr_read_framed_msg+0x4f0>
 800fbe8:	f080 0020 	eor.w	r0, r0, #32
 800fbec:	e660      	b.n	800f8b0 <uxr_read_framed_msg+0xbc>
 800fbee:	1c59      	adds	r1, r3, #1
 800fbf0:	084a      	lsrs	r2, r1, #1
 800fbf2:	fba5 c202 	umull	ip, r2, r5, r2
 800fbf6:	0892      	lsrs	r2, r2, #2
 800fbf8:	f04f 0c2a 	mov.w	ip, #42	; 0x2a
 800fbfc:	fb0c 1212 	mls	r2, ip, r2, r1
 800fc00:	b2d1      	uxtb	r1, r2
 800fc02:	4288      	cmp	r0, r1
 800fc04:	f43f af64 	beq.w	800fad0 <uxr_read_framed_msg+0x2dc>
 800fc08:	4422      	add	r2, r4
 800fc0a:	3302      	adds	r3, #2
 800fc0c:	7891      	ldrb	r1, [r2, #2]
 800fc0e:	085a      	lsrs	r2, r3, #1
 800fc10:	fba5 0202 	umull	r0, r2, r5, r2
 800fc14:	0892      	lsrs	r2, r2, #2
 800fc16:	fb0c 3312 	mls	r3, ip, r2, r3
 800fc1a:	297e      	cmp	r1, #126	; 0x7e
 800fc1c:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 800fc20:	d070      	beq.n	800fd04 <uxr_read_framed_msg+0x510>
 800fc22:	f081 0120 	eor.w	r1, r1, #32
 800fc26:	e6a3      	b.n	800f970 <uxr_read_framed_msg+0x17c>
 800fc28:	f103 0c01 	add.w	ip, r3, #1
 800fc2c:	ea4f 025c 	mov.w	r2, ip, lsr #1
 800fc30:	fba5 0202 	umull	r0, r2, r5, r2
 800fc34:	0892      	lsrs	r2, r2, #2
 800fc36:	202a      	movs	r0, #42	; 0x2a
 800fc38:	fb00 c212 	mls	r2, r0, r2, ip
 800fc3c:	fa5f fc82 	uxtb.w	ip, r2
 800fc40:	4561      	cmp	r1, ip
 800fc42:	f43f af58 	beq.w	800faf6 <uxr_read_framed_msg+0x302>
 800fc46:	4422      	add	r2, r4
 800fc48:	3302      	adds	r3, #2
 800fc4a:	7891      	ldrb	r1, [r2, #2]
 800fc4c:	f884 102e 	strb.w	r1, [r4, #46]	; 0x2e
 800fc50:	085a      	lsrs	r2, r3, #1
 800fc52:	fba5 c202 	umull	ip, r2, r5, r2
 800fc56:	0892      	lsrs	r2, r2, #2
 800fc58:	fb00 3312 	mls	r3, r0, r2, r3
 800fc5c:	297e      	cmp	r1, #126	; 0x7e
 800fc5e:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 800fc62:	f43f af48 	beq.w	800faf6 <uxr_read_framed_msg+0x302>
 800fc66:	f081 0120 	eor.w	r1, r1, #32
 800fc6a:	f884 102e 	strb.w	r1, [r4, #46]	; 0x2e
 800fc6e:	e6e8      	b.n	800fa42 <uxr_read_framed_msg+0x24e>
 800fc70:	1c58      	adds	r0, r3, #1
 800fc72:	0842      	lsrs	r2, r0, #1
 800fc74:	fba5 c202 	umull	ip, r2, r5, r2
 800fc78:	0892      	lsrs	r2, r2, #2
 800fc7a:	f04f 0c2a 	mov.w	ip, #42	; 0x2a
 800fc7e:	fb0c 0212 	mls	r2, ip, r2, r0
 800fc82:	b2d0      	uxtb	r0, r2
 800fc84:	4281      	cmp	r1, r0
 800fc86:	f43f af32 	beq.w	800faee <uxr_read_framed_msg+0x2fa>
 800fc8a:	4422      	add	r2, r4
 800fc8c:	3302      	adds	r3, #2
 800fc8e:	7890      	ldrb	r0, [r2, #2]
 800fc90:	085a      	lsrs	r2, r3, #1
 800fc92:	fba5 1202 	umull	r1, r2, r5, r2
 800fc96:	0892      	lsrs	r2, r2, #2
 800fc98:	fb0c 3312 	mls	r3, ip, r2, r3
 800fc9c:	287e      	cmp	r0, #126	; 0x7e
 800fc9e:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 800fca2:	d01f      	beq.n	800fce4 <uxr_read_framed_msg+0x4f0>
 800fca4:	f080 0020 	eor.w	r0, r0, #32
 800fca8:	e68b      	b.n	800f9c2 <uxr_read_framed_msg+0x1ce>
 800fcaa:	1c51      	adds	r1, r2, #1
 800fcac:	084b      	lsrs	r3, r1, #1
 800fcae:	fba5 c303 	umull	ip, r3, r5, r3
 800fcb2:	089b      	lsrs	r3, r3, #2
 800fcb4:	f04f 0c2a 	mov.w	ip, #42	; 0x2a
 800fcb8:	fb0c 1313 	mls	r3, ip, r3, r1
 800fcbc:	b2d9      	uxtb	r1, r3
 800fcbe:	4288      	cmp	r0, r1
 800fcc0:	f43f af3d 	beq.w	800fb3e <uxr_read_framed_msg+0x34a>
 800fcc4:	3202      	adds	r2, #2
 800fcc6:	4423      	add	r3, r4
 800fcc8:	0850      	lsrs	r0, r2, #1
 800fcca:	789b      	ldrb	r3, [r3, #2]
 800fccc:	fba5 1000 	umull	r1, r0, r5, r0
 800fcd0:	0880      	lsrs	r0, r0, #2
 800fcd2:	fb0c 2210 	mls	r2, ip, r0, r2
 800fcd6:	2b7e      	cmp	r3, #126	; 0x7e
 800fcd8:	f884 202d 	strb.w	r2, [r4, #45]	; 0x2d
 800fcdc:	d016      	beq.n	800fd0c <uxr_read_framed_msg+0x518>
 800fcde:	f083 0120 	eor.w	r1, r3, #32
 800fce2:	e68b      	b.n	800f9fc <uxr_read_framed_msg+0x208>
 800fce4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800fce6:	9300      	str	r3, [sp, #0]
 800fce8:	2302      	movs	r3, #2
 800fcea:	9301      	str	r3, [sp, #4]
 800fcec:	464a      	mov	r2, r9
 800fcee:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800fcf0:	4641      	mov	r1, r8
 800fcf2:	4620      	mov	r0, r4
 800fcf4:	f7ff fcfc 	bl	800f6f0 <uxr_framing_read_transport>
 800fcf8:	2800      	cmp	r0, #0
 800fcfa:	f47f aef6 	bne.w	800faea <uxr_read_framed_msg+0x2f6>
 800fcfe:	2301      	movs	r3, #1
 800fd00:	7023      	strb	r3, [r4, #0]
 800fd02:	e588      	b.n	800f816 <uxr_read_framed_msg+0x22>
 800fd04:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800fd06:	9300      	str	r3, [sp, #0]
 800fd08:	2301      	movs	r3, #1
 800fd0a:	e7ee      	b.n	800fcea <uxr_read_framed_msg+0x4f6>
 800fd0c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800fd0e:	9300      	str	r3, [sp, #0]
 800fd10:	2303      	movs	r3, #3
 800fd12:	e7ea      	b.n	800fcea <uxr_read_framed_msg+0x4f6>
 800fd14:	ee17 8a90 	vmov	r8, s15
 800fd18:	e6ae      	b.n	800fa78 <uxr_read_framed_msg+0x284>
 800fd1a:	bf00      	nop

0800fd1c <rcl_get_default_domain_id>:
 800fd1c:	b530      	push	{r4, r5, lr}
 800fd1e:	b083      	sub	sp, #12
 800fd20:	2300      	movs	r3, #0
 800fd22:	9300      	str	r3, [sp, #0]
 800fd24:	b1d0      	cbz	r0, 800fd5c <rcl_get_default_domain_id+0x40>
 800fd26:	4604      	mov	r4, r0
 800fd28:	4669      	mov	r1, sp
 800fd2a:	4815      	ldr	r0, [pc, #84]	; (800fd80 <rcl_get_default_domain_id+0x64>)
 800fd2c:	f7fd f94c 	bl	800cfc8 <rcutils_get_env>
 800fd30:	4602      	mov	r2, r0
 800fd32:	b110      	cbz	r0, 800fd3a <rcl_get_default_domain_id+0x1e>
 800fd34:	2001      	movs	r0, #1
 800fd36:	b003      	add	sp, #12
 800fd38:	bd30      	pop	{r4, r5, pc}
 800fd3a:	9b00      	ldr	r3, [sp, #0]
 800fd3c:	b18b      	cbz	r3, 800fd62 <rcl_get_default_domain_id+0x46>
 800fd3e:	7818      	ldrb	r0, [r3, #0]
 800fd40:	2800      	cmp	r0, #0
 800fd42:	d0f8      	beq.n	800fd36 <rcl_get_default_domain_id+0x1a>
 800fd44:	a901      	add	r1, sp, #4
 800fd46:	4618      	mov	r0, r3
 800fd48:	9201      	str	r2, [sp, #4]
 800fd4a:	f001 f90f 	bl	8010f6c <strtoul>
 800fd4e:	4605      	mov	r5, r0
 800fd50:	b150      	cbz	r0, 800fd68 <rcl_get_default_domain_id+0x4c>
 800fd52:	1c43      	adds	r3, r0, #1
 800fd54:	d00d      	beq.n	800fd72 <rcl_get_default_domain_id+0x56>
 800fd56:	6025      	str	r5, [r4, #0]
 800fd58:	2000      	movs	r0, #0
 800fd5a:	e7ec      	b.n	800fd36 <rcl_get_default_domain_id+0x1a>
 800fd5c:	200b      	movs	r0, #11
 800fd5e:	b003      	add	sp, #12
 800fd60:	bd30      	pop	{r4, r5, pc}
 800fd62:	4618      	mov	r0, r3
 800fd64:	b003      	add	sp, #12
 800fd66:	bd30      	pop	{r4, r5, pc}
 800fd68:	9b01      	ldr	r3, [sp, #4]
 800fd6a:	781b      	ldrb	r3, [r3, #0]
 800fd6c:	2b00      	cmp	r3, #0
 800fd6e:	d0f2      	beq.n	800fd56 <rcl_get_default_domain_id+0x3a>
 800fd70:	e7e0      	b.n	800fd34 <rcl_get_default_domain_id+0x18>
 800fd72:	f000 fc45 	bl	8010600 <__errno>
 800fd76:	6803      	ldr	r3, [r0, #0]
 800fd78:	2b22      	cmp	r3, #34	; 0x22
 800fd7a:	d1ec      	bne.n	800fd56 <rcl_get_default_domain_id+0x3a>
 800fd7c:	e7da      	b.n	800fd34 <rcl_get_default_domain_id+0x18>
 800fd7e:	bf00      	nop
 800fd80:	080128e8 	.word	0x080128e8

0800fd84 <rcl_expand_topic_name>:
 800fd84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fd88:	b08b      	sub	sp, #44	; 0x2c
 800fd8a:	9306      	str	r3, [sp, #24]
 800fd8c:	2800      	cmp	r0, #0
 800fd8e:	f000 80ad 	beq.w	800feec <rcl_expand_topic_name+0x168>
 800fd92:	460e      	mov	r6, r1
 800fd94:	2900      	cmp	r1, #0
 800fd96:	f000 80a9 	beq.w	800feec <rcl_expand_topic_name+0x168>
 800fd9a:	4617      	mov	r7, r2
 800fd9c:	2a00      	cmp	r2, #0
 800fd9e:	f000 80a5 	beq.w	800feec <rcl_expand_topic_name+0x168>
 800fda2:	2b00      	cmp	r3, #0
 800fda4:	f000 80a2 	beq.w	800feec <rcl_expand_topic_name+0x168>
 800fda8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800fdaa:	2b00      	cmp	r3, #0
 800fdac:	f000 809e 	beq.w	800feec <rcl_expand_topic_name+0x168>
 800fdb0:	2200      	movs	r2, #0
 800fdb2:	a909      	add	r1, sp, #36	; 0x24
 800fdb4:	4680      	mov	r8, r0
 800fdb6:	f000 f9f5 	bl	80101a4 <rcl_validate_topic_name>
 800fdba:	4604      	mov	r4, r0
 800fdbc:	2800      	cmp	r0, #0
 800fdbe:	f040 8096 	bne.w	800feee <rcl_expand_topic_name+0x16a>
 800fdc2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fdc4:	2b00      	cmp	r3, #0
 800fdc6:	f040 809a 	bne.w	800fefe <rcl_expand_topic_name+0x17a>
 800fdca:	4602      	mov	r2, r0
 800fdcc:	a909      	add	r1, sp, #36	; 0x24
 800fdce:	4630      	mov	r0, r6
 800fdd0:	f7fd fcfc 	bl	800d7cc <rmw_validate_node_name>
 800fdd4:	2800      	cmp	r0, #0
 800fdd6:	f040 808e 	bne.w	800fef6 <rcl_expand_topic_name+0x172>
 800fdda:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800fddc:	2a00      	cmp	r2, #0
 800fdde:	f040 8093 	bne.w	800ff08 <rcl_expand_topic_name+0x184>
 800fde2:	a909      	add	r1, sp, #36	; 0x24
 800fde4:	4638      	mov	r0, r7
 800fde6:	f7fd fcd3 	bl	800d790 <rmw_validate_namespace>
 800fdea:	2800      	cmp	r0, #0
 800fdec:	f040 8083 	bne.w	800fef6 <rcl_expand_topic_name+0x172>
 800fdf0:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800fdf2:	2c00      	cmp	r4, #0
 800fdf4:	f040 80ed 	bne.w	800ffd2 <rcl_expand_topic_name+0x24e>
 800fdf8:	217b      	movs	r1, #123	; 0x7b
 800fdfa:	4640      	mov	r0, r8
 800fdfc:	f001 f805 	bl	8010e0a <strchr>
 800fe00:	f898 3000 	ldrb.w	r3, [r8]
 800fe04:	2b2f      	cmp	r3, #47	; 0x2f
 800fe06:	4605      	mov	r5, r0
 800fe08:	f000 809e 	beq.w	800ff48 <rcl_expand_topic_name+0x1c4>
 800fe0c:	2b7e      	cmp	r3, #126	; 0x7e
 800fe0e:	f040 80a2 	bne.w	800ff56 <rcl_expand_topic_name+0x1d2>
 800fe12:	4638      	mov	r0, r7
 800fe14:	f7f0 fa06 	bl	8000224 <strlen>
 800fe18:	4a82      	ldr	r2, [pc, #520]	; (8010024 <rcl_expand_topic_name+0x2a0>)
 800fe1a:	4b83      	ldr	r3, [pc, #524]	; (8010028 <rcl_expand_topic_name+0x2a4>)
 800fe1c:	2801      	cmp	r0, #1
 800fe1e:	bf18      	it	ne
 800fe20:	4613      	movne	r3, r2
 800fe22:	9302      	str	r3, [sp, #8]
 800fe24:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800fe26:	9300      	str	r3, [sp, #0]
 800fe28:	e9cd 7603 	strd	r7, r6, [sp, #12]
 800fe2c:	f108 0301 	add.w	r3, r8, #1
 800fe30:	9305      	str	r3, [sp, #20]
 800fe32:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800fe36:	9301      	str	r3, [sp, #4]
 800fe38:	ab14      	add	r3, sp, #80	; 0x50
 800fe3a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800fe3c:	f7fd f8ec 	bl	800d018 <rcutils_format_string_limit>
 800fe40:	4682      	mov	sl, r0
 800fe42:	2800      	cmp	r0, #0
 800fe44:	f000 80c7 	beq.w	800ffd6 <rcl_expand_topic_name+0x252>
 800fe48:	2d00      	cmp	r5, #0
 800fe4a:	f000 80a2 	beq.w	800ff92 <rcl_expand_topic_name+0x20e>
 800fe4e:	217b      	movs	r1, #123	; 0x7b
 800fe50:	f000 ffdb 	bl	8010e0a <strchr>
 800fe54:	46d1      	mov	r9, sl
 800fe56:	4605      	mov	r5, r0
 800fe58:	9407      	str	r4, [sp, #28]
 800fe5a:	46d3      	mov	fp, sl
 800fe5c:	464c      	mov	r4, r9
 800fe5e:	2d00      	cmp	r5, #0
 800fe60:	f000 80be 	beq.w	800ffe0 <rcl_expand_topic_name+0x25c>
 800fe64:	217d      	movs	r1, #125	; 0x7d
 800fe66:	4620      	mov	r0, r4
 800fe68:	f000 ffcf 	bl	8010e0a <strchr>
 800fe6c:	eba0 0905 	sub.w	r9, r0, r5
 800fe70:	f109 0a01 	add.w	sl, r9, #1
 800fe74:	486d      	ldr	r0, [pc, #436]	; (801002c <rcl_expand_topic_name+0x2a8>)
 800fe76:	4652      	mov	r2, sl
 800fe78:	4629      	mov	r1, r5
 800fe7a:	f000 ffdb 	bl	8010e34 <strncmp>
 800fe7e:	2800      	cmp	r0, #0
 800fe80:	d067      	beq.n	800ff52 <rcl_expand_topic_name+0x1ce>
 800fe82:	486b      	ldr	r0, [pc, #428]	; (8010030 <rcl_expand_topic_name+0x2ac>)
 800fe84:	4652      	mov	r2, sl
 800fe86:	4629      	mov	r1, r5
 800fe88:	f000 ffd4 	bl	8010e34 <strncmp>
 800fe8c:	b130      	cbz	r0, 800fe9c <rcl_expand_topic_name+0x118>
 800fe8e:	4869      	ldr	r0, [pc, #420]	; (8010034 <rcl_expand_topic_name+0x2b0>)
 800fe90:	4652      	mov	r2, sl
 800fe92:	4629      	mov	r1, r5
 800fe94:	f000 ffce 	bl	8010e34 <strncmp>
 800fe98:	2800      	cmp	r0, #0
 800fe9a:	d137      	bne.n	800ff0c <rcl_expand_topic_name+0x188>
 800fe9c:	46b9      	mov	r9, r7
 800fe9e:	ab16      	add	r3, sp, #88	; 0x58
 800fea0:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800fea4:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800fea8:	ab14      	add	r3, sp, #80	; 0x50
 800feaa:	4628      	mov	r0, r5
 800feac:	cb0c      	ldmia	r3, {r2, r3}
 800feae:	4651      	mov	r1, sl
 800feb0:	f7fd f9ee 	bl	800d290 <rcutils_strndup>
 800feb4:	4605      	mov	r5, r0
 800feb6:	2800      	cmp	r0, #0
 800feb8:	f000 809c 	beq.w	800fff4 <rcl_expand_topic_name+0x270>
 800febc:	464a      	mov	r2, r9
 800febe:	4620      	mov	r0, r4
 800fec0:	ab14      	add	r3, sp, #80	; 0x50
 800fec2:	4629      	mov	r1, r5
 800fec4:	f7fd f8e2 	bl	800d08c <rcutils_repl_str>
 800fec8:	9918      	ldr	r1, [sp, #96]	; 0x60
 800feca:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800fecc:	4604      	mov	r4, r0
 800fece:	4628      	mov	r0, r5
 800fed0:	4798      	blx	r3
 800fed2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800fed4:	9918      	ldr	r1, [sp, #96]	; 0x60
 800fed6:	4658      	mov	r0, fp
 800fed8:	4798      	blx	r3
 800feda:	2c00      	cmp	r4, #0
 800fedc:	d07b      	beq.n	800ffd6 <rcl_expand_topic_name+0x252>
 800fede:	217b      	movs	r1, #123	; 0x7b
 800fee0:	4620      	mov	r0, r4
 800fee2:	f000 ff92 	bl	8010e0a <strchr>
 800fee6:	46a3      	mov	fp, r4
 800fee8:	4605      	mov	r5, r0
 800feea:	e7b8      	b.n	800fe5e <rcl_expand_topic_name+0xda>
 800feec:	240b      	movs	r4, #11
 800feee:	4620      	mov	r0, r4
 800fef0:	b00b      	add	sp, #44	; 0x2c
 800fef2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fef6:	f7fc f947 	bl	800c188 <rcl_convert_rmw_ret_to_rcl_ret>
 800fefa:	4604      	mov	r4, r0
 800fefc:	e7f7      	b.n	800feee <rcl_expand_topic_name+0x16a>
 800fefe:	2467      	movs	r4, #103	; 0x67
 800ff00:	4620      	mov	r0, r4
 800ff02:	b00b      	add	sp, #44	; 0x2c
 800ff04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ff08:	24c9      	movs	r4, #201	; 0xc9
 800ff0a:	e7f0      	b.n	800feee <rcl_expand_topic_name+0x16a>
 800ff0c:	f109 32ff 	add.w	r2, r9, #4294967295	; 0xffffffff
 800ff10:	9806      	ldr	r0, [sp, #24]
 800ff12:	1c69      	adds	r1, r5, #1
 800ff14:	f7fd fad6 	bl	800d4c4 <rcutils_string_map_getn>
 800ff18:	4681      	mov	r9, r0
 800ff1a:	2800      	cmp	r0, #0
 800ff1c:	d1bf      	bne.n	800fe9e <rcl_expand_topic_name+0x11a>
 800ff1e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800ff20:	aa16      	add	r2, sp, #88	; 0x58
 800ff22:	6018      	str	r0, [r3, #0]
 800ff24:	ca07      	ldmia	r2, {r0, r1, r2}
 800ff26:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800ff2a:	ab14      	add	r3, sp, #80	; 0x50
 800ff2c:	cb0c      	ldmia	r3, {r2, r3}
 800ff2e:	4651      	mov	r1, sl
 800ff30:	4628      	mov	r0, r5
 800ff32:	f7fd f9ad 	bl	800d290 <rcutils_strndup>
 800ff36:	9918      	ldr	r1, [sp, #96]	; 0x60
 800ff38:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ff3a:	4798      	blx	r3
 800ff3c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ff3e:	9918      	ldr	r1, [sp, #96]	; 0x60
 800ff40:	4658      	mov	r0, fp
 800ff42:	2469      	movs	r4, #105	; 0x69
 800ff44:	4798      	blx	r3
 800ff46:	e7d2      	b.n	800feee <rcl_expand_topic_name+0x16a>
 800ff48:	2800      	cmp	r0, #0
 800ff4a:	d05b      	beq.n	8010004 <rcl_expand_topic_name+0x280>
 800ff4c:	46c1      	mov	r9, r8
 800ff4e:	46a2      	mov	sl, r4
 800ff50:	e782      	b.n	800fe58 <rcl_expand_topic_name+0xd4>
 800ff52:	46b1      	mov	r9, r6
 800ff54:	e7a3      	b.n	800fe9e <rcl_expand_topic_name+0x11a>
 800ff56:	2800      	cmp	r0, #0
 800ff58:	d1f8      	bne.n	800ff4c <rcl_expand_topic_name+0x1c8>
 800ff5a:	4638      	mov	r0, r7
 800ff5c:	f7f0 f962 	bl	8000224 <strlen>
 800ff60:	4a35      	ldr	r2, [pc, #212]	; (8010038 <rcl_expand_topic_name+0x2b4>)
 800ff62:	4b36      	ldr	r3, [pc, #216]	; (801003c <rcl_expand_topic_name+0x2b8>)
 800ff64:	f8cd 8010 	str.w	r8, [sp, #16]
 800ff68:	2801      	cmp	r0, #1
 800ff6a:	bf18      	it	ne
 800ff6c:	4613      	movne	r3, r2
 800ff6e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800ff72:	e9cd 1301 	strd	r1, r3, [sp, #4]
 800ff76:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800ff78:	9703      	str	r7, [sp, #12]
 800ff7a:	9200      	str	r2, [sp, #0]
 800ff7c:	ab14      	add	r3, sp, #80	; 0x50
 800ff7e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800ff80:	f7fd f84a 	bl	800d018 <rcutils_format_string_limit>
 800ff84:	4682      	mov	sl, r0
 800ff86:	4653      	mov	r3, sl
 800ff88:	b32b      	cbz	r3, 800ffd6 <rcl_expand_topic_name+0x252>
 800ff8a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800ff8c:	f8c3 a000 	str.w	sl, [r3]
 800ff90:	e7ad      	b.n	800feee <rcl_expand_topic_name+0x16a>
 800ff92:	f89a 3000 	ldrb.w	r3, [sl]
 800ff96:	2b2f      	cmp	r3, #47	; 0x2f
 800ff98:	d0f7      	beq.n	800ff8a <rcl_expand_topic_name+0x206>
 800ff9a:	4638      	mov	r0, r7
 800ff9c:	f7f0 f942 	bl	8000224 <strlen>
 800ffa0:	4a25      	ldr	r2, [pc, #148]	; (8010038 <rcl_expand_topic_name+0x2b4>)
 800ffa2:	4b26      	ldr	r3, [pc, #152]	; (801003c <rcl_expand_topic_name+0x2b8>)
 800ffa4:	f8cd a010 	str.w	sl, [sp, #16]
 800ffa8:	2801      	cmp	r0, #1
 800ffaa:	bf18      	it	ne
 800ffac:	4613      	movne	r3, r2
 800ffae:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800ffb2:	e9cd 1301 	strd	r1, r3, [sp, #4]
 800ffb6:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800ffb8:	9703      	str	r7, [sp, #12]
 800ffba:	9200      	str	r2, [sp, #0]
 800ffbc:	ab14      	add	r3, sp, #80	; 0x50
 800ffbe:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800ffc0:	f7fd f82a 	bl	800d018 <rcutils_format_string_limit>
 800ffc4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ffc6:	9918      	ldr	r1, [sp, #96]	; 0x60
 800ffc8:	4605      	mov	r5, r0
 800ffca:	4650      	mov	r0, sl
 800ffcc:	4798      	blx	r3
 800ffce:	46aa      	mov	sl, r5
 800ffd0:	e7d9      	b.n	800ff86 <rcl_expand_topic_name+0x202>
 800ffd2:	24ca      	movs	r4, #202	; 0xca
 800ffd4:	e78b      	b.n	800feee <rcl_expand_topic_name+0x16a>
 800ffd6:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800ffd8:	2300      	movs	r3, #0
 800ffda:	6013      	str	r3, [r2, #0]
 800ffdc:	240a      	movs	r4, #10
 800ffde:	e786      	b.n	800feee <rcl_expand_topic_name+0x16a>
 800ffe0:	465b      	mov	r3, fp
 800ffe2:	9c07      	ldr	r4, [sp, #28]
 800ffe4:	46da      	mov	sl, fp
 800ffe6:	2b00      	cmp	r3, #0
 800ffe8:	d1d3      	bne.n	800ff92 <rcl_expand_topic_name+0x20e>
 800ffea:	f898 3000 	ldrb.w	r3, [r8]
 800ffee:	2b2f      	cmp	r3, #47	; 0x2f
 800fff0:	d0cb      	beq.n	800ff8a <rcl_expand_topic_name+0x206>
 800fff2:	e7b2      	b.n	800ff5a <rcl_expand_topic_name+0x1d6>
 800fff4:	e9dd 1218 	ldrd	r1, r2, [sp, #96]	; 0x60
 800fff8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800fffa:	6015      	str	r5, [r2, #0]
 800fffc:	4658      	mov	r0, fp
 800fffe:	4798      	blx	r3
 8010000:	240a      	movs	r4, #10
 8010002:	e774      	b.n	800feee <rcl_expand_topic_name+0x16a>
 8010004:	ab17      	add	r3, sp, #92	; 0x5c
 8010006:	e893 0003 	ldmia.w	r3, {r0, r1}
 801000a:	e88d 0003 	stmia.w	sp, {r0, r1}
 801000e:	ab14      	add	r3, sp, #80	; 0x50
 8010010:	cb0e      	ldmia	r3, {r1, r2, r3}
 8010012:	4640      	mov	r0, r8
 8010014:	f7fd f91a 	bl	800d24c <rcutils_strdup>
 8010018:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801001a:	2800      	cmp	r0, #0
 801001c:	6018      	str	r0, [r3, #0]
 801001e:	bf08      	it	eq
 8010020:	240a      	moveq	r4, #10
 8010022:	e764      	b.n	800feee <rcl_expand_topic_name+0x16a>
 8010024:	080128f8 	.word	0x080128f8
 8010028:	080120e0 	.word	0x080120e0
 801002c:	08012900 	.word	0x08012900
 8010030:	08012908 	.word	0x08012908
 8010034:	08012910 	.word	0x08012910
 8010038:	08012274 	.word	0x08012274
 801003c:	080120f0 	.word	0x080120f0

08010040 <rcl_get_default_topic_name_substitutions>:
 8010040:	2800      	cmp	r0, #0
 8010042:	bf0c      	ite	eq
 8010044:	200b      	moveq	r0, #11
 8010046:	2000      	movne	r0, #0
 8010048:	4770      	bx	lr
 801004a:	bf00      	nop

0801004c <rcl_get_zero_initialized_guard_condition>:
 801004c:	4a03      	ldr	r2, [pc, #12]	; (801005c <rcl_get_zero_initialized_guard_condition+0x10>)
 801004e:	4603      	mov	r3, r0
 8010050:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010054:	e883 0003 	stmia.w	r3, {r0, r1}
 8010058:	4618      	mov	r0, r3
 801005a:	4770      	bx	lr
 801005c:	0801291c 	.word	0x0801291c

08010060 <rcl_guard_condition_init_from_rmw>:
 8010060:	b082      	sub	sp, #8
 8010062:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010066:	b086      	sub	sp, #24
 8010068:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 801006c:	4604      	mov	r4, r0
 801006e:	f84c 3f04 	str.w	r3, [ip, #4]!
 8010072:	460e      	mov	r6, r1
 8010074:	4617      	mov	r7, r2
 8010076:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801007a:	f10d 0e04 	add.w	lr, sp, #4
 801007e:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8010082:	f8dc 3000 	ldr.w	r3, [ip]
 8010086:	f8ce 3000 	str.w	r3, [lr]
 801008a:	a801      	add	r0, sp, #4
 801008c:	f7f7 fe80 	bl	8007d90 <rcutils_allocator_is_valid>
 8010090:	b350      	cbz	r0, 80100e8 <rcl_guard_condition_init_from_rmw+0x88>
 8010092:	b34c      	cbz	r4, 80100e8 <rcl_guard_condition_init_from_rmw+0x88>
 8010094:	f8d4 8004 	ldr.w	r8, [r4, #4]
 8010098:	f1b8 0f00 	cmp.w	r8, #0
 801009c:	d11e      	bne.n	80100dc <rcl_guard_condition_init_from_rmw+0x7c>
 801009e:	b31f      	cbz	r7, 80100e8 <rcl_guard_condition_init_from_rmw+0x88>
 80100a0:	4638      	mov	r0, r7
 80100a2:	f7fc f88f 	bl	800c1c4 <rcl_context_is_valid>
 80100a6:	b328      	cbz	r0, 80100f4 <rcl_guard_condition_init_from_rmw+0x94>
 80100a8:	9b01      	ldr	r3, [sp, #4]
 80100aa:	9905      	ldr	r1, [sp, #20]
 80100ac:	201c      	movs	r0, #28
 80100ae:	4798      	blx	r3
 80100b0:	4605      	mov	r5, r0
 80100b2:	6060      	str	r0, [r4, #4]
 80100b4:	b358      	cbz	r0, 801010e <rcl_guard_condition_init_from_rmw+0xae>
 80100b6:	b1fe      	cbz	r6, 80100f8 <rcl_guard_condition_init_from_rmw+0x98>
 80100b8:	6006      	str	r6, [r0, #0]
 80100ba:	f880 8004 	strb.w	r8, [r0, #4]
 80100be:	ac01      	add	r4, sp, #4
 80100c0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80100c2:	f105 0c08 	add.w	ip, r5, #8
 80100c6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80100ca:	6823      	ldr	r3, [r4, #0]
 80100cc:	f8cc 3000 	str.w	r3, [ip]
 80100d0:	2000      	movs	r0, #0
 80100d2:	b006      	add	sp, #24
 80100d4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80100d8:	b002      	add	sp, #8
 80100da:	4770      	bx	lr
 80100dc:	2064      	movs	r0, #100	; 0x64
 80100de:	b006      	add	sp, #24
 80100e0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80100e4:	b002      	add	sp, #8
 80100e6:	4770      	bx	lr
 80100e8:	200b      	movs	r0, #11
 80100ea:	b006      	add	sp, #24
 80100ec:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80100f0:	b002      	add	sp, #8
 80100f2:	4770      	bx	lr
 80100f4:	2065      	movs	r0, #101	; 0x65
 80100f6:	e7f2      	b.n	80100de <rcl_guard_condition_init_from_rmw+0x7e>
 80100f8:	6838      	ldr	r0, [r7, #0]
 80100fa:	3028      	adds	r0, #40	; 0x28
 80100fc:	f000 fa50 	bl	80105a0 <rmw_create_guard_condition>
 8010100:	6028      	str	r0, [r5, #0]
 8010102:	6865      	ldr	r5, [r4, #4]
 8010104:	682e      	ldr	r6, [r5, #0]
 8010106:	b126      	cbz	r6, 8010112 <rcl_guard_condition_init_from_rmw+0xb2>
 8010108:	2301      	movs	r3, #1
 801010a:	712b      	strb	r3, [r5, #4]
 801010c:	e7d7      	b.n	80100be <rcl_guard_condition_init_from_rmw+0x5e>
 801010e:	200a      	movs	r0, #10
 8010110:	e7e5      	b.n	80100de <rcl_guard_condition_init_from_rmw+0x7e>
 8010112:	4628      	mov	r0, r5
 8010114:	9b02      	ldr	r3, [sp, #8]
 8010116:	9905      	ldr	r1, [sp, #20]
 8010118:	4798      	blx	r3
 801011a:	6066      	str	r6, [r4, #4]
 801011c:	2001      	movs	r0, #1
 801011e:	e7de      	b.n	80100de <rcl_guard_condition_init_from_rmw+0x7e>

08010120 <rcl_guard_condition_fini>:
 8010120:	b570      	push	{r4, r5, r6, lr}
 8010122:	b082      	sub	sp, #8
 8010124:	b1f0      	cbz	r0, 8010164 <rcl_guard_condition_fini+0x44>
 8010126:	6843      	ldr	r3, [r0, #4]
 8010128:	4604      	mov	r4, r0
 801012a:	b163      	cbz	r3, 8010146 <rcl_guard_condition_fini+0x26>
 801012c:	6818      	ldr	r0, [r3, #0]
 801012e:	68de      	ldr	r6, [r3, #12]
 8010130:	6999      	ldr	r1, [r3, #24]
 8010132:	b160      	cbz	r0, 801014e <rcl_guard_condition_fini+0x2e>
 8010134:	791d      	ldrb	r5, [r3, #4]
 8010136:	b965      	cbnz	r5, 8010152 <rcl_guard_condition_fini+0x32>
 8010138:	4618      	mov	r0, r3
 801013a:	47b0      	blx	r6
 801013c:	2300      	movs	r3, #0
 801013e:	4628      	mov	r0, r5
 8010140:	6063      	str	r3, [r4, #4]
 8010142:	b002      	add	sp, #8
 8010144:	bd70      	pop	{r4, r5, r6, pc}
 8010146:	461d      	mov	r5, r3
 8010148:	4628      	mov	r0, r5
 801014a:	b002      	add	sp, #8
 801014c:	bd70      	pop	{r4, r5, r6, pc}
 801014e:	4605      	mov	r5, r0
 8010150:	e7f2      	b.n	8010138 <rcl_guard_condition_fini+0x18>
 8010152:	9101      	str	r1, [sp, #4]
 8010154:	f000 fa38 	bl	80105c8 <rmw_destroy_guard_condition>
 8010158:	1e05      	subs	r5, r0, #0
 801015a:	6863      	ldr	r3, [r4, #4]
 801015c:	9901      	ldr	r1, [sp, #4]
 801015e:	bf18      	it	ne
 8010160:	2501      	movne	r5, #1
 8010162:	e7e9      	b.n	8010138 <rcl_guard_condition_fini+0x18>
 8010164:	250b      	movs	r5, #11
 8010166:	4628      	mov	r0, r5
 8010168:	b002      	add	sp, #8
 801016a:	bd70      	pop	{r4, r5, r6, pc}

0801016c <rcl_guard_condition_get_default_options>:
 801016c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801016e:	b087      	sub	sp, #28
 8010170:	4606      	mov	r6, r0
 8010172:	4668      	mov	r0, sp
 8010174:	f7f7 fdfe 	bl	8007d74 <rcutils_get_default_allocator>
 8010178:	4b09      	ldr	r3, [pc, #36]	; (80101a0 <rcl_guard_condition_get_default_options+0x34>)
 801017a:	46ee      	mov	lr, sp
 801017c:	469c      	mov	ip, r3
 801017e:	461d      	mov	r5, r3
 8010180:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8010184:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8010188:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801018a:	4634      	mov	r4, r6
 801018c:	f8de 7000 	ldr.w	r7, [lr]
 8010190:	f8cc 7000 	str.w	r7, [ip]
 8010194:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8010196:	4630      	mov	r0, r6
 8010198:	6027      	str	r7, [r4, #0]
 801019a:	b007      	add	sp, #28
 801019c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801019e:	bf00      	nop
 80101a0:	2000dc04 	.word	0x2000dc04

080101a4 <rcl_validate_topic_name>:
 80101a4:	2800      	cmp	r0, #0
 80101a6:	d07a      	beq.n	801029e <rcl_validate_topic_name+0xfa>
 80101a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80101ac:	460e      	mov	r6, r1
 80101ae:	2900      	cmp	r1, #0
 80101b0:	d07c      	beq.n	80102ac <rcl_validate_topic_name+0x108>
 80101b2:	4617      	mov	r7, r2
 80101b4:	4605      	mov	r5, r0
 80101b6:	f7f0 f835 	bl	8000224 <strlen>
 80101ba:	b1b0      	cbz	r0, 80101ea <rcl_validate_topic_name+0x46>
 80101bc:	f895 9000 	ldrb.w	r9, [r5]
 80101c0:	f8df c180 	ldr.w	ip, [pc, #384]	; 8010344 <rcl_validate_topic_name+0x1a0>
 80101c4:	f81c 3009 	ldrb.w	r3, [ip, r9]
 80101c8:	f013 0304 	ands.w	r3, r3, #4
 80101cc:	d169      	bne.n	80102a2 <rcl_validate_topic_name+0xfe>
 80101ce:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80101d2:	f815 2008 	ldrb.w	r2, [r5, r8]
 80101d6:	2a2f      	cmp	r2, #47	; 0x2f
 80101d8:	d10e      	bne.n	80101f8 <rcl_validate_topic_name+0x54>
 80101da:	2202      	movs	r2, #2
 80101dc:	6032      	str	r2, [r6, #0]
 80101de:	b36f      	cbz	r7, 801023c <rcl_validate_topic_name+0x98>
 80101e0:	f8c7 8000 	str.w	r8, [r7]
 80101e4:	4618      	mov	r0, r3
 80101e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80101ea:	2301      	movs	r3, #1
 80101ec:	6033      	str	r3, [r6, #0]
 80101ee:	b32f      	cbz	r7, 801023c <rcl_validate_topic_name+0x98>
 80101f0:	2000      	movs	r0, #0
 80101f2:	6038      	str	r0, [r7, #0]
 80101f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80101f8:	f105 3aff 	add.w	sl, r5, #4294967295	; 0xffffffff
 80101fc:	461c      	mov	r4, r3
 80101fe:	4619      	mov	r1, r3
 8010200:	f81a 2f01 	ldrb.w	r2, [sl, #1]!
 8010204:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8010208:	f1be 0f09 	cmp.w	lr, #9
 801020c:	d919      	bls.n	8010242 <rcl_validate_topic_name+0x9e>
 801020e:	f022 0e20 	bic.w	lr, r2, #32
 8010212:	f1ae 0e41 	sub.w	lr, lr, #65	; 0x41
 8010216:	f1be 0f19 	cmp.w	lr, #25
 801021a:	d912      	bls.n	8010242 <rcl_validate_topic_name+0x9e>
 801021c:	2a5f      	cmp	r2, #95	; 0x5f
 801021e:	d019      	beq.n	8010254 <rcl_validate_topic_name+0xb0>
 8010220:	2a2f      	cmp	r2, #47	; 0x2f
 8010222:	d051      	beq.n	80102c8 <rcl_validate_topic_name+0x124>
 8010224:	2a7e      	cmp	r2, #126	; 0x7e
 8010226:	d048      	beq.n	80102ba <rcl_validate_topic_name+0x116>
 8010228:	2a7b      	cmp	r2, #123	; 0x7b
 801022a:	d054      	beq.n	80102d6 <rcl_validate_topic_name+0x132>
 801022c:	2a7d      	cmp	r2, #125	; 0x7d
 801022e:	d161      	bne.n	80102f4 <rcl_validate_topic_name+0x150>
 8010230:	2c00      	cmp	r4, #0
 8010232:	d155      	bne.n	80102e0 <rcl_validate_topic_name+0x13c>
 8010234:	2305      	movs	r3, #5
 8010236:	6033      	str	r3, [r6, #0]
 8010238:	b107      	cbz	r7, 801023c <rcl_validate_topic_name+0x98>
 801023a:	6039      	str	r1, [r7, #0]
 801023c:	2000      	movs	r0, #0
 801023e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010242:	f81c 2002 	ldrb.w	r2, [ip, r2]
 8010246:	0752      	lsls	r2, r2, #29
 8010248:	d504      	bpl.n	8010254 <rcl_validate_topic_name+0xb0>
 801024a:	b11c      	cbz	r4, 8010254 <rcl_validate_topic_name+0xb0>
 801024c:	b111      	cbz	r1, 8010254 <rcl_validate_topic_name+0xb0>
 801024e:	1e4a      	subs	r2, r1, #1
 8010250:	429a      	cmp	r2, r3
 8010252:	d02d      	beq.n	80102b0 <rcl_validate_topic_name+0x10c>
 8010254:	3101      	adds	r1, #1
 8010256:	4288      	cmp	r0, r1
 8010258:	d1d2      	bne.n	8010200 <rcl_validate_topic_name+0x5c>
 801025a:	2c00      	cmp	r4, #0
 801025c:	d145      	bne.n	80102ea <rcl_validate_topic_name+0x146>
 801025e:	f1b9 0f7e 	cmp.w	r9, #126	; 0x7e
 8010262:	d04f      	beq.n	8010304 <rcl_validate_topic_name+0x160>
 8010264:	4620      	mov	r0, r4
 8010266:	2301      	movs	r3, #1
 8010268:	e006      	b.n	8010278 <rcl_validate_topic_name+0xd4>
 801026a:	428b      	cmp	r3, r1
 801026c:	f105 0501 	add.w	r5, r5, #1
 8010270:	f103 0201 	add.w	r2, r3, #1
 8010274:	d236      	bcs.n	80102e4 <rcl_validate_topic_name+0x140>
 8010276:	4613      	mov	r3, r2
 8010278:	4580      	cmp	r8, r0
 801027a:	f100 0001 	add.w	r0, r0, #1
 801027e:	d0f4      	beq.n	801026a <rcl_validate_topic_name+0xc6>
 8010280:	782a      	ldrb	r2, [r5, #0]
 8010282:	2a2f      	cmp	r2, #47	; 0x2f
 8010284:	d1f1      	bne.n	801026a <rcl_validate_topic_name+0xc6>
 8010286:	786a      	ldrb	r2, [r5, #1]
 8010288:	f81c 2002 	ldrb.w	r2, [ip, r2]
 801028c:	0754      	lsls	r4, r2, #29
 801028e:	d5ec      	bpl.n	801026a <rcl_validate_topic_name+0xc6>
 8010290:	2204      	movs	r2, #4
 8010292:	6032      	str	r2, [r6, #0]
 8010294:	2f00      	cmp	r7, #0
 8010296:	d0d1      	beq.n	801023c <rcl_validate_topic_name+0x98>
 8010298:	603b      	str	r3, [r7, #0]
 801029a:	2000      	movs	r0, #0
 801029c:	e7aa      	b.n	80101f4 <rcl_validate_topic_name+0x50>
 801029e:	200b      	movs	r0, #11
 80102a0:	4770      	bx	lr
 80102a2:	2304      	movs	r3, #4
 80102a4:	6033      	str	r3, [r6, #0]
 80102a6:	2f00      	cmp	r7, #0
 80102a8:	d1a2      	bne.n	80101f0 <rcl_validate_topic_name+0x4c>
 80102aa:	e7c7      	b.n	801023c <rcl_validate_topic_name+0x98>
 80102ac:	200b      	movs	r0, #11
 80102ae:	e7a1      	b.n	80101f4 <rcl_validate_topic_name+0x50>
 80102b0:	2309      	movs	r3, #9
 80102b2:	6033      	str	r3, [r6, #0]
 80102b4:	2f00      	cmp	r7, #0
 80102b6:	d1c0      	bne.n	801023a <rcl_validate_topic_name+0x96>
 80102b8:	e7c0      	b.n	801023c <rcl_validate_topic_name+0x98>
 80102ba:	2900      	cmp	r1, #0
 80102bc:	d0ca      	beq.n	8010254 <rcl_validate_topic_name+0xb0>
 80102be:	2306      	movs	r3, #6
 80102c0:	6033      	str	r3, [r6, #0]
 80102c2:	2f00      	cmp	r7, #0
 80102c4:	d1b9      	bne.n	801023a <rcl_validate_topic_name+0x96>
 80102c6:	e7b9      	b.n	801023c <rcl_validate_topic_name+0x98>
 80102c8:	2c00      	cmp	r4, #0
 80102ca:	d0c3      	beq.n	8010254 <rcl_validate_topic_name+0xb0>
 80102cc:	2308      	movs	r3, #8
 80102ce:	6033      	str	r3, [r6, #0]
 80102d0:	2f00      	cmp	r7, #0
 80102d2:	d1b2      	bne.n	801023a <rcl_validate_topic_name+0x96>
 80102d4:	e7b2      	b.n	801023c <rcl_validate_topic_name+0x98>
 80102d6:	2c00      	cmp	r4, #0
 80102d8:	d1f8      	bne.n	80102cc <rcl_validate_topic_name+0x128>
 80102da:	460b      	mov	r3, r1
 80102dc:	2401      	movs	r4, #1
 80102de:	e7b9      	b.n	8010254 <rcl_validate_topic_name+0xb0>
 80102e0:	2400      	movs	r4, #0
 80102e2:	e7b7      	b.n	8010254 <rcl_validate_topic_name+0xb0>
 80102e4:	2000      	movs	r0, #0
 80102e6:	6030      	str	r0, [r6, #0]
 80102e8:	e784      	b.n	80101f4 <rcl_validate_topic_name+0x50>
 80102ea:	2205      	movs	r2, #5
 80102ec:	6032      	str	r2, [r6, #0]
 80102ee:	2f00      	cmp	r7, #0
 80102f0:	d1d2      	bne.n	8010298 <rcl_validate_topic_name+0xf4>
 80102f2:	e7a3      	b.n	801023c <rcl_validate_topic_name+0x98>
 80102f4:	2c00      	cmp	r4, #0
 80102f6:	bf14      	ite	ne
 80102f8:	2308      	movne	r3, #8
 80102fa:	2303      	moveq	r3, #3
 80102fc:	6033      	str	r3, [r6, #0]
 80102fe:	2f00      	cmp	r7, #0
 8010300:	d19b      	bne.n	801023a <rcl_validate_topic_name+0x96>
 8010302:	e79b      	b.n	801023c <rcl_validate_topic_name+0x98>
 8010304:	2301      	movs	r3, #1
 8010306:	e00a      	b.n	801031e <rcl_validate_topic_name+0x17a>
 8010308:	2c01      	cmp	r4, #1
 801030a:	d013      	beq.n	8010334 <rcl_validate_topic_name+0x190>
 801030c:	4299      	cmp	r1, r3
 801030e:	f104 0401 	add.w	r4, r4, #1
 8010312:	f105 0501 	add.w	r5, r5, #1
 8010316:	f103 0201 	add.w	r2, r3, #1
 801031a:	d9e3      	bls.n	80102e4 <rcl_validate_topic_name+0x140>
 801031c:	4613      	mov	r3, r2
 801031e:	45a0      	cmp	r8, r4
 8010320:	d0f4      	beq.n	801030c <rcl_validate_topic_name+0x168>
 8010322:	782a      	ldrb	r2, [r5, #0]
 8010324:	2a2f      	cmp	r2, #47	; 0x2f
 8010326:	d1ef      	bne.n	8010308 <rcl_validate_topic_name+0x164>
 8010328:	786a      	ldrb	r2, [r5, #1]
 801032a:	f81c 2002 	ldrb.w	r2, [ip, r2]
 801032e:	0752      	lsls	r2, r2, #29
 8010330:	d5ec      	bpl.n	801030c <rcl_validate_topic_name+0x168>
 8010332:	e7ad      	b.n	8010290 <rcl_validate_topic_name+0xec>
 8010334:	2307      	movs	r3, #7
 8010336:	6033      	str	r3, [r6, #0]
 8010338:	2f00      	cmp	r7, #0
 801033a:	f43f af7f 	beq.w	801023c <rcl_validate_topic_name+0x98>
 801033e:	603c      	str	r4, [r7, #0]
 8010340:	2000      	movs	r0, #0
 8010342:	e757      	b.n	80101f4 <rcl_validate_topic_name+0x50>
 8010344:	08012925 	.word	0x08012925

08010348 <on_status>:
 8010348:	b082      	sub	sp, #8
 801034a:	b002      	add	sp, #8
 801034c:	4770      	bx	lr
 801034e:	bf00      	nop

08010350 <on_topic>:
 8010350:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010354:	4a22      	ldr	r2, [pc, #136]	; (80103e0 <on_topic+0x90>)
 8010356:	b094      	sub	sp, #80	; 0x50
 8010358:	6812      	ldr	r2, [r2, #0]
 801035a:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 801035c:	f8bd 606c 	ldrh.w	r6, [sp, #108]	; 0x6c
 8010360:	e9cd 3112 	strd	r3, r1, [sp, #72]	; 0x48
 8010364:	b3c2      	cbz	r2, 80103d8 <on_topic+0x88>
 8010366:	f8bd 104c 	ldrh.w	r1, [sp, #76]	; 0x4c
 801036a:	f89d 004e 	ldrb.w	r0, [sp, #78]	; 0x4e
 801036e:	e001      	b.n	8010374 <on_topic+0x24>
 8010370:	6852      	ldr	r2, [r2, #4]
 8010372:	b38a      	cbz	r2, 80103d8 <on_topic+0x88>
 8010374:	6894      	ldr	r4, [r2, #8]
 8010376:	8aa3      	ldrh	r3, [r4, #20]
 8010378:	428b      	cmp	r3, r1
 801037a:	d1f9      	bne.n	8010370 <on_topic+0x20>
 801037c:	7da3      	ldrb	r3, [r4, #22]
 801037e:	4283      	cmp	r3, r0
 8010380:	d1f6      	bne.n	8010370 <on_topic+0x20>
 8010382:	2248      	movs	r2, #72	; 0x48
 8010384:	f104 0130 	add.w	r1, r4, #48	; 0x30
 8010388:	4668      	mov	r0, sp
 801038a:	f000 fab5 	bl	80108f8 <memcpy>
 801038e:	f104 0328 	add.w	r3, r4, #40	; 0x28
 8010392:	cb0c      	ldmia	r3, {r2, r3}
 8010394:	4620      	mov	r0, r4
 8010396:	f7f8 f8db 	bl	8008550 <rmw_uxrce_get_static_input_buffer_for_entity>
 801039a:	4607      	mov	r7, r0
 801039c:	b1e0      	cbz	r0, 80103d8 <on_topic+0x88>
 801039e:	f8d0 8008 	ldr.w	r8, [r0, #8]
 80103a2:	4632      	mov	r2, r6
 80103a4:	4628      	mov	r0, r5
 80103a6:	f108 0110 	add.w	r1, r8, #16
 80103aa:	f7fe f843 	bl	800e434 <ucdr_deserialize_array_uint8_t>
 80103ae:	b930      	cbnz	r0, 80103be <on_topic+0x6e>
 80103b0:	480c      	ldr	r0, [pc, #48]	; (80103e4 <on_topic+0x94>)
 80103b2:	4639      	mov	r1, r7
 80103b4:	b014      	add	sp, #80	; 0x50
 80103b6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80103ba:	f7fd ba75 	b.w	800d8a8 <put_memory>
 80103be:	f8c8 4814 	str.w	r4, [r8, #2068]	; 0x814
 80103c2:	f8c8 6810 	str.w	r6, [r8, #2064]	; 0x810
 80103c6:	f7fd ff2b 	bl	800e220 <rmw_uros_epoch_nanos>
 80103ca:	f508 6202 	add.w	r2, r8, #2080	; 0x820
 80103ce:	2305      	movs	r3, #5
 80103d0:	e942 0102 	strd	r0, r1, [r2, #-8]
 80103d4:	f888 3820 	strb.w	r3, [r8, #2080]	; 0x820
 80103d8:	b014      	add	sp, #80	; 0x50
 80103da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80103de:	bf00      	nop
 80103e0:	2000dad4 	.word	0x2000dad4
 80103e4:	2000dac4 	.word	0x2000dac4

080103e8 <on_request>:
 80103e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80103ec:	4823      	ldr	r0, [pc, #140]	; (801047c <on_request+0x94>)
 80103ee:	b094      	sub	sp, #80	; 0x50
 80103f0:	6800      	ldr	r0, [r0, #0]
 80103f2:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 80103f4:	f8bd 606c 	ldrh.w	r6, [sp, #108]	; 0x6c
 80103f8:	9113      	str	r1, [sp, #76]	; 0x4c
 80103fa:	2800      	cmp	r0, #0
 80103fc:	d03b      	beq.n	8010476 <on_request+0x8e>
 80103fe:	461d      	mov	r5, r3
 8010400:	e001      	b.n	8010406 <on_request+0x1e>
 8010402:	6840      	ldr	r0, [r0, #4]
 8010404:	b3b8      	cbz	r0, 8010476 <on_request+0x8e>
 8010406:	6884      	ldr	r4, [r0, #8]
 8010408:	8b21      	ldrh	r1, [r4, #24]
 801040a:	4291      	cmp	r1, r2
 801040c:	d1f9      	bne.n	8010402 <on_request+0x1a>
 801040e:	2248      	movs	r2, #72	; 0x48
 8010410:	f104 0128 	add.w	r1, r4, #40	; 0x28
 8010414:	4668      	mov	r0, sp
 8010416:	f000 fa6f 	bl	80108f8 <memcpy>
 801041a:	f104 0320 	add.w	r3, r4, #32
 801041e:	cb0c      	ldmia	r3, {r2, r3}
 8010420:	4620      	mov	r0, r4
 8010422:	f7f8 f895 	bl	8008550 <rmw_uxrce_get_static_input_buffer_for_entity>
 8010426:	4680      	mov	r8, r0
 8010428:	b328      	cbz	r0, 8010476 <on_request+0x8e>
 801042a:	4638      	mov	r0, r7
 801042c:	f8d8 7008 	ldr.w	r7, [r8, #8]
 8010430:	4632      	mov	r2, r6
 8010432:	f107 0110 	add.w	r1, r7, #16
 8010436:	f7fd fffd 	bl	800e434 <ucdr_deserialize_array_uint8_t>
 801043a:	b930      	cbnz	r0, 801044a <on_request+0x62>
 801043c:	4810      	ldr	r0, [pc, #64]	; (8010480 <on_request+0x98>)
 801043e:	4641      	mov	r1, r8
 8010440:	b014      	add	sp, #80	; 0x50
 8010442:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010446:	f7fd ba2f 	b.w	800d8a8 <put_memory>
 801044a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801044c:	f607 0c28 	addw	ip, r7, #2088	; 0x828
 8010450:	f8c7 4814 	str.w	r4, [r7, #2068]	; 0x814
 8010454:	f8c7 6810 	str.w	r6, [r7, #2064]	; 0x810
 8010458:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801045c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8010460:	e88c 0003 	stmia.w	ip, {r0, r1}
 8010464:	f7fd fedc 	bl	800e220 <rmw_uros_epoch_nanos>
 8010468:	f507 6202 	add.w	r2, r7, #2080	; 0x820
 801046c:	2303      	movs	r3, #3
 801046e:	e942 0102 	strd	r0, r1, [r2, #-8]
 8010472:	f887 3820 	strb.w	r3, [r7, #2080]	; 0x820
 8010476:	b014      	add	sp, #80	; 0x50
 8010478:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801047c:	2000daa4 	.word	0x2000daa4
 8010480:	2000dac4 	.word	0x2000dac4

08010484 <on_reply>:
 8010484:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010488:	4821      	ldr	r0, [pc, #132]	; (8010510 <on_reply+0x8c>)
 801048a:	b094      	sub	sp, #80	; 0x50
 801048c:	6800      	ldr	r0, [r0, #0]
 801048e:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 8010490:	f8bd 606c 	ldrh.w	r6, [sp, #108]	; 0x6c
 8010494:	9113      	str	r1, [sp, #76]	; 0x4c
 8010496:	b3b8      	cbz	r0, 8010508 <on_reply+0x84>
 8010498:	461d      	mov	r5, r3
 801049a:	e001      	b.n	80104a0 <on_reply+0x1c>
 801049c:	6840      	ldr	r0, [r0, #4]
 801049e:	b398      	cbz	r0, 8010508 <on_reply+0x84>
 80104a0:	6884      	ldr	r4, [r0, #8]
 80104a2:	8b21      	ldrh	r1, [r4, #24]
 80104a4:	4291      	cmp	r1, r2
 80104a6:	d1f9      	bne.n	801049c <on_reply+0x18>
 80104a8:	2248      	movs	r2, #72	; 0x48
 80104aa:	f104 0128 	add.w	r1, r4, #40	; 0x28
 80104ae:	4668      	mov	r0, sp
 80104b0:	f000 fa22 	bl	80108f8 <memcpy>
 80104b4:	f104 0320 	add.w	r3, r4, #32
 80104b8:	cb0c      	ldmia	r3, {r2, r3}
 80104ba:	4620      	mov	r0, r4
 80104bc:	f7f8 f848 	bl	8008550 <rmw_uxrce_get_static_input_buffer_for_entity>
 80104c0:	4680      	mov	r8, r0
 80104c2:	b308      	cbz	r0, 8010508 <on_reply+0x84>
 80104c4:	4638      	mov	r0, r7
 80104c6:	f8d8 7008 	ldr.w	r7, [r8, #8]
 80104ca:	4632      	mov	r2, r6
 80104cc:	f107 0110 	add.w	r1, r7, #16
 80104d0:	f7fd ffb0 	bl	800e434 <ucdr_deserialize_array_uint8_t>
 80104d4:	b930      	cbnz	r0, 80104e4 <on_reply+0x60>
 80104d6:	480f      	ldr	r0, [pc, #60]	; (8010514 <on_reply+0x90>)
 80104d8:	4641      	mov	r1, r8
 80104da:	b014      	add	sp, #80	; 0x50
 80104dc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80104e0:	f7fd b9e2 	b.w	800d8a8 <put_memory>
 80104e4:	2200      	movs	r2, #0
 80104e6:	f8c7 282c 	str.w	r2, [r7, #2092]	; 0x82c
 80104ea:	f8c7 4814 	str.w	r4, [r7, #2068]	; 0x814
 80104ee:	f8c7 6810 	str.w	r6, [r7, #2064]	; 0x810
 80104f2:	f8c7 5828 	str.w	r5, [r7, #2088]	; 0x828
 80104f6:	f7fd fe93 	bl	800e220 <rmw_uros_epoch_nanos>
 80104fa:	f507 6202 	add.w	r2, r7, #2080	; 0x820
 80104fe:	2304      	movs	r3, #4
 8010500:	e942 0102 	strd	r0, r1, [r2, #-8]
 8010504:	f887 3820 	strb.w	r3, [r7, #2080]	; 0x820
 8010508:	b014      	add	sp, #80	; 0x50
 801050a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801050e:	bf00      	nop
 8010510:	200091b8 	.word	0x200091b8
 8010514:	2000dac4 	.word	0x2000dac4

08010518 <rmw_destroy_client>:
 8010518:	b570      	push	{r4, r5, r6, lr}
 801051a:	b128      	cbz	r0, 8010528 <rmw_destroy_client+0x10>
 801051c:	4604      	mov	r4, r0
 801051e:	6800      	ldr	r0, [r0, #0]
 8010520:	460d      	mov	r5, r1
 8010522:	f7f8 f8e5 	bl	80086f0 <is_uxrce_rmw_identifier_valid>
 8010526:	b910      	cbnz	r0, 801052e <rmw_destroy_client+0x16>
 8010528:	2401      	movs	r4, #1
 801052a:	4620      	mov	r0, r4
 801052c:	bd70      	pop	{r4, r5, r6, pc}
 801052e:	6863      	ldr	r3, [r4, #4]
 8010530:	2b00      	cmp	r3, #0
 8010532:	d0f9      	beq.n	8010528 <rmw_destroy_client+0x10>
 8010534:	2d00      	cmp	r5, #0
 8010536:	d0f7      	beq.n	8010528 <rmw_destroy_client+0x10>
 8010538:	6828      	ldr	r0, [r5, #0]
 801053a:	f7f8 f8d9 	bl	80086f0 <is_uxrce_rmw_identifier_valid>
 801053e:	2800      	cmp	r0, #0
 8010540:	d0f2      	beq.n	8010528 <rmw_destroy_client+0x10>
 8010542:	686e      	ldr	r6, [r5, #4]
 8010544:	2e00      	cmp	r6, #0
 8010546:	d0ef      	beq.n	8010528 <rmw_destroy_client+0x10>
 8010548:	6864      	ldr	r4, [r4, #4]
 801054a:	6932      	ldr	r2, [r6, #16]
 801054c:	6920      	ldr	r0, [r4, #16]
 801054e:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 8010552:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8010556:	6819      	ldr	r1, [r3, #0]
 8010558:	f7fe fe38 	bl	800f1cc <uxr_buffer_cancel_data>
 801055c:	4602      	mov	r2, r0
 801055e:	6920      	ldr	r0, [r4, #16]
 8010560:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 8010564:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 8010568:	f7f8 f842 	bl	80085f0 <run_xrce_session>
 801056c:	6920      	ldr	r0, [r4, #16]
 801056e:	6932      	ldr	r2, [r6, #16]
 8010570:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 8010574:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8010578:	6819      	ldr	r1, [r3, #0]
 801057a:	f7f9 f975 	bl	8009868 <uxr_buffer_delete_entity>
 801057e:	4602      	mov	r2, r0
 8010580:	6920      	ldr	r0, [r4, #16]
 8010582:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 8010586:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 801058a:	f7f8 f831 	bl	80085f0 <run_xrce_session>
 801058e:	2800      	cmp	r0, #0
 8010590:	4628      	mov	r0, r5
 8010592:	bf14      	ite	ne
 8010594:	2400      	movne	r4, #0
 8010596:	2402      	moveq	r4, #2
 8010598:	f7f7 ffb8 	bl	800850c <rmw_uxrce_fini_client_memory>
 801059c:	e7c5      	b.n	801052a <rmw_destroy_client+0x12>
 801059e:	bf00      	nop

080105a0 <rmw_create_guard_condition>:
 80105a0:	b538      	push	{r3, r4, r5, lr}
 80105a2:	4605      	mov	r5, r0
 80105a4:	4807      	ldr	r0, [pc, #28]	; (80105c4 <rmw_create_guard_condition+0x24>)
 80105a6:	f7fd f96f 	bl	800d888 <get_memory>
 80105aa:	b148      	cbz	r0, 80105c0 <rmw_create_guard_condition+0x20>
 80105ac:	6884      	ldr	r4, [r0, #8]
 80105ae:	2300      	movs	r3, #0
 80105b0:	7423      	strb	r3, [r4, #16]
 80105b2:	61e5      	str	r5, [r4, #28]
 80105b4:	f7fd f98c 	bl	800d8d0 <rmw_get_implementation_identifier>
 80105b8:	e9c4 0405 	strd	r0, r4, [r4, #20]
 80105bc:	f104 0014 	add.w	r0, r4, #20
 80105c0:	bd38      	pop	{r3, r4, r5, pc}
 80105c2:	bf00      	nop
 80105c4:	2000da64 	.word	0x2000da64

080105c8 <rmw_destroy_guard_condition>:
 80105c8:	b508      	push	{r3, lr}
 80105ca:	4b08      	ldr	r3, [pc, #32]	; (80105ec <rmw_destroy_guard_condition+0x24>)
 80105cc:	6819      	ldr	r1, [r3, #0]
 80105ce:	b911      	cbnz	r1, 80105d6 <rmw_destroy_guard_condition+0xe>
 80105d0:	e00a      	b.n	80105e8 <rmw_destroy_guard_condition+0x20>
 80105d2:	6849      	ldr	r1, [r1, #4]
 80105d4:	b141      	cbz	r1, 80105e8 <rmw_destroy_guard_condition+0x20>
 80105d6:	688b      	ldr	r3, [r1, #8]
 80105d8:	3314      	adds	r3, #20
 80105da:	4298      	cmp	r0, r3
 80105dc:	d1f9      	bne.n	80105d2 <rmw_destroy_guard_condition+0xa>
 80105de:	4803      	ldr	r0, [pc, #12]	; (80105ec <rmw_destroy_guard_condition+0x24>)
 80105e0:	f7fd f962 	bl	800d8a8 <put_memory>
 80105e4:	2000      	movs	r0, #0
 80105e6:	bd08      	pop	{r3, pc}
 80105e8:	2001      	movs	r0, #1
 80105ea:	bd08      	pop	{r3, pc}
 80105ec:	2000da64 	.word	0x2000da64

080105f0 <calloc>:
 80105f0:	4b02      	ldr	r3, [pc, #8]	; (80105fc <calloc+0xc>)
 80105f2:	460a      	mov	r2, r1
 80105f4:	4601      	mov	r1, r0
 80105f6:	6818      	ldr	r0, [r3, #0]
 80105f8:	f000 b994 	b.w	8010924 <_calloc_r>
 80105fc:	200000b4 	.word	0x200000b4

08010600 <__errno>:
 8010600:	4b01      	ldr	r3, [pc, #4]	; (8010608 <__errno+0x8>)
 8010602:	6818      	ldr	r0, [r3, #0]
 8010604:	4770      	bx	lr
 8010606:	bf00      	nop
 8010608:	200000b4 	.word	0x200000b4

0801060c <std>:
 801060c:	2300      	movs	r3, #0
 801060e:	b510      	push	{r4, lr}
 8010610:	4604      	mov	r4, r0
 8010612:	e9c0 3300 	strd	r3, r3, [r0]
 8010616:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801061a:	6083      	str	r3, [r0, #8]
 801061c:	8181      	strh	r1, [r0, #12]
 801061e:	6643      	str	r3, [r0, #100]	; 0x64
 8010620:	81c2      	strh	r2, [r0, #14]
 8010622:	6183      	str	r3, [r0, #24]
 8010624:	4619      	mov	r1, r3
 8010626:	2208      	movs	r2, #8
 8010628:	305c      	adds	r0, #92	; 0x5c
 801062a:	f000 f973 	bl	8010914 <memset>
 801062e:	4b05      	ldr	r3, [pc, #20]	; (8010644 <std+0x38>)
 8010630:	6263      	str	r3, [r4, #36]	; 0x24
 8010632:	4b05      	ldr	r3, [pc, #20]	; (8010648 <std+0x3c>)
 8010634:	62a3      	str	r3, [r4, #40]	; 0x28
 8010636:	4b05      	ldr	r3, [pc, #20]	; (801064c <std+0x40>)
 8010638:	62e3      	str	r3, [r4, #44]	; 0x2c
 801063a:	4b05      	ldr	r3, [pc, #20]	; (8010650 <std+0x44>)
 801063c:	6224      	str	r4, [r4, #32]
 801063e:	6323      	str	r3, [r4, #48]	; 0x30
 8010640:	bd10      	pop	{r4, pc}
 8010642:	bf00      	nop
 8010644:	08010d85 	.word	0x08010d85
 8010648:	08010da7 	.word	0x08010da7
 801064c:	08010ddf 	.word	0x08010ddf
 8010650:	08010e03 	.word	0x08010e03

08010654 <_cleanup_r>:
 8010654:	4901      	ldr	r1, [pc, #4]	; (801065c <_cleanup_r+0x8>)
 8010656:	f000 b8af 	b.w	80107b8 <_fwalk_reent>
 801065a:	bf00      	nop
 801065c:	08011199 	.word	0x08011199

08010660 <__sfmoreglue>:
 8010660:	b570      	push	{r4, r5, r6, lr}
 8010662:	2268      	movs	r2, #104	; 0x68
 8010664:	1e4d      	subs	r5, r1, #1
 8010666:	4355      	muls	r5, r2
 8010668:	460e      	mov	r6, r1
 801066a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801066e:	f000 f9db 	bl	8010a28 <_malloc_r>
 8010672:	4604      	mov	r4, r0
 8010674:	b140      	cbz	r0, 8010688 <__sfmoreglue+0x28>
 8010676:	2100      	movs	r1, #0
 8010678:	e9c0 1600 	strd	r1, r6, [r0]
 801067c:	300c      	adds	r0, #12
 801067e:	60a0      	str	r0, [r4, #8]
 8010680:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8010684:	f000 f946 	bl	8010914 <memset>
 8010688:	4620      	mov	r0, r4
 801068a:	bd70      	pop	{r4, r5, r6, pc}

0801068c <__sfp_lock_acquire>:
 801068c:	4801      	ldr	r0, [pc, #4]	; (8010694 <__sfp_lock_acquire+0x8>)
 801068e:	f000 b920 	b.w	80108d2 <__retarget_lock_acquire_recursive>
 8010692:	bf00      	nop
 8010694:	2000dc1a 	.word	0x2000dc1a

08010698 <__sfp_lock_release>:
 8010698:	4801      	ldr	r0, [pc, #4]	; (80106a0 <__sfp_lock_release+0x8>)
 801069a:	f000 b91b 	b.w	80108d4 <__retarget_lock_release_recursive>
 801069e:	bf00      	nop
 80106a0:	2000dc1a 	.word	0x2000dc1a

080106a4 <__sinit_lock_acquire>:
 80106a4:	4801      	ldr	r0, [pc, #4]	; (80106ac <__sinit_lock_acquire+0x8>)
 80106a6:	f000 b914 	b.w	80108d2 <__retarget_lock_acquire_recursive>
 80106aa:	bf00      	nop
 80106ac:	2000dc1b 	.word	0x2000dc1b

080106b0 <__sinit_lock_release>:
 80106b0:	4801      	ldr	r0, [pc, #4]	; (80106b8 <__sinit_lock_release+0x8>)
 80106b2:	f000 b90f 	b.w	80108d4 <__retarget_lock_release_recursive>
 80106b6:	bf00      	nop
 80106b8:	2000dc1b 	.word	0x2000dc1b

080106bc <__sinit>:
 80106bc:	b510      	push	{r4, lr}
 80106be:	4604      	mov	r4, r0
 80106c0:	f7ff fff0 	bl	80106a4 <__sinit_lock_acquire>
 80106c4:	69a3      	ldr	r3, [r4, #24]
 80106c6:	b11b      	cbz	r3, 80106d0 <__sinit+0x14>
 80106c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80106cc:	f7ff bff0 	b.w	80106b0 <__sinit_lock_release>
 80106d0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80106d4:	6523      	str	r3, [r4, #80]	; 0x50
 80106d6:	4b13      	ldr	r3, [pc, #76]	; (8010724 <__sinit+0x68>)
 80106d8:	4a13      	ldr	r2, [pc, #76]	; (8010728 <__sinit+0x6c>)
 80106da:	681b      	ldr	r3, [r3, #0]
 80106dc:	62a2      	str	r2, [r4, #40]	; 0x28
 80106de:	42a3      	cmp	r3, r4
 80106e0:	bf04      	itt	eq
 80106e2:	2301      	moveq	r3, #1
 80106e4:	61a3      	streq	r3, [r4, #24]
 80106e6:	4620      	mov	r0, r4
 80106e8:	f000 f820 	bl	801072c <__sfp>
 80106ec:	6060      	str	r0, [r4, #4]
 80106ee:	4620      	mov	r0, r4
 80106f0:	f000 f81c 	bl	801072c <__sfp>
 80106f4:	60a0      	str	r0, [r4, #8]
 80106f6:	4620      	mov	r0, r4
 80106f8:	f000 f818 	bl	801072c <__sfp>
 80106fc:	2200      	movs	r2, #0
 80106fe:	60e0      	str	r0, [r4, #12]
 8010700:	2104      	movs	r1, #4
 8010702:	6860      	ldr	r0, [r4, #4]
 8010704:	f7ff ff82 	bl	801060c <std>
 8010708:	68a0      	ldr	r0, [r4, #8]
 801070a:	2201      	movs	r2, #1
 801070c:	2109      	movs	r1, #9
 801070e:	f7ff ff7d 	bl	801060c <std>
 8010712:	68e0      	ldr	r0, [r4, #12]
 8010714:	2202      	movs	r2, #2
 8010716:	2112      	movs	r1, #18
 8010718:	f7ff ff78 	bl	801060c <std>
 801071c:	2301      	movs	r3, #1
 801071e:	61a3      	str	r3, [r4, #24]
 8010720:	e7d2      	b.n	80106c8 <__sinit+0xc>
 8010722:	bf00      	nop
 8010724:	08012a88 	.word	0x08012a88
 8010728:	08010655 	.word	0x08010655

0801072c <__sfp>:
 801072c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801072e:	4607      	mov	r7, r0
 8010730:	f7ff ffac 	bl	801068c <__sfp_lock_acquire>
 8010734:	4b1e      	ldr	r3, [pc, #120]	; (80107b0 <__sfp+0x84>)
 8010736:	681e      	ldr	r6, [r3, #0]
 8010738:	69b3      	ldr	r3, [r6, #24]
 801073a:	b913      	cbnz	r3, 8010742 <__sfp+0x16>
 801073c:	4630      	mov	r0, r6
 801073e:	f7ff ffbd 	bl	80106bc <__sinit>
 8010742:	3648      	adds	r6, #72	; 0x48
 8010744:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8010748:	3b01      	subs	r3, #1
 801074a:	d503      	bpl.n	8010754 <__sfp+0x28>
 801074c:	6833      	ldr	r3, [r6, #0]
 801074e:	b30b      	cbz	r3, 8010794 <__sfp+0x68>
 8010750:	6836      	ldr	r6, [r6, #0]
 8010752:	e7f7      	b.n	8010744 <__sfp+0x18>
 8010754:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8010758:	b9d5      	cbnz	r5, 8010790 <__sfp+0x64>
 801075a:	4b16      	ldr	r3, [pc, #88]	; (80107b4 <__sfp+0x88>)
 801075c:	60e3      	str	r3, [r4, #12]
 801075e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8010762:	6665      	str	r5, [r4, #100]	; 0x64
 8010764:	f000 f8b4 	bl	80108d0 <__retarget_lock_init_recursive>
 8010768:	f7ff ff96 	bl	8010698 <__sfp_lock_release>
 801076c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8010770:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8010774:	6025      	str	r5, [r4, #0]
 8010776:	61a5      	str	r5, [r4, #24]
 8010778:	2208      	movs	r2, #8
 801077a:	4629      	mov	r1, r5
 801077c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8010780:	f000 f8c8 	bl	8010914 <memset>
 8010784:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8010788:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801078c:	4620      	mov	r0, r4
 801078e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010790:	3468      	adds	r4, #104	; 0x68
 8010792:	e7d9      	b.n	8010748 <__sfp+0x1c>
 8010794:	2104      	movs	r1, #4
 8010796:	4638      	mov	r0, r7
 8010798:	f7ff ff62 	bl	8010660 <__sfmoreglue>
 801079c:	4604      	mov	r4, r0
 801079e:	6030      	str	r0, [r6, #0]
 80107a0:	2800      	cmp	r0, #0
 80107a2:	d1d5      	bne.n	8010750 <__sfp+0x24>
 80107a4:	f7ff ff78 	bl	8010698 <__sfp_lock_release>
 80107a8:	230c      	movs	r3, #12
 80107aa:	603b      	str	r3, [r7, #0]
 80107ac:	e7ee      	b.n	801078c <__sfp+0x60>
 80107ae:	bf00      	nop
 80107b0:	08012a88 	.word	0x08012a88
 80107b4:	ffff0001 	.word	0xffff0001

080107b8 <_fwalk_reent>:
 80107b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80107bc:	4606      	mov	r6, r0
 80107be:	4688      	mov	r8, r1
 80107c0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80107c4:	2700      	movs	r7, #0
 80107c6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80107ca:	f1b9 0901 	subs.w	r9, r9, #1
 80107ce:	d505      	bpl.n	80107dc <_fwalk_reent+0x24>
 80107d0:	6824      	ldr	r4, [r4, #0]
 80107d2:	2c00      	cmp	r4, #0
 80107d4:	d1f7      	bne.n	80107c6 <_fwalk_reent+0xe>
 80107d6:	4638      	mov	r0, r7
 80107d8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80107dc:	89ab      	ldrh	r3, [r5, #12]
 80107de:	2b01      	cmp	r3, #1
 80107e0:	d907      	bls.n	80107f2 <_fwalk_reent+0x3a>
 80107e2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80107e6:	3301      	adds	r3, #1
 80107e8:	d003      	beq.n	80107f2 <_fwalk_reent+0x3a>
 80107ea:	4629      	mov	r1, r5
 80107ec:	4630      	mov	r0, r6
 80107ee:	47c0      	blx	r8
 80107f0:	4307      	orrs	r7, r0
 80107f2:	3568      	adds	r5, #104	; 0x68
 80107f4:	e7e9      	b.n	80107ca <_fwalk_reent+0x12>
	...

080107f8 <getenv>:
 80107f8:	b507      	push	{r0, r1, r2, lr}
 80107fa:	4b04      	ldr	r3, [pc, #16]	; (801080c <getenv+0x14>)
 80107fc:	4601      	mov	r1, r0
 80107fe:	aa01      	add	r2, sp, #4
 8010800:	6818      	ldr	r0, [r3, #0]
 8010802:	f000 f805 	bl	8010810 <_findenv_r>
 8010806:	b003      	add	sp, #12
 8010808:	f85d fb04 	ldr.w	pc, [sp], #4
 801080c:	200000b4 	.word	0x200000b4

08010810 <_findenv_r>:
 8010810:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010814:	f8df a06c 	ldr.w	sl, [pc, #108]	; 8010884 <_findenv_r+0x74>
 8010818:	4607      	mov	r7, r0
 801081a:	4689      	mov	r9, r1
 801081c:	4616      	mov	r6, r2
 801081e:	f000 fc29 	bl	8011074 <__env_lock>
 8010822:	f8da 4000 	ldr.w	r4, [sl]
 8010826:	b134      	cbz	r4, 8010836 <_findenv_r+0x26>
 8010828:	464b      	mov	r3, r9
 801082a:	4698      	mov	r8, r3
 801082c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010830:	b13a      	cbz	r2, 8010842 <_findenv_r+0x32>
 8010832:	2a3d      	cmp	r2, #61	; 0x3d
 8010834:	d1f9      	bne.n	801082a <_findenv_r+0x1a>
 8010836:	4638      	mov	r0, r7
 8010838:	f000 fc22 	bl	8011080 <__env_unlock>
 801083c:	2000      	movs	r0, #0
 801083e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010842:	eba8 0809 	sub.w	r8, r8, r9
 8010846:	46a3      	mov	fp, r4
 8010848:	f854 0b04 	ldr.w	r0, [r4], #4
 801084c:	2800      	cmp	r0, #0
 801084e:	d0f2      	beq.n	8010836 <_findenv_r+0x26>
 8010850:	4642      	mov	r2, r8
 8010852:	4649      	mov	r1, r9
 8010854:	f000 faee 	bl	8010e34 <strncmp>
 8010858:	2800      	cmp	r0, #0
 801085a:	d1f4      	bne.n	8010846 <_findenv_r+0x36>
 801085c:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8010860:	eb03 0508 	add.w	r5, r3, r8
 8010864:	f813 3008 	ldrb.w	r3, [r3, r8]
 8010868:	2b3d      	cmp	r3, #61	; 0x3d
 801086a:	d1ec      	bne.n	8010846 <_findenv_r+0x36>
 801086c:	f8da 3000 	ldr.w	r3, [sl]
 8010870:	ebab 0303 	sub.w	r3, fp, r3
 8010874:	109b      	asrs	r3, r3, #2
 8010876:	4638      	mov	r0, r7
 8010878:	6033      	str	r3, [r6, #0]
 801087a:	f000 fc01 	bl	8011080 <__env_unlock>
 801087e:	1c68      	adds	r0, r5, #1
 8010880:	e7dd      	b.n	801083e <_findenv_r+0x2e>
 8010882:	bf00      	nop
 8010884:	20000000 	.word	0x20000000

08010888 <__libc_init_array>:
 8010888:	b570      	push	{r4, r5, r6, lr}
 801088a:	4d0d      	ldr	r5, [pc, #52]	; (80108c0 <__libc_init_array+0x38>)
 801088c:	4c0d      	ldr	r4, [pc, #52]	; (80108c4 <__libc_init_array+0x3c>)
 801088e:	1b64      	subs	r4, r4, r5
 8010890:	10a4      	asrs	r4, r4, #2
 8010892:	2600      	movs	r6, #0
 8010894:	42a6      	cmp	r6, r4
 8010896:	d109      	bne.n	80108ac <__libc_init_array+0x24>
 8010898:	4d0b      	ldr	r5, [pc, #44]	; (80108c8 <__libc_init_array+0x40>)
 801089a:	4c0c      	ldr	r4, [pc, #48]	; (80108cc <__libc_init_array+0x44>)
 801089c:	f001 fb26 	bl	8011eec <_init>
 80108a0:	1b64      	subs	r4, r4, r5
 80108a2:	10a4      	asrs	r4, r4, #2
 80108a4:	2600      	movs	r6, #0
 80108a6:	42a6      	cmp	r6, r4
 80108a8:	d105      	bne.n	80108b6 <__libc_init_array+0x2e>
 80108aa:	bd70      	pop	{r4, r5, r6, pc}
 80108ac:	f855 3b04 	ldr.w	r3, [r5], #4
 80108b0:	4798      	blx	r3
 80108b2:	3601      	adds	r6, #1
 80108b4:	e7ee      	b.n	8010894 <__libc_init_array+0xc>
 80108b6:	f855 3b04 	ldr.w	r3, [r5], #4
 80108ba:	4798      	blx	r3
 80108bc:	3601      	adds	r6, #1
 80108be:	e7f2      	b.n	80108a6 <__libc_init_array+0x1e>
 80108c0:	08012b78 	.word	0x08012b78
 80108c4:	08012b78 	.word	0x08012b78
 80108c8:	08012b78 	.word	0x08012b78
 80108cc:	08012b80 	.word	0x08012b80

080108d0 <__retarget_lock_init_recursive>:
 80108d0:	4770      	bx	lr

080108d2 <__retarget_lock_acquire_recursive>:
 80108d2:	4770      	bx	lr

080108d4 <__retarget_lock_release_recursive>:
 80108d4:	4770      	bx	lr
	...

080108d8 <malloc>:
 80108d8:	4b02      	ldr	r3, [pc, #8]	; (80108e4 <malloc+0xc>)
 80108da:	4601      	mov	r1, r0
 80108dc:	6818      	ldr	r0, [r3, #0]
 80108de:	f000 b8a3 	b.w	8010a28 <_malloc_r>
 80108e2:	bf00      	nop
 80108e4:	200000b4 	.word	0x200000b4

080108e8 <free>:
 80108e8:	4b02      	ldr	r3, [pc, #8]	; (80108f4 <free+0xc>)
 80108ea:	4601      	mov	r1, r0
 80108ec:	6818      	ldr	r0, [r3, #0]
 80108ee:	f000 b82f 	b.w	8010950 <_free_r>
 80108f2:	bf00      	nop
 80108f4:	200000b4 	.word	0x200000b4

080108f8 <memcpy>:
 80108f8:	440a      	add	r2, r1
 80108fa:	4291      	cmp	r1, r2
 80108fc:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8010900:	d100      	bne.n	8010904 <memcpy+0xc>
 8010902:	4770      	bx	lr
 8010904:	b510      	push	{r4, lr}
 8010906:	f811 4b01 	ldrb.w	r4, [r1], #1
 801090a:	f803 4f01 	strb.w	r4, [r3, #1]!
 801090e:	4291      	cmp	r1, r2
 8010910:	d1f9      	bne.n	8010906 <memcpy+0xe>
 8010912:	bd10      	pop	{r4, pc}

08010914 <memset>:
 8010914:	4402      	add	r2, r0
 8010916:	4603      	mov	r3, r0
 8010918:	4293      	cmp	r3, r2
 801091a:	d100      	bne.n	801091e <memset+0xa>
 801091c:	4770      	bx	lr
 801091e:	f803 1b01 	strb.w	r1, [r3], #1
 8010922:	e7f9      	b.n	8010918 <memset+0x4>

08010924 <_calloc_r>:
 8010924:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8010926:	fba1 2402 	umull	r2, r4, r1, r2
 801092a:	b94c      	cbnz	r4, 8010940 <_calloc_r+0x1c>
 801092c:	4611      	mov	r1, r2
 801092e:	9201      	str	r2, [sp, #4]
 8010930:	f000 f87a 	bl	8010a28 <_malloc_r>
 8010934:	9a01      	ldr	r2, [sp, #4]
 8010936:	4605      	mov	r5, r0
 8010938:	b930      	cbnz	r0, 8010948 <_calloc_r+0x24>
 801093a:	4628      	mov	r0, r5
 801093c:	b003      	add	sp, #12
 801093e:	bd30      	pop	{r4, r5, pc}
 8010940:	220c      	movs	r2, #12
 8010942:	6002      	str	r2, [r0, #0]
 8010944:	2500      	movs	r5, #0
 8010946:	e7f8      	b.n	801093a <_calloc_r+0x16>
 8010948:	4621      	mov	r1, r4
 801094a:	f7ff ffe3 	bl	8010914 <memset>
 801094e:	e7f4      	b.n	801093a <_calloc_r+0x16>

08010950 <_free_r>:
 8010950:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8010952:	2900      	cmp	r1, #0
 8010954:	d044      	beq.n	80109e0 <_free_r+0x90>
 8010956:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801095a:	9001      	str	r0, [sp, #4]
 801095c:	2b00      	cmp	r3, #0
 801095e:	f1a1 0404 	sub.w	r4, r1, #4
 8010962:	bfb8      	it	lt
 8010964:	18e4      	addlt	r4, r4, r3
 8010966:	f000 fc77 	bl	8011258 <__malloc_lock>
 801096a:	4a1e      	ldr	r2, [pc, #120]	; (80109e4 <_free_r+0x94>)
 801096c:	9801      	ldr	r0, [sp, #4]
 801096e:	6813      	ldr	r3, [r2, #0]
 8010970:	b933      	cbnz	r3, 8010980 <_free_r+0x30>
 8010972:	6063      	str	r3, [r4, #4]
 8010974:	6014      	str	r4, [r2, #0]
 8010976:	b003      	add	sp, #12
 8010978:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801097c:	f000 bc72 	b.w	8011264 <__malloc_unlock>
 8010980:	42a3      	cmp	r3, r4
 8010982:	d908      	bls.n	8010996 <_free_r+0x46>
 8010984:	6825      	ldr	r5, [r4, #0]
 8010986:	1961      	adds	r1, r4, r5
 8010988:	428b      	cmp	r3, r1
 801098a:	bf01      	itttt	eq
 801098c:	6819      	ldreq	r1, [r3, #0]
 801098e:	685b      	ldreq	r3, [r3, #4]
 8010990:	1949      	addeq	r1, r1, r5
 8010992:	6021      	streq	r1, [r4, #0]
 8010994:	e7ed      	b.n	8010972 <_free_r+0x22>
 8010996:	461a      	mov	r2, r3
 8010998:	685b      	ldr	r3, [r3, #4]
 801099a:	b10b      	cbz	r3, 80109a0 <_free_r+0x50>
 801099c:	42a3      	cmp	r3, r4
 801099e:	d9fa      	bls.n	8010996 <_free_r+0x46>
 80109a0:	6811      	ldr	r1, [r2, #0]
 80109a2:	1855      	adds	r5, r2, r1
 80109a4:	42a5      	cmp	r5, r4
 80109a6:	d10b      	bne.n	80109c0 <_free_r+0x70>
 80109a8:	6824      	ldr	r4, [r4, #0]
 80109aa:	4421      	add	r1, r4
 80109ac:	1854      	adds	r4, r2, r1
 80109ae:	42a3      	cmp	r3, r4
 80109b0:	6011      	str	r1, [r2, #0]
 80109b2:	d1e0      	bne.n	8010976 <_free_r+0x26>
 80109b4:	681c      	ldr	r4, [r3, #0]
 80109b6:	685b      	ldr	r3, [r3, #4]
 80109b8:	6053      	str	r3, [r2, #4]
 80109ba:	4421      	add	r1, r4
 80109bc:	6011      	str	r1, [r2, #0]
 80109be:	e7da      	b.n	8010976 <_free_r+0x26>
 80109c0:	d902      	bls.n	80109c8 <_free_r+0x78>
 80109c2:	230c      	movs	r3, #12
 80109c4:	6003      	str	r3, [r0, #0]
 80109c6:	e7d6      	b.n	8010976 <_free_r+0x26>
 80109c8:	6825      	ldr	r5, [r4, #0]
 80109ca:	1961      	adds	r1, r4, r5
 80109cc:	428b      	cmp	r3, r1
 80109ce:	bf04      	itt	eq
 80109d0:	6819      	ldreq	r1, [r3, #0]
 80109d2:	685b      	ldreq	r3, [r3, #4]
 80109d4:	6063      	str	r3, [r4, #4]
 80109d6:	bf04      	itt	eq
 80109d8:	1949      	addeq	r1, r1, r5
 80109da:	6021      	streq	r1, [r4, #0]
 80109dc:	6054      	str	r4, [r2, #4]
 80109de:	e7ca      	b.n	8010976 <_free_r+0x26>
 80109e0:	b003      	add	sp, #12
 80109e2:	bd30      	pop	{r4, r5, pc}
 80109e4:	2000dc1c 	.word	0x2000dc1c

080109e8 <sbrk_aligned>:
 80109e8:	b570      	push	{r4, r5, r6, lr}
 80109ea:	4e0e      	ldr	r6, [pc, #56]	; (8010a24 <sbrk_aligned+0x3c>)
 80109ec:	460c      	mov	r4, r1
 80109ee:	6831      	ldr	r1, [r6, #0]
 80109f0:	4605      	mov	r5, r0
 80109f2:	b911      	cbnz	r1, 80109fa <sbrk_aligned+0x12>
 80109f4:	f000 f982 	bl	8010cfc <_sbrk_r>
 80109f8:	6030      	str	r0, [r6, #0]
 80109fa:	4621      	mov	r1, r4
 80109fc:	4628      	mov	r0, r5
 80109fe:	f000 f97d 	bl	8010cfc <_sbrk_r>
 8010a02:	1c43      	adds	r3, r0, #1
 8010a04:	d00a      	beq.n	8010a1c <sbrk_aligned+0x34>
 8010a06:	1cc4      	adds	r4, r0, #3
 8010a08:	f024 0403 	bic.w	r4, r4, #3
 8010a0c:	42a0      	cmp	r0, r4
 8010a0e:	d007      	beq.n	8010a20 <sbrk_aligned+0x38>
 8010a10:	1a21      	subs	r1, r4, r0
 8010a12:	4628      	mov	r0, r5
 8010a14:	f000 f972 	bl	8010cfc <_sbrk_r>
 8010a18:	3001      	adds	r0, #1
 8010a1a:	d101      	bne.n	8010a20 <sbrk_aligned+0x38>
 8010a1c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8010a20:	4620      	mov	r0, r4
 8010a22:	bd70      	pop	{r4, r5, r6, pc}
 8010a24:	2000dc20 	.word	0x2000dc20

08010a28 <_malloc_r>:
 8010a28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010a2c:	1ccd      	adds	r5, r1, #3
 8010a2e:	f025 0503 	bic.w	r5, r5, #3
 8010a32:	3508      	adds	r5, #8
 8010a34:	2d0c      	cmp	r5, #12
 8010a36:	bf38      	it	cc
 8010a38:	250c      	movcc	r5, #12
 8010a3a:	2d00      	cmp	r5, #0
 8010a3c:	4607      	mov	r7, r0
 8010a3e:	db01      	blt.n	8010a44 <_malloc_r+0x1c>
 8010a40:	42a9      	cmp	r1, r5
 8010a42:	d905      	bls.n	8010a50 <_malloc_r+0x28>
 8010a44:	230c      	movs	r3, #12
 8010a46:	603b      	str	r3, [r7, #0]
 8010a48:	2600      	movs	r6, #0
 8010a4a:	4630      	mov	r0, r6
 8010a4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010a50:	4e2e      	ldr	r6, [pc, #184]	; (8010b0c <_malloc_r+0xe4>)
 8010a52:	f000 fc01 	bl	8011258 <__malloc_lock>
 8010a56:	6833      	ldr	r3, [r6, #0]
 8010a58:	461c      	mov	r4, r3
 8010a5a:	bb34      	cbnz	r4, 8010aaa <_malloc_r+0x82>
 8010a5c:	4629      	mov	r1, r5
 8010a5e:	4638      	mov	r0, r7
 8010a60:	f7ff ffc2 	bl	80109e8 <sbrk_aligned>
 8010a64:	1c43      	adds	r3, r0, #1
 8010a66:	4604      	mov	r4, r0
 8010a68:	d14d      	bne.n	8010b06 <_malloc_r+0xde>
 8010a6a:	6834      	ldr	r4, [r6, #0]
 8010a6c:	4626      	mov	r6, r4
 8010a6e:	2e00      	cmp	r6, #0
 8010a70:	d140      	bne.n	8010af4 <_malloc_r+0xcc>
 8010a72:	6823      	ldr	r3, [r4, #0]
 8010a74:	4631      	mov	r1, r6
 8010a76:	4638      	mov	r0, r7
 8010a78:	eb04 0803 	add.w	r8, r4, r3
 8010a7c:	f000 f93e 	bl	8010cfc <_sbrk_r>
 8010a80:	4580      	cmp	r8, r0
 8010a82:	d13a      	bne.n	8010afa <_malloc_r+0xd2>
 8010a84:	6821      	ldr	r1, [r4, #0]
 8010a86:	3503      	adds	r5, #3
 8010a88:	1a6d      	subs	r5, r5, r1
 8010a8a:	f025 0503 	bic.w	r5, r5, #3
 8010a8e:	3508      	adds	r5, #8
 8010a90:	2d0c      	cmp	r5, #12
 8010a92:	bf38      	it	cc
 8010a94:	250c      	movcc	r5, #12
 8010a96:	4629      	mov	r1, r5
 8010a98:	4638      	mov	r0, r7
 8010a9a:	f7ff ffa5 	bl	80109e8 <sbrk_aligned>
 8010a9e:	3001      	adds	r0, #1
 8010aa0:	d02b      	beq.n	8010afa <_malloc_r+0xd2>
 8010aa2:	6823      	ldr	r3, [r4, #0]
 8010aa4:	442b      	add	r3, r5
 8010aa6:	6023      	str	r3, [r4, #0]
 8010aa8:	e00e      	b.n	8010ac8 <_malloc_r+0xa0>
 8010aaa:	6822      	ldr	r2, [r4, #0]
 8010aac:	1b52      	subs	r2, r2, r5
 8010aae:	d41e      	bmi.n	8010aee <_malloc_r+0xc6>
 8010ab0:	2a0b      	cmp	r2, #11
 8010ab2:	d916      	bls.n	8010ae2 <_malloc_r+0xba>
 8010ab4:	1961      	adds	r1, r4, r5
 8010ab6:	42a3      	cmp	r3, r4
 8010ab8:	6025      	str	r5, [r4, #0]
 8010aba:	bf18      	it	ne
 8010abc:	6059      	strne	r1, [r3, #4]
 8010abe:	6863      	ldr	r3, [r4, #4]
 8010ac0:	bf08      	it	eq
 8010ac2:	6031      	streq	r1, [r6, #0]
 8010ac4:	5162      	str	r2, [r4, r5]
 8010ac6:	604b      	str	r3, [r1, #4]
 8010ac8:	4638      	mov	r0, r7
 8010aca:	f104 060b 	add.w	r6, r4, #11
 8010ace:	f000 fbc9 	bl	8011264 <__malloc_unlock>
 8010ad2:	f026 0607 	bic.w	r6, r6, #7
 8010ad6:	1d23      	adds	r3, r4, #4
 8010ad8:	1af2      	subs	r2, r6, r3
 8010ada:	d0b6      	beq.n	8010a4a <_malloc_r+0x22>
 8010adc:	1b9b      	subs	r3, r3, r6
 8010ade:	50a3      	str	r3, [r4, r2]
 8010ae0:	e7b3      	b.n	8010a4a <_malloc_r+0x22>
 8010ae2:	6862      	ldr	r2, [r4, #4]
 8010ae4:	42a3      	cmp	r3, r4
 8010ae6:	bf0c      	ite	eq
 8010ae8:	6032      	streq	r2, [r6, #0]
 8010aea:	605a      	strne	r2, [r3, #4]
 8010aec:	e7ec      	b.n	8010ac8 <_malloc_r+0xa0>
 8010aee:	4623      	mov	r3, r4
 8010af0:	6864      	ldr	r4, [r4, #4]
 8010af2:	e7b2      	b.n	8010a5a <_malloc_r+0x32>
 8010af4:	4634      	mov	r4, r6
 8010af6:	6876      	ldr	r6, [r6, #4]
 8010af8:	e7b9      	b.n	8010a6e <_malloc_r+0x46>
 8010afa:	230c      	movs	r3, #12
 8010afc:	603b      	str	r3, [r7, #0]
 8010afe:	4638      	mov	r0, r7
 8010b00:	f000 fbb0 	bl	8011264 <__malloc_unlock>
 8010b04:	e7a1      	b.n	8010a4a <_malloc_r+0x22>
 8010b06:	6025      	str	r5, [r4, #0]
 8010b08:	e7de      	b.n	8010ac8 <_malloc_r+0xa0>
 8010b0a:	bf00      	nop
 8010b0c:	2000dc1c 	.word	0x2000dc1c

08010b10 <iprintf>:
 8010b10:	b40f      	push	{r0, r1, r2, r3}
 8010b12:	4b0a      	ldr	r3, [pc, #40]	; (8010b3c <iprintf+0x2c>)
 8010b14:	b513      	push	{r0, r1, r4, lr}
 8010b16:	681c      	ldr	r4, [r3, #0]
 8010b18:	b124      	cbz	r4, 8010b24 <iprintf+0x14>
 8010b1a:	69a3      	ldr	r3, [r4, #24]
 8010b1c:	b913      	cbnz	r3, 8010b24 <iprintf+0x14>
 8010b1e:	4620      	mov	r0, r4
 8010b20:	f7ff fdcc 	bl	80106bc <__sinit>
 8010b24:	ab05      	add	r3, sp, #20
 8010b26:	9a04      	ldr	r2, [sp, #16]
 8010b28:	68a1      	ldr	r1, [r4, #8]
 8010b2a:	9301      	str	r3, [sp, #4]
 8010b2c:	4620      	mov	r0, r4
 8010b2e:	f000 fd53 	bl	80115d8 <_vfiprintf_r>
 8010b32:	b002      	add	sp, #8
 8010b34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010b38:	b004      	add	sp, #16
 8010b3a:	4770      	bx	lr
 8010b3c:	200000b4 	.word	0x200000b4

08010b40 <srand>:
 8010b40:	b538      	push	{r3, r4, r5, lr}
 8010b42:	4b10      	ldr	r3, [pc, #64]	; (8010b84 <srand+0x44>)
 8010b44:	681d      	ldr	r5, [r3, #0]
 8010b46:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8010b48:	4604      	mov	r4, r0
 8010b4a:	b9b3      	cbnz	r3, 8010b7a <srand+0x3a>
 8010b4c:	2018      	movs	r0, #24
 8010b4e:	f7ff fec3 	bl	80108d8 <malloc>
 8010b52:	4602      	mov	r2, r0
 8010b54:	63a8      	str	r0, [r5, #56]	; 0x38
 8010b56:	b920      	cbnz	r0, 8010b62 <srand+0x22>
 8010b58:	4b0b      	ldr	r3, [pc, #44]	; (8010b88 <srand+0x48>)
 8010b5a:	480c      	ldr	r0, [pc, #48]	; (8010b8c <srand+0x4c>)
 8010b5c:	2142      	movs	r1, #66	; 0x42
 8010b5e:	f000 fa5b 	bl	8011018 <__assert_func>
 8010b62:	490b      	ldr	r1, [pc, #44]	; (8010b90 <srand+0x50>)
 8010b64:	4b0b      	ldr	r3, [pc, #44]	; (8010b94 <srand+0x54>)
 8010b66:	e9c0 1300 	strd	r1, r3, [r0]
 8010b6a:	4b0b      	ldr	r3, [pc, #44]	; (8010b98 <srand+0x58>)
 8010b6c:	6083      	str	r3, [r0, #8]
 8010b6e:	230b      	movs	r3, #11
 8010b70:	8183      	strh	r3, [r0, #12]
 8010b72:	2100      	movs	r1, #0
 8010b74:	2001      	movs	r0, #1
 8010b76:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8010b7a:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8010b7c:	2200      	movs	r2, #0
 8010b7e:	611c      	str	r4, [r3, #16]
 8010b80:	615a      	str	r2, [r3, #20]
 8010b82:	bd38      	pop	{r3, r4, r5, pc}
 8010b84:	200000b4 	.word	0x200000b4
 8010b88:	08012a8c 	.word	0x08012a8c
 8010b8c:	08012aa3 	.word	0x08012aa3
 8010b90:	abcd330e 	.word	0xabcd330e
 8010b94:	e66d1234 	.word	0xe66d1234
 8010b98:	0005deec 	.word	0x0005deec

08010b9c <rand>:
 8010b9c:	4b16      	ldr	r3, [pc, #88]	; (8010bf8 <rand+0x5c>)
 8010b9e:	b510      	push	{r4, lr}
 8010ba0:	681c      	ldr	r4, [r3, #0]
 8010ba2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8010ba4:	b9b3      	cbnz	r3, 8010bd4 <rand+0x38>
 8010ba6:	2018      	movs	r0, #24
 8010ba8:	f7ff fe96 	bl	80108d8 <malloc>
 8010bac:	63a0      	str	r0, [r4, #56]	; 0x38
 8010bae:	b928      	cbnz	r0, 8010bbc <rand+0x20>
 8010bb0:	4602      	mov	r2, r0
 8010bb2:	4b12      	ldr	r3, [pc, #72]	; (8010bfc <rand+0x60>)
 8010bb4:	4812      	ldr	r0, [pc, #72]	; (8010c00 <rand+0x64>)
 8010bb6:	214e      	movs	r1, #78	; 0x4e
 8010bb8:	f000 fa2e 	bl	8011018 <__assert_func>
 8010bbc:	4a11      	ldr	r2, [pc, #68]	; (8010c04 <rand+0x68>)
 8010bbe:	4b12      	ldr	r3, [pc, #72]	; (8010c08 <rand+0x6c>)
 8010bc0:	e9c0 2300 	strd	r2, r3, [r0]
 8010bc4:	4b11      	ldr	r3, [pc, #68]	; (8010c0c <rand+0x70>)
 8010bc6:	6083      	str	r3, [r0, #8]
 8010bc8:	230b      	movs	r3, #11
 8010bca:	8183      	strh	r3, [r0, #12]
 8010bcc:	2201      	movs	r2, #1
 8010bce:	2300      	movs	r3, #0
 8010bd0:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8010bd4:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 8010bd6:	4a0e      	ldr	r2, [pc, #56]	; (8010c10 <rand+0x74>)
 8010bd8:	6920      	ldr	r0, [r4, #16]
 8010bda:	6963      	ldr	r3, [r4, #20]
 8010bdc:	490d      	ldr	r1, [pc, #52]	; (8010c14 <rand+0x78>)
 8010bde:	4342      	muls	r2, r0
 8010be0:	fb01 2203 	mla	r2, r1, r3, r2
 8010be4:	fba0 0101 	umull	r0, r1, r0, r1
 8010be8:	1c43      	adds	r3, r0, #1
 8010bea:	eb42 0001 	adc.w	r0, r2, r1
 8010bee:	e9c4 3004 	strd	r3, r0, [r4, #16]
 8010bf2:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8010bf6:	bd10      	pop	{r4, pc}
 8010bf8:	200000b4 	.word	0x200000b4
 8010bfc:	08012a8c 	.word	0x08012a8c
 8010c00:	08012aa3 	.word	0x08012aa3
 8010c04:	abcd330e 	.word	0xabcd330e
 8010c08:	e66d1234 	.word	0xe66d1234
 8010c0c:	0005deec 	.word	0x0005deec
 8010c10:	5851f42d 	.word	0x5851f42d
 8010c14:	4c957f2d 	.word	0x4c957f2d

08010c18 <realloc>:
 8010c18:	4b02      	ldr	r3, [pc, #8]	; (8010c24 <realloc+0xc>)
 8010c1a:	460a      	mov	r2, r1
 8010c1c:	4601      	mov	r1, r0
 8010c1e:	6818      	ldr	r0, [r3, #0]
 8010c20:	f000 bb26 	b.w	8011270 <_realloc_r>
 8010c24:	200000b4 	.word	0x200000b4

08010c28 <cleanup_glue>:
 8010c28:	b538      	push	{r3, r4, r5, lr}
 8010c2a:	460c      	mov	r4, r1
 8010c2c:	6809      	ldr	r1, [r1, #0]
 8010c2e:	4605      	mov	r5, r0
 8010c30:	b109      	cbz	r1, 8010c36 <cleanup_glue+0xe>
 8010c32:	f7ff fff9 	bl	8010c28 <cleanup_glue>
 8010c36:	4621      	mov	r1, r4
 8010c38:	4628      	mov	r0, r5
 8010c3a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010c3e:	f7ff be87 	b.w	8010950 <_free_r>
	...

08010c44 <_reclaim_reent>:
 8010c44:	4b2c      	ldr	r3, [pc, #176]	; (8010cf8 <_reclaim_reent+0xb4>)
 8010c46:	681b      	ldr	r3, [r3, #0]
 8010c48:	4283      	cmp	r3, r0
 8010c4a:	b570      	push	{r4, r5, r6, lr}
 8010c4c:	4604      	mov	r4, r0
 8010c4e:	d051      	beq.n	8010cf4 <_reclaim_reent+0xb0>
 8010c50:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8010c52:	b143      	cbz	r3, 8010c66 <_reclaim_reent+0x22>
 8010c54:	68db      	ldr	r3, [r3, #12]
 8010c56:	2b00      	cmp	r3, #0
 8010c58:	d14a      	bne.n	8010cf0 <_reclaim_reent+0xac>
 8010c5a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010c5c:	6819      	ldr	r1, [r3, #0]
 8010c5e:	b111      	cbz	r1, 8010c66 <_reclaim_reent+0x22>
 8010c60:	4620      	mov	r0, r4
 8010c62:	f7ff fe75 	bl	8010950 <_free_r>
 8010c66:	6961      	ldr	r1, [r4, #20]
 8010c68:	b111      	cbz	r1, 8010c70 <_reclaim_reent+0x2c>
 8010c6a:	4620      	mov	r0, r4
 8010c6c:	f7ff fe70 	bl	8010950 <_free_r>
 8010c70:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8010c72:	b111      	cbz	r1, 8010c7a <_reclaim_reent+0x36>
 8010c74:	4620      	mov	r0, r4
 8010c76:	f7ff fe6b 	bl	8010950 <_free_r>
 8010c7a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8010c7c:	b111      	cbz	r1, 8010c84 <_reclaim_reent+0x40>
 8010c7e:	4620      	mov	r0, r4
 8010c80:	f7ff fe66 	bl	8010950 <_free_r>
 8010c84:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8010c86:	b111      	cbz	r1, 8010c8e <_reclaim_reent+0x4a>
 8010c88:	4620      	mov	r0, r4
 8010c8a:	f7ff fe61 	bl	8010950 <_free_r>
 8010c8e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8010c90:	b111      	cbz	r1, 8010c98 <_reclaim_reent+0x54>
 8010c92:	4620      	mov	r0, r4
 8010c94:	f7ff fe5c 	bl	8010950 <_free_r>
 8010c98:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8010c9a:	b111      	cbz	r1, 8010ca2 <_reclaim_reent+0x5e>
 8010c9c:	4620      	mov	r0, r4
 8010c9e:	f7ff fe57 	bl	8010950 <_free_r>
 8010ca2:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8010ca4:	b111      	cbz	r1, 8010cac <_reclaim_reent+0x68>
 8010ca6:	4620      	mov	r0, r4
 8010ca8:	f7ff fe52 	bl	8010950 <_free_r>
 8010cac:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8010cae:	b111      	cbz	r1, 8010cb6 <_reclaim_reent+0x72>
 8010cb0:	4620      	mov	r0, r4
 8010cb2:	f7ff fe4d 	bl	8010950 <_free_r>
 8010cb6:	69a3      	ldr	r3, [r4, #24]
 8010cb8:	b1e3      	cbz	r3, 8010cf4 <_reclaim_reent+0xb0>
 8010cba:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8010cbc:	4620      	mov	r0, r4
 8010cbe:	4798      	blx	r3
 8010cc0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8010cc2:	b1b9      	cbz	r1, 8010cf4 <_reclaim_reent+0xb0>
 8010cc4:	4620      	mov	r0, r4
 8010cc6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8010cca:	f7ff bfad 	b.w	8010c28 <cleanup_glue>
 8010cce:	5949      	ldr	r1, [r1, r5]
 8010cd0:	b941      	cbnz	r1, 8010ce4 <_reclaim_reent+0xa0>
 8010cd2:	3504      	adds	r5, #4
 8010cd4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010cd6:	2d80      	cmp	r5, #128	; 0x80
 8010cd8:	68d9      	ldr	r1, [r3, #12]
 8010cda:	d1f8      	bne.n	8010cce <_reclaim_reent+0x8a>
 8010cdc:	4620      	mov	r0, r4
 8010cde:	f7ff fe37 	bl	8010950 <_free_r>
 8010ce2:	e7ba      	b.n	8010c5a <_reclaim_reent+0x16>
 8010ce4:	680e      	ldr	r6, [r1, #0]
 8010ce6:	4620      	mov	r0, r4
 8010ce8:	f7ff fe32 	bl	8010950 <_free_r>
 8010cec:	4631      	mov	r1, r6
 8010cee:	e7ef      	b.n	8010cd0 <_reclaim_reent+0x8c>
 8010cf0:	2500      	movs	r5, #0
 8010cf2:	e7ef      	b.n	8010cd4 <_reclaim_reent+0x90>
 8010cf4:	bd70      	pop	{r4, r5, r6, pc}
 8010cf6:	bf00      	nop
 8010cf8:	200000b4 	.word	0x200000b4

08010cfc <_sbrk_r>:
 8010cfc:	b538      	push	{r3, r4, r5, lr}
 8010cfe:	4d06      	ldr	r5, [pc, #24]	; (8010d18 <_sbrk_r+0x1c>)
 8010d00:	2300      	movs	r3, #0
 8010d02:	4604      	mov	r4, r0
 8010d04:	4608      	mov	r0, r1
 8010d06:	602b      	str	r3, [r5, #0]
 8010d08:	f7f0 fdf8 	bl	80018fc <_sbrk>
 8010d0c:	1c43      	adds	r3, r0, #1
 8010d0e:	d102      	bne.n	8010d16 <_sbrk_r+0x1a>
 8010d10:	682b      	ldr	r3, [r5, #0]
 8010d12:	b103      	cbz	r3, 8010d16 <_sbrk_r+0x1a>
 8010d14:	6023      	str	r3, [r4, #0]
 8010d16:	bd38      	pop	{r3, r4, r5, pc}
 8010d18:	2000dc24 	.word	0x2000dc24

08010d1c <sniprintf>:
 8010d1c:	b40c      	push	{r2, r3}
 8010d1e:	b530      	push	{r4, r5, lr}
 8010d20:	4b17      	ldr	r3, [pc, #92]	; (8010d80 <sniprintf+0x64>)
 8010d22:	1e0c      	subs	r4, r1, #0
 8010d24:	681d      	ldr	r5, [r3, #0]
 8010d26:	b09d      	sub	sp, #116	; 0x74
 8010d28:	da08      	bge.n	8010d3c <sniprintf+0x20>
 8010d2a:	238b      	movs	r3, #139	; 0x8b
 8010d2c:	602b      	str	r3, [r5, #0]
 8010d2e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010d32:	b01d      	add	sp, #116	; 0x74
 8010d34:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8010d38:	b002      	add	sp, #8
 8010d3a:	4770      	bx	lr
 8010d3c:	f44f 7302 	mov.w	r3, #520	; 0x208
 8010d40:	f8ad 3014 	strh.w	r3, [sp, #20]
 8010d44:	bf14      	ite	ne
 8010d46:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 8010d4a:	4623      	moveq	r3, r4
 8010d4c:	9304      	str	r3, [sp, #16]
 8010d4e:	9307      	str	r3, [sp, #28]
 8010d50:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8010d54:	9002      	str	r0, [sp, #8]
 8010d56:	9006      	str	r0, [sp, #24]
 8010d58:	f8ad 3016 	strh.w	r3, [sp, #22]
 8010d5c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8010d5e:	ab21      	add	r3, sp, #132	; 0x84
 8010d60:	a902      	add	r1, sp, #8
 8010d62:	4628      	mov	r0, r5
 8010d64:	9301      	str	r3, [sp, #4]
 8010d66:	f000 fb0d 	bl	8011384 <_svfiprintf_r>
 8010d6a:	1c43      	adds	r3, r0, #1
 8010d6c:	bfbc      	itt	lt
 8010d6e:	238b      	movlt	r3, #139	; 0x8b
 8010d70:	602b      	strlt	r3, [r5, #0]
 8010d72:	2c00      	cmp	r4, #0
 8010d74:	d0dd      	beq.n	8010d32 <sniprintf+0x16>
 8010d76:	9b02      	ldr	r3, [sp, #8]
 8010d78:	2200      	movs	r2, #0
 8010d7a:	701a      	strb	r2, [r3, #0]
 8010d7c:	e7d9      	b.n	8010d32 <sniprintf+0x16>
 8010d7e:	bf00      	nop
 8010d80:	200000b4 	.word	0x200000b4

08010d84 <__sread>:
 8010d84:	b510      	push	{r4, lr}
 8010d86:	460c      	mov	r4, r1
 8010d88:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010d8c:	f000 fee8 	bl	8011b60 <_read_r>
 8010d90:	2800      	cmp	r0, #0
 8010d92:	bfab      	itete	ge
 8010d94:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8010d96:	89a3      	ldrhlt	r3, [r4, #12]
 8010d98:	181b      	addge	r3, r3, r0
 8010d9a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8010d9e:	bfac      	ite	ge
 8010da0:	6563      	strge	r3, [r4, #84]	; 0x54
 8010da2:	81a3      	strhlt	r3, [r4, #12]
 8010da4:	bd10      	pop	{r4, pc}

08010da6 <__swrite>:
 8010da6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010daa:	461f      	mov	r7, r3
 8010dac:	898b      	ldrh	r3, [r1, #12]
 8010dae:	05db      	lsls	r3, r3, #23
 8010db0:	4605      	mov	r5, r0
 8010db2:	460c      	mov	r4, r1
 8010db4:	4616      	mov	r6, r2
 8010db6:	d505      	bpl.n	8010dc4 <__swrite+0x1e>
 8010db8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010dbc:	2302      	movs	r3, #2
 8010dbe:	2200      	movs	r2, #0
 8010dc0:	f000 fa38 	bl	8011234 <_lseek_r>
 8010dc4:	89a3      	ldrh	r3, [r4, #12]
 8010dc6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010dca:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8010dce:	81a3      	strh	r3, [r4, #12]
 8010dd0:	4632      	mov	r2, r6
 8010dd2:	463b      	mov	r3, r7
 8010dd4:	4628      	mov	r0, r5
 8010dd6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010dda:	f000 b90b 	b.w	8010ff4 <_write_r>

08010dde <__sseek>:
 8010dde:	b510      	push	{r4, lr}
 8010de0:	460c      	mov	r4, r1
 8010de2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010de6:	f000 fa25 	bl	8011234 <_lseek_r>
 8010dea:	1c43      	adds	r3, r0, #1
 8010dec:	89a3      	ldrh	r3, [r4, #12]
 8010dee:	bf15      	itete	ne
 8010df0:	6560      	strne	r0, [r4, #84]	; 0x54
 8010df2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8010df6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8010dfa:	81a3      	strheq	r3, [r4, #12]
 8010dfc:	bf18      	it	ne
 8010dfe:	81a3      	strhne	r3, [r4, #12]
 8010e00:	bd10      	pop	{r4, pc}

08010e02 <__sclose>:
 8010e02:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010e06:	f000 b925 	b.w	8011054 <_close_r>

08010e0a <strchr>:
 8010e0a:	b2c9      	uxtb	r1, r1
 8010e0c:	4603      	mov	r3, r0
 8010e0e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010e12:	b11a      	cbz	r2, 8010e1c <strchr+0x12>
 8010e14:	428a      	cmp	r2, r1
 8010e16:	d1f9      	bne.n	8010e0c <strchr+0x2>
 8010e18:	4618      	mov	r0, r3
 8010e1a:	4770      	bx	lr
 8010e1c:	2900      	cmp	r1, #0
 8010e1e:	bf18      	it	ne
 8010e20:	2300      	movne	r3, #0
 8010e22:	e7f9      	b.n	8010e18 <strchr+0xe>

08010e24 <strcpy>:
 8010e24:	4603      	mov	r3, r0
 8010e26:	f811 2b01 	ldrb.w	r2, [r1], #1
 8010e2a:	f803 2b01 	strb.w	r2, [r3], #1
 8010e2e:	2a00      	cmp	r2, #0
 8010e30:	d1f9      	bne.n	8010e26 <strcpy+0x2>
 8010e32:	4770      	bx	lr

08010e34 <strncmp>:
 8010e34:	b510      	push	{r4, lr}
 8010e36:	b17a      	cbz	r2, 8010e58 <strncmp+0x24>
 8010e38:	4603      	mov	r3, r0
 8010e3a:	3901      	subs	r1, #1
 8010e3c:	1884      	adds	r4, r0, r2
 8010e3e:	f813 0b01 	ldrb.w	r0, [r3], #1
 8010e42:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8010e46:	4290      	cmp	r0, r2
 8010e48:	d101      	bne.n	8010e4e <strncmp+0x1a>
 8010e4a:	42a3      	cmp	r3, r4
 8010e4c:	d101      	bne.n	8010e52 <strncmp+0x1e>
 8010e4e:	1a80      	subs	r0, r0, r2
 8010e50:	bd10      	pop	{r4, pc}
 8010e52:	2800      	cmp	r0, #0
 8010e54:	d1f3      	bne.n	8010e3e <strncmp+0xa>
 8010e56:	e7fa      	b.n	8010e4e <strncmp+0x1a>
 8010e58:	4610      	mov	r0, r2
 8010e5a:	e7f9      	b.n	8010e50 <strncmp+0x1c>

08010e5c <strstr>:
 8010e5c:	780a      	ldrb	r2, [r1, #0]
 8010e5e:	b570      	push	{r4, r5, r6, lr}
 8010e60:	b96a      	cbnz	r2, 8010e7e <strstr+0x22>
 8010e62:	bd70      	pop	{r4, r5, r6, pc}
 8010e64:	429a      	cmp	r2, r3
 8010e66:	d109      	bne.n	8010e7c <strstr+0x20>
 8010e68:	460c      	mov	r4, r1
 8010e6a:	4605      	mov	r5, r0
 8010e6c:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8010e70:	2b00      	cmp	r3, #0
 8010e72:	d0f6      	beq.n	8010e62 <strstr+0x6>
 8010e74:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8010e78:	429e      	cmp	r6, r3
 8010e7a:	d0f7      	beq.n	8010e6c <strstr+0x10>
 8010e7c:	3001      	adds	r0, #1
 8010e7e:	7803      	ldrb	r3, [r0, #0]
 8010e80:	2b00      	cmp	r3, #0
 8010e82:	d1ef      	bne.n	8010e64 <strstr+0x8>
 8010e84:	4618      	mov	r0, r3
 8010e86:	e7ec      	b.n	8010e62 <strstr+0x6>

08010e88 <_strtoul_l.constprop.0>:
 8010e88:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010e8c:	4f36      	ldr	r7, [pc, #216]	; (8010f68 <_strtoul_l.constprop.0+0xe0>)
 8010e8e:	4686      	mov	lr, r0
 8010e90:	460d      	mov	r5, r1
 8010e92:	4628      	mov	r0, r5
 8010e94:	f815 4b01 	ldrb.w	r4, [r5], #1
 8010e98:	5de6      	ldrb	r6, [r4, r7]
 8010e9a:	f016 0608 	ands.w	r6, r6, #8
 8010e9e:	d1f8      	bne.n	8010e92 <_strtoul_l.constprop.0+0xa>
 8010ea0:	2c2d      	cmp	r4, #45	; 0x2d
 8010ea2:	d12f      	bne.n	8010f04 <_strtoul_l.constprop.0+0x7c>
 8010ea4:	782c      	ldrb	r4, [r5, #0]
 8010ea6:	2601      	movs	r6, #1
 8010ea8:	1c85      	adds	r5, r0, #2
 8010eaa:	2b00      	cmp	r3, #0
 8010eac:	d057      	beq.n	8010f5e <_strtoul_l.constprop.0+0xd6>
 8010eae:	2b10      	cmp	r3, #16
 8010eb0:	d109      	bne.n	8010ec6 <_strtoul_l.constprop.0+0x3e>
 8010eb2:	2c30      	cmp	r4, #48	; 0x30
 8010eb4:	d107      	bne.n	8010ec6 <_strtoul_l.constprop.0+0x3e>
 8010eb6:	7828      	ldrb	r0, [r5, #0]
 8010eb8:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8010ebc:	2858      	cmp	r0, #88	; 0x58
 8010ebe:	d149      	bne.n	8010f54 <_strtoul_l.constprop.0+0xcc>
 8010ec0:	786c      	ldrb	r4, [r5, #1]
 8010ec2:	2310      	movs	r3, #16
 8010ec4:	3502      	adds	r5, #2
 8010ec6:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 8010eca:	2700      	movs	r7, #0
 8010ecc:	fbb8 f8f3 	udiv	r8, r8, r3
 8010ed0:	fb03 f908 	mul.w	r9, r3, r8
 8010ed4:	ea6f 0909 	mvn.w	r9, r9
 8010ed8:	4638      	mov	r0, r7
 8010eda:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8010ede:	f1bc 0f09 	cmp.w	ip, #9
 8010ee2:	d814      	bhi.n	8010f0e <_strtoul_l.constprop.0+0x86>
 8010ee4:	4664      	mov	r4, ip
 8010ee6:	42a3      	cmp	r3, r4
 8010ee8:	dd22      	ble.n	8010f30 <_strtoul_l.constprop.0+0xa8>
 8010eea:	2f00      	cmp	r7, #0
 8010eec:	db1d      	blt.n	8010f2a <_strtoul_l.constprop.0+0xa2>
 8010eee:	4580      	cmp	r8, r0
 8010ef0:	d31b      	bcc.n	8010f2a <_strtoul_l.constprop.0+0xa2>
 8010ef2:	d101      	bne.n	8010ef8 <_strtoul_l.constprop.0+0x70>
 8010ef4:	45a1      	cmp	r9, r4
 8010ef6:	db18      	blt.n	8010f2a <_strtoul_l.constprop.0+0xa2>
 8010ef8:	fb00 4003 	mla	r0, r0, r3, r4
 8010efc:	2701      	movs	r7, #1
 8010efe:	f815 4b01 	ldrb.w	r4, [r5], #1
 8010f02:	e7ea      	b.n	8010eda <_strtoul_l.constprop.0+0x52>
 8010f04:	2c2b      	cmp	r4, #43	; 0x2b
 8010f06:	bf04      	itt	eq
 8010f08:	782c      	ldrbeq	r4, [r5, #0]
 8010f0a:	1c85      	addeq	r5, r0, #2
 8010f0c:	e7cd      	b.n	8010eaa <_strtoul_l.constprop.0+0x22>
 8010f0e:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8010f12:	f1bc 0f19 	cmp.w	ip, #25
 8010f16:	d801      	bhi.n	8010f1c <_strtoul_l.constprop.0+0x94>
 8010f18:	3c37      	subs	r4, #55	; 0x37
 8010f1a:	e7e4      	b.n	8010ee6 <_strtoul_l.constprop.0+0x5e>
 8010f1c:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8010f20:	f1bc 0f19 	cmp.w	ip, #25
 8010f24:	d804      	bhi.n	8010f30 <_strtoul_l.constprop.0+0xa8>
 8010f26:	3c57      	subs	r4, #87	; 0x57
 8010f28:	e7dd      	b.n	8010ee6 <_strtoul_l.constprop.0+0x5e>
 8010f2a:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8010f2e:	e7e6      	b.n	8010efe <_strtoul_l.constprop.0+0x76>
 8010f30:	2f00      	cmp	r7, #0
 8010f32:	da07      	bge.n	8010f44 <_strtoul_l.constprop.0+0xbc>
 8010f34:	2322      	movs	r3, #34	; 0x22
 8010f36:	f8ce 3000 	str.w	r3, [lr]
 8010f3a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010f3e:	b932      	cbnz	r2, 8010f4e <_strtoul_l.constprop.0+0xc6>
 8010f40:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010f44:	b106      	cbz	r6, 8010f48 <_strtoul_l.constprop.0+0xc0>
 8010f46:	4240      	negs	r0, r0
 8010f48:	2a00      	cmp	r2, #0
 8010f4a:	d0f9      	beq.n	8010f40 <_strtoul_l.constprop.0+0xb8>
 8010f4c:	b107      	cbz	r7, 8010f50 <_strtoul_l.constprop.0+0xc8>
 8010f4e:	1e69      	subs	r1, r5, #1
 8010f50:	6011      	str	r1, [r2, #0]
 8010f52:	e7f5      	b.n	8010f40 <_strtoul_l.constprop.0+0xb8>
 8010f54:	2430      	movs	r4, #48	; 0x30
 8010f56:	2b00      	cmp	r3, #0
 8010f58:	d1b5      	bne.n	8010ec6 <_strtoul_l.constprop.0+0x3e>
 8010f5a:	2308      	movs	r3, #8
 8010f5c:	e7b3      	b.n	8010ec6 <_strtoul_l.constprop.0+0x3e>
 8010f5e:	2c30      	cmp	r4, #48	; 0x30
 8010f60:	d0a9      	beq.n	8010eb6 <_strtoul_l.constprop.0+0x2e>
 8010f62:	230a      	movs	r3, #10
 8010f64:	e7af      	b.n	8010ec6 <_strtoul_l.constprop.0+0x3e>
 8010f66:	bf00      	nop
 8010f68:	08012925 	.word	0x08012925

08010f6c <strtoul>:
 8010f6c:	4613      	mov	r3, r2
 8010f6e:	460a      	mov	r2, r1
 8010f70:	4601      	mov	r1, r0
 8010f72:	4802      	ldr	r0, [pc, #8]	; (8010f7c <strtoul+0x10>)
 8010f74:	6800      	ldr	r0, [r0, #0]
 8010f76:	f7ff bf87 	b.w	8010e88 <_strtoul_l.constprop.0>
 8010f7a:	bf00      	nop
 8010f7c:	200000b4 	.word	0x200000b4

08010f80 <_vsniprintf_r>:
 8010f80:	b530      	push	{r4, r5, lr}
 8010f82:	4614      	mov	r4, r2
 8010f84:	2c00      	cmp	r4, #0
 8010f86:	b09b      	sub	sp, #108	; 0x6c
 8010f88:	4605      	mov	r5, r0
 8010f8a:	461a      	mov	r2, r3
 8010f8c:	da05      	bge.n	8010f9a <_vsniprintf_r+0x1a>
 8010f8e:	238b      	movs	r3, #139	; 0x8b
 8010f90:	6003      	str	r3, [r0, #0]
 8010f92:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010f96:	b01b      	add	sp, #108	; 0x6c
 8010f98:	bd30      	pop	{r4, r5, pc}
 8010f9a:	f44f 7302 	mov.w	r3, #520	; 0x208
 8010f9e:	f8ad 300c 	strh.w	r3, [sp, #12]
 8010fa2:	bf14      	ite	ne
 8010fa4:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 8010fa8:	4623      	moveq	r3, r4
 8010faa:	9302      	str	r3, [sp, #8]
 8010fac:	9305      	str	r3, [sp, #20]
 8010fae:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8010fb2:	9100      	str	r1, [sp, #0]
 8010fb4:	9104      	str	r1, [sp, #16]
 8010fb6:	f8ad 300e 	strh.w	r3, [sp, #14]
 8010fba:	4669      	mov	r1, sp
 8010fbc:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8010fbe:	f000 f9e1 	bl	8011384 <_svfiprintf_r>
 8010fc2:	1c43      	adds	r3, r0, #1
 8010fc4:	bfbc      	itt	lt
 8010fc6:	238b      	movlt	r3, #139	; 0x8b
 8010fc8:	602b      	strlt	r3, [r5, #0]
 8010fca:	2c00      	cmp	r4, #0
 8010fcc:	d0e3      	beq.n	8010f96 <_vsniprintf_r+0x16>
 8010fce:	9b00      	ldr	r3, [sp, #0]
 8010fd0:	2200      	movs	r2, #0
 8010fd2:	701a      	strb	r2, [r3, #0]
 8010fd4:	e7df      	b.n	8010f96 <_vsniprintf_r+0x16>
	...

08010fd8 <vsniprintf>:
 8010fd8:	b507      	push	{r0, r1, r2, lr}
 8010fda:	9300      	str	r3, [sp, #0]
 8010fdc:	4613      	mov	r3, r2
 8010fde:	460a      	mov	r2, r1
 8010fe0:	4601      	mov	r1, r0
 8010fe2:	4803      	ldr	r0, [pc, #12]	; (8010ff0 <vsniprintf+0x18>)
 8010fe4:	6800      	ldr	r0, [r0, #0]
 8010fe6:	f7ff ffcb 	bl	8010f80 <_vsniprintf_r>
 8010fea:	b003      	add	sp, #12
 8010fec:	f85d fb04 	ldr.w	pc, [sp], #4
 8010ff0:	200000b4 	.word	0x200000b4

08010ff4 <_write_r>:
 8010ff4:	b538      	push	{r3, r4, r5, lr}
 8010ff6:	4d07      	ldr	r5, [pc, #28]	; (8011014 <_write_r+0x20>)
 8010ff8:	4604      	mov	r4, r0
 8010ffa:	4608      	mov	r0, r1
 8010ffc:	4611      	mov	r1, r2
 8010ffe:	2200      	movs	r2, #0
 8011000:	602a      	str	r2, [r5, #0]
 8011002:	461a      	mov	r2, r3
 8011004:	f7f0 fc29 	bl	800185a <_write>
 8011008:	1c43      	adds	r3, r0, #1
 801100a:	d102      	bne.n	8011012 <_write_r+0x1e>
 801100c:	682b      	ldr	r3, [r5, #0]
 801100e:	b103      	cbz	r3, 8011012 <_write_r+0x1e>
 8011010:	6023      	str	r3, [r4, #0]
 8011012:	bd38      	pop	{r3, r4, r5, pc}
 8011014:	2000dc24 	.word	0x2000dc24

08011018 <__assert_func>:
 8011018:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801101a:	4614      	mov	r4, r2
 801101c:	461a      	mov	r2, r3
 801101e:	4b09      	ldr	r3, [pc, #36]	; (8011044 <__assert_func+0x2c>)
 8011020:	681b      	ldr	r3, [r3, #0]
 8011022:	4605      	mov	r5, r0
 8011024:	68d8      	ldr	r0, [r3, #12]
 8011026:	b14c      	cbz	r4, 801103c <__assert_func+0x24>
 8011028:	4b07      	ldr	r3, [pc, #28]	; (8011048 <__assert_func+0x30>)
 801102a:	9100      	str	r1, [sp, #0]
 801102c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8011030:	4906      	ldr	r1, [pc, #24]	; (801104c <__assert_func+0x34>)
 8011032:	462b      	mov	r3, r5
 8011034:	f000 f8ec 	bl	8011210 <fiprintf>
 8011038:	f000 fe64 	bl	8011d04 <abort>
 801103c:	4b04      	ldr	r3, [pc, #16]	; (8011050 <__assert_func+0x38>)
 801103e:	461c      	mov	r4, r3
 8011040:	e7f3      	b.n	801102a <__assert_func+0x12>
 8011042:	bf00      	nop
 8011044:	200000b4 	.word	0x200000b4
 8011048:	08012afe 	.word	0x08012afe
 801104c:	08012b0b 	.word	0x08012b0b
 8011050:	08012b39 	.word	0x08012b39

08011054 <_close_r>:
 8011054:	b538      	push	{r3, r4, r5, lr}
 8011056:	4d06      	ldr	r5, [pc, #24]	; (8011070 <_close_r+0x1c>)
 8011058:	2300      	movs	r3, #0
 801105a:	4604      	mov	r4, r0
 801105c:	4608      	mov	r0, r1
 801105e:	602b      	str	r3, [r5, #0]
 8011060:	f7f0 fc17 	bl	8001892 <_close>
 8011064:	1c43      	adds	r3, r0, #1
 8011066:	d102      	bne.n	801106e <_close_r+0x1a>
 8011068:	682b      	ldr	r3, [r5, #0]
 801106a:	b103      	cbz	r3, 801106e <_close_r+0x1a>
 801106c:	6023      	str	r3, [r4, #0]
 801106e:	bd38      	pop	{r3, r4, r5, pc}
 8011070:	2000dc24 	.word	0x2000dc24

08011074 <__env_lock>:
 8011074:	4801      	ldr	r0, [pc, #4]	; (801107c <__env_lock+0x8>)
 8011076:	f7ff bc2c 	b.w	80108d2 <__retarget_lock_acquire_recursive>
 801107a:	bf00      	nop
 801107c:	2000dc18 	.word	0x2000dc18

08011080 <__env_unlock>:
 8011080:	4801      	ldr	r0, [pc, #4]	; (8011088 <__env_unlock+0x8>)
 8011082:	f7ff bc27 	b.w	80108d4 <__retarget_lock_release_recursive>
 8011086:	bf00      	nop
 8011088:	2000dc18 	.word	0x2000dc18

0801108c <__sflush_r>:
 801108c:	898a      	ldrh	r2, [r1, #12]
 801108e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011092:	4605      	mov	r5, r0
 8011094:	0710      	lsls	r0, r2, #28
 8011096:	460c      	mov	r4, r1
 8011098:	d458      	bmi.n	801114c <__sflush_r+0xc0>
 801109a:	684b      	ldr	r3, [r1, #4]
 801109c:	2b00      	cmp	r3, #0
 801109e:	dc05      	bgt.n	80110ac <__sflush_r+0x20>
 80110a0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80110a2:	2b00      	cmp	r3, #0
 80110a4:	dc02      	bgt.n	80110ac <__sflush_r+0x20>
 80110a6:	2000      	movs	r0, #0
 80110a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80110ac:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80110ae:	2e00      	cmp	r6, #0
 80110b0:	d0f9      	beq.n	80110a6 <__sflush_r+0x1a>
 80110b2:	2300      	movs	r3, #0
 80110b4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80110b8:	682f      	ldr	r7, [r5, #0]
 80110ba:	602b      	str	r3, [r5, #0]
 80110bc:	d032      	beq.n	8011124 <__sflush_r+0x98>
 80110be:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80110c0:	89a3      	ldrh	r3, [r4, #12]
 80110c2:	075a      	lsls	r2, r3, #29
 80110c4:	d505      	bpl.n	80110d2 <__sflush_r+0x46>
 80110c6:	6863      	ldr	r3, [r4, #4]
 80110c8:	1ac0      	subs	r0, r0, r3
 80110ca:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80110cc:	b10b      	cbz	r3, 80110d2 <__sflush_r+0x46>
 80110ce:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80110d0:	1ac0      	subs	r0, r0, r3
 80110d2:	2300      	movs	r3, #0
 80110d4:	4602      	mov	r2, r0
 80110d6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80110d8:	6a21      	ldr	r1, [r4, #32]
 80110da:	4628      	mov	r0, r5
 80110dc:	47b0      	blx	r6
 80110de:	1c43      	adds	r3, r0, #1
 80110e0:	89a3      	ldrh	r3, [r4, #12]
 80110e2:	d106      	bne.n	80110f2 <__sflush_r+0x66>
 80110e4:	6829      	ldr	r1, [r5, #0]
 80110e6:	291d      	cmp	r1, #29
 80110e8:	d82c      	bhi.n	8011144 <__sflush_r+0xb8>
 80110ea:	4a2a      	ldr	r2, [pc, #168]	; (8011194 <__sflush_r+0x108>)
 80110ec:	40ca      	lsrs	r2, r1
 80110ee:	07d6      	lsls	r6, r2, #31
 80110f0:	d528      	bpl.n	8011144 <__sflush_r+0xb8>
 80110f2:	2200      	movs	r2, #0
 80110f4:	6062      	str	r2, [r4, #4]
 80110f6:	04d9      	lsls	r1, r3, #19
 80110f8:	6922      	ldr	r2, [r4, #16]
 80110fa:	6022      	str	r2, [r4, #0]
 80110fc:	d504      	bpl.n	8011108 <__sflush_r+0x7c>
 80110fe:	1c42      	adds	r2, r0, #1
 8011100:	d101      	bne.n	8011106 <__sflush_r+0x7a>
 8011102:	682b      	ldr	r3, [r5, #0]
 8011104:	b903      	cbnz	r3, 8011108 <__sflush_r+0x7c>
 8011106:	6560      	str	r0, [r4, #84]	; 0x54
 8011108:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801110a:	602f      	str	r7, [r5, #0]
 801110c:	2900      	cmp	r1, #0
 801110e:	d0ca      	beq.n	80110a6 <__sflush_r+0x1a>
 8011110:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8011114:	4299      	cmp	r1, r3
 8011116:	d002      	beq.n	801111e <__sflush_r+0x92>
 8011118:	4628      	mov	r0, r5
 801111a:	f7ff fc19 	bl	8010950 <_free_r>
 801111e:	2000      	movs	r0, #0
 8011120:	6360      	str	r0, [r4, #52]	; 0x34
 8011122:	e7c1      	b.n	80110a8 <__sflush_r+0x1c>
 8011124:	6a21      	ldr	r1, [r4, #32]
 8011126:	2301      	movs	r3, #1
 8011128:	4628      	mov	r0, r5
 801112a:	47b0      	blx	r6
 801112c:	1c41      	adds	r1, r0, #1
 801112e:	d1c7      	bne.n	80110c0 <__sflush_r+0x34>
 8011130:	682b      	ldr	r3, [r5, #0]
 8011132:	2b00      	cmp	r3, #0
 8011134:	d0c4      	beq.n	80110c0 <__sflush_r+0x34>
 8011136:	2b1d      	cmp	r3, #29
 8011138:	d001      	beq.n	801113e <__sflush_r+0xb2>
 801113a:	2b16      	cmp	r3, #22
 801113c:	d101      	bne.n	8011142 <__sflush_r+0xb6>
 801113e:	602f      	str	r7, [r5, #0]
 8011140:	e7b1      	b.n	80110a6 <__sflush_r+0x1a>
 8011142:	89a3      	ldrh	r3, [r4, #12]
 8011144:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011148:	81a3      	strh	r3, [r4, #12]
 801114a:	e7ad      	b.n	80110a8 <__sflush_r+0x1c>
 801114c:	690f      	ldr	r7, [r1, #16]
 801114e:	2f00      	cmp	r7, #0
 8011150:	d0a9      	beq.n	80110a6 <__sflush_r+0x1a>
 8011152:	0793      	lsls	r3, r2, #30
 8011154:	680e      	ldr	r6, [r1, #0]
 8011156:	bf08      	it	eq
 8011158:	694b      	ldreq	r3, [r1, #20]
 801115a:	600f      	str	r7, [r1, #0]
 801115c:	bf18      	it	ne
 801115e:	2300      	movne	r3, #0
 8011160:	eba6 0807 	sub.w	r8, r6, r7
 8011164:	608b      	str	r3, [r1, #8]
 8011166:	f1b8 0f00 	cmp.w	r8, #0
 801116a:	dd9c      	ble.n	80110a6 <__sflush_r+0x1a>
 801116c:	6a21      	ldr	r1, [r4, #32]
 801116e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8011170:	4643      	mov	r3, r8
 8011172:	463a      	mov	r2, r7
 8011174:	4628      	mov	r0, r5
 8011176:	47b0      	blx	r6
 8011178:	2800      	cmp	r0, #0
 801117a:	dc06      	bgt.n	801118a <__sflush_r+0xfe>
 801117c:	89a3      	ldrh	r3, [r4, #12]
 801117e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011182:	81a3      	strh	r3, [r4, #12]
 8011184:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011188:	e78e      	b.n	80110a8 <__sflush_r+0x1c>
 801118a:	4407      	add	r7, r0
 801118c:	eba8 0800 	sub.w	r8, r8, r0
 8011190:	e7e9      	b.n	8011166 <__sflush_r+0xda>
 8011192:	bf00      	nop
 8011194:	20400001 	.word	0x20400001

08011198 <_fflush_r>:
 8011198:	b538      	push	{r3, r4, r5, lr}
 801119a:	690b      	ldr	r3, [r1, #16]
 801119c:	4605      	mov	r5, r0
 801119e:	460c      	mov	r4, r1
 80111a0:	b913      	cbnz	r3, 80111a8 <_fflush_r+0x10>
 80111a2:	2500      	movs	r5, #0
 80111a4:	4628      	mov	r0, r5
 80111a6:	bd38      	pop	{r3, r4, r5, pc}
 80111a8:	b118      	cbz	r0, 80111b2 <_fflush_r+0x1a>
 80111aa:	6983      	ldr	r3, [r0, #24]
 80111ac:	b90b      	cbnz	r3, 80111b2 <_fflush_r+0x1a>
 80111ae:	f7ff fa85 	bl	80106bc <__sinit>
 80111b2:	4b14      	ldr	r3, [pc, #80]	; (8011204 <_fflush_r+0x6c>)
 80111b4:	429c      	cmp	r4, r3
 80111b6:	d11b      	bne.n	80111f0 <_fflush_r+0x58>
 80111b8:	686c      	ldr	r4, [r5, #4]
 80111ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80111be:	2b00      	cmp	r3, #0
 80111c0:	d0ef      	beq.n	80111a2 <_fflush_r+0xa>
 80111c2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80111c4:	07d0      	lsls	r0, r2, #31
 80111c6:	d404      	bmi.n	80111d2 <_fflush_r+0x3a>
 80111c8:	0599      	lsls	r1, r3, #22
 80111ca:	d402      	bmi.n	80111d2 <_fflush_r+0x3a>
 80111cc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80111ce:	f7ff fb80 	bl	80108d2 <__retarget_lock_acquire_recursive>
 80111d2:	4628      	mov	r0, r5
 80111d4:	4621      	mov	r1, r4
 80111d6:	f7ff ff59 	bl	801108c <__sflush_r>
 80111da:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80111dc:	07da      	lsls	r2, r3, #31
 80111de:	4605      	mov	r5, r0
 80111e0:	d4e0      	bmi.n	80111a4 <_fflush_r+0xc>
 80111e2:	89a3      	ldrh	r3, [r4, #12]
 80111e4:	059b      	lsls	r3, r3, #22
 80111e6:	d4dd      	bmi.n	80111a4 <_fflush_r+0xc>
 80111e8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80111ea:	f7ff fb73 	bl	80108d4 <__retarget_lock_release_recursive>
 80111ee:	e7d9      	b.n	80111a4 <_fflush_r+0xc>
 80111f0:	4b05      	ldr	r3, [pc, #20]	; (8011208 <_fflush_r+0x70>)
 80111f2:	429c      	cmp	r4, r3
 80111f4:	d101      	bne.n	80111fa <_fflush_r+0x62>
 80111f6:	68ac      	ldr	r4, [r5, #8]
 80111f8:	e7df      	b.n	80111ba <_fflush_r+0x22>
 80111fa:	4b04      	ldr	r3, [pc, #16]	; (801120c <_fflush_r+0x74>)
 80111fc:	429c      	cmp	r4, r3
 80111fe:	bf08      	it	eq
 8011200:	68ec      	ldreq	r4, [r5, #12]
 8011202:	e7da      	b.n	80111ba <_fflush_r+0x22>
 8011204:	08012a48 	.word	0x08012a48
 8011208:	08012a68 	.word	0x08012a68
 801120c:	08012a28 	.word	0x08012a28

08011210 <fiprintf>:
 8011210:	b40e      	push	{r1, r2, r3}
 8011212:	b503      	push	{r0, r1, lr}
 8011214:	4601      	mov	r1, r0
 8011216:	ab03      	add	r3, sp, #12
 8011218:	4805      	ldr	r0, [pc, #20]	; (8011230 <fiprintf+0x20>)
 801121a:	f853 2b04 	ldr.w	r2, [r3], #4
 801121e:	6800      	ldr	r0, [r0, #0]
 8011220:	9301      	str	r3, [sp, #4]
 8011222:	f000 f9d9 	bl	80115d8 <_vfiprintf_r>
 8011226:	b002      	add	sp, #8
 8011228:	f85d eb04 	ldr.w	lr, [sp], #4
 801122c:	b003      	add	sp, #12
 801122e:	4770      	bx	lr
 8011230:	200000b4 	.word	0x200000b4

08011234 <_lseek_r>:
 8011234:	b538      	push	{r3, r4, r5, lr}
 8011236:	4d07      	ldr	r5, [pc, #28]	; (8011254 <_lseek_r+0x20>)
 8011238:	4604      	mov	r4, r0
 801123a:	4608      	mov	r0, r1
 801123c:	4611      	mov	r1, r2
 801123e:	2200      	movs	r2, #0
 8011240:	602a      	str	r2, [r5, #0]
 8011242:	461a      	mov	r2, r3
 8011244:	f7f0 fb4c 	bl	80018e0 <_lseek>
 8011248:	1c43      	adds	r3, r0, #1
 801124a:	d102      	bne.n	8011252 <_lseek_r+0x1e>
 801124c:	682b      	ldr	r3, [r5, #0]
 801124e:	b103      	cbz	r3, 8011252 <_lseek_r+0x1e>
 8011250:	6023      	str	r3, [r4, #0]
 8011252:	bd38      	pop	{r3, r4, r5, pc}
 8011254:	2000dc24 	.word	0x2000dc24

08011258 <__malloc_lock>:
 8011258:	4801      	ldr	r0, [pc, #4]	; (8011260 <__malloc_lock+0x8>)
 801125a:	f7ff bb3a 	b.w	80108d2 <__retarget_lock_acquire_recursive>
 801125e:	bf00      	nop
 8011260:	2000dc19 	.word	0x2000dc19

08011264 <__malloc_unlock>:
 8011264:	4801      	ldr	r0, [pc, #4]	; (801126c <__malloc_unlock+0x8>)
 8011266:	f7ff bb35 	b.w	80108d4 <__retarget_lock_release_recursive>
 801126a:	bf00      	nop
 801126c:	2000dc19 	.word	0x2000dc19

08011270 <_realloc_r>:
 8011270:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011274:	4680      	mov	r8, r0
 8011276:	4614      	mov	r4, r2
 8011278:	460e      	mov	r6, r1
 801127a:	b921      	cbnz	r1, 8011286 <_realloc_r+0x16>
 801127c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011280:	4611      	mov	r1, r2
 8011282:	f7ff bbd1 	b.w	8010a28 <_malloc_r>
 8011286:	b92a      	cbnz	r2, 8011294 <_realloc_r+0x24>
 8011288:	f7ff fb62 	bl	8010950 <_free_r>
 801128c:	4625      	mov	r5, r4
 801128e:	4628      	mov	r0, r5
 8011290:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011294:	f000 fdbc 	bl	8011e10 <_malloc_usable_size_r>
 8011298:	4284      	cmp	r4, r0
 801129a:	4607      	mov	r7, r0
 801129c:	d802      	bhi.n	80112a4 <_realloc_r+0x34>
 801129e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80112a2:	d812      	bhi.n	80112ca <_realloc_r+0x5a>
 80112a4:	4621      	mov	r1, r4
 80112a6:	4640      	mov	r0, r8
 80112a8:	f7ff fbbe 	bl	8010a28 <_malloc_r>
 80112ac:	4605      	mov	r5, r0
 80112ae:	2800      	cmp	r0, #0
 80112b0:	d0ed      	beq.n	801128e <_realloc_r+0x1e>
 80112b2:	42bc      	cmp	r4, r7
 80112b4:	4622      	mov	r2, r4
 80112b6:	4631      	mov	r1, r6
 80112b8:	bf28      	it	cs
 80112ba:	463a      	movcs	r2, r7
 80112bc:	f7ff fb1c 	bl	80108f8 <memcpy>
 80112c0:	4631      	mov	r1, r6
 80112c2:	4640      	mov	r0, r8
 80112c4:	f7ff fb44 	bl	8010950 <_free_r>
 80112c8:	e7e1      	b.n	801128e <_realloc_r+0x1e>
 80112ca:	4635      	mov	r5, r6
 80112cc:	e7df      	b.n	801128e <_realloc_r+0x1e>

080112ce <__ssputs_r>:
 80112ce:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80112d2:	688e      	ldr	r6, [r1, #8]
 80112d4:	429e      	cmp	r6, r3
 80112d6:	4682      	mov	sl, r0
 80112d8:	460c      	mov	r4, r1
 80112da:	4690      	mov	r8, r2
 80112dc:	461f      	mov	r7, r3
 80112de:	d838      	bhi.n	8011352 <__ssputs_r+0x84>
 80112e0:	898a      	ldrh	r2, [r1, #12]
 80112e2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80112e6:	d032      	beq.n	801134e <__ssputs_r+0x80>
 80112e8:	6825      	ldr	r5, [r4, #0]
 80112ea:	6909      	ldr	r1, [r1, #16]
 80112ec:	eba5 0901 	sub.w	r9, r5, r1
 80112f0:	6965      	ldr	r5, [r4, #20]
 80112f2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80112f6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80112fa:	3301      	adds	r3, #1
 80112fc:	444b      	add	r3, r9
 80112fe:	106d      	asrs	r5, r5, #1
 8011300:	429d      	cmp	r5, r3
 8011302:	bf38      	it	cc
 8011304:	461d      	movcc	r5, r3
 8011306:	0553      	lsls	r3, r2, #21
 8011308:	d531      	bpl.n	801136e <__ssputs_r+0xa0>
 801130a:	4629      	mov	r1, r5
 801130c:	f7ff fb8c 	bl	8010a28 <_malloc_r>
 8011310:	4606      	mov	r6, r0
 8011312:	b950      	cbnz	r0, 801132a <__ssputs_r+0x5c>
 8011314:	230c      	movs	r3, #12
 8011316:	f8ca 3000 	str.w	r3, [sl]
 801131a:	89a3      	ldrh	r3, [r4, #12]
 801131c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011320:	81a3      	strh	r3, [r4, #12]
 8011322:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011326:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801132a:	6921      	ldr	r1, [r4, #16]
 801132c:	464a      	mov	r2, r9
 801132e:	f7ff fae3 	bl	80108f8 <memcpy>
 8011332:	89a3      	ldrh	r3, [r4, #12]
 8011334:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8011338:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801133c:	81a3      	strh	r3, [r4, #12]
 801133e:	6126      	str	r6, [r4, #16]
 8011340:	6165      	str	r5, [r4, #20]
 8011342:	444e      	add	r6, r9
 8011344:	eba5 0509 	sub.w	r5, r5, r9
 8011348:	6026      	str	r6, [r4, #0]
 801134a:	60a5      	str	r5, [r4, #8]
 801134c:	463e      	mov	r6, r7
 801134e:	42be      	cmp	r6, r7
 8011350:	d900      	bls.n	8011354 <__ssputs_r+0x86>
 8011352:	463e      	mov	r6, r7
 8011354:	6820      	ldr	r0, [r4, #0]
 8011356:	4632      	mov	r2, r6
 8011358:	4641      	mov	r1, r8
 801135a:	f000 fd3f 	bl	8011ddc <memmove>
 801135e:	68a3      	ldr	r3, [r4, #8]
 8011360:	1b9b      	subs	r3, r3, r6
 8011362:	60a3      	str	r3, [r4, #8]
 8011364:	6823      	ldr	r3, [r4, #0]
 8011366:	4433      	add	r3, r6
 8011368:	6023      	str	r3, [r4, #0]
 801136a:	2000      	movs	r0, #0
 801136c:	e7db      	b.n	8011326 <__ssputs_r+0x58>
 801136e:	462a      	mov	r2, r5
 8011370:	f7ff ff7e 	bl	8011270 <_realloc_r>
 8011374:	4606      	mov	r6, r0
 8011376:	2800      	cmp	r0, #0
 8011378:	d1e1      	bne.n	801133e <__ssputs_r+0x70>
 801137a:	6921      	ldr	r1, [r4, #16]
 801137c:	4650      	mov	r0, sl
 801137e:	f7ff fae7 	bl	8010950 <_free_r>
 8011382:	e7c7      	b.n	8011314 <__ssputs_r+0x46>

08011384 <_svfiprintf_r>:
 8011384:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011388:	4698      	mov	r8, r3
 801138a:	898b      	ldrh	r3, [r1, #12]
 801138c:	061b      	lsls	r3, r3, #24
 801138e:	b09d      	sub	sp, #116	; 0x74
 8011390:	4607      	mov	r7, r0
 8011392:	460d      	mov	r5, r1
 8011394:	4614      	mov	r4, r2
 8011396:	d50e      	bpl.n	80113b6 <_svfiprintf_r+0x32>
 8011398:	690b      	ldr	r3, [r1, #16]
 801139a:	b963      	cbnz	r3, 80113b6 <_svfiprintf_r+0x32>
 801139c:	2140      	movs	r1, #64	; 0x40
 801139e:	f7ff fb43 	bl	8010a28 <_malloc_r>
 80113a2:	6028      	str	r0, [r5, #0]
 80113a4:	6128      	str	r0, [r5, #16]
 80113a6:	b920      	cbnz	r0, 80113b2 <_svfiprintf_r+0x2e>
 80113a8:	230c      	movs	r3, #12
 80113aa:	603b      	str	r3, [r7, #0]
 80113ac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80113b0:	e0d1      	b.n	8011556 <_svfiprintf_r+0x1d2>
 80113b2:	2340      	movs	r3, #64	; 0x40
 80113b4:	616b      	str	r3, [r5, #20]
 80113b6:	2300      	movs	r3, #0
 80113b8:	9309      	str	r3, [sp, #36]	; 0x24
 80113ba:	2320      	movs	r3, #32
 80113bc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80113c0:	f8cd 800c 	str.w	r8, [sp, #12]
 80113c4:	2330      	movs	r3, #48	; 0x30
 80113c6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8011570 <_svfiprintf_r+0x1ec>
 80113ca:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80113ce:	f04f 0901 	mov.w	r9, #1
 80113d2:	4623      	mov	r3, r4
 80113d4:	469a      	mov	sl, r3
 80113d6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80113da:	b10a      	cbz	r2, 80113e0 <_svfiprintf_r+0x5c>
 80113dc:	2a25      	cmp	r2, #37	; 0x25
 80113de:	d1f9      	bne.n	80113d4 <_svfiprintf_r+0x50>
 80113e0:	ebba 0b04 	subs.w	fp, sl, r4
 80113e4:	d00b      	beq.n	80113fe <_svfiprintf_r+0x7a>
 80113e6:	465b      	mov	r3, fp
 80113e8:	4622      	mov	r2, r4
 80113ea:	4629      	mov	r1, r5
 80113ec:	4638      	mov	r0, r7
 80113ee:	f7ff ff6e 	bl	80112ce <__ssputs_r>
 80113f2:	3001      	adds	r0, #1
 80113f4:	f000 80aa 	beq.w	801154c <_svfiprintf_r+0x1c8>
 80113f8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80113fa:	445a      	add	r2, fp
 80113fc:	9209      	str	r2, [sp, #36]	; 0x24
 80113fe:	f89a 3000 	ldrb.w	r3, [sl]
 8011402:	2b00      	cmp	r3, #0
 8011404:	f000 80a2 	beq.w	801154c <_svfiprintf_r+0x1c8>
 8011408:	2300      	movs	r3, #0
 801140a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801140e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011412:	f10a 0a01 	add.w	sl, sl, #1
 8011416:	9304      	str	r3, [sp, #16]
 8011418:	9307      	str	r3, [sp, #28]
 801141a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801141e:	931a      	str	r3, [sp, #104]	; 0x68
 8011420:	4654      	mov	r4, sl
 8011422:	2205      	movs	r2, #5
 8011424:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011428:	4851      	ldr	r0, [pc, #324]	; (8011570 <_svfiprintf_r+0x1ec>)
 801142a:	f7ee ff09 	bl	8000240 <memchr>
 801142e:	9a04      	ldr	r2, [sp, #16]
 8011430:	b9d8      	cbnz	r0, 801146a <_svfiprintf_r+0xe6>
 8011432:	06d0      	lsls	r0, r2, #27
 8011434:	bf44      	itt	mi
 8011436:	2320      	movmi	r3, #32
 8011438:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801143c:	0711      	lsls	r1, r2, #28
 801143e:	bf44      	itt	mi
 8011440:	232b      	movmi	r3, #43	; 0x2b
 8011442:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011446:	f89a 3000 	ldrb.w	r3, [sl]
 801144a:	2b2a      	cmp	r3, #42	; 0x2a
 801144c:	d015      	beq.n	801147a <_svfiprintf_r+0xf6>
 801144e:	9a07      	ldr	r2, [sp, #28]
 8011450:	4654      	mov	r4, sl
 8011452:	2000      	movs	r0, #0
 8011454:	f04f 0c0a 	mov.w	ip, #10
 8011458:	4621      	mov	r1, r4
 801145a:	f811 3b01 	ldrb.w	r3, [r1], #1
 801145e:	3b30      	subs	r3, #48	; 0x30
 8011460:	2b09      	cmp	r3, #9
 8011462:	d94e      	bls.n	8011502 <_svfiprintf_r+0x17e>
 8011464:	b1b0      	cbz	r0, 8011494 <_svfiprintf_r+0x110>
 8011466:	9207      	str	r2, [sp, #28]
 8011468:	e014      	b.n	8011494 <_svfiprintf_r+0x110>
 801146a:	eba0 0308 	sub.w	r3, r0, r8
 801146e:	fa09 f303 	lsl.w	r3, r9, r3
 8011472:	4313      	orrs	r3, r2
 8011474:	9304      	str	r3, [sp, #16]
 8011476:	46a2      	mov	sl, r4
 8011478:	e7d2      	b.n	8011420 <_svfiprintf_r+0x9c>
 801147a:	9b03      	ldr	r3, [sp, #12]
 801147c:	1d19      	adds	r1, r3, #4
 801147e:	681b      	ldr	r3, [r3, #0]
 8011480:	9103      	str	r1, [sp, #12]
 8011482:	2b00      	cmp	r3, #0
 8011484:	bfbb      	ittet	lt
 8011486:	425b      	neglt	r3, r3
 8011488:	f042 0202 	orrlt.w	r2, r2, #2
 801148c:	9307      	strge	r3, [sp, #28]
 801148e:	9307      	strlt	r3, [sp, #28]
 8011490:	bfb8      	it	lt
 8011492:	9204      	strlt	r2, [sp, #16]
 8011494:	7823      	ldrb	r3, [r4, #0]
 8011496:	2b2e      	cmp	r3, #46	; 0x2e
 8011498:	d10c      	bne.n	80114b4 <_svfiprintf_r+0x130>
 801149a:	7863      	ldrb	r3, [r4, #1]
 801149c:	2b2a      	cmp	r3, #42	; 0x2a
 801149e:	d135      	bne.n	801150c <_svfiprintf_r+0x188>
 80114a0:	9b03      	ldr	r3, [sp, #12]
 80114a2:	1d1a      	adds	r2, r3, #4
 80114a4:	681b      	ldr	r3, [r3, #0]
 80114a6:	9203      	str	r2, [sp, #12]
 80114a8:	2b00      	cmp	r3, #0
 80114aa:	bfb8      	it	lt
 80114ac:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80114b0:	3402      	adds	r4, #2
 80114b2:	9305      	str	r3, [sp, #20]
 80114b4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8011580 <_svfiprintf_r+0x1fc>
 80114b8:	7821      	ldrb	r1, [r4, #0]
 80114ba:	2203      	movs	r2, #3
 80114bc:	4650      	mov	r0, sl
 80114be:	f7ee febf 	bl	8000240 <memchr>
 80114c2:	b140      	cbz	r0, 80114d6 <_svfiprintf_r+0x152>
 80114c4:	2340      	movs	r3, #64	; 0x40
 80114c6:	eba0 000a 	sub.w	r0, r0, sl
 80114ca:	fa03 f000 	lsl.w	r0, r3, r0
 80114ce:	9b04      	ldr	r3, [sp, #16]
 80114d0:	4303      	orrs	r3, r0
 80114d2:	3401      	adds	r4, #1
 80114d4:	9304      	str	r3, [sp, #16]
 80114d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80114da:	4826      	ldr	r0, [pc, #152]	; (8011574 <_svfiprintf_r+0x1f0>)
 80114dc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80114e0:	2206      	movs	r2, #6
 80114e2:	f7ee fead 	bl	8000240 <memchr>
 80114e6:	2800      	cmp	r0, #0
 80114e8:	d038      	beq.n	801155c <_svfiprintf_r+0x1d8>
 80114ea:	4b23      	ldr	r3, [pc, #140]	; (8011578 <_svfiprintf_r+0x1f4>)
 80114ec:	bb1b      	cbnz	r3, 8011536 <_svfiprintf_r+0x1b2>
 80114ee:	9b03      	ldr	r3, [sp, #12]
 80114f0:	3307      	adds	r3, #7
 80114f2:	f023 0307 	bic.w	r3, r3, #7
 80114f6:	3308      	adds	r3, #8
 80114f8:	9303      	str	r3, [sp, #12]
 80114fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80114fc:	4433      	add	r3, r6
 80114fe:	9309      	str	r3, [sp, #36]	; 0x24
 8011500:	e767      	b.n	80113d2 <_svfiprintf_r+0x4e>
 8011502:	fb0c 3202 	mla	r2, ip, r2, r3
 8011506:	460c      	mov	r4, r1
 8011508:	2001      	movs	r0, #1
 801150a:	e7a5      	b.n	8011458 <_svfiprintf_r+0xd4>
 801150c:	2300      	movs	r3, #0
 801150e:	3401      	adds	r4, #1
 8011510:	9305      	str	r3, [sp, #20]
 8011512:	4619      	mov	r1, r3
 8011514:	f04f 0c0a 	mov.w	ip, #10
 8011518:	4620      	mov	r0, r4
 801151a:	f810 2b01 	ldrb.w	r2, [r0], #1
 801151e:	3a30      	subs	r2, #48	; 0x30
 8011520:	2a09      	cmp	r2, #9
 8011522:	d903      	bls.n	801152c <_svfiprintf_r+0x1a8>
 8011524:	2b00      	cmp	r3, #0
 8011526:	d0c5      	beq.n	80114b4 <_svfiprintf_r+0x130>
 8011528:	9105      	str	r1, [sp, #20]
 801152a:	e7c3      	b.n	80114b4 <_svfiprintf_r+0x130>
 801152c:	fb0c 2101 	mla	r1, ip, r1, r2
 8011530:	4604      	mov	r4, r0
 8011532:	2301      	movs	r3, #1
 8011534:	e7f0      	b.n	8011518 <_svfiprintf_r+0x194>
 8011536:	ab03      	add	r3, sp, #12
 8011538:	9300      	str	r3, [sp, #0]
 801153a:	462a      	mov	r2, r5
 801153c:	4b0f      	ldr	r3, [pc, #60]	; (801157c <_svfiprintf_r+0x1f8>)
 801153e:	a904      	add	r1, sp, #16
 8011540:	4638      	mov	r0, r7
 8011542:	f3af 8000 	nop.w
 8011546:	1c42      	adds	r2, r0, #1
 8011548:	4606      	mov	r6, r0
 801154a:	d1d6      	bne.n	80114fa <_svfiprintf_r+0x176>
 801154c:	89ab      	ldrh	r3, [r5, #12]
 801154e:	065b      	lsls	r3, r3, #25
 8011550:	f53f af2c 	bmi.w	80113ac <_svfiprintf_r+0x28>
 8011554:	9809      	ldr	r0, [sp, #36]	; 0x24
 8011556:	b01d      	add	sp, #116	; 0x74
 8011558:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801155c:	ab03      	add	r3, sp, #12
 801155e:	9300      	str	r3, [sp, #0]
 8011560:	462a      	mov	r2, r5
 8011562:	4b06      	ldr	r3, [pc, #24]	; (801157c <_svfiprintf_r+0x1f8>)
 8011564:	a904      	add	r1, sp, #16
 8011566:	4638      	mov	r0, r7
 8011568:	f000 f9d4 	bl	8011914 <_printf_i>
 801156c:	e7eb      	b.n	8011546 <_svfiprintf_r+0x1c2>
 801156e:	bf00      	nop
 8011570:	08012b3a 	.word	0x08012b3a
 8011574:	08012b44 	.word	0x08012b44
 8011578:	00000000 	.word	0x00000000
 801157c:	080112cf 	.word	0x080112cf
 8011580:	08012b40 	.word	0x08012b40

08011584 <__sfputc_r>:
 8011584:	6893      	ldr	r3, [r2, #8]
 8011586:	3b01      	subs	r3, #1
 8011588:	2b00      	cmp	r3, #0
 801158a:	b410      	push	{r4}
 801158c:	6093      	str	r3, [r2, #8]
 801158e:	da08      	bge.n	80115a2 <__sfputc_r+0x1e>
 8011590:	6994      	ldr	r4, [r2, #24]
 8011592:	42a3      	cmp	r3, r4
 8011594:	db01      	blt.n	801159a <__sfputc_r+0x16>
 8011596:	290a      	cmp	r1, #10
 8011598:	d103      	bne.n	80115a2 <__sfputc_r+0x1e>
 801159a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801159e:	f000 baf1 	b.w	8011b84 <__swbuf_r>
 80115a2:	6813      	ldr	r3, [r2, #0]
 80115a4:	1c58      	adds	r0, r3, #1
 80115a6:	6010      	str	r0, [r2, #0]
 80115a8:	7019      	strb	r1, [r3, #0]
 80115aa:	4608      	mov	r0, r1
 80115ac:	f85d 4b04 	ldr.w	r4, [sp], #4
 80115b0:	4770      	bx	lr

080115b2 <__sfputs_r>:
 80115b2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80115b4:	4606      	mov	r6, r0
 80115b6:	460f      	mov	r7, r1
 80115b8:	4614      	mov	r4, r2
 80115ba:	18d5      	adds	r5, r2, r3
 80115bc:	42ac      	cmp	r4, r5
 80115be:	d101      	bne.n	80115c4 <__sfputs_r+0x12>
 80115c0:	2000      	movs	r0, #0
 80115c2:	e007      	b.n	80115d4 <__sfputs_r+0x22>
 80115c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80115c8:	463a      	mov	r2, r7
 80115ca:	4630      	mov	r0, r6
 80115cc:	f7ff ffda 	bl	8011584 <__sfputc_r>
 80115d0:	1c43      	adds	r3, r0, #1
 80115d2:	d1f3      	bne.n	80115bc <__sfputs_r+0xa>
 80115d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080115d8 <_vfiprintf_r>:
 80115d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80115dc:	460d      	mov	r5, r1
 80115de:	b09d      	sub	sp, #116	; 0x74
 80115e0:	4614      	mov	r4, r2
 80115e2:	4698      	mov	r8, r3
 80115e4:	4606      	mov	r6, r0
 80115e6:	b118      	cbz	r0, 80115f0 <_vfiprintf_r+0x18>
 80115e8:	6983      	ldr	r3, [r0, #24]
 80115ea:	b90b      	cbnz	r3, 80115f0 <_vfiprintf_r+0x18>
 80115ec:	f7ff f866 	bl	80106bc <__sinit>
 80115f0:	4b89      	ldr	r3, [pc, #548]	; (8011818 <_vfiprintf_r+0x240>)
 80115f2:	429d      	cmp	r5, r3
 80115f4:	d11b      	bne.n	801162e <_vfiprintf_r+0x56>
 80115f6:	6875      	ldr	r5, [r6, #4]
 80115f8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80115fa:	07d9      	lsls	r1, r3, #31
 80115fc:	d405      	bmi.n	801160a <_vfiprintf_r+0x32>
 80115fe:	89ab      	ldrh	r3, [r5, #12]
 8011600:	059a      	lsls	r2, r3, #22
 8011602:	d402      	bmi.n	801160a <_vfiprintf_r+0x32>
 8011604:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8011606:	f7ff f964 	bl	80108d2 <__retarget_lock_acquire_recursive>
 801160a:	89ab      	ldrh	r3, [r5, #12]
 801160c:	071b      	lsls	r3, r3, #28
 801160e:	d501      	bpl.n	8011614 <_vfiprintf_r+0x3c>
 8011610:	692b      	ldr	r3, [r5, #16]
 8011612:	b9eb      	cbnz	r3, 8011650 <_vfiprintf_r+0x78>
 8011614:	4629      	mov	r1, r5
 8011616:	4630      	mov	r0, r6
 8011618:	f000 fb06 	bl	8011c28 <__swsetup_r>
 801161c:	b1c0      	cbz	r0, 8011650 <_vfiprintf_r+0x78>
 801161e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011620:	07dc      	lsls	r4, r3, #31
 8011622:	d50e      	bpl.n	8011642 <_vfiprintf_r+0x6a>
 8011624:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011628:	b01d      	add	sp, #116	; 0x74
 801162a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801162e:	4b7b      	ldr	r3, [pc, #492]	; (801181c <_vfiprintf_r+0x244>)
 8011630:	429d      	cmp	r5, r3
 8011632:	d101      	bne.n	8011638 <_vfiprintf_r+0x60>
 8011634:	68b5      	ldr	r5, [r6, #8]
 8011636:	e7df      	b.n	80115f8 <_vfiprintf_r+0x20>
 8011638:	4b79      	ldr	r3, [pc, #484]	; (8011820 <_vfiprintf_r+0x248>)
 801163a:	429d      	cmp	r5, r3
 801163c:	bf08      	it	eq
 801163e:	68f5      	ldreq	r5, [r6, #12]
 8011640:	e7da      	b.n	80115f8 <_vfiprintf_r+0x20>
 8011642:	89ab      	ldrh	r3, [r5, #12]
 8011644:	0598      	lsls	r0, r3, #22
 8011646:	d4ed      	bmi.n	8011624 <_vfiprintf_r+0x4c>
 8011648:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801164a:	f7ff f943 	bl	80108d4 <__retarget_lock_release_recursive>
 801164e:	e7e9      	b.n	8011624 <_vfiprintf_r+0x4c>
 8011650:	2300      	movs	r3, #0
 8011652:	9309      	str	r3, [sp, #36]	; 0x24
 8011654:	2320      	movs	r3, #32
 8011656:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801165a:	f8cd 800c 	str.w	r8, [sp, #12]
 801165e:	2330      	movs	r3, #48	; 0x30
 8011660:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8011824 <_vfiprintf_r+0x24c>
 8011664:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8011668:	f04f 0901 	mov.w	r9, #1
 801166c:	4623      	mov	r3, r4
 801166e:	469a      	mov	sl, r3
 8011670:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011674:	b10a      	cbz	r2, 801167a <_vfiprintf_r+0xa2>
 8011676:	2a25      	cmp	r2, #37	; 0x25
 8011678:	d1f9      	bne.n	801166e <_vfiprintf_r+0x96>
 801167a:	ebba 0b04 	subs.w	fp, sl, r4
 801167e:	d00b      	beq.n	8011698 <_vfiprintf_r+0xc0>
 8011680:	465b      	mov	r3, fp
 8011682:	4622      	mov	r2, r4
 8011684:	4629      	mov	r1, r5
 8011686:	4630      	mov	r0, r6
 8011688:	f7ff ff93 	bl	80115b2 <__sfputs_r>
 801168c:	3001      	adds	r0, #1
 801168e:	f000 80aa 	beq.w	80117e6 <_vfiprintf_r+0x20e>
 8011692:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011694:	445a      	add	r2, fp
 8011696:	9209      	str	r2, [sp, #36]	; 0x24
 8011698:	f89a 3000 	ldrb.w	r3, [sl]
 801169c:	2b00      	cmp	r3, #0
 801169e:	f000 80a2 	beq.w	80117e6 <_vfiprintf_r+0x20e>
 80116a2:	2300      	movs	r3, #0
 80116a4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80116a8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80116ac:	f10a 0a01 	add.w	sl, sl, #1
 80116b0:	9304      	str	r3, [sp, #16]
 80116b2:	9307      	str	r3, [sp, #28]
 80116b4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80116b8:	931a      	str	r3, [sp, #104]	; 0x68
 80116ba:	4654      	mov	r4, sl
 80116bc:	2205      	movs	r2, #5
 80116be:	f814 1b01 	ldrb.w	r1, [r4], #1
 80116c2:	4858      	ldr	r0, [pc, #352]	; (8011824 <_vfiprintf_r+0x24c>)
 80116c4:	f7ee fdbc 	bl	8000240 <memchr>
 80116c8:	9a04      	ldr	r2, [sp, #16]
 80116ca:	b9d8      	cbnz	r0, 8011704 <_vfiprintf_r+0x12c>
 80116cc:	06d1      	lsls	r1, r2, #27
 80116ce:	bf44      	itt	mi
 80116d0:	2320      	movmi	r3, #32
 80116d2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80116d6:	0713      	lsls	r3, r2, #28
 80116d8:	bf44      	itt	mi
 80116da:	232b      	movmi	r3, #43	; 0x2b
 80116dc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80116e0:	f89a 3000 	ldrb.w	r3, [sl]
 80116e4:	2b2a      	cmp	r3, #42	; 0x2a
 80116e6:	d015      	beq.n	8011714 <_vfiprintf_r+0x13c>
 80116e8:	9a07      	ldr	r2, [sp, #28]
 80116ea:	4654      	mov	r4, sl
 80116ec:	2000      	movs	r0, #0
 80116ee:	f04f 0c0a 	mov.w	ip, #10
 80116f2:	4621      	mov	r1, r4
 80116f4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80116f8:	3b30      	subs	r3, #48	; 0x30
 80116fa:	2b09      	cmp	r3, #9
 80116fc:	d94e      	bls.n	801179c <_vfiprintf_r+0x1c4>
 80116fe:	b1b0      	cbz	r0, 801172e <_vfiprintf_r+0x156>
 8011700:	9207      	str	r2, [sp, #28]
 8011702:	e014      	b.n	801172e <_vfiprintf_r+0x156>
 8011704:	eba0 0308 	sub.w	r3, r0, r8
 8011708:	fa09 f303 	lsl.w	r3, r9, r3
 801170c:	4313      	orrs	r3, r2
 801170e:	9304      	str	r3, [sp, #16]
 8011710:	46a2      	mov	sl, r4
 8011712:	e7d2      	b.n	80116ba <_vfiprintf_r+0xe2>
 8011714:	9b03      	ldr	r3, [sp, #12]
 8011716:	1d19      	adds	r1, r3, #4
 8011718:	681b      	ldr	r3, [r3, #0]
 801171a:	9103      	str	r1, [sp, #12]
 801171c:	2b00      	cmp	r3, #0
 801171e:	bfbb      	ittet	lt
 8011720:	425b      	neglt	r3, r3
 8011722:	f042 0202 	orrlt.w	r2, r2, #2
 8011726:	9307      	strge	r3, [sp, #28]
 8011728:	9307      	strlt	r3, [sp, #28]
 801172a:	bfb8      	it	lt
 801172c:	9204      	strlt	r2, [sp, #16]
 801172e:	7823      	ldrb	r3, [r4, #0]
 8011730:	2b2e      	cmp	r3, #46	; 0x2e
 8011732:	d10c      	bne.n	801174e <_vfiprintf_r+0x176>
 8011734:	7863      	ldrb	r3, [r4, #1]
 8011736:	2b2a      	cmp	r3, #42	; 0x2a
 8011738:	d135      	bne.n	80117a6 <_vfiprintf_r+0x1ce>
 801173a:	9b03      	ldr	r3, [sp, #12]
 801173c:	1d1a      	adds	r2, r3, #4
 801173e:	681b      	ldr	r3, [r3, #0]
 8011740:	9203      	str	r2, [sp, #12]
 8011742:	2b00      	cmp	r3, #0
 8011744:	bfb8      	it	lt
 8011746:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 801174a:	3402      	adds	r4, #2
 801174c:	9305      	str	r3, [sp, #20]
 801174e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8011834 <_vfiprintf_r+0x25c>
 8011752:	7821      	ldrb	r1, [r4, #0]
 8011754:	2203      	movs	r2, #3
 8011756:	4650      	mov	r0, sl
 8011758:	f7ee fd72 	bl	8000240 <memchr>
 801175c:	b140      	cbz	r0, 8011770 <_vfiprintf_r+0x198>
 801175e:	2340      	movs	r3, #64	; 0x40
 8011760:	eba0 000a 	sub.w	r0, r0, sl
 8011764:	fa03 f000 	lsl.w	r0, r3, r0
 8011768:	9b04      	ldr	r3, [sp, #16]
 801176a:	4303      	orrs	r3, r0
 801176c:	3401      	adds	r4, #1
 801176e:	9304      	str	r3, [sp, #16]
 8011770:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011774:	482c      	ldr	r0, [pc, #176]	; (8011828 <_vfiprintf_r+0x250>)
 8011776:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801177a:	2206      	movs	r2, #6
 801177c:	f7ee fd60 	bl	8000240 <memchr>
 8011780:	2800      	cmp	r0, #0
 8011782:	d03f      	beq.n	8011804 <_vfiprintf_r+0x22c>
 8011784:	4b29      	ldr	r3, [pc, #164]	; (801182c <_vfiprintf_r+0x254>)
 8011786:	bb1b      	cbnz	r3, 80117d0 <_vfiprintf_r+0x1f8>
 8011788:	9b03      	ldr	r3, [sp, #12]
 801178a:	3307      	adds	r3, #7
 801178c:	f023 0307 	bic.w	r3, r3, #7
 8011790:	3308      	adds	r3, #8
 8011792:	9303      	str	r3, [sp, #12]
 8011794:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011796:	443b      	add	r3, r7
 8011798:	9309      	str	r3, [sp, #36]	; 0x24
 801179a:	e767      	b.n	801166c <_vfiprintf_r+0x94>
 801179c:	fb0c 3202 	mla	r2, ip, r2, r3
 80117a0:	460c      	mov	r4, r1
 80117a2:	2001      	movs	r0, #1
 80117a4:	e7a5      	b.n	80116f2 <_vfiprintf_r+0x11a>
 80117a6:	2300      	movs	r3, #0
 80117a8:	3401      	adds	r4, #1
 80117aa:	9305      	str	r3, [sp, #20]
 80117ac:	4619      	mov	r1, r3
 80117ae:	f04f 0c0a 	mov.w	ip, #10
 80117b2:	4620      	mov	r0, r4
 80117b4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80117b8:	3a30      	subs	r2, #48	; 0x30
 80117ba:	2a09      	cmp	r2, #9
 80117bc:	d903      	bls.n	80117c6 <_vfiprintf_r+0x1ee>
 80117be:	2b00      	cmp	r3, #0
 80117c0:	d0c5      	beq.n	801174e <_vfiprintf_r+0x176>
 80117c2:	9105      	str	r1, [sp, #20]
 80117c4:	e7c3      	b.n	801174e <_vfiprintf_r+0x176>
 80117c6:	fb0c 2101 	mla	r1, ip, r1, r2
 80117ca:	4604      	mov	r4, r0
 80117cc:	2301      	movs	r3, #1
 80117ce:	e7f0      	b.n	80117b2 <_vfiprintf_r+0x1da>
 80117d0:	ab03      	add	r3, sp, #12
 80117d2:	9300      	str	r3, [sp, #0]
 80117d4:	462a      	mov	r2, r5
 80117d6:	4b16      	ldr	r3, [pc, #88]	; (8011830 <_vfiprintf_r+0x258>)
 80117d8:	a904      	add	r1, sp, #16
 80117da:	4630      	mov	r0, r6
 80117dc:	f3af 8000 	nop.w
 80117e0:	4607      	mov	r7, r0
 80117e2:	1c78      	adds	r0, r7, #1
 80117e4:	d1d6      	bne.n	8011794 <_vfiprintf_r+0x1bc>
 80117e6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80117e8:	07d9      	lsls	r1, r3, #31
 80117ea:	d405      	bmi.n	80117f8 <_vfiprintf_r+0x220>
 80117ec:	89ab      	ldrh	r3, [r5, #12]
 80117ee:	059a      	lsls	r2, r3, #22
 80117f0:	d402      	bmi.n	80117f8 <_vfiprintf_r+0x220>
 80117f2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80117f4:	f7ff f86e 	bl	80108d4 <__retarget_lock_release_recursive>
 80117f8:	89ab      	ldrh	r3, [r5, #12]
 80117fa:	065b      	lsls	r3, r3, #25
 80117fc:	f53f af12 	bmi.w	8011624 <_vfiprintf_r+0x4c>
 8011800:	9809      	ldr	r0, [sp, #36]	; 0x24
 8011802:	e711      	b.n	8011628 <_vfiprintf_r+0x50>
 8011804:	ab03      	add	r3, sp, #12
 8011806:	9300      	str	r3, [sp, #0]
 8011808:	462a      	mov	r2, r5
 801180a:	4b09      	ldr	r3, [pc, #36]	; (8011830 <_vfiprintf_r+0x258>)
 801180c:	a904      	add	r1, sp, #16
 801180e:	4630      	mov	r0, r6
 8011810:	f000 f880 	bl	8011914 <_printf_i>
 8011814:	e7e4      	b.n	80117e0 <_vfiprintf_r+0x208>
 8011816:	bf00      	nop
 8011818:	08012a48 	.word	0x08012a48
 801181c:	08012a68 	.word	0x08012a68
 8011820:	08012a28 	.word	0x08012a28
 8011824:	08012b3a 	.word	0x08012b3a
 8011828:	08012b44 	.word	0x08012b44
 801182c:	00000000 	.word	0x00000000
 8011830:	080115b3 	.word	0x080115b3
 8011834:	08012b40 	.word	0x08012b40

08011838 <_printf_common>:
 8011838:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801183c:	4616      	mov	r6, r2
 801183e:	4699      	mov	r9, r3
 8011840:	688a      	ldr	r2, [r1, #8]
 8011842:	690b      	ldr	r3, [r1, #16]
 8011844:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8011848:	4293      	cmp	r3, r2
 801184a:	bfb8      	it	lt
 801184c:	4613      	movlt	r3, r2
 801184e:	6033      	str	r3, [r6, #0]
 8011850:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8011854:	4607      	mov	r7, r0
 8011856:	460c      	mov	r4, r1
 8011858:	b10a      	cbz	r2, 801185e <_printf_common+0x26>
 801185a:	3301      	adds	r3, #1
 801185c:	6033      	str	r3, [r6, #0]
 801185e:	6823      	ldr	r3, [r4, #0]
 8011860:	0699      	lsls	r1, r3, #26
 8011862:	bf42      	ittt	mi
 8011864:	6833      	ldrmi	r3, [r6, #0]
 8011866:	3302      	addmi	r3, #2
 8011868:	6033      	strmi	r3, [r6, #0]
 801186a:	6825      	ldr	r5, [r4, #0]
 801186c:	f015 0506 	ands.w	r5, r5, #6
 8011870:	d106      	bne.n	8011880 <_printf_common+0x48>
 8011872:	f104 0a19 	add.w	sl, r4, #25
 8011876:	68e3      	ldr	r3, [r4, #12]
 8011878:	6832      	ldr	r2, [r6, #0]
 801187a:	1a9b      	subs	r3, r3, r2
 801187c:	42ab      	cmp	r3, r5
 801187e:	dc26      	bgt.n	80118ce <_printf_common+0x96>
 8011880:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8011884:	1e13      	subs	r3, r2, #0
 8011886:	6822      	ldr	r2, [r4, #0]
 8011888:	bf18      	it	ne
 801188a:	2301      	movne	r3, #1
 801188c:	0692      	lsls	r2, r2, #26
 801188e:	d42b      	bmi.n	80118e8 <_printf_common+0xb0>
 8011890:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8011894:	4649      	mov	r1, r9
 8011896:	4638      	mov	r0, r7
 8011898:	47c0      	blx	r8
 801189a:	3001      	adds	r0, #1
 801189c:	d01e      	beq.n	80118dc <_printf_common+0xa4>
 801189e:	6823      	ldr	r3, [r4, #0]
 80118a0:	68e5      	ldr	r5, [r4, #12]
 80118a2:	6832      	ldr	r2, [r6, #0]
 80118a4:	f003 0306 	and.w	r3, r3, #6
 80118a8:	2b04      	cmp	r3, #4
 80118aa:	bf08      	it	eq
 80118ac:	1aad      	subeq	r5, r5, r2
 80118ae:	68a3      	ldr	r3, [r4, #8]
 80118b0:	6922      	ldr	r2, [r4, #16]
 80118b2:	bf0c      	ite	eq
 80118b4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80118b8:	2500      	movne	r5, #0
 80118ba:	4293      	cmp	r3, r2
 80118bc:	bfc4      	itt	gt
 80118be:	1a9b      	subgt	r3, r3, r2
 80118c0:	18ed      	addgt	r5, r5, r3
 80118c2:	2600      	movs	r6, #0
 80118c4:	341a      	adds	r4, #26
 80118c6:	42b5      	cmp	r5, r6
 80118c8:	d11a      	bne.n	8011900 <_printf_common+0xc8>
 80118ca:	2000      	movs	r0, #0
 80118cc:	e008      	b.n	80118e0 <_printf_common+0xa8>
 80118ce:	2301      	movs	r3, #1
 80118d0:	4652      	mov	r2, sl
 80118d2:	4649      	mov	r1, r9
 80118d4:	4638      	mov	r0, r7
 80118d6:	47c0      	blx	r8
 80118d8:	3001      	adds	r0, #1
 80118da:	d103      	bne.n	80118e4 <_printf_common+0xac>
 80118dc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80118e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80118e4:	3501      	adds	r5, #1
 80118e6:	e7c6      	b.n	8011876 <_printf_common+0x3e>
 80118e8:	18e1      	adds	r1, r4, r3
 80118ea:	1c5a      	adds	r2, r3, #1
 80118ec:	2030      	movs	r0, #48	; 0x30
 80118ee:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80118f2:	4422      	add	r2, r4
 80118f4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80118f8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80118fc:	3302      	adds	r3, #2
 80118fe:	e7c7      	b.n	8011890 <_printf_common+0x58>
 8011900:	2301      	movs	r3, #1
 8011902:	4622      	mov	r2, r4
 8011904:	4649      	mov	r1, r9
 8011906:	4638      	mov	r0, r7
 8011908:	47c0      	blx	r8
 801190a:	3001      	adds	r0, #1
 801190c:	d0e6      	beq.n	80118dc <_printf_common+0xa4>
 801190e:	3601      	adds	r6, #1
 8011910:	e7d9      	b.n	80118c6 <_printf_common+0x8e>
	...

08011914 <_printf_i>:
 8011914:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8011918:	7e0f      	ldrb	r7, [r1, #24]
 801191a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801191c:	2f78      	cmp	r7, #120	; 0x78
 801191e:	4691      	mov	r9, r2
 8011920:	4680      	mov	r8, r0
 8011922:	460c      	mov	r4, r1
 8011924:	469a      	mov	sl, r3
 8011926:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801192a:	d807      	bhi.n	801193c <_printf_i+0x28>
 801192c:	2f62      	cmp	r7, #98	; 0x62
 801192e:	d80a      	bhi.n	8011946 <_printf_i+0x32>
 8011930:	2f00      	cmp	r7, #0
 8011932:	f000 80d8 	beq.w	8011ae6 <_printf_i+0x1d2>
 8011936:	2f58      	cmp	r7, #88	; 0x58
 8011938:	f000 80a3 	beq.w	8011a82 <_printf_i+0x16e>
 801193c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8011940:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8011944:	e03a      	b.n	80119bc <_printf_i+0xa8>
 8011946:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801194a:	2b15      	cmp	r3, #21
 801194c:	d8f6      	bhi.n	801193c <_printf_i+0x28>
 801194e:	a101      	add	r1, pc, #4	; (adr r1, 8011954 <_printf_i+0x40>)
 8011950:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8011954:	080119ad 	.word	0x080119ad
 8011958:	080119c1 	.word	0x080119c1
 801195c:	0801193d 	.word	0x0801193d
 8011960:	0801193d 	.word	0x0801193d
 8011964:	0801193d 	.word	0x0801193d
 8011968:	0801193d 	.word	0x0801193d
 801196c:	080119c1 	.word	0x080119c1
 8011970:	0801193d 	.word	0x0801193d
 8011974:	0801193d 	.word	0x0801193d
 8011978:	0801193d 	.word	0x0801193d
 801197c:	0801193d 	.word	0x0801193d
 8011980:	08011acd 	.word	0x08011acd
 8011984:	080119f1 	.word	0x080119f1
 8011988:	08011aaf 	.word	0x08011aaf
 801198c:	0801193d 	.word	0x0801193d
 8011990:	0801193d 	.word	0x0801193d
 8011994:	08011aef 	.word	0x08011aef
 8011998:	0801193d 	.word	0x0801193d
 801199c:	080119f1 	.word	0x080119f1
 80119a0:	0801193d 	.word	0x0801193d
 80119a4:	0801193d 	.word	0x0801193d
 80119a8:	08011ab7 	.word	0x08011ab7
 80119ac:	682b      	ldr	r3, [r5, #0]
 80119ae:	1d1a      	adds	r2, r3, #4
 80119b0:	681b      	ldr	r3, [r3, #0]
 80119b2:	602a      	str	r2, [r5, #0]
 80119b4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80119b8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80119bc:	2301      	movs	r3, #1
 80119be:	e0a3      	b.n	8011b08 <_printf_i+0x1f4>
 80119c0:	6820      	ldr	r0, [r4, #0]
 80119c2:	6829      	ldr	r1, [r5, #0]
 80119c4:	0606      	lsls	r6, r0, #24
 80119c6:	f101 0304 	add.w	r3, r1, #4
 80119ca:	d50a      	bpl.n	80119e2 <_printf_i+0xce>
 80119cc:	680e      	ldr	r6, [r1, #0]
 80119ce:	602b      	str	r3, [r5, #0]
 80119d0:	2e00      	cmp	r6, #0
 80119d2:	da03      	bge.n	80119dc <_printf_i+0xc8>
 80119d4:	232d      	movs	r3, #45	; 0x2d
 80119d6:	4276      	negs	r6, r6
 80119d8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80119dc:	485e      	ldr	r0, [pc, #376]	; (8011b58 <_printf_i+0x244>)
 80119de:	230a      	movs	r3, #10
 80119e0:	e019      	b.n	8011a16 <_printf_i+0x102>
 80119e2:	680e      	ldr	r6, [r1, #0]
 80119e4:	602b      	str	r3, [r5, #0]
 80119e6:	f010 0f40 	tst.w	r0, #64	; 0x40
 80119ea:	bf18      	it	ne
 80119ec:	b236      	sxthne	r6, r6
 80119ee:	e7ef      	b.n	80119d0 <_printf_i+0xbc>
 80119f0:	682b      	ldr	r3, [r5, #0]
 80119f2:	6820      	ldr	r0, [r4, #0]
 80119f4:	1d19      	adds	r1, r3, #4
 80119f6:	6029      	str	r1, [r5, #0]
 80119f8:	0601      	lsls	r1, r0, #24
 80119fa:	d501      	bpl.n	8011a00 <_printf_i+0xec>
 80119fc:	681e      	ldr	r6, [r3, #0]
 80119fe:	e002      	b.n	8011a06 <_printf_i+0xf2>
 8011a00:	0646      	lsls	r6, r0, #25
 8011a02:	d5fb      	bpl.n	80119fc <_printf_i+0xe8>
 8011a04:	881e      	ldrh	r6, [r3, #0]
 8011a06:	4854      	ldr	r0, [pc, #336]	; (8011b58 <_printf_i+0x244>)
 8011a08:	2f6f      	cmp	r7, #111	; 0x6f
 8011a0a:	bf0c      	ite	eq
 8011a0c:	2308      	moveq	r3, #8
 8011a0e:	230a      	movne	r3, #10
 8011a10:	2100      	movs	r1, #0
 8011a12:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8011a16:	6865      	ldr	r5, [r4, #4]
 8011a18:	60a5      	str	r5, [r4, #8]
 8011a1a:	2d00      	cmp	r5, #0
 8011a1c:	bfa2      	ittt	ge
 8011a1e:	6821      	ldrge	r1, [r4, #0]
 8011a20:	f021 0104 	bicge.w	r1, r1, #4
 8011a24:	6021      	strge	r1, [r4, #0]
 8011a26:	b90e      	cbnz	r6, 8011a2c <_printf_i+0x118>
 8011a28:	2d00      	cmp	r5, #0
 8011a2a:	d04d      	beq.n	8011ac8 <_printf_i+0x1b4>
 8011a2c:	4615      	mov	r5, r2
 8011a2e:	fbb6 f1f3 	udiv	r1, r6, r3
 8011a32:	fb03 6711 	mls	r7, r3, r1, r6
 8011a36:	5dc7      	ldrb	r7, [r0, r7]
 8011a38:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8011a3c:	4637      	mov	r7, r6
 8011a3e:	42bb      	cmp	r3, r7
 8011a40:	460e      	mov	r6, r1
 8011a42:	d9f4      	bls.n	8011a2e <_printf_i+0x11a>
 8011a44:	2b08      	cmp	r3, #8
 8011a46:	d10b      	bne.n	8011a60 <_printf_i+0x14c>
 8011a48:	6823      	ldr	r3, [r4, #0]
 8011a4a:	07de      	lsls	r6, r3, #31
 8011a4c:	d508      	bpl.n	8011a60 <_printf_i+0x14c>
 8011a4e:	6923      	ldr	r3, [r4, #16]
 8011a50:	6861      	ldr	r1, [r4, #4]
 8011a52:	4299      	cmp	r1, r3
 8011a54:	bfde      	ittt	le
 8011a56:	2330      	movle	r3, #48	; 0x30
 8011a58:	f805 3c01 	strble.w	r3, [r5, #-1]
 8011a5c:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8011a60:	1b52      	subs	r2, r2, r5
 8011a62:	6122      	str	r2, [r4, #16]
 8011a64:	f8cd a000 	str.w	sl, [sp]
 8011a68:	464b      	mov	r3, r9
 8011a6a:	aa03      	add	r2, sp, #12
 8011a6c:	4621      	mov	r1, r4
 8011a6e:	4640      	mov	r0, r8
 8011a70:	f7ff fee2 	bl	8011838 <_printf_common>
 8011a74:	3001      	adds	r0, #1
 8011a76:	d14c      	bne.n	8011b12 <_printf_i+0x1fe>
 8011a78:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011a7c:	b004      	add	sp, #16
 8011a7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011a82:	4835      	ldr	r0, [pc, #212]	; (8011b58 <_printf_i+0x244>)
 8011a84:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8011a88:	6829      	ldr	r1, [r5, #0]
 8011a8a:	6823      	ldr	r3, [r4, #0]
 8011a8c:	f851 6b04 	ldr.w	r6, [r1], #4
 8011a90:	6029      	str	r1, [r5, #0]
 8011a92:	061d      	lsls	r5, r3, #24
 8011a94:	d514      	bpl.n	8011ac0 <_printf_i+0x1ac>
 8011a96:	07df      	lsls	r7, r3, #31
 8011a98:	bf44      	itt	mi
 8011a9a:	f043 0320 	orrmi.w	r3, r3, #32
 8011a9e:	6023      	strmi	r3, [r4, #0]
 8011aa0:	b91e      	cbnz	r6, 8011aaa <_printf_i+0x196>
 8011aa2:	6823      	ldr	r3, [r4, #0]
 8011aa4:	f023 0320 	bic.w	r3, r3, #32
 8011aa8:	6023      	str	r3, [r4, #0]
 8011aaa:	2310      	movs	r3, #16
 8011aac:	e7b0      	b.n	8011a10 <_printf_i+0xfc>
 8011aae:	6823      	ldr	r3, [r4, #0]
 8011ab0:	f043 0320 	orr.w	r3, r3, #32
 8011ab4:	6023      	str	r3, [r4, #0]
 8011ab6:	2378      	movs	r3, #120	; 0x78
 8011ab8:	4828      	ldr	r0, [pc, #160]	; (8011b5c <_printf_i+0x248>)
 8011aba:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8011abe:	e7e3      	b.n	8011a88 <_printf_i+0x174>
 8011ac0:	0659      	lsls	r1, r3, #25
 8011ac2:	bf48      	it	mi
 8011ac4:	b2b6      	uxthmi	r6, r6
 8011ac6:	e7e6      	b.n	8011a96 <_printf_i+0x182>
 8011ac8:	4615      	mov	r5, r2
 8011aca:	e7bb      	b.n	8011a44 <_printf_i+0x130>
 8011acc:	682b      	ldr	r3, [r5, #0]
 8011ace:	6826      	ldr	r6, [r4, #0]
 8011ad0:	6961      	ldr	r1, [r4, #20]
 8011ad2:	1d18      	adds	r0, r3, #4
 8011ad4:	6028      	str	r0, [r5, #0]
 8011ad6:	0635      	lsls	r5, r6, #24
 8011ad8:	681b      	ldr	r3, [r3, #0]
 8011ada:	d501      	bpl.n	8011ae0 <_printf_i+0x1cc>
 8011adc:	6019      	str	r1, [r3, #0]
 8011ade:	e002      	b.n	8011ae6 <_printf_i+0x1d2>
 8011ae0:	0670      	lsls	r0, r6, #25
 8011ae2:	d5fb      	bpl.n	8011adc <_printf_i+0x1c8>
 8011ae4:	8019      	strh	r1, [r3, #0]
 8011ae6:	2300      	movs	r3, #0
 8011ae8:	6123      	str	r3, [r4, #16]
 8011aea:	4615      	mov	r5, r2
 8011aec:	e7ba      	b.n	8011a64 <_printf_i+0x150>
 8011aee:	682b      	ldr	r3, [r5, #0]
 8011af0:	1d1a      	adds	r2, r3, #4
 8011af2:	602a      	str	r2, [r5, #0]
 8011af4:	681d      	ldr	r5, [r3, #0]
 8011af6:	6862      	ldr	r2, [r4, #4]
 8011af8:	2100      	movs	r1, #0
 8011afa:	4628      	mov	r0, r5
 8011afc:	f7ee fba0 	bl	8000240 <memchr>
 8011b00:	b108      	cbz	r0, 8011b06 <_printf_i+0x1f2>
 8011b02:	1b40      	subs	r0, r0, r5
 8011b04:	6060      	str	r0, [r4, #4]
 8011b06:	6863      	ldr	r3, [r4, #4]
 8011b08:	6123      	str	r3, [r4, #16]
 8011b0a:	2300      	movs	r3, #0
 8011b0c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011b10:	e7a8      	b.n	8011a64 <_printf_i+0x150>
 8011b12:	6923      	ldr	r3, [r4, #16]
 8011b14:	462a      	mov	r2, r5
 8011b16:	4649      	mov	r1, r9
 8011b18:	4640      	mov	r0, r8
 8011b1a:	47d0      	blx	sl
 8011b1c:	3001      	adds	r0, #1
 8011b1e:	d0ab      	beq.n	8011a78 <_printf_i+0x164>
 8011b20:	6823      	ldr	r3, [r4, #0]
 8011b22:	079b      	lsls	r3, r3, #30
 8011b24:	d413      	bmi.n	8011b4e <_printf_i+0x23a>
 8011b26:	68e0      	ldr	r0, [r4, #12]
 8011b28:	9b03      	ldr	r3, [sp, #12]
 8011b2a:	4298      	cmp	r0, r3
 8011b2c:	bfb8      	it	lt
 8011b2e:	4618      	movlt	r0, r3
 8011b30:	e7a4      	b.n	8011a7c <_printf_i+0x168>
 8011b32:	2301      	movs	r3, #1
 8011b34:	4632      	mov	r2, r6
 8011b36:	4649      	mov	r1, r9
 8011b38:	4640      	mov	r0, r8
 8011b3a:	47d0      	blx	sl
 8011b3c:	3001      	adds	r0, #1
 8011b3e:	d09b      	beq.n	8011a78 <_printf_i+0x164>
 8011b40:	3501      	adds	r5, #1
 8011b42:	68e3      	ldr	r3, [r4, #12]
 8011b44:	9903      	ldr	r1, [sp, #12]
 8011b46:	1a5b      	subs	r3, r3, r1
 8011b48:	42ab      	cmp	r3, r5
 8011b4a:	dcf2      	bgt.n	8011b32 <_printf_i+0x21e>
 8011b4c:	e7eb      	b.n	8011b26 <_printf_i+0x212>
 8011b4e:	2500      	movs	r5, #0
 8011b50:	f104 0619 	add.w	r6, r4, #25
 8011b54:	e7f5      	b.n	8011b42 <_printf_i+0x22e>
 8011b56:	bf00      	nop
 8011b58:	08012b4b 	.word	0x08012b4b
 8011b5c:	08012b5c 	.word	0x08012b5c

08011b60 <_read_r>:
 8011b60:	b538      	push	{r3, r4, r5, lr}
 8011b62:	4d07      	ldr	r5, [pc, #28]	; (8011b80 <_read_r+0x20>)
 8011b64:	4604      	mov	r4, r0
 8011b66:	4608      	mov	r0, r1
 8011b68:	4611      	mov	r1, r2
 8011b6a:	2200      	movs	r2, #0
 8011b6c:	602a      	str	r2, [r5, #0]
 8011b6e:	461a      	mov	r2, r3
 8011b70:	f7ef fe56 	bl	8001820 <_read>
 8011b74:	1c43      	adds	r3, r0, #1
 8011b76:	d102      	bne.n	8011b7e <_read_r+0x1e>
 8011b78:	682b      	ldr	r3, [r5, #0]
 8011b7a:	b103      	cbz	r3, 8011b7e <_read_r+0x1e>
 8011b7c:	6023      	str	r3, [r4, #0]
 8011b7e:	bd38      	pop	{r3, r4, r5, pc}
 8011b80:	2000dc24 	.word	0x2000dc24

08011b84 <__swbuf_r>:
 8011b84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011b86:	460e      	mov	r6, r1
 8011b88:	4614      	mov	r4, r2
 8011b8a:	4605      	mov	r5, r0
 8011b8c:	b118      	cbz	r0, 8011b96 <__swbuf_r+0x12>
 8011b8e:	6983      	ldr	r3, [r0, #24]
 8011b90:	b90b      	cbnz	r3, 8011b96 <__swbuf_r+0x12>
 8011b92:	f7fe fd93 	bl	80106bc <__sinit>
 8011b96:	4b21      	ldr	r3, [pc, #132]	; (8011c1c <__swbuf_r+0x98>)
 8011b98:	429c      	cmp	r4, r3
 8011b9a:	d12b      	bne.n	8011bf4 <__swbuf_r+0x70>
 8011b9c:	686c      	ldr	r4, [r5, #4]
 8011b9e:	69a3      	ldr	r3, [r4, #24]
 8011ba0:	60a3      	str	r3, [r4, #8]
 8011ba2:	89a3      	ldrh	r3, [r4, #12]
 8011ba4:	071a      	lsls	r2, r3, #28
 8011ba6:	d52f      	bpl.n	8011c08 <__swbuf_r+0x84>
 8011ba8:	6923      	ldr	r3, [r4, #16]
 8011baa:	b36b      	cbz	r3, 8011c08 <__swbuf_r+0x84>
 8011bac:	6923      	ldr	r3, [r4, #16]
 8011bae:	6820      	ldr	r0, [r4, #0]
 8011bb0:	1ac0      	subs	r0, r0, r3
 8011bb2:	6963      	ldr	r3, [r4, #20]
 8011bb4:	b2f6      	uxtb	r6, r6
 8011bb6:	4283      	cmp	r3, r0
 8011bb8:	4637      	mov	r7, r6
 8011bba:	dc04      	bgt.n	8011bc6 <__swbuf_r+0x42>
 8011bbc:	4621      	mov	r1, r4
 8011bbe:	4628      	mov	r0, r5
 8011bc0:	f7ff faea 	bl	8011198 <_fflush_r>
 8011bc4:	bb30      	cbnz	r0, 8011c14 <__swbuf_r+0x90>
 8011bc6:	68a3      	ldr	r3, [r4, #8]
 8011bc8:	3b01      	subs	r3, #1
 8011bca:	60a3      	str	r3, [r4, #8]
 8011bcc:	6823      	ldr	r3, [r4, #0]
 8011bce:	1c5a      	adds	r2, r3, #1
 8011bd0:	6022      	str	r2, [r4, #0]
 8011bd2:	701e      	strb	r6, [r3, #0]
 8011bd4:	6963      	ldr	r3, [r4, #20]
 8011bd6:	3001      	adds	r0, #1
 8011bd8:	4283      	cmp	r3, r0
 8011bda:	d004      	beq.n	8011be6 <__swbuf_r+0x62>
 8011bdc:	89a3      	ldrh	r3, [r4, #12]
 8011bde:	07db      	lsls	r3, r3, #31
 8011be0:	d506      	bpl.n	8011bf0 <__swbuf_r+0x6c>
 8011be2:	2e0a      	cmp	r6, #10
 8011be4:	d104      	bne.n	8011bf0 <__swbuf_r+0x6c>
 8011be6:	4621      	mov	r1, r4
 8011be8:	4628      	mov	r0, r5
 8011bea:	f7ff fad5 	bl	8011198 <_fflush_r>
 8011bee:	b988      	cbnz	r0, 8011c14 <__swbuf_r+0x90>
 8011bf0:	4638      	mov	r0, r7
 8011bf2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011bf4:	4b0a      	ldr	r3, [pc, #40]	; (8011c20 <__swbuf_r+0x9c>)
 8011bf6:	429c      	cmp	r4, r3
 8011bf8:	d101      	bne.n	8011bfe <__swbuf_r+0x7a>
 8011bfa:	68ac      	ldr	r4, [r5, #8]
 8011bfc:	e7cf      	b.n	8011b9e <__swbuf_r+0x1a>
 8011bfe:	4b09      	ldr	r3, [pc, #36]	; (8011c24 <__swbuf_r+0xa0>)
 8011c00:	429c      	cmp	r4, r3
 8011c02:	bf08      	it	eq
 8011c04:	68ec      	ldreq	r4, [r5, #12]
 8011c06:	e7ca      	b.n	8011b9e <__swbuf_r+0x1a>
 8011c08:	4621      	mov	r1, r4
 8011c0a:	4628      	mov	r0, r5
 8011c0c:	f000 f80c 	bl	8011c28 <__swsetup_r>
 8011c10:	2800      	cmp	r0, #0
 8011c12:	d0cb      	beq.n	8011bac <__swbuf_r+0x28>
 8011c14:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8011c18:	e7ea      	b.n	8011bf0 <__swbuf_r+0x6c>
 8011c1a:	bf00      	nop
 8011c1c:	08012a48 	.word	0x08012a48
 8011c20:	08012a68 	.word	0x08012a68
 8011c24:	08012a28 	.word	0x08012a28

08011c28 <__swsetup_r>:
 8011c28:	4b32      	ldr	r3, [pc, #200]	; (8011cf4 <__swsetup_r+0xcc>)
 8011c2a:	b570      	push	{r4, r5, r6, lr}
 8011c2c:	681d      	ldr	r5, [r3, #0]
 8011c2e:	4606      	mov	r6, r0
 8011c30:	460c      	mov	r4, r1
 8011c32:	b125      	cbz	r5, 8011c3e <__swsetup_r+0x16>
 8011c34:	69ab      	ldr	r3, [r5, #24]
 8011c36:	b913      	cbnz	r3, 8011c3e <__swsetup_r+0x16>
 8011c38:	4628      	mov	r0, r5
 8011c3a:	f7fe fd3f 	bl	80106bc <__sinit>
 8011c3e:	4b2e      	ldr	r3, [pc, #184]	; (8011cf8 <__swsetup_r+0xd0>)
 8011c40:	429c      	cmp	r4, r3
 8011c42:	d10f      	bne.n	8011c64 <__swsetup_r+0x3c>
 8011c44:	686c      	ldr	r4, [r5, #4]
 8011c46:	89a3      	ldrh	r3, [r4, #12]
 8011c48:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8011c4c:	0719      	lsls	r1, r3, #28
 8011c4e:	d42c      	bmi.n	8011caa <__swsetup_r+0x82>
 8011c50:	06dd      	lsls	r5, r3, #27
 8011c52:	d411      	bmi.n	8011c78 <__swsetup_r+0x50>
 8011c54:	2309      	movs	r3, #9
 8011c56:	6033      	str	r3, [r6, #0]
 8011c58:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8011c5c:	81a3      	strh	r3, [r4, #12]
 8011c5e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011c62:	e03e      	b.n	8011ce2 <__swsetup_r+0xba>
 8011c64:	4b25      	ldr	r3, [pc, #148]	; (8011cfc <__swsetup_r+0xd4>)
 8011c66:	429c      	cmp	r4, r3
 8011c68:	d101      	bne.n	8011c6e <__swsetup_r+0x46>
 8011c6a:	68ac      	ldr	r4, [r5, #8]
 8011c6c:	e7eb      	b.n	8011c46 <__swsetup_r+0x1e>
 8011c6e:	4b24      	ldr	r3, [pc, #144]	; (8011d00 <__swsetup_r+0xd8>)
 8011c70:	429c      	cmp	r4, r3
 8011c72:	bf08      	it	eq
 8011c74:	68ec      	ldreq	r4, [r5, #12]
 8011c76:	e7e6      	b.n	8011c46 <__swsetup_r+0x1e>
 8011c78:	0758      	lsls	r0, r3, #29
 8011c7a:	d512      	bpl.n	8011ca2 <__swsetup_r+0x7a>
 8011c7c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011c7e:	b141      	cbz	r1, 8011c92 <__swsetup_r+0x6a>
 8011c80:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8011c84:	4299      	cmp	r1, r3
 8011c86:	d002      	beq.n	8011c8e <__swsetup_r+0x66>
 8011c88:	4630      	mov	r0, r6
 8011c8a:	f7fe fe61 	bl	8010950 <_free_r>
 8011c8e:	2300      	movs	r3, #0
 8011c90:	6363      	str	r3, [r4, #52]	; 0x34
 8011c92:	89a3      	ldrh	r3, [r4, #12]
 8011c94:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8011c98:	81a3      	strh	r3, [r4, #12]
 8011c9a:	2300      	movs	r3, #0
 8011c9c:	6063      	str	r3, [r4, #4]
 8011c9e:	6923      	ldr	r3, [r4, #16]
 8011ca0:	6023      	str	r3, [r4, #0]
 8011ca2:	89a3      	ldrh	r3, [r4, #12]
 8011ca4:	f043 0308 	orr.w	r3, r3, #8
 8011ca8:	81a3      	strh	r3, [r4, #12]
 8011caa:	6923      	ldr	r3, [r4, #16]
 8011cac:	b94b      	cbnz	r3, 8011cc2 <__swsetup_r+0x9a>
 8011cae:	89a3      	ldrh	r3, [r4, #12]
 8011cb0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8011cb4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8011cb8:	d003      	beq.n	8011cc2 <__swsetup_r+0x9a>
 8011cba:	4621      	mov	r1, r4
 8011cbc:	4630      	mov	r0, r6
 8011cbe:	f000 f84d 	bl	8011d5c <__smakebuf_r>
 8011cc2:	89a0      	ldrh	r0, [r4, #12]
 8011cc4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8011cc8:	f010 0301 	ands.w	r3, r0, #1
 8011ccc:	d00a      	beq.n	8011ce4 <__swsetup_r+0xbc>
 8011cce:	2300      	movs	r3, #0
 8011cd0:	60a3      	str	r3, [r4, #8]
 8011cd2:	6963      	ldr	r3, [r4, #20]
 8011cd4:	425b      	negs	r3, r3
 8011cd6:	61a3      	str	r3, [r4, #24]
 8011cd8:	6923      	ldr	r3, [r4, #16]
 8011cda:	b943      	cbnz	r3, 8011cee <__swsetup_r+0xc6>
 8011cdc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8011ce0:	d1ba      	bne.n	8011c58 <__swsetup_r+0x30>
 8011ce2:	bd70      	pop	{r4, r5, r6, pc}
 8011ce4:	0781      	lsls	r1, r0, #30
 8011ce6:	bf58      	it	pl
 8011ce8:	6963      	ldrpl	r3, [r4, #20]
 8011cea:	60a3      	str	r3, [r4, #8]
 8011cec:	e7f4      	b.n	8011cd8 <__swsetup_r+0xb0>
 8011cee:	2000      	movs	r0, #0
 8011cf0:	e7f7      	b.n	8011ce2 <__swsetup_r+0xba>
 8011cf2:	bf00      	nop
 8011cf4:	200000b4 	.word	0x200000b4
 8011cf8:	08012a48 	.word	0x08012a48
 8011cfc:	08012a68 	.word	0x08012a68
 8011d00:	08012a28 	.word	0x08012a28

08011d04 <abort>:
 8011d04:	b508      	push	{r3, lr}
 8011d06:	2006      	movs	r0, #6
 8011d08:	f000 f8b2 	bl	8011e70 <raise>
 8011d0c:	2001      	movs	r0, #1
 8011d0e:	f7ef fd7d 	bl	800180c <_exit>

08011d12 <__swhatbuf_r>:
 8011d12:	b570      	push	{r4, r5, r6, lr}
 8011d14:	460e      	mov	r6, r1
 8011d16:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011d1a:	2900      	cmp	r1, #0
 8011d1c:	b096      	sub	sp, #88	; 0x58
 8011d1e:	4614      	mov	r4, r2
 8011d20:	461d      	mov	r5, r3
 8011d22:	da08      	bge.n	8011d36 <__swhatbuf_r+0x24>
 8011d24:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8011d28:	2200      	movs	r2, #0
 8011d2a:	602a      	str	r2, [r5, #0]
 8011d2c:	061a      	lsls	r2, r3, #24
 8011d2e:	d410      	bmi.n	8011d52 <__swhatbuf_r+0x40>
 8011d30:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011d34:	e00e      	b.n	8011d54 <__swhatbuf_r+0x42>
 8011d36:	466a      	mov	r2, sp
 8011d38:	f000 f8b6 	bl	8011ea8 <_fstat_r>
 8011d3c:	2800      	cmp	r0, #0
 8011d3e:	dbf1      	blt.n	8011d24 <__swhatbuf_r+0x12>
 8011d40:	9a01      	ldr	r2, [sp, #4]
 8011d42:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8011d46:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8011d4a:	425a      	negs	r2, r3
 8011d4c:	415a      	adcs	r2, r3
 8011d4e:	602a      	str	r2, [r5, #0]
 8011d50:	e7ee      	b.n	8011d30 <__swhatbuf_r+0x1e>
 8011d52:	2340      	movs	r3, #64	; 0x40
 8011d54:	2000      	movs	r0, #0
 8011d56:	6023      	str	r3, [r4, #0]
 8011d58:	b016      	add	sp, #88	; 0x58
 8011d5a:	bd70      	pop	{r4, r5, r6, pc}

08011d5c <__smakebuf_r>:
 8011d5c:	898b      	ldrh	r3, [r1, #12]
 8011d5e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8011d60:	079d      	lsls	r5, r3, #30
 8011d62:	4606      	mov	r6, r0
 8011d64:	460c      	mov	r4, r1
 8011d66:	d507      	bpl.n	8011d78 <__smakebuf_r+0x1c>
 8011d68:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8011d6c:	6023      	str	r3, [r4, #0]
 8011d6e:	6123      	str	r3, [r4, #16]
 8011d70:	2301      	movs	r3, #1
 8011d72:	6163      	str	r3, [r4, #20]
 8011d74:	b002      	add	sp, #8
 8011d76:	bd70      	pop	{r4, r5, r6, pc}
 8011d78:	ab01      	add	r3, sp, #4
 8011d7a:	466a      	mov	r2, sp
 8011d7c:	f7ff ffc9 	bl	8011d12 <__swhatbuf_r>
 8011d80:	9900      	ldr	r1, [sp, #0]
 8011d82:	4605      	mov	r5, r0
 8011d84:	4630      	mov	r0, r6
 8011d86:	f7fe fe4f 	bl	8010a28 <_malloc_r>
 8011d8a:	b948      	cbnz	r0, 8011da0 <__smakebuf_r+0x44>
 8011d8c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011d90:	059a      	lsls	r2, r3, #22
 8011d92:	d4ef      	bmi.n	8011d74 <__smakebuf_r+0x18>
 8011d94:	f023 0303 	bic.w	r3, r3, #3
 8011d98:	f043 0302 	orr.w	r3, r3, #2
 8011d9c:	81a3      	strh	r3, [r4, #12]
 8011d9e:	e7e3      	b.n	8011d68 <__smakebuf_r+0xc>
 8011da0:	4b0d      	ldr	r3, [pc, #52]	; (8011dd8 <__smakebuf_r+0x7c>)
 8011da2:	62b3      	str	r3, [r6, #40]	; 0x28
 8011da4:	89a3      	ldrh	r3, [r4, #12]
 8011da6:	6020      	str	r0, [r4, #0]
 8011da8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011dac:	81a3      	strh	r3, [r4, #12]
 8011dae:	9b00      	ldr	r3, [sp, #0]
 8011db0:	6163      	str	r3, [r4, #20]
 8011db2:	9b01      	ldr	r3, [sp, #4]
 8011db4:	6120      	str	r0, [r4, #16]
 8011db6:	b15b      	cbz	r3, 8011dd0 <__smakebuf_r+0x74>
 8011db8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011dbc:	4630      	mov	r0, r6
 8011dbe:	f000 f885 	bl	8011ecc <_isatty_r>
 8011dc2:	b128      	cbz	r0, 8011dd0 <__smakebuf_r+0x74>
 8011dc4:	89a3      	ldrh	r3, [r4, #12]
 8011dc6:	f023 0303 	bic.w	r3, r3, #3
 8011dca:	f043 0301 	orr.w	r3, r3, #1
 8011dce:	81a3      	strh	r3, [r4, #12]
 8011dd0:	89a0      	ldrh	r0, [r4, #12]
 8011dd2:	4305      	orrs	r5, r0
 8011dd4:	81a5      	strh	r5, [r4, #12]
 8011dd6:	e7cd      	b.n	8011d74 <__smakebuf_r+0x18>
 8011dd8:	08010655 	.word	0x08010655

08011ddc <memmove>:
 8011ddc:	4288      	cmp	r0, r1
 8011dde:	b510      	push	{r4, lr}
 8011de0:	eb01 0402 	add.w	r4, r1, r2
 8011de4:	d902      	bls.n	8011dec <memmove+0x10>
 8011de6:	4284      	cmp	r4, r0
 8011de8:	4623      	mov	r3, r4
 8011dea:	d807      	bhi.n	8011dfc <memmove+0x20>
 8011dec:	1e43      	subs	r3, r0, #1
 8011dee:	42a1      	cmp	r1, r4
 8011df0:	d008      	beq.n	8011e04 <memmove+0x28>
 8011df2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8011df6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8011dfa:	e7f8      	b.n	8011dee <memmove+0x12>
 8011dfc:	4402      	add	r2, r0
 8011dfe:	4601      	mov	r1, r0
 8011e00:	428a      	cmp	r2, r1
 8011e02:	d100      	bne.n	8011e06 <memmove+0x2a>
 8011e04:	bd10      	pop	{r4, pc}
 8011e06:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8011e0a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8011e0e:	e7f7      	b.n	8011e00 <memmove+0x24>

08011e10 <_malloc_usable_size_r>:
 8011e10:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011e14:	1f18      	subs	r0, r3, #4
 8011e16:	2b00      	cmp	r3, #0
 8011e18:	bfbc      	itt	lt
 8011e1a:	580b      	ldrlt	r3, [r1, r0]
 8011e1c:	18c0      	addlt	r0, r0, r3
 8011e1e:	4770      	bx	lr

08011e20 <_raise_r>:
 8011e20:	291f      	cmp	r1, #31
 8011e22:	b538      	push	{r3, r4, r5, lr}
 8011e24:	4604      	mov	r4, r0
 8011e26:	460d      	mov	r5, r1
 8011e28:	d904      	bls.n	8011e34 <_raise_r+0x14>
 8011e2a:	2316      	movs	r3, #22
 8011e2c:	6003      	str	r3, [r0, #0]
 8011e2e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011e32:	bd38      	pop	{r3, r4, r5, pc}
 8011e34:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8011e36:	b112      	cbz	r2, 8011e3e <_raise_r+0x1e>
 8011e38:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8011e3c:	b94b      	cbnz	r3, 8011e52 <_raise_r+0x32>
 8011e3e:	4620      	mov	r0, r4
 8011e40:	f000 f830 	bl	8011ea4 <_getpid_r>
 8011e44:	462a      	mov	r2, r5
 8011e46:	4601      	mov	r1, r0
 8011e48:	4620      	mov	r0, r4
 8011e4a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011e4e:	f000 b817 	b.w	8011e80 <_kill_r>
 8011e52:	2b01      	cmp	r3, #1
 8011e54:	d00a      	beq.n	8011e6c <_raise_r+0x4c>
 8011e56:	1c59      	adds	r1, r3, #1
 8011e58:	d103      	bne.n	8011e62 <_raise_r+0x42>
 8011e5a:	2316      	movs	r3, #22
 8011e5c:	6003      	str	r3, [r0, #0]
 8011e5e:	2001      	movs	r0, #1
 8011e60:	e7e7      	b.n	8011e32 <_raise_r+0x12>
 8011e62:	2400      	movs	r4, #0
 8011e64:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8011e68:	4628      	mov	r0, r5
 8011e6a:	4798      	blx	r3
 8011e6c:	2000      	movs	r0, #0
 8011e6e:	e7e0      	b.n	8011e32 <_raise_r+0x12>

08011e70 <raise>:
 8011e70:	4b02      	ldr	r3, [pc, #8]	; (8011e7c <raise+0xc>)
 8011e72:	4601      	mov	r1, r0
 8011e74:	6818      	ldr	r0, [r3, #0]
 8011e76:	f7ff bfd3 	b.w	8011e20 <_raise_r>
 8011e7a:	bf00      	nop
 8011e7c:	200000b4 	.word	0x200000b4

08011e80 <_kill_r>:
 8011e80:	b538      	push	{r3, r4, r5, lr}
 8011e82:	4d07      	ldr	r5, [pc, #28]	; (8011ea0 <_kill_r+0x20>)
 8011e84:	2300      	movs	r3, #0
 8011e86:	4604      	mov	r4, r0
 8011e88:	4608      	mov	r0, r1
 8011e8a:	4611      	mov	r1, r2
 8011e8c:	602b      	str	r3, [r5, #0]
 8011e8e:	f7ef fcad 	bl	80017ec <_kill>
 8011e92:	1c43      	adds	r3, r0, #1
 8011e94:	d102      	bne.n	8011e9c <_kill_r+0x1c>
 8011e96:	682b      	ldr	r3, [r5, #0]
 8011e98:	b103      	cbz	r3, 8011e9c <_kill_r+0x1c>
 8011e9a:	6023      	str	r3, [r4, #0]
 8011e9c:	bd38      	pop	{r3, r4, r5, pc}
 8011e9e:	bf00      	nop
 8011ea0:	2000dc24 	.word	0x2000dc24

08011ea4 <_getpid_r>:
 8011ea4:	f7ef bc9a 	b.w	80017dc <_getpid>

08011ea8 <_fstat_r>:
 8011ea8:	b538      	push	{r3, r4, r5, lr}
 8011eaa:	4d07      	ldr	r5, [pc, #28]	; (8011ec8 <_fstat_r+0x20>)
 8011eac:	2300      	movs	r3, #0
 8011eae:	4604      	mov	r4, r0
 8011eb0:	4608      	mov	r0, r1
 8011eb2:	4611      	mov	r1, r2
 8011eb4:	602b      	str	r3, [r5, #0]
 8011eb6:	f7ef fcf8 	bl	80018aa <_fstat>
 8011eba:	1c43      	adds	r3, r0, #1
 8011ebc:	d102      	bne.n	8011ec4 <_fstat_r+0x1c>
 8011ebe:	682b      	ldr	r3, [r5, #0]
 8011ec0:	b103      	cbz	r3, 8011ec4 <_fstat_r+0x1c>
 8011ec2:	6023      	str	r3, [r4, #0]
 8011ec4:	bd38      	pop	{r3, r4, r5, pc}
 8011ec6:	bf00      	nop
 8011ec8:	2000dc24 	.word	0x2000dc24

08011ecc <_isatty_r>:
 8011ecc:	b538      	push	{r3, r4, r5, lr}
 8011ece:	4d06      	ldr	r5, [pc, #24]	; (8011ee8 <_isatty_r+0x1c>)
 8011ed0:	2300      	movs	r3, #0
 8011ed2:	4604      	mov	r4, r0
 8011ed4:	4608      	mov	r0, r1
 8011ed6:	602b      	str	r3, [r5, #0]
 8011ed8:	f7ef fcf7 	bl	80018ca <_isatty>
 8011edc:	1c43      	adds	r3, r0, #1
 8011ede:	d102      	bne.n	8011ee6 <_isatty_r+0x1a>
 8011ee0:	682b      	ldr	r3, [r5, #0]
 8011ee2:	b103      	cbz	r3, 8011ee6 <_isatty_r+0x1a>
 8011ee4:	6023      	str	r3, [r4, #0]
 8011ee6:	bd38      	pop	{r3, r4, r5, pc}
 8011ee8:	2000dc24 	.word	0x2000dc24

08011eec <_init>:
 8011eec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011eee:	bf00      	nop
 8011ef0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011ef2:	bc08      	pop	{r3}
 8011ef4:	469e      	mov	lr, r3
 8011ef6:	4770      	bx	lr

08011ef8 <_fini>:
 8011ef8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011efa:	bf00      	nop
 8011efc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011efe:	bc08      	pop	{r3}
 8011f00:	469e      	mov	lr, r3
 8011f02:	4770      	bx	lr
